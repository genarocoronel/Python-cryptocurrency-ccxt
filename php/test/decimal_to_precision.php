<?php

include_once 'ccxt.php';

use ccxt\Exchange;
use const ccxt\AFTER_DOT;
use const ccxt\NO_PADDING;
use const ccxt\PAD_WITH_ZERO;
use const ccxt\ROUND;
use const ccxt\SIGNIFICANT_DIGITS;
use const ccxt\TRUNCATE;
$desc = 'decimalToPrecision failed with ';

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

assert(Exchange::decimalToPrecision('12.3456000', TRUNCATE, 27, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456000', TRUNCATE, 27, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 27, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456', TRUNCATE, 27, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 4, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456', TRUNCATE, 4, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 3, AFTER_DOT, NO_PADDING) == '12.345', $desc . "('12.3456', TRUNCATE, 3, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 2, AFTER_DOT, NO_PADDING) == '12.34', $desc . "('12.3456', TRUNCATE, 2, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 1, AFTER_DOT, NO_PADDING) == '12.3', $desc . "('12.3456', TRUNCATE, 1, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', TRUNCATE, 0, AFTER_DOT, NO_PADDING) == '12', $desc . "('12.3456', TRUNCATE, 0, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.000123456700', TRUNCATE, 27, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.000123456700', TRUNCATE, 27, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001234567', TRUNCATE, 27, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.0001234567', TRUNCATE, 27, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001234567', TRUNCATE, 7, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.0001234567', TRUNCATE, 7, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.000123456', TRUNCATE, 6, SIGNIFICANT_DIGITS, NO_PADDING) == '0.000123456', $desc . "('0.000123456', TRUNCATE, 6, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00012345', TRUNCATE, 5, SIGNIFICANT_DIGITS, NO_PADDING) == '0.00012345', $desc . "('0.00012345', TRUNCATE, 5, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00012', TRUNCATE, 2, SIGNIFICANT_DIGITS, NO_PADDING) == '0.00012', $desc . "('0.00012', TRUNCATE, 2, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001', TRUNCATE, 1, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001', $desc . "('0.0001', TRUNCATE, 1, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 10, SIGNIFICANT_DIGITS, NO_PADDING) == '123.0000987', $desc . "('123.0000987654', TRUNCATE, 10, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 8, SIGNIFICANT_DIGITS, NO_PADDING) == '123.00009', $desc . "('123.0000987654', TRUNCATE, 8, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 7, SIGNIFICANT_DIGITS, NO_PADDING) == '123', $desc . "('123.0000987654', TRUNCATE, 7, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 7, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '123.0000', $desc . "('123.0000987654', TRUNCATE, 7, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '123.0', $desc . "('123.0000987654', TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 2, SIGNIFICANT_DIGITS, NO_PADDING) == '120', $desc . "('123.0000987654', TRUNCATE, 2, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 1, SIGNIFICANT_DIGITS, NO_PADDING) == '100', $desc . "('123.0000987654', TRUNCATE, 1, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', TRUNCATE, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '100', $desc . "('123.0000987654', TRUNCATE, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('12.3456000', ROUND, 27, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456000', ROUND, 27, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 27, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456', ROUND, 27, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 4, AFTER_DOT, NO_PADDING) == '12.3456', $desc . "('12.3456', ROUND, 4, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 3, AFTER_DOT, NO_PADDING) == '12.346', $desc . "('12.3456', ROUND, 3, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 2, AFTER_DOT, NO_PADDING) == '12.35', $desc . "('12.3456', ROUND, 2, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 1, AFTER_DOT, NO_PADDING) == '12.3', $desc . "('12.3456', ROUND, 1, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('12.3456', ROUND, 0, AFTER_DOT, NO_PADDING) == '12', $desc . "('12.3456', ROUND, 0, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('9.999', ROUND, 3, AFTER_DOT, NO_PADDING) == '9.999', $desc . "('9.999', ROUND, 3, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('9.999', ROUND, 2, AFTER_DOT, NO_PADDING) == '10', $desc . "('9.999', ROUND, 2, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('9.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO) == '10.00', $desc . "('9.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('99.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO) == '100.00', $desc . "('99.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('-99.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO) == '-100.00', $desc . "('-99.999', ROUND, 2, AFTER_DOT, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('0.000123456700', ROUND, 27, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.000123456700', ROUND, 27, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001234567', ROUND, 27, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.0001234567', ROUND, 27, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001234567', ROUND, 7, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001234567', $desc . "('0.0001234567', ROUND, 7, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.000123456', ROUND, 6, SIGNIFICANT_DIGITS, NO_PADDING) == '0.000123456', $desc . "('0.000123456', ROUND, 6, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.000123456', ROUND, 5, SIGNIFICANT_DIGITS, NO_PADDING) == '0.00012346', $desc . "('0.000123456', ROUND, 5, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.000123456', ROUND, 4, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001235', $desc . "('0.000123456', ROUND, 4, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00012', ROUND, 2, SIGNIFICANT_DIGITS, NO_PADDING) == '0.00012', $desc . "('0.00012', ROUND, 2, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.0001', ROUND, 1, SIGNIFICANT_DIGITS, NO_PADDING) == '0.0001', $desc . "('0.0001', ROUND, 1, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', ROUND, 7, SIGNIFICANT_DIGITS, NO_PADDING) == '123.0001', $desc . "('123.0000987654', ROUND, 7, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('123.0000987654', ROUND, 6, SIGNIFICANT_DIGITS, NO_PADDING) == '123', $desc . "('123.0000987654', ROUND, 6, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00098765', ROUND, 2, SIGNIFICANT_DIGITS, NO_PADDING) == '0.00099', $desc . "('0.00098765', ROUND, 2, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00098765', ROUND, 2, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '0.00099', $desc . "('0.00098765', ROUND, 2, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('0.00098765', ROUND, 1, SIGNIFICANT_DIGITS, NO_PADDING) == '0.001', $desc . "('0.00098765', ROUND, 1, SIGNIFICANT_DIGITS, NO_PADDING)");
assert(Exchange::decimalToPrecision('0.00098765', ROUND, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '0.0009876500000', $desc . "('0.00098765', ROUND, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('0.098765', ROUND, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO) == '0.1', $desc . "('0.098765', ROUND, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO)");
assert(Exchange::decimalToPrecision('-0.123456', TRUNCATE, 5, AFTER_DOT, NO_PADDING) == '-0.12345', $desc . "('-0.123456', TRUNCATE, 5, AFTER_DOT, NO_PADDING)");
assert(Exchange::decimalToPrecision('-0.123456', ROUND, 5, AFTER_DOT, NO_PADDING) == '-0.12346', $desc . "('-0.123456', ROUND, 5, AFTER_DOT, NO_PADDING)");
