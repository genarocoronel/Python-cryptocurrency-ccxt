(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
"use strict";

/*

MIT License

Copyright (c) 2017 Igor Kroitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {

    //-----------------------------------------------------------------------------
    // dependencies

    var CryptoJS = require('crypto-js'),
        qs = require('qs'); // querystring
    // , ws       = require ('ws') // websocket

    //-----------------------------------------------------------------------------
    // this is updated by vss.js when building

    var version = '1.4.83';

    //-----------------------------------------------------------------------------
    // platform detection

    var isNode = typeof window === 'undefined',
        isCommonJS = typeof module !== 'undefined' && typeof require !== 'undefined';

    //-----------------------------------------------------------------------------

    var CCXTError = function (_Error) {
        _inherits(CCXTError, _Error);

        function CCXTError(message) {
            _classCallCheck(this, CCXTError);

            // a workaround to make `instanceof CCXTError` work in ES5
            var _this = _possibleConstructorReturn(this, (CCXTError.__proto__ || Object.getPrototypeOf(CCXTError)).call(this, message));

            _this.constructor = CCXTError;
            _this.__proto__ = CCXTError.prototype;
            _this.message = message;
            return _this;
        }

        return CCXTError;
    }(Error);

    var ExchangeError = function (_CCXTError) {
        _inherits(ExchangeError, _CCXTError);

        function ExchangeError(message) {
            _classCallCheck(this, ExchangeError);

            var _this2 = _possibleConstructorReturn(this, (ExchangeError.__proto__ || Object.getPrototypeOf(ExchangeError)).call(this, message));

            _this2.constructor = ExchangeError;
            _this2.__proto__ = ExchangeError.prototype;
            _this2.message = message;
            return _this2;
        }

        return ExchangeError;
    }(CCXTError);

    var AuthenticationError = function (_CCXTError2) {
        _inherits(AuthenticationError, _CCXTError2);

        function AuthenticationError(message) {
            _classCallCheck(this, AuthenticationError);

            var _this3 = _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call(this, message));

            _this3.constructor = AuthenticationError;
            _this3.__proto__ = AuthenticationError.prototype;
            _this3.message = message;
            return _this3;
        }

        return AuthenticationError;
    }(CCXTError);

    var NetworkError = function (_CCXTError3) {
        _inherits(NetworkError, _CCXTError3);

        function NetworkError(message) {
            _classCallCheck(this, NetworkError);

            var _this4 = _possibleConstructorReturn(this, (NetworkError.__proto__ || Object.getPrototypeOf(NetworkError)).call(this, message));

            _this4.constructor = NetworkError;
            _this4.__proto__ = NetworkError.prototype;
            _this4.message = message;
            return _this4;
        }

        return NetworkError;
    }(CCXTError);

    var DDoSProtection = function (_NetworkError) {
        _inherits(DDoSProtection, _NetworkError);

        function DDoSProtection(message) {
            _classCallCheck(this, DDoSProtection);

            var _this5 = _possibleConstructorReturn(this, (DDoSProtection.__proto__ || Object.getPrototypeOf(DDoSProtection)).call(this, message));

            _this5.constructor = DDoSProtection;
            _this5.__proto__ = DDoSProtection.prototype;
            _this5.message = message;
            return _this5;
        }

        return DDoSProtection;
    }(NetworkError);

    var RequestTimeout = function (_NetworkError2) {
        _inherits(RequestTimeout, _NetworkError2);

        function RequestTimeout(message) {
            _classCallCheck(this, RequestTimeout);

            var _this6 = _possibleConstructorReturn(this, (RequestTimeout.__proto__ || Object.getPrototypeOf(RequestTimeout)).call(this, message));

            _this6.constructor = RequestTimeout;
            _this6.__proto__ = RequestTimeout.prototype;
            _this6.message = message;
            return _this6;
        }

        return RequestTimeout;
    }(NetworkError);

    var ExchangeNotAvailable = function (_NetworkError3) {
        _inherits(ExchangeNotAvailable, _NetworkError3);

        function ExchangeNotAvailable(message) {
            _classCallCheck(this, ExchangeNotAvailable);

            var _this7 = _possibleConstructorReturn(this, (ExchangeNotAvailable.__proto__ || Object.getPrototypeOf(ExchangeNotAvailable)).call(this, message));

            _this7.constructor = ExchangeNotAvailable;
            _this7.__proto__ = ExchangeNotAvailable.prototype;
            _this7.message = message;
            return _this7;
        }

        return ExchangeNotAvailable;
    }(NetworkError);

    //-----------------------------------------------------------------------------
    // utility helpers

    var sleep = function sleep(ms) {
        return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
        });
    };

    var decimal = function decimal(float) {
        return parseFloat(float).toString();
    };

    var timeout = function timeout(ms, promise) {
        return Promise.race([promise, sleep(ms).then(function () {
            throw new RequestTimeout('request timed out');
        })]);
    };

    var capitalize = function capitalize(string) {
        return string.length ? string.charAt(0).toUpperCase() + string.slice(1) : string;
    };

    var keysort = function keysort(object) {
        var result = {};
        Object.keys(object).sort().forEach(function (key) {
            return result[key] = object[key];
        });
        return result;
    };

    var extend = function extend() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var result = {};

        var _loop = function _loop(i) {
            if (_typeof(args[i]) === 'object') Object.keys(args[i]).forEach(function (key) {
                return result[key] = args[i][key];
            });
        };

        for (var i = 0; i < args.length; i++) {
            _loop(i);
        }return result;
    };

    var omit = function omit(object) {
        var result = extend(object);
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'string') delete result[arguments[i]];else if (Array.isArray(arguments[i])) for (var k = 0; k < arguments[i].length; k++) {
                delete result[arguments[i][k]];
            }
        }return result;
    };

    var indexBy = function indexBy(array, key) {
        var result = {};
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            if (typeof element[key] != 'undefined') {
                result[element[key]] = element;
            }
        }
        return result;
    };

    var sortBy = function sortBy(array, key) {
        var descending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        descending = descending ? -1 : 1;
        return array.sort(function (a, b) {
            return a[key] < b[key] ? -descending : a[key] > b[key] ? descending : 0;
        });
    };

    var flatten = function flatten(array) {
        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        for (var i = 0, length = array.length; i < length; i++) {
            var value = array[i];
            if (Array.isArray(value)) {
                flatten(value, result);
            } else {
                result.push(value);
            }
        }
        return result;
    };

    var unique = function unique(array) {
        return array.filter(function (value, index, self) {
            return self.indexOf(value) == index;
        });
    };

    var pluck = function pluck(array, key) {
        return array.filter(function (element) {
            return typeof element[key] != 'undefined';
        }).map(function (element) {
            return element[key];
        });
    };

    var urlencode = function urlencode(object) {
        return qs.stringify(object);
    };

    var sum = function sum() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var result = args.filter(function (arg) {
            return typeof arg != 'undefined';
        });
        return result.length > 0 ? result.reduce(function (sum, value) {
            return sum + value;
        }, 0) : undefined;
    };

    var ordered = function ordered(x) {
        return x;
    }; // a stub to keep assoc keys in order, in JS it does nothing, it's mostly for Python

    //-----------------------------------------------------------------------------
    // a cross-platform Fetch API

    var nodeFetch = isNode && module.require('node-fetch') // using module.require to prevent Webpack / React Native from trying to include it
    ,
        windowFetch = typeof window !== 'undefined' && window.fetch // native Fetch API (in newer browsers)
    ,
        xhrFetch = function xhrFetch(url, options) {
        var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return (// a quick ad-hoc polyfill (for older browsers)
            new Promise(function (resolve, reject) {

                if (verbose) console.log(url, options);

                var xhr = new XMLHttpRequest();
                var method = options.method || 'GET';

                xhr.open(method, url, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) resolve(xhr.responseText);else {
                            // [403, 404, ...].indexOf (xhr.status) >= 0
                            throw new Error(method, url, xhr.status, xhr.responseText);
                        }
                    }
                };

                if (typeof options.headers != 'undefined') for (var header in options.headers) {
                    xhr.setRequestHeader(header, options.headers[header]);
                }xhr.send(options.body);
            })
        );
    };

    var fetch = nodeFetch || windowFetch || xhrFetch;

    //-----------------------------------------------------------------------------
    // string ←→ binary ←→ base64 conversion routines

    var stringToBinary = function stringToBinary(str) {
        var arr = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return CryptoJS.lib.WordArray.create(arr);
    };

    var stringToBase64 = function stringToBase64(string) {
        return CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64);
    },
        utf16ToBase64 = function utf16ToBase64(string) {
        return CryptoJS.enc.Utf16.parse(string).toString(CryptoJS.enc.Base64);
    },
        base64ToBinary = function base64ToBinary(string) {
        return CryptoJS.enc.Base64.parse(string);
    },
        base64ToString = function base64ToString(string) {
        return CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8);
    },
        binaryToString = function binaryToString(string) {
        return string;
    };

    var binaryConcat = function binaryConcat() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return args.reduce(function (a, b) {
            return a.concat(b);
        });
    };

    // url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
    var urlencodeBase64 = function urlencodeBase64(base64string) {
        return base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
    };

    //-----------------------------------------------------------------------------
    // cryptography

    var hash = function hash(request) {
        var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'md5';
        var digest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hex';

        var result = CryptoJS[hash.toUpperCase()](request);
        return digest == 'binary' ? result : result.toString(CryptoJS.enc[capitalize(digest)]);
    };

    var hmac = function hmac(request, secret) {
        var hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sha256';
        var digest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';

        var encoding = digest == 'binary' ? 'Latin1' : capitalize(digest);
        return CryptoJS['Hmac' + hash.toUpperCase()](request, secret).toString(CryptoJS.enc[capitalize(encoding)]);
    };

    //-----------------------------------------------------------------------------
    // a JSON Web Token authentication method

    var jwt = function jwt(request, secret) {
        var alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HS256';
        var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'sha256';

        var encodedHeader = urlencodeBase64(stringToBase64(JSON.stringify({ 'alg': alg, 'typ': 'JWT' }))),
            encodedData = urlencodeBase64(stringToBase64(JSON.stringify(request))),
            token = [encodedHeader, encodedData].join('.'),
            signature = urlencodeBase64(utf16ToBase64(hmac(token, secret, hash, 'utf16')));
        return [token, signature].join('.');
    };

    //-----------------------------------------------------------------------------
    // const WebSocket = require('ws')
    // const ws = new WebSocket (this.urls['websocket'])
    // ws.on ('open', function open () {
    //     console.log ('connected')
    //     // ws.send (Date.now ())
    // })
    // ws.on ('close', function close () {
    //     console.log ('disconnected')
    // });
    // ws.on ('message', function incoming (data) {
    //     // console.log (`Roundtrip time: ${Date.now() - data} ms`);
    //     setTimeout (function timeout () {
    //         ws.send (Date.now ())
    //     }, 500)
    // })
    //-----------------------------------------------------------------------------

    //-----------------------------------------------------------------------------
    // the base class

    var Exchange = function Exchange(config) {
        var _this12 = this;

        this.hash = hash;
        this.hmac = hmac;
        this.jwt = jwt; // JSON Web Token
        this.binaryConcat = binaryConcat;
        this.stringToBinary = stringToBinary;
        this.stringToBase64 = stringToBase64;
        this.base64ToBinary = base64ToBinary;
        this.base64ToString = base64ToString;
        this.binaryToString = binaryToString;
        this.utf16ToBase64 = utf16ToBase64;
        this.urlencode = urlencode;
        this.encodeURIComponent = encodeURIComponent;
        this.omit = omit;
        this.pluck = pluck;
        this.unique = unique;
        this.extend = extend;
        this.flatten = flatten;
        this.indexBy = indexBy;
        this.sortBy = sortBy;
        this.keysort = keysort;
        this.decimal = decimal;
        this.capitalize = capitalize;
        this.json = JSON.stringify;
        this.sum = sum;
        this.ordered = ordered;

        this.encode = function (string) {
            return string;
        };
        this.decode = function (string) {
            return string;
        };

        if (isNode) this.nodeVersion = process.version.match(/\d+\.\d+.\d+/)[0];

        this.init = function () {
            this.orders = {};
            this.trades = {};
            if (this.api) this.defineRESTAPI(this.api, 'request');
            if (this.markets) this.setMarkets(this.markets);
        };

        this.defineRESTAPI = function (api, methodName) {
            var _this8 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            Object.keys(api).forEach(function (type) {
                Object.keys(api[type]).forEach(function (httpMethod) {
                    var urls = api[type][httpMethod];

                    var _loop2 = function _loop2(i) {
                        var url = urls[i].trim();
                        var splitPath = url.split(/[^a-zA-Z0-9]/);

                        var uppercaseMethod = httpMethod.toUpperCase();
                        var lowercaseMethod = httpMethod.toLowerCase();
                        var camelcaseMethod = capitalize(lowercaseMethod);
                        var camelcaseSuffix = splitPath.map(capitalize).join('');
                        var underscoreSuffix = splitPath.map(function (x) {
                            return x.trim().toLowerCase();
                        }).filter(function (x) {
                            return x.length > 0;
                        }).join('_');

                        if (camelcaseSuffix.indexOf(camelcaseMethod) === 0) camelcaseSuffix = camelcaseSuffix.slice(camelcaseMethod.length);

                        if (underscoreSuffix.indexOf(lowercaseMethod) === 0) underscoreSuffix = underscoreSuffix.slice(lowercaseMethod.length);

                        var camelcase = type + camelcaseMethod + capitalize(camelcaseSuffix);
                        var underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix;

                        if ('suffixes' in options) {
                            if ('camelcase' in options['suffixes']) camelcase += options['suffixes']['camelcase'];
                            if ('underscore' in options.suffixes) underscore += options['suffixes']['underscore'];
                        }

                        if ('underscore_suffix' in options) underscore += options.underscoreSuffix;
                        if ('camelcase_suffix' in options) camelcase += options.camelcaseSuffix;

                        var partial = function partial(params) {
                            return _this8[methodName](url, type, uppercaseMethod, params);
                        };

                        _this8[camelcase] = partial;
                        _this8[underscore] = partial;
                    };

                    for (var i = 0; i < urls.length; i++) {
                        _loop2(i);
                    }
                });
            });
        },

        // this.initializeStreamingAPI = function () {
        //     this.ws = new WebSocket (this.urls['websocket'])
        //     ws.on ('open', function open () {
        //         console.log ('connected')
        //         // ws.send (Date.now ())
        //     })
        //     ws.on ('close', function close () {
        //         console.log ('disconnected')
        //     })
        //     ws.on ('message', function incoming (data) {
        //         // console.log (`Roundtrip time: ${Date.now() - data} ms`);
        //         setTimeout (function timeout () {
        //             ws.send (Date.now ())
        //         }, 500)
        //     })
        // },

        this.fetch = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

            var _this9 = this;

            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            if (isNode && this.userAgent) if (typeof this.userAgent == 'string') headers = extend({ 'User-Agent': this.userAgent }, headers);else if (_typeof(this.userAgent) == 'object' && 'User-Agent' in this.userAgent) headers = extend(this.userAgent, headers);

            if (this.proxy.length) headers = extend({ 'Origin': '*' }, headers);

            var options = { 'method': method, 'headers': headers, 'body': body };

            url = this.proxy + url;

            if (this.verbose) console.log(this.id, method, url, "\nRequest:\n", options);

            return timeout(this.timeout, fetch(url, options).catch(function (e) {
                if (isNode) {
                    throw new ExchangeNotAvailable([_this9.id, method, url, e.type, e.message].join(' '));
                }
                throw e; // rethrow all unknown errors
            }).then(function (response) {

                if (typeof response == 'string') return response;

                return response.text().then(function (text) {
                    if (_this9.verbose) console.log(_this9.id, method, url, text ? "\nResponse:\n" + text : '');
                    if (response.status >= 200 && response.status <= 300) return text;
                    var error = undefined;
                    var details = text;
                    if ([429].indexOf(response.status) >= 0) {
                        error = DDoSProtection;
                    } else if ([404, 409, 500, 501, 502, 521, 522, 525].indexOf(response.status) >= 0) {
                        error = ExchangeNotAvailable;
                    } else if ([400, 403, 405, 503].indexOf(response.status) >= 0) {
                        var ddosProtection = text.match(/cloudflare|incapsula/i);
                        if (ddosProtection) {
                            error = DDoSProtection;
                        } else {
                            error = ExchangeNotAvailable;
                            details = text + ' (possible reasons: ' + ['invalid API keys', 'bad or old nonce', 'exchange is down or offline', 'on maintenance', 'DDoS protection', 'rate-limiting'].join(', ') + ')';
                        }
                    } else if ([408, 504].indexOf(response.status) >= 0) {
                        error = RequestTimeout;
                    } else if ([401, 422, 511].indexOf(response.status) >= 0) {
                        error = AuthenticationError;
                    } else {
                        error = Error;
                    }
                    throw new error([_this9.id, method, url, response.status, response.statusText, details].join(' '));
                });
            }).then(function (response) {
                return _this9.handleResponse(url, method, headers, response);
            }));
        };

        this.handleResponse = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            try {

                return JSON.parse(body);
            } catch (e) {

                var maintenance = body.match(/offline|busy|retry|wait|unavailable|maintain|maintenance|maintenancing/i);
                var ddosProtection = body.match(/cloudflare|incapsula|overload/i);

                if (e instanceof SyntaxError) {

                    var error = ExchangeNotAvailable;
                    var details = 'not accessible from this location at the moment';
                    if (maintenance) details = 'offline, on maintenance or unreachable from this location at the moment';
                    if (ddosProtection) error = DDoSProtection;
                    throw new error([this.id, method, url, details].join(' '));
                }

                if (this.verbose) console.log(this.id, method, url, 'error', e, "response body:\n'" + body + "'");

                throw e;
            }
        };

        this.set_markets = this.setMarkets = function (markets) {
            var values = _objectValues(markets);
            this.markets = indexBy(values, 'symbol');
            this.marketsById = indexBy(markets, 'id');
            this.markets_by_id = this.marketsById;
            this.symbols = Object.keys(this.markets);
            var base = this.pluck(values.filter(function (market) {
                return 'base' in market;
            }), 'base');
            var quote = this.pluck(values.filter(function (market) {
                return 'quote' in market;
            }), 'quote');
            this.currencies = this.unique(base.concat(quote));
            return this.markets;
        };

        this.load_markets = this.loadMarkets = function () {
            var _this10 = this;

            var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!reload && this.markets) {
                if (!this.marketsById) {
                    return new Promise(function (resolve, reject) {
                        return resolve(_this10.setMarkets(_this10.markets));
                    });
                }
                return new Promise(function (resolve, reject) {
                    return resolve(_this10.markets);
                });
            }
            return this.fetchMarkets().then(function (markets) {
                return _this10.setMarkets(markets);
            });
        };

        this.fetch_tickers = function () {
            return this.fetchTickers();
        };

        this.fetchTickers = function () {
            throw new ExchangeError(this.id + ' API does not allow to fetch all tickers at once with a single call to fetch_tickers () for now');
        };

        this.fetch_markets = function () {
            return this.fetchMarkets();
        };

        this.fetchMarkets = function () {
            var _this11 = this;

            return new Promise(function (resolve, reject) {
                return resolve(_this11.markets);
            });
        };

        this.commonCurrencyCode = function (currency) {
            if (!this.substituteCommonCurrencyCodes) return currency;
            if (currency == 'XBT') return 'BTC';
            if (currency == 'BCC') return 'BCH';
            if (currency == 'DRK') return 'DASH';
            return currency;
        };

        this.market = function (market) {
            return typeof market === 'string' && typeof this.markets != 'undefined' && typeof this.markets[market] != 'undefined' ? this.markets[market] : market;
        };

        this.market_id = this.marketId = function (market) {
            return this.market(market).id || market;
        };

        this.symbol = function (market) {
            return this.market(market).symbol || market;
        };

        this.extract_params = this.extractParams = function (string) {
            var re = /{([a-zA-Z0-9_]+?)}/g;
            var matches = [];
            var match = void 0;
            while (match = re.exec(string)) {
                matches.push(match[1]);
            }return matches;
        };

        this.implode_params = this.implodeParams = function (string, params) {
            for (var property in params) {
                string = string.replace('{' + property + '}', params[property]);
            }return string;
        };

        this.url = function (path) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var result = this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) result += '?' + this.urlencode(query);
            return result;
        };

        this.parse_trades = this.parseTrades = function (trades) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var result = [];
            for (var t = 0; t < trades.length; t++) {
                result.push(this.parseTrade(trades[t], market));
            }
            return result;
        };

        this.parse_orders = this.parseOrders = function (order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var result = [];
            for (var t = 0; t < order.length; t++) {
                result.push(this.parseOrder(order[t], market));
            }
            return result;
        };

        this.parse_ohlcv = this.parseOHLCV = function (ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return ohlcv;
        };

        this.parse_ohlcvs = this.parseOHLCVs = function (ohlcvs) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var result = [];
            for (var t = 0; t < ohlcvs.length; t++) {
                result.push(this.parseOHLCV(ohlcvs[t], market, timeframe, since, limit));
            }
            return result;
        };

        this.create_limit_buy_order = this.createLimitBuyOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'buy', amount, price, params);
        };

        this.create_limit_sell_order = this.createLimitSellOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'sell', amount, price, params);
        };

        this.create_market_buy_order = this.createMarketBuyOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'buy', amount, undefined, params);
        };

        this.create_market_sell_order = this.createMarketSellOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'sell', amount, undefined, params);
        };

        this.iso8601 = function (timestamp) {
            return new Date(timestamp).toISOString();
        };
        this.parse8601 = Date.parse;
        this.seconds = function () {
            return Math.floor(_this12.milliseconds() / 1000);
        };
        this.microseconds = function () {
            return Math.floor(_this12.milliseconds() * 1000);
        };
        this.milliseconds = Date.now;
        this.nonce = this.seconds;
        this.id = undefined;
        this.rateLimit = 2000; // milliseconds = seconds * 1000
        this.timeout = 10000; // milliseconds = seconds * 1000
        this.verbose = false;
        this.userAgent = false;
        this.twofa = false; // two-factor authentication
        this.substituteCommonCurrencyCodes = true;
        this.yyyymmddhhmmss = function (timestamp) {
            var date = new Date(timestamp);
            var yyyy = date.getUTCFullYear();
            var MM = date.getUTCMonth();
            var dd = date.getUTCDay();
            var hh = date.getUTCHours();
            var mm = date.getUTCMinutes();
            var ss = date.getUTCSeconds();
            MM = MM < 10 ? '0' + MM : MM;
            dd = dd < 10 ? '0' + dd : dd;
            hh = hh < 10 ? '0' + hh : hh;
            mm = mm < 10 ? '0' + mm : mm;
            ss = ss < 10 ? '0' + ss : ss;
            return yyyy + '-' + MM + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;
        };

        if (isNode) this.userAgent = {
            'User-Agent': 'ccxt/' + version + ' (+https://github.com/kroitor/ccxt)' + ' Node.js/' + this.nodeVersion + ' (JavaScript)'

            // prepended to URL, like https://proxy.com/https://exchange.com/api...
        };this.proxy = '';

        for (var property in config) {
            this[property] = config[property];
        }this.fetch_balance = this.fetchBalance;
        this.fetch_order_book = this.fetchOrderBook;
        this.fetch_ticker = this.fetchTicker;
        this.fetch_trades = this.fetchTrades;

        this.init();
    };

    //=============================================================================

    var _1broker = {

        'id': '_1broker',
        'name': '1Broker',
        'countries': 'US',
        'rateLimit': 1500,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',
            'api': 'https://1broker.com/api',
            'www': 'https://1broker.com',
            'doc': 'https://1broker.com/?c=en/content/api-documentation'
        },
        'api': {
            'private': {
                'get': ['market/bars', 'market/categories', 'market/details', 'market/list', 'market/quotes', 'market/ticks', 'order/cancel', 'order/create', 'order/open', 'position/close', 'position/close_cancel', 'position/edit', 'position/history', 'position/open', 'position/shared/get', 'social/profile_statistics', 'social/profile_trades', 'user/bitcoin_deposit_address', 'user/details', 'user/overview', 'user/quota_status', 'user/transaction_log']
            }
        },

        fetchCategories: function fetchCategories() {
            var categories,
                _this13 = this;

            return Promise.resolve().then(function () {
                return _this13.privateGetMarketCategories();
            }).then(function (_resp) {
                categories = _resp;

                return categories['response'];
            });
        },
        fetchMarkets: function fetchMarkets() {
            function _recursive() {
                if (c < categories.length) {
                    return Promise.resolve().then(function () {
                        category = categories[c];
                        return this_.privateGetMarketList({
                            'category': category.toLowerCase()
                        });
                    }).then(function (_resp) {
                        markets = _resp;

                        for (p = 0; p < markets['response'].length; p++) {
                            market = markets['response'][p];
                            id = market['symbol'];
                            symbol = undefined;
                            base = undefined;
                            quote = undefined;

                            if (category == 'FOREX' || category == 'CRYPTO') {
                                symbol = market['name'];
                                parts = symbol.split('/');

                                base = parts[0];
                                quote = parts[1];
                            } else {
                                base = id;
                                quote = 'USD';
                                symbol = base + '/' + quote;
                            }
                            base = this_.commonCurrencyCode(base);
                            quote = this_.commonCurrencyCode(quote);
                            result.push({
                                'id': id,
                                'symbol': symbol,
                                'base': base,
                                'quote': quote,
                                'info': market
                            });
                        }
                        c++;
                        return _recursive();
                    });
                }
            }

            var this_,
                categories,
                result,
                c,
                category,
                markets,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                parts,
                _this14 = this;

            return Promise.resolve().then(function () {
                this_ = _this14; // workaround for Babel bug (not passing `this` to _recursive() call)

                return _this14.fetchCategories();
            }).then(function (_resp) {
                categories = _resp;
                result = [];
                c = 0;
                return _recursive();
            }).then(function () {
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                response,
                result,
                c,
                currency,
                _this18 = this;

            return Promise.resolve().then(function () {
                return _this18.loadMarkets();
            }).then(function () {
                return _this18.privateGetUserOverview();
            }).then(function (_resp) {
                balance = _resp;
                response = balance['response'];
                result = {
                    'info': response
                };

                for (c = 0; c < _this18.currencies.length; c++) {
                    currency = _this18.currencies[c];

                    result[currency] = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                }
                result['BTC']['free'] = parseFloat(response['balance']);
                result['BTC']['total'] = result['BTC']['free'];
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                bidPrice,
                askPrice,
                bid,
                ask,
                _this19 = this,
                _arguments7 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments7.length > 1 && _arguments7[1] !== undefined ? _arguments7[1] : {};
                return _this19.loadMarkets();
            }).then(function () {
                return _this19.privateGetMarketQuotes(_this19.extend({
                    'symbols': _this19.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['response'][0];
                timestamp = _this19.parse8601(orderbook['updated']);
                bidPrice = parseFloat(orderbook['bid']);
                askPrice = parseFloat(orderbook['ask']);
                bid = [bidPrice, undefined];
                ask = [askPrice, undefined];

                return {
                    'timestamp': timestamp,
                    'datetime': _this19.iso8601(timestamp),
                    'bids': [bid],
                    'asks': [ask]
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var _this20 = this;

            throw new ExchangeError(_this20.id + ' fetchTrades () method not implemented yet');
        },
        fetchTicker: function fetchTicker(market) {
            var result,
                orderbook,
                ticker,
                timestamp,
                _this21 = this;

            return Promise.resolve().then(function () {
                return _this21.loadMarkets();
            }).then(function () {
                return _this21.privateGetMarketBars({
                    'symbol': _this21.marketId(market),
                    'resolution': 60,
                    'limit': 1
                });
            }).then(function (_resp) {
                result = _resp;
                return _this21.fetchOrderBook(market);
            }).then(function (_resp) {
                orderbook = _resp;
                ticker = result['response'][0];
                timestamp = _this21.parse8601(ticker['date']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this21.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': orderbook['bids'][0][0],
                    'ask': orderbook['asks'][0][0],
                    'vwap': undefined,
                    'open': parseFloat(ticker['o']),
                    'close': parseFloat(ticker['c']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined
                };
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this22 = this,
                _arguments10 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments10.length > 4 && _arguments10[4] !== undefined ? _arguments10[4] : undefined;
                params = _arguments10.length > 5 && _arguments10[5] !== undefined ? _arguments10[5] : {};
                return _this22.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this22.marketId(market),
                    'margin': amount,
                    'direction': side == 'sell' ? 'short' : 'long',
                    'leverage': 1,
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['type'] += '_market';
                }return _this22.privateGetOrderCreate(_this22.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['response']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this23 = this;

            return Promise.resolve().then(function () {
                return _this23.loadMarkets();
            }).then(function () {
                return _this23.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _this24 = this,
                _arguments12 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments12.length > 1 && _arguments12[1] !== undefined ? _arguments12[1] : 'public';
                method = _arguments12.length > 2 && _arguments12[2] !== undefined ? _arguments12[2] : 'GET';
                params = _arguments12.length > 3 && _arguments12[3] !== undefined ? _arguments12[3] : {};
                headers = _arguments12.length > 4 && _arguments12[4] !== undefined ? _arguments12[4] : undefined;
                body = _arguments12.length > 5 && _arguments12[5] !== undefined ? _arguments12[5] : undefined;

                if (!_this24.apiKey) {
                    throw new AuthenticationError(_this24.id + ' requires apiKey for all requests');
                }url = _this24.urls['api'] + '/' + _this24.version + '/' + path + '.php';
                query = _this24.extend({ 'token': _this24.apiKey }, params);

                url += '?' + _this24.urlencode(query);
                return _this24.fetch(url, method);
            }).then(function (_resp) {
                response = _resp;

                if ('warning' in response) {
                    if (response['warning']) {
                        throw new ExchangeError(_this24.id + ' Warning: ' + response['warning_message']);
                    }
                }if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this24.id + ' Error: ' + response['error_code'] + response['error_message']);
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cryptocapital = {

        'id': 'cryptocapital',
        'name': 'Crypto Capital',
        'comment': 'Crypto Capital API',
        'countries': 'PA', // Panama
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993158-7a13f140-64ac-11e7-89cc-a3b441f0b0f8.jpg',
            'www': 'https://cryptocapital.co',
            'doc': 'https://github.com/cryptocap'
        },
        'api': {
            'public': {
                'get': ['stats', 'historical-prices', 'order-book', 'transactions']
            },
            'private': {
                'post': ['balances-and-info', 'open-orders', 'user-transactions', 'btc-deposit-address/get', 'btc-deposit-address/new', 'deposits/get', 'withdrawals/get', 'orders/new', 'orders/edit', 'orders/cancel', 'orders/status', 'withdrawals/new']
            }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                account,
                _this25 = this;

            return Promise.resolve().then(function () {
                return _this25.privatePostBalancesAndInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances-and-info'];
                result = { 'info': balance };

                for (c = 0; c < _this25.currencies.length; c++) {
                    currency = _this25.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['available']) {
                        account['free'] = parseFloat(balance['available'][currency]);
                    }if (currency in balance['on_hold']) {
                        account['used'] = parseFloat(balance['on_hold'][currency]);
                    }account['total'] = _this25.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                _timestamp,
                price,
                amount,
                _this26 = this,
                _arguments14 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments14.length > 1 && _arguments14[1] !== undefined ? _arguments14[1] : {};
                return _this26.publicGetOrderBook(_this26.extend({
                    'currency': _this26.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['order-book'];
                timestamp = _this26.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this26.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        _timestamp = parseInt(order['timestamp']) * 1000;
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['order_amount']);

                        result[key].push([price, amount, _timestamp]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this27 = this;

            return Promise.resolve().then(function () {
                return _this27.publicGetStats({
                    'currency': _this27.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['stats'];
                timestamp = _this27.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this27.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['daily_change']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['total_btc_traded'])
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this28 = this,
                _arguments16 = arguments;

            params = _arguments16.length > 1 && _arguments16[1] !== undefined ? _arguments16[1] : {};

            return _this28.publicGetTransactions(_this28.extend({
                'currency': _this28.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this29 = this,
                _arguments17 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments17.length > 4 && _arguments17[4] !== undefined ? _arguments17[4] : undefined;
                params = _arguments17.length > 5 && _arguments17[5] !== undefined ? _arguments17[5] : {};
                order = {
                    'side': side,
                    'type': type,
                    'currency': _this29.marketId(market),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limit_price'] = price;
                }return _this29.privatePostOrdersNew(_this29.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this30 = this;

            return _this30.privatePostOrdersCancel({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                request,
                response,
                errors,
                e,
                error,
                _this31 = this,
                _arguments19 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments19.length > 1 && _arguments19[1] !== undefined ? _arguments19[1] : 'public';
                method = _arguments19.length > 2 && _arguments19[2] !== undefined ? _arguments19[2] : 'GET';
                params = _arguments19.length > 3 && _arguments19[3] !== undefined ? _arguments19[3] : {};
                headers = _arguments19.length > 4 && _arguments19[4] !== undefined ? _arguments19[4] : undefined;
                body = _arguments19.length > 5 && _arguments19[5] !== undefined ? _arguments19[5] : undefined;

                if (_this31.id == 'cryptocapital') {
                    throw new ExchangeError(_this31.id + ' is an abstract base API for _1btcxe');
                }url = _this31.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this31.urlencode(params);
                    }
                } else {
                    query = _this31.extend({
                        'api_key': _this31.apiKey,
                        'nonce': _this31.nonce()
                    }, params);
                    request = _this31.json(query);

                    query['signature'] = _this31.hmac(_this31.encode(request), _this31.encode(_this31.secret));
                    body = _this31.json(query);
                    headers = { 'Content-Type': 'application/json' };
                }
                return _this31.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    errors = [];

                    for (e = 0; e < response['errors'].length; e++) {
                        error = response['errors'][e];

                        errors.push(error['code'] + ': ' + error['message']);
                    }
                    errors = errors.join(' ');
                    throw new ExchangeError(_this31.id + ' ' + errors);
                }
                return _this31.fetch(url, method, headers, body);
            });
        }
    };

    //-----------------------------------------------------------------------------

    var _1btcxe = extend(cryptocapital, {

        'id': '_1btcxe',
        'name': '1BTCXE',
        'countries': 'PA', // Panama
        'comment': 'Crypto Capital API',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',
            'api': 'https://1btcxe.com/api',
            'www': 'https://1btcxe.com',
            'doc': 'https://1btcxe.com/api-docs.php'
        },
        'markets': {
            'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },
            'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },
            'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },
            'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },
            'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },
            'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },
            'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },
            'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },
            'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },
            'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },
            'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },
            'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },
            'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },
            'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },
            'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },
            'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' }
        }
    });

    //-----------------------------------------------------------------------------

    var anxpro = {

        'id': 'anxpro',
        'name': 'ANXPro',
        'countries': ['JP', 'SG', 'HK', 'NZ'],
        'version': '2',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',
            'api': 'https://anxpro.com/api',
            'www': 'https://anxpro.com',
            'doc': ['http://docs.anxv2.apiary.io', 'https://anxpro.com/pages/api']
        },
        'api': {
            'public': {
                'get': ['{currency_pair}/money/ticker', '{currency_pair}/money/depth/full', '{currency_pair}/money/trade/fetch']
            },
            'private': {
                'post': ['{currency_pair}/money/order/add', '{currency_pair}/money/order/cancel', '{currency_pair}/money/order/quote', '{currency_pair}/money/order/result', '{currency_pair}/money/orders', 'money/{currency}/address', 'money/{currency}/send_simple', 'money/info', 'money/trade/list', 'money/wallet/history']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                currencies,
                result,
                c,
                currency,
                account,
                wallet,
                _this32 = this;

            return Promise.resolve().then(function () {
                return _this32.privatePostMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['data'];
                currencies = Object.keys(balance['Wallets']);
                result = { 'info': balance };

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['Wallets']) {
                        wallet = balance['Wallets'][currency];

                        account['free'] = parseFloat(wallet['Available_Balance']['value']);
                        account['total'] = parseFloat(wallet['Balance']['value']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                t,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this33 = this,
                _arguments21 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments21.length > 1 && _arguments21[1] !== undefined ? _arguments21[1] : {};
                return _this33.publicGetCurrencyPairMoneyDepthFull(_this33.extend({
                    'currency_pair': _this33.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                t = parseInt(orderbook['dataUpdateTime']);
                timestamp = parseInt(t / 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this33.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                t,
                timestamp,
                bid,
                ask,
                _this34 = this;

            return Promise.resolve().then(function () {
                return _this34.publicGetCurrencyPairMoneyTicker({
                    'currency_pair': _this34.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                t = parseInt(ticker['dataUpdateTime']);
                timestamp = parseInt(t / 1000);
                bid = undefined;
                ask = undefined;

                if (ticker['buy']['value']) {
                    bid = parseFloat(ticker['buy']['value']);
                }if (ticker['sell']['value']) {
                    ask = parseFloat(ticker['sell']['value']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this34.iso8601(timestamp),
                    'high': parseFloat(ticker['high']['value']),
                    'low': parseFloat(ticker['low']['value']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': parseFloat(ticker['vwap']['value']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']['value']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']['value']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']['value'])
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                error,
                _this35 = this,
                _arguments23 = arguments;

            params = _arguments23.length > 1 && _arguments23[1] !== undefined ? _arguments23[1] : {};
            error = _this35.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled';

            throw new ExchangeError(error);
            return _this35.publicGetCurrencyPairMoneyTradeFetch(_this35.extend({
                'currency_pair': _this35.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this36 = this,
                _arguments24 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments24.length > 4 && _arguments24[4] !== undefined ? _arguments24[4] : undefined;
                params = _arguments24.length > 5 && _arguments24[5] !== undefined ? _arguments24[5] : {};
                order = {
                    'currency_pair': _this36.marketId(market),
                    'amount_int': amount,
                    'type': side
                };

                if (type == 'limit') {
                    order['price_int'] = price;
                }return _this36.privatePostCurrencyPairOrderAdd(_this36.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['data']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this37 = this;

            return _this37.privatePostCurrencyPairOrderCancel({ 'oid': id });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                secret,
                auth,
                response,
                _test,
                _this38 = this,
                _arguments26 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments26.length > 1 && _arguments26[1] !== undefined ? _arguments26[1] : 'public';
                method = _arguments26.length > 2 && _arguments26[2] !== undefined ? _arguments26[2] : 'GET';
                params = _arguments26.length > 3 && _arguments26[3] !== undefined ? _arguments26[3] : {};
                headers = _arguments26.length > 4 && _arguments26[4] !== undefined ? _arguments26[4] : undefined;
                body = _arguments26.length > 5 && _arguments26[5] !== undefined ? _arguments26[5] : undefined;
                request = _this38.implodeParams(path, params);
                query = _this38.omit(params, _this38.extractParams(path));
                url = _this38.urls['api'] + '/' + _this38.version + '/' + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this38.urlencode(query);
                    }
                } else {
                    nonce = _this38.nonce();

                    body = _this38.urlencode(_this38.extend({ 'nonce': nonce }, query));
                    secret = _this38.base64ToBinary(_this38.secret);
                    auth = request + "\0" + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Rest-Key': _this38.apiKey,
                        'Rest-Sign': _this38.hmac(_this38.encode(auth), secret, 'sha512', 'base64')
                    };
                }
                return _this38.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test = 'result' in response;

                if (_test && response['result'] == 'success') {
                    return response;
                } else {
                    throw new ExchangeError(_this38.id + ' ' + _this38.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bit2c = {

        'id': 'bit2c',
        'name': 'Bit2C',
        'countries': 'IL', // Israel
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
            'api': 'https://www.bit2c.co.il',
            'www': 'https://www.bit2c.co.il',
            'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']
        },
        'api': {
            'public': {
                'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades']
            },
            'private': {
                'post': ['Account/Balance', 'Account/Balance/v2', 'Merchant/CreateCheckout', 'Order/AccountHistory', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/MyOrders', 'Payment/GetMyId', 'Payment/Send']
            }
        },
        'markets': {
            'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },
            'LTC/BTC': { 'id': 'LtcBtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' }
        },

        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                account,
                available,
                _this39 = this;

            return Promise.resolve().then(function () {
                return _this39.privatePostAccountBalanceV2();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this39.currencies.length; c++) {
                    currency = _this39.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        available = 'AVAILABLE_' + currency;

                        account['free'] = balance[available];
                        account['total'] = balance[currency];
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp2,
                _this40 = this,
                _arguments28 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments28.length > 1 && _arguments28[1] !== undefined ? _arguments28[1] : {};
                return _this40.publicGetExchangesPairOrderbook(_this40.extend({
                    'pair': _this40.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this40.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this40.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order[0];
                        amount = order[1];
                        _timestamp2 = order[2] * 1000;

                        result[side].push([price, amount, _timestamp2]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this41 = this;

            return Promise.resolve().then(function () {
                return _this41.publicGetExchangesPairTicker({
                    'pair': _this41.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this41.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this41.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ll']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['av']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['a'])
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this42 = this,
                _arguments30 = arguments;

            params = _arguments30.length > 1 && _arguments30[1] !== undefined ? _arguments30[1] : {};

            return _this42.publicGetExchangesPairTrades(_this42.extend({
                'pair': _this42.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                result,
                _this43 = this,
                _arguments31 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments31.length > 4 && _arguments31[4] !== undefined ? _arguments31[4] : undefined;
                params = _arguments31.length > 5 && _arguments31[5] !== undefined ? _arguments31[5] : {};
                method = 'privatePostOrderAddOrder';
                order = {
                    'Amount': amount,
                    'Pair': _this43.marketId(market)
                };

                if (type == 'market') {
                    method += 'MarketPrice' + _this43.capitalize(side);
                } else {
                    order['Price'] = price;
                    order['Total'] = amount * price;
                    order['IsBid'] = side == 'buy';
                }
                return _this43[method](_this43.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['NewOrder']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this44 = this;

            return _this44.privatePostOrderCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            if (api == 'public') {
                url += '.json';
            } else {
                var nonce = this.nonce();
                var query = this.extend({ 'nonce': nonce }, params);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbay = {

        'id': 'bitbay',
        'name': 'BitBay',
        'countries': ['PL', 'EU'], // Poland
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
            'www': 'https://bitbay.net',
            'api': {
                'public': 'https://bitbay.net/API/Public',
                'private': 'https://bitbay.net/API/Trading/tradingApi.php'
            },
            'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API']
        },
        'api': {
            'public': {
                'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD' },
            'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR' },
            'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN' },
            'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                account,
                _this45 = this;

            return Promise.resolve().then(function () {
                return _this45.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances'];
                result = { 'info': balance };

                for (c = 0; c < _this45.currencies.length; c++) {
                    currency = _this45.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        account['free'] = parseFloat(balance[currency]['available']);
                        account['used'] = parseFloat(balance[currency]['locked']);
                        account['total'] = _this45.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this46 = this,
                _arguments34 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments34.length > 1 && _arguments34[1] !== undefined ? _arguments34[1] : {};
                return _this46.publicGetIdOrderbook(_this46.extend({
                    'id': _this46.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this46.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this46.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this47 = this;

            return Promise.resolve().then(function () {
                return _this47.publicGetIdTicker({
                    'id': _this47.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this47.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this47.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this48 = this,
                _arguments36 = arguments;

            params = _arguments36.length > 1 && _arguments36[1] !== undefined ? _arguments36[1] : {};

            return _this48.publicGetIdTrades(_this48.extend({
                'id': _this48.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                _this49 = this,
                _arguments37 = arguments;

            price = _arguments37.length > 4 && _arguments37[4] !== undefined ? _arguments37[4] : undefined;
            params = _arguments37.length > 5 && _arguments37[5] !== undefined ? _arguments37[5] : {};
            p = _this49.market(market);

            return _this49.privatePostTrade(_this49.extend({
                'type': side,
                'currency': p['base'],
                'amount': amount,
                'payment_currency': p['quote'],
                'rate': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this50 = this;

            return _this50.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path, params) + '.json';
            } else {
                body = this.urlencode(this.extend({
                    'method': path,
                    'moment': this.nonce()
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbays = {

        'id': 'bitbays',
        'name': 'BitBays',
        'countries': ['CN', 'GB', 'HK', 'AU', 'CA'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27808599-983687d2-6051-11e7-8d95-80dfcbe5cbb4.jpg',
            'api': 'https://bitbays.com/api',
            'www': 'https://bitbays.com',
            'doc': 'https://bitbays.com/help/api/'
        },
        'api': {
            'public': {
                'get': ['ticker', 'trades', 'depth']
            },
            'private': {
                'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'ODS/BTC': { 'id': 'ods_btc', 'symbol': 'ODS/BTC', 'base': 'ODS', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'LSK/CNY': { 'id': 'lsk_cny', 'symbol': 'LSK/CNY', 'base': 'LSK', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                lowercase,
                account,
                _this51 = this;

            return Promise.resolve().then(function () {
                return _this51.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['result']['wallet'];
                result = { 'info': balance };

                for (c = 0; c < _this51.currencies.length; c++) {
                    currency = _this51.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]['avail']);
                        account['used'] = parseFloat(balance[lowercase]['lock']);
                        account['total'] = _this51.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this52 = this,
                _arguments40 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments40.length > 1 && _arguments40[1] !== undefined ? _arguments40[1] : {};
                return _this52.publicGetDepth(_this52.extend({
                    'market': _this52.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this52.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this52.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this53 = this;

            return Promise.resolve().then(function () {
                return _this53.publicGetTicker({
                    'market': _this53.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'];
                timestamp = _this53.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this53.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this54 = this,
                _arguments42 = arguments;

            params = _arguments42.length > 1 && _arguments42[1] !== undefined ? _arguments42[1] : {};

            return _this54.publicGetTrades(_this54.extend({
                'market': _this54.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this55 = this,
                _arguments43 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments43.length > 4 && _arguments43[4] !== undefined ? _arguments43[4] : undefined;
                params = _arguments43.length > 5 && _arguments43[5] !== undefined ? _arguments43[5] : {};
                order = {
                    'market': _this55.marketId(market),
                    'op': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['order_type'] = 1;
                    order['price'] = price;
                } else {
                    order['order_type'] = 0;
                }
                return _this55.privatePostTrade(_this55.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this56 = this;

            return _this56.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test2,
                _this57 = this,
                _arguments45 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments45.length > 1 && _arguments45[1] !== undefined ? _arguments45[1] : 'public';
                method = _arguments45.length > 2 && _arguments45[2] !== undefined ? _arguments45[2] : 'GET';
                params = _arguments45.length > 3 && _arguments45[3] !== undefined ? _arguments45[3] : {};
                headers = _arguments45.length > 4 && _arguments45[4] !== undefined ? _arguments45[4] : undefined;
                body = _arguments45.length > 5 && _arguments45[5] !== undefined ? _arguments45[5] : undefined;
                url = _this57.urls['api'] + '/' + _this57.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this57.urlencode(params);
                    }
                } else {
                    nonce = _this57.nonce();

                    body = _this57.urlencode(_this57.extend({
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this57.apiKey,
                        'Sign': _this57.hmac(_this57.encode(body), _this57.secret, 'sha512')
                    };
                }
                return _this57.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test2 = 'status' in response;

                if (_test2 && response['status'] == 200) {
                    return response;
                } else {
                    throw new ExchangeError(_this57.id + ' ' + _this57.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitcoincoid = {

        'id': 'bitcoincoid',
        'name': 'Bitcoin.co.id',
        'countries': 'ID', // Indonesia
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',
            'api': {
                'public': 'https://vip.bitcoin.co.id/api',
                'private': 'https://vip.bitcoin.co.id/tapi'
            },
            'www': 'https://www.bitcoin.co.id',
            'doc': ['https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf', 'https://vip.bitcoin.co.id/trade_api']
        },
        'api': {
            'public': {
                'get': ['{pair}/ticker', '{pair}/trades', '{pair}/depth']
            },
            'private': {
                'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'openOrders', 'cancelOrder']
            }
        },
        'markets': {
            'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },
            'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },
            'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },
            'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },
            'STR/BTC': { 'id': 'str_btc', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },
            'NEM/BTC': { 'id': 'nem_btc', 'symbol': 'NEM/BTC', 'base': 'NEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                frozen,
                result,
                c,
                currency,
                lowercase,
                account,
                _this58 = this;

            return Promise.resolve().then(function () {
                return _this58.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['return']['balance'];
                frozen = response['return']['balance_hold'];
                result = { 'info': balance };

                for (c = 0; c < _this58.currencies.length; c++) {
                    currency = _this58.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]);
                    }
                    if (lowercase in frozen) {
                        account['used'] = parseFloat(frozen[lowercase]);
                    }
                    account['total'] = _this58.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this59 = this,
                _arguments47 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments47.length > 1 && _arguments47[1] !== undefined ? _arguments47[1] : {};
                return _this59.publicGetPairDepth(_this59.extend({
                    'pair': _this59.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this59.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this59.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var pair,
                response,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this60 = this;

            return Promise.resolve().then(function () {
                pair = _this60.market(market);
                return _this60.publicGetPairTicker({
                    'pair': pair['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseFloat(ticker['server_time']) * 1000;
                baseVolume = 'vol_' + pair['baseId'].toLowerCase();
                quoteVolume = 'vol_' + pair['quoteId'].toLowerCase();

                return {
                    'timestamp': timestamp,
                    'datetime': _this60.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker[baseVolume]),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this61 = this,
                _arguments49 = arguments;

            params = _arguments49.length > 1 && _arguments49[1] !== undefined ? _arguments49[1] : {};

            return _this61.publicGetPairTrades(_this61.extend({
                'pair': _this61.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                order,
                base,
                result,
                _this62 = this,
                _arguments50 = arguments;

            price = _arguments50.length > 4 && _arguments50[4] !== undefined ? _arguments50[4] : undefined;
            params = _arguments50.length > 5 && _arguments50[5] !== undefined ? _arguments50[5] : {};
            p = _this62.market(market);
            order = {
                'pair': p['id'],
                'type': side,
                'price': price
            };
            base = p['base'].toLowerCase();

            order[base] = amount;
            result = _this62.privatePostTrade(_this62.extend(order, params));

            return {
                'info': result,
                'id': result['return']['order_id'].toString()
            };
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this63 = this,
                _arguments51 = arguments;

            params = _arguments51.length > 1 && _arguments51[1] !== undefined ? _arguments51[1] : {};

            return _this63.privatePostCancelOrder(_this63.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                response,
                _this64 = this,
                _arguments52 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments52.length > 1 && _arguments52[1] !== undefined ? _arguments52[1] : 'public';
                method = _arguments52.length > 2 && _arguments52[2] !== undefined ? _arguments52[2] : 'GET';
                params = _arguments52.length > 3 && _arguments52[3] !== undefined ? _arguments52[3] : {};
                headers = _arguments52.length > 4 && _arguments52[4] !== undefined ? _arguments52[4] : undefined;
                body = _arguments52.length > 5 && _arguments52[5] !== undefined ? _arguments52[5] : undefined;
                url = _this64.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this64.implodeParams(path, params);
                } else {
                    body = _this64.urlencode(_this64.extend({
                        'method': path,
                        'nonce': _this64.nonce()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this64.apiKey,
                        'Sign': _this64.hmac(_this64.encode(body), _this64.encode(_this64.secret), 'sha512')
                    };
                }
                return _this64.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this64.id + ' ' + response['error']);
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex = {

        'id': 'bitfinex',
        'name': 'Bitfinex',
        'countries': 'US',
        'version': 'v1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v1/docs', 'https://bitfinex.readme.io/v2/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['book/{symbol}', 'candles/{symbol}', 'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'today', 'trades/{symbol}']
            },
            'private': {
                'post': ['account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'position/claim', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                _this65 = this;

            return Promise.resolve().then(function () {
                return _this65.publicGetSymbolsDetails();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'].toUpperCase();
                    baseId = id.slice(0, 3);
                    quoteId = id.slice(3, 6);
                    base = baseId;
                    quote = quoteId;
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                b,
                account,
                currency,
                uppercase,
                result,
                c,
                _currency,
                _account,
                _this66 = this;

            return Promise.resolve().then(function () {
                return _this66.loadMarkets();
            }).then(function () {
                return _this66.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];

                    if (account['type'] == 'exchange') {
                        currency = account['currency'];
                        // issue #4 Bitfinex names Dash as DSH, instead of DASH

                        if (currency == 'DSH') {
                            currency = 'DASH';
                        }uppercase = currency.toUpperCase();

                        balances[uppercase] = account;
                    }
                }
                result = { 'info': response };

                for (c = 0; c < _this66.currencies.length; c++) {
                    _currency = _this66.currencies[c];
                    _account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency in balances) {
                        _account['free'] = parseFloat(balances[_currency]['available']);
                        _account['total'] = parseFloat(balances[_currency]['amount']);
                        _account['used'] = _account['total'] - _account['free'];
                    }
                    result[_currency] = _account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp3,
                _this67 = this,
                _arguments55 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments55.length > 1 && _arguments55[1] !== undefined ? _arguments55[1] : {};
                return _this67.loadMarkets();
            }).then(function () {
                return _this67.publicGetBookSymbol(_this67.extend({
                    'symbol': _this67.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this67.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this67.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);
                        _timestamp3 = parseInt(parseFloat(order['timestamp']));

                        result[side].push([price, amount, _timestamp3]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this68 = this;

            return Promise.resolve().then(function () {
                return _this68.loadMarkets();
            }).then(function () {
                return _this68.publicGetPubtickerSymbol({
                    'symbol': _this68.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseFloat(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this68.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['mid']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestamp'] * 1000;
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                trades,
                _this69 = this,
                _arguments57 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments57.length > 1 && _arguments57[1] !== undefined ? _arguments57[1] : {};
                return _this69.loadMarkets();
            }).then(function () {
                m = _this69.market(market);
                return _this69.publicGetTradesSymbol(_this69.extend({
                    'symbol': m['id']
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this69.parseTrades(trades, m);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this70 = this,
                _arguments58 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments58.length > 4 && _arguments58[4] !== undefined ? _arguments58[4] : undefined;
                params = _arguments58.length > 5 && _arguments58[5] !== undefined ? _arguments58[5] : {};
                return _this70.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this70.marketId(market),
                    'amount': amount.toString(),
                    'side': side,
                    'type': 'exchange ' + type,
                    'ocoorder': false,
                    'buy_price_oco': 0,
                    'sell_price_oco': 0
                };

                if (type == 'market') {
                    order['price'] = _this70.nonce().toString();
                } else {
                    order['price'] = price.toString();
                }
                return _this70.privatePostOrderNew(_this70.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this71 = this;

            return Promise.resolve().then(function () {
                return _this71.loadMarkets();
            }).then(function () {
                return _this71.privatePostOrderCancel({ 'order_id': id });
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                payload,
                secret,
                signature,
                response,
                _this72 = this,
                _arguments60 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments60.length > 1 && _arguments60[1] !== undefined ? _arguments60[1] : 'public';
                method = _arguments60.length > 2 && _arguments60[2] !== undefined ? _arguments60[2] : 'GET';
                params = _arguments60.length > 3 && _arguments60[3] !== undefined ? _arguments60[3] : {};
                headers = _arguments60.length > 4 && _arguments60[4] !== undefined ? _arguments60[4] : undefined;
                body = _arguments60.length > 5 && _arguments60[5] !== undefined ? _arguments60[5] : undefined;
                request = '/' + _this72.version + '/' + _this72.implodeParams(path, params);
                query = _this72.omit(params, _this72.extractParams(path));
                url = _this72.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this72.urlencode(query);
                    }
                } else {
                    nonce = _this72.nonce();

                    query = _this72.extend({
                        'nonce': nonce.toString(),
                        'request': request
                    }, query);
                    query = _this72.json(query);
                    query = _this72.encode(query);
                    payload = _this72.stringToBase64(query);
                    secret = _this72.encode(_this72.secret);
                    signature = _this72.hmac(payload, secret, 'sha384');

                    headers = {
                        'X-BFX-APIKEY': _this72.apiKey,
                        'X-BFX-PAYLOAD': _this72.decode(payload),
                        'X-BFX-SIGNATURE': signature
                    };
                }
                return _this72.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this72.id + ' ' + _this72.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitflyer = {

        'id': 'bitflyer',
        'name': 'bitFlyer',
        'countries': 'JP',
        'version': 'v1',
        'rateLimit': 500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
            'api': 'https://api.bitflyer.jp',
            'www': 'https://bitflyer.jp',
            'doc': 'https://bitflyer.jp/API'
        },
        'api': {
            'public': {
                'get': ['getmarkets', // or 'markets'
                'getboard', // or 'board'
                'getticker', // or 'ticker'
                'getexecutions', // or 'executions'
                'gethealth', 'getchats']
            },
            'private': {
                'get': ['getpermissions', 'getbalance', 'getcollateral', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],
                'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                currencies,
                base,
                quote,
                symbol,
                numCurrencies,
                _this73 = this;

            return Promise.resolve().then(function () {
                return _this73.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['product_code'];
                    currencies = id.split('_');
                    base = undefined;
                    quote = undefined;
                    symbol = id;
                    numCurrencies = currencies.length;

                    if (numCurrencies == 2) {
                        base = currencies[0];
                        quote = currencies[1];
                        symbol = base + '/' + quote;
                    }
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                b,
                account,
                currency,
                result,
                c,
                _currency2,
                _account2,
                _this74 = this;

            return Promise.resolve().then(function () {
                return _this74.loadMarkets();
            }).then(function () {
                return _this74.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];
                    currency = account['currency_code'];

                    balances[currency] = account;
                }
                result = { 'info': response };

                for (c = 0; c < _this74.currencies.length; c++) {
                    _currency2 = _this74.currencies[c];
                    _account2 = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency2 in balances) {
                        _account2['total'] = balances[_currency2]['amount'];
                        _account2['free'] = balances[_currency2]['available'];
                        _account2['used'] = _account2['total'] - _account2['free'];
                    }
                    result[_currency2] = _account2;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this75 = this,
                _arguments63 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments63.length > 1 && _arguments63[1] !== undefined ? _arguments63[1] : {};
                return _this75.loadMarkets();
            }).then(function () {
                return _this75.publicGetBoard(_this75.extend({
                    'product_code': _this75.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this75.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this75.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['size']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this76 = this;

            return Promise.resolve().then(function () {
                return _this76.loadMarkets();
            }).then(function () {
                return _this76.publicGetTicker({
                    'product_code': _this76.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this76.parse8601(ticker['timestamp']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this76.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['best_bid']),
                    'ask': parseFloat(ticker['best_ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ltp']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_by_product']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this77 = this,
                _arguments65 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments65.length > 1 && _arguments65[1] !== undefined ? _arguments65[1] : {};
                return _this77.loadMarkets();
            }).then(function () {
                return _this77.publicGetExecutions(_this77.extend({
                    'product_code': _this77.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this78 = this,
                _arguments66 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments66.length > 4 && _arguments66[4] !== undefined ? _arguments66[4] : undefined;
                params = _arguments66.length > 5 && _arguments66[5] !== undefined ? _arguments66[5] : {};
                return _this78.loadMarkets();
            }).then(function () {
                order = {
                    'product_code': _this78.marketId(market),
                    'child_order_type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'price': price,
                    'size': amount
                };
                return _this78.privatePostSendchildorder(_this78.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['child_order_acceptance_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this79 = this,
                _arguments67 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments67.length > 1 && _arguments67[1] !== undefined ? _arguments67[1] : {};
                return _this79.loadMarkets();
            }).then(function () {
                return _this79.privatePostCancelchildorder(_this79.extend({
                    'parent_order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                nonce,
                auth,
                _this80 = this,
                _arguments68 = arguments;

            api = _arguments68.length > 1 && _arguments68[1] !== undefined ? _arguments68[1] : 'public';
            method = _arguments68.length > 2 && _arguments68[2] !== undefined ? _arguments68[2] : 'GET';
            params = _arguments68.length > 3 && _arguments68[3] !== undefined ? _arguments68[3] : {};
            headers = _arguments68.length > 4 && _arguments68[4] !== undefined ? _arguments68[4] : undefined;
            body = _arguments68.length > 5 && _arguments68[5] !== undefined ? _arguments68[5] : undefined;
            request = '/' + _this80.version + '/';

            if (api == 'private') {
                request += 'me/';
            }request += path;
            url = _this80.urls['api'] + request;

            if (api == 'public') {
                if (Object.keys(params).length) {
                    url += '?' + _this80.urlencode(params);
                }
            } else {
                nonce = _this80.nonce().toString();

                body = _this80.json(params);
                auth = [nonce, method, request, body].join('');

                headers = {
                    'ACCESS-KEY': _this80.apiKey,
                    'ACCESS-TIMESTAMP': nonce,
                    'ACCESS-SIGN': _this80.hmac(_this80.encode(auth), _this80.secret),
                    'Content-Type': 'application/json'
                };
            }
            return _this80.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitlish = {

        'id': 'bitlish',
        'name': 'bitlish',
        'countries': ['GB', 'EU', 'RU'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',
            'api': 'https://bitlish.com/api',
            'www': 'https://bitlish.com',
            'doc': 'https://bitlish.com/api'
        },
        'api': {
            'public': {
                'get': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history']
            },
            'private': {
                'post': ['accounts_operations', 'balance', 'cancel_trade', 'cancel_trades_by_ids', 'cancel_all_trades', 'create_bcode', 'create_template_wallet', 'create_trade', 'deposit', 'list_accounts_operations_from_ts', 'list_active_trades', 'list_bcodes', 'list_my_matches_from_ts', 'list_my_trades', 'list_my_trads_from_ts', 'list_payment_methods', 'list_payments', 'redeem_code', 'resign', 'signin', 'signout', 'trade_details', 'trade_options', 'withdraw', 'withdraw_by_id']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                market,
                id,
                symbol,
                _symbol$split,
                _symbol$split2,
                base,
                quote,
                _this81 = this;

            return Promise.resolve().then(function () {
                return _this81.publicGetPairs();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split = symbol.split('/');
                    _symbol$split2 = _slicedToArray(_symbol$split, 2);
                    base = _symbol$split2[0];
                    quote = _symbol$split2[1];
                    // issue #4 bitlish names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['max']),
                'low': parseFloat(ticker['min']),
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': parseFloat(ticker['first']),
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this82 = this;

            return Promise.resolve().then(function () {
                return _this82.loadMarkets();
            }).then(function () {
                return _this82.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this82.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this82.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                ticker,
                _this83 = this;

            return Promise.resolve().then(function () {
                return _this83.loadMarkets();
            }).then(function () {
                p = _this83.market(market);
                return _this83.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];

                return _this83.parseTicker(ticker, p);
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this84 = this,
                _arguments72 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments72.length > 1 && _arguments72[1] !== undefined ? _arguments72[1] : {};
                return _this84.loadMarkets();
            }).then(function () {
                return _this84.publicGetTradesDepth(_this84.extend({
                    'pair_id': _this84.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(parseInt(orderbook['last']) / 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this84.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this85 = this,
                _arguments73 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments73.length > 1 && _arguments73[1] !== undefined ? _arguments73[1] : {};
                return _this85.loadMarkets();
            }).then(function () {
                return _this85.publicGetTradesHistory(_this85.extend({
                    'pair_id': _this85.marketId(market)
                }, params));
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                currencies,
                balance,
                c,
                currency,
                account,
                _c,
                _currency3,
                _account3,
                _this86 = this;

            return Promise.resolve().then(function () {
                return _this86.loadMarkets();
            }).then(function () {
                return _this86.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                currencies = Object.keys(response);
                balance = {};

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = response[currency];

                    currency = currency.toUpperCase();
                    // issue #4 bitlish names Dash as DSH, instead of DASH
                    if (currency == 'DSH') {
                        currency = 'DASH';
                    }balance[currency] = account;
                }
                for (_c = 0; _c < _this86.currencies.length; _c++) {
                    _currency3 = _this86.currencies[_c];
                    _account3 = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency3 in balance) {
                        _account3['free'] = parseFloat(balance[_currency3]['funds']);
                        _account3['used'] = parseFloat(balance[_currency3]['holded']);
                        _account3['total'] = _this86.sum(_account3['free'], _account3['used']);
                    }
                    result[_currency3] = _account3;
                }
                return result;
            });
        },
        signIn: function signIn() {
            return this.privatePostSignin({
                'login': this.login,
                'passwd': this.password
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this87 = this,
                _arguments75 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments75.length > 4 && _arguments75[4] !== undefined ? _arguments75[4] : undefined;
                params = _arguments75.length > 5 && _arguments75[5] !== undefined ? _arguments75[5] : {};
                return _this87.loadMarkets();
            }).then(function () {
                order = {
                    'pair_id': _this87.marketId(market),
                    'dir': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this87.privatePostCreateTrade(_this87.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this88 = this;

            return Promise.resolve().then(function () {
                return _this88.loadMarkets();
            }).then(function () {
                return _this88.privatePostCancelTrade({ 'id': id });
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                body = this.json(this.extend({ 'token': this.apiKey }, params));
                headers = { 'Content-Type': 'application/json' };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmarket = {

        'id': 'bitmarket',
        'name': 'BitMarket',
        'countries': ['PL', 'EU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',
            'api': {
                'public': 'https://www.bitmarket.net',
                'private': 'https://www.bitmarket.pl/api2/' // last slash is critical
            },
            'www': ['https://www.bitmarket.pl', 'https://www.bitmarket.net'],
            'doc': ['https://www.bitmarket.net/docs.php?file=api_public.html', 'https://www.bitmarket.net/docs.php?file=api_private.html', 'https://github.com/bitmarket-net/api']
        },
        'api': {
            'public': {
                'get': ['json/{market}/ticker', 'json/{market}/orderbook', 'json/{market}/trades', 'json/ctransfer', 'graphs/{market}/90m', 'graphs/{market}/6h', 'graphs/{market}/1d', 'graphs/{market}/7d', 'graphs/{market}/1m', 'graphs/{market}/3m', 'graphs/{market}/6m', 'graphs/{market}/1y']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orders', 'trades', 'history', 'withdrawals', 'tradingdesk', 'tradingdeskStatus', 'tradingdeskConfirm', 'cryptotradingdesk', 'cryptotradingdeskStatus', 'cryptotradingdeskConfirm', 'withdraw', 'withdrawFiat', 'withdrawPLNPP', 'withdrawFiatFast', 'deposit', 'transfer', 'transfers', 'marginList', 'marginOpen', 'marginClose', 'marginCancel', 'marginModify', 'marginBalanceAdd', 'marginBalanceRemove', 'swapList', 'swapOpen', 'swapClose']
            }
        },
        'markets': {
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' },
            'PlnX/BTC': { 'id': 'PlnxBTC', 'symbol': 'PlnX/BTC', 'base': 'PlnX', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this89 = this;

            return Promise.resolve().then(function () {
                return _this89.loadMarkets();
            }).then(function () {
                return _this89.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['balances'];
                result = { 'info': data };

                for (c = 0; c < _this89.currencies.length; c++) {
                    currency = _this89.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['available']) {
                        account['free'] = balance['available'][currency];
                    }if (currency in balance['blocked']) {
                        account['used'] = balance['blocked'][currency];
                    }account['total'] = _this89.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this90 = this,
                _arguments78 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments78.length > 1 && _arguments78[1] !== undefined ? _arguments78[1] : {};
                return _this90.publicGetJsonMarketOrderbook(_this90.extend({
                    'market': _this90.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this90.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this90.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this91 = this;

            return Promise.resolve().then(function () {
                return _this91.publicGetJsonMarketTicker({
                    'market': _this91.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this91.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this91.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this92 = this,
                _arguments80 = arguments;

            params = _arguments80.length > 1 && _arguments80[1] !== undefined ? _arguments80[1] : {};

            return _this92.publicGetJsonMarketTrades(_this92.extend({
                'market': _this92.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                result,
                _this93 = this,
                _arguments81 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments81.length > 4 && _arguments81[4] !== undefined ? _arguments81[4] : undefined;
                params = _arguments81.length > 5 && _arguments81[5] !== undefined ? _arguments81[5] : {};
                return _this93.privatePostTrade(_this93.extend({
                    'market': _this93.marketId(market),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response
                };

                if ('id' in response['order']) {
                    result['id'] = response['id'];
                }return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this94 = this;

            return _this94.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path + '.json', params);
            } else {
                var nonce = this.nonce();
                var query = this.extend({
                    'tonce': nonce,
                    'method': path
                }, params);
                body = this.urlencode(query);
                headers = {
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmex = {

        'id': 'bitmex',
        'name': 'BitMEX',
        'countries': 'SC', // Seychelles
        'version': 'v1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
            'api': 'https://www.bitmex.com',
            'www': 'https://www.bitmex.com',
            'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http']
        },
        'api': {
            'public': {
                'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']
            },
            'private': {
                'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],
                'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],
                'put': ['order', 'order/bulk', 'user'],
                'delete': ['apiKey', 'order', 'order/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                isFuturesContract,
                symbol,
                _this95 = this;

            return Promise.resolve().then(function () {
                return _this95.publicGetInstrumentActive();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    base = market['underlying'];
                    quote = market['quoteCurrency'];
                    isFuturesContract = id != base + quote;

                    base = _this95.commonCurrencyCode(base);
                    quote = _this95.commonCurrencyCode(quote);
                    symbol = isFuturesContract ? id : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                b,
                balance,
                currency,
                account,
                _this96 = this;

            return Promise.resolve().then(function () {
                return _this96.loadMarkets();
            }).then(function () {
                return _this96.privateGetUserMargin({ 'currency': 'all' });
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    currency = balance['currency'].toUpperCase();

                    currency = _this96.commonCurrencyCode(currency);
                    account = {
                        'free': balance['availableMargin'],
                        'used': undefined,
                        'total': balance['amount']
                    };

                    if (currency == 'BTC') {
                        account['free'] = account['free'] * 0.00000001;
                        account['total'] = account['total'] * 0.00000001;
                    }
                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                o,
                order,
                side,
                amount,
                price,
                _this97 = this,
                _arguments85 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments85.length > 1 && _arguments85[1] !== undefined ? _arguments85[1] : {};
                return _this97.loadMarkets();
            }).then(function () {
                return _this97.publicGetOrderBookL2(_this97.extend({
                    'symbol': _this97.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this97.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this97.iso8601(timestamp)
                };

                for (o = 0; o < orderbook.length; o++) {
                    order = orderbook[o];
                    side = order['side'] == 'Sell' ? 'asks' : 'bids';
                    amount = order['size'];
                    price = order['price'];

                    result[side].push([price, amount]);
                }
                result['bids'] = _this97.sortBy(result['bids'], 0, true);
                result['asks'] = _this97.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var request,
                quotes,
                quotesLength,
                quote,
                tickers,
                ticker,
                timestamp,
                _this98 = this;

            return Promise.resolve().then(function () {
                return _this98.loadMarkets();
            }).then(function () {
                request = {
                    'symbol': _this98.marketId(market),
                    'binSize': '1d',
                    'partial': true,
                    'count': 1,
                    'reverse': true
                };
                return _this98.publicGetQuoteBucketed(request);
            }).then(function (_resp) {
                quotes = _resp;
                quotesLength = quotes.length;
                quote = quotes[quotesLength - 1];
                return _this98.publicGetTradeBucketed(request);
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[0];
                timestamp = _this98.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this98.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(quote['bidPrice']),
                    'ask': parseFloat(quote['askPrice']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['homeNotional']),
                    'quoteVolume': parseFloat(ticker['foreignNotional']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this99 = this,
                _arguments87 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments87.length > 1 && _arguments87[1] !== undefined ? _arguments87[1] : {};
                return _this99.loadMarkets();
            }).then(function () {
                return _this99.publicGetTrade(_this99.extend({
                    'symbol': _this99.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this100 = this,
                _arguments88 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments88.length > 4 && _arguments88[4] !== undefined ? _arguments88[4] : undefined;
                params = _arguments88.length > 5 && _arguments88[5] !== undefined ? _arguments88[5] : {};
                return _this100.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this100.marketId(market),
                    'side': _this100.capitalize(side),
                    'orderQty': amount,
                    'ordType': _this100.capitalize(type)
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this100.privatePostOrder(_this100.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this101 = this;

            return Promise.resolve().then(function () {
                return _this101.loadMarkets();
            }).then(function () {
                return _this101.privateDeleteOrder({ 'orderID': id });
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var query = '/api/' + this.version + '/' + path;
            if (Object.keys(params).length) query += '?' + this.urlencode(params);
            var url = this.urls['api'] + query;
            if (api == 'private') {
                var nonce = this.nonce().toString();
                if (method == 'POST') if (Object.keys(params).length) body = this.json(params);
                var request = [method, query, nonce, body || ''].join('');
                headers = {
                    'Content-Type': 'application/json',
                    'api-nonce': nonce,
                    'api-key': this.apiKey,
                    'api-signature': this.hmac(this.encode(request), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitso = {

        'id': 'bitso',
        'name': 'Bitso',
        'countries': 'MX', // Mexico
        'rateLimit': 2000, // 30 requests per minute
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',
            'api': 'https://api.bitso.com',
            'www': 'https://bitso.com',
            'doc': 'https://bitso.com/api_info'
        },
        'api': {
            'public': {
                'get': ['available_books', 'ticker', 'order_book', 'trades']
            },
            'private': {
                'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],
                'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal'],
                'delete': ['orders/{oid}', 'orders/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split3,
                _symbol$split4,
                base,
                quote,
                _this102 = this;

            return Promise.resolve().then(function () {
                return _this102.publicGetAvailableBooks();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['payload'].length; p++) {
                    market = markets['payload'][p];
                    id = market['book'];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split3 = symbol.split('/');
                    _symbol$split4 = _slicedToArray(_symbol$split3, 2);
                    base = _symbol$split4[0];
                    quote = _symbol$split4[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this103 = this;

            return Promise.resolve().then(function () {
                return _this103.loadMarkets();
            }).then(function () {
                return _this103.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['payload']['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'].toUpperCase();
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['locked']),
                        'total': parseFloat(balance['total'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this104 = this,
                _arguments92 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments92.length > 1 && _arguments92[1] !== undefined ? _arguments92[1] : {};
                return _this104.loadMarkets();
            }).then(function () {
                return _this104.publicGetOrderBook(_this104.extend({
                    'book': _this104.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['payload'];
                timestamp = _this104.parse8601(orderbook['updated_at']);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this104.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this105 = this;

            return Promise.resolve().then(function () {
                return _this105.loadMarkets();
            }).then(function () {
                return _this105.publicGetTicker({
                    'book': _this105.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['payload'];
                timestamp = _this105.parse8601(ticker['created_at']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this105.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this106 = this,
                _arguments94 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments94.length > 1 && _arguments94[1] !== undefined ? _arguments94[1] : {};
                return _this106.loadMarkets();
            }).then(function () {
                return _this106.publicGetTrades(_this106.extend({
                    'book': _this106.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this107 = this,
                _arguments95 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments95.length > 4 && _arguments95[4] !== undefined ? _arguments95[4] : undefined;
                params = _arguments95.length > 5 && _arguments95[5] !== undefined ? _arguments95[5] : {};
                return _this107.loadMarkets();
            }).then(function () {
                order = {
                    'book': _this107.marketId(market),
                    'side': side,
                    'type': type,
                    'major': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this107.privatePostOrders(_this107.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['payload']['oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this108 = this;

            return Promise.resolve().then(function () {
                return _this108.loadMarkets();
            }).then(function () {
                return _this108.privateDeleteOrders({ 'oid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                query,
                url,
                nonce,
                request,
                signature,
                auth,
                response,
                _test3,
                _this109 = this,
                _arguments97 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments97.length > 1 && _arguments97[1] !== undefined ? _arguments97[1] : 'public';
                method = _arguments97.length > 2 && _arguments97[2] !== undefined ? _arguments97[2] : 'GET';
                params = _arguments97.length > 3 && _arguments97[3] !== undefined ? _arguments97[3] : {};
                headers = _arguments97.length > 4 && _arguments97[4] !== undefined ? _arguments97[4] : undefined;
                body = _arguments97.length > 5 && _arguments97[5] !== undefined ? _arguments97[5] : undefined;
                query = '/' + _this109.version + '/' + _this109.implodeParams(path, params);
                url = _this109.urls['api'] + query;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this109.urlencode(params);
                    }
                } else {
                    if (Object.keys(params).length) {
                        body = _this109.json(params);
                    }nonce = _this109.nonce().toString();
                    request = [nonce, method, query, body || ''].join('');
                    signature = _this109.hmac(_this109.encode(request), _this109.encode(_this109.secret));
                    auth = _this109.apiKey + ':' + nonce + ':' + signature;

                    headers = { 'Authorization': "Bitso " + auth };
                }
                return _this109.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test3 = 'success' in response;

                if (_test3 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this109.id + ' ' + _this109.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitstamp = {

        'id': 'bitstamp',
        'name': 'Bitstamp',
        'countries': 'GB',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
            'api': 'https://www.bitstamp.net/api',
            'www': 'https://www.bitstamp.net',
            'doc': 'https://www.bitstamp.net/api'
        },
        'api': {
            'public': {
                'get': ['order_book/{id}/', 'ticker_hour/{id}/', 'ticker/{id}/', 'transactions/{id}/']
            },
            'private': {
                'post': ['balance/', 'balance/{id}/', 'buy/{id}/', 'buy/market/{id}/', 'cancel_order/', 'liquidation_address/info/', 'liquidation_address/new/', 'open_orders/all/', 'open_orders/{id}/', 'sell/{id}/', 'sell/market/{id}/', 'transfer-from-main/', 'transfer-to-main/', 'user_transactions/', 'user_transactions/{id}/', 'withdrawal/cancel/', 'withdrawal/open/', 'withdrawal/status/', 'xrp_address/', 'xrp_withdrawal/']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD' },
            'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR' },
            'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this110 = this,
                _arguments98 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments98.length > 1 && _arguments98[1] !== undefined ? _arguments98[1] : {};
                return _this110.publicGetOrderBookId(_this110.extend({
                    'id': _this110.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this110.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this111 = this;

            return Promise.resolve().then(function () {
                return _this111.publicGetTickerId({
                    'id': _this111.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this111.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']);
            var side = trade['type'] == 0 ? 'buy' : 'sell';
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                response,
                _this112 = this,
                _arguments100 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments100.length > 1 && _arguments100[1] !== undefined ? _arguments100[1] : {};
                m = _this112.market(market);
                return _this112.publicGetTransactionsId(_this112.extend({
                    'id': m['id'],
                    'time': 'minute'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this112.parseTrades(response, m);
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                lowercase,
                total,
                free,
                used,
                account,
                _this113 = this;

            return Promise.resolve().then(function () {
                return _this113.privatePostBalance();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this113.currencies.length; c++) {
                    currency = _this113.currencies[c];
                    lowercase = currency.toLowerCase();
                    total = lowercase + '_balance';
                    free = lowercase + '_available';
                    used = lowercase + '_reserved';
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (free in balance) {
                        account['free'] = parseFloat(balance[free]);
                    }if (used in balance) {
                        account['used'] = parseFloat(balance[used]);
                    }if (total in balance) {
                        account['total'] = parseFloat(balance[total]);
                    }result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this114 = this,
                _arguments102 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments102.length > 4 && _arguments102[4] !== undefined ? _arguments102[4] : undefined;
                params = _arguments102.length > 5 && _arguments102[5] !== undefined ? _arguments102[5] : {};
                method = 'privatePost' + _this114.capitalize(side);
                order = {
                    'id': _this114.marketId(market),
                    'amount': amount
                };

                if (type == 'market') {
                    method += 'Market';
                } else {
                    order['price'] = price;
                }method += 'Id';
                return _this114[method](_this114.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this115 = this;

            return _this115.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _this116 = this,
                _arguments104 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments104.length > 1 && _arguments104[1] !== undefined ? _arguments104[1] : 'public';
                method = _arguments104.length > 2 && _arguments104[2] !== undefined ? _arguments104[2] : 'GET';
                params = _arguments104.length > 3 && _arguments104[3] !== undefined ? _arguments104[3] : {};
                headers = _arguments104.length > 4 && _arguments104[4] !== undefined ? _arguments104[4] : undefined;
                body = _arguments104.length > 5 && _arguments104[5] !== undefined ? _arguments104[5] : undefined;
                url = _this116.urls['api'] + '/' + _this116.version + '/' + _this116.implodeParams(path, params);
                query = _this116.omit(params, _this116.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this116.urlencode(query);
                    }
                } else {
                    if (!_this116.uid) {
                        throw new AuthenticationError(_this116.id + ' requires `' + _this116.id + '.uid` property for authentication');
                    }nonce = _this116.nonce().toString();
                    auth = nonce + _this116.uid + _this116.apiKey;
                    signature = _this116.encode(_this116.hmac(_this116.encode(auth), _this116.encode(_this116.secret)));

                    query = _this116.extend({
                        'key': _this116.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query);
                    body = _this116.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this116.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this116.id + ' ' + _this116.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bittrex = {

        'id': 'bittrex',
        'name': 'Bittrex',
        'countries': 'US',
        'version': 'v1.1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
            'api': 'https://bittrex.com/api',
            'www': 'https://bittrex.com',
            'doc': ['https://bittrex.com/Home/Api', 'https://www.npmjs.org/package/node.bittrex.api']
        },
        'api': {
            'public': {
                'get': ['currencies', 'markethistory', 'markets', 'marketsummaries', 'marketsummary', 'orderbook', 'ticker']
            },
            'account': {
                'get': ['balance', 'balances', 'depositaddress', 'deposithistory', 'order', 'orderhistory', 'withdrawalhistory', 'withdraw']
            },
            'market': {
                'get': ['buylimit', 'buymarket', 'cancel', 'openorders', 'selllimit', 'sellmarket']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this117 = this;

            return Promise.resolve().then(function () {
                return _this117.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];

                    base = _this117.commonCurrencyCode(base);
                    quote = _this117.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                indexed,
                c,
                currency,
                account,
                balance,
                _this118 = this;

            return Promise.resolve().then(function () {
                return _this118.loadMarkets();
            }).then(function () {
                return _this118.accountGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                indexed = _this118.indexBy(balances, 'Currency');

                for (c = 0; c < _this118.currencies.length; c++) {
                    currency = _this118.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in indexed) {
                        balance = indexed[currency];

                        account['free'] = balance['Available'];
                        account['used'] = balance['Balance'] - balance['Available'];
                        account['total'] = balance['Balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        parseBidAsk: function parseBidAsk(bidask) {
            var price = parseFloat(bidask['Rate']);
            var amount = parseFloat(bidask['Quantity']);
            return [price, amount];
        },
        parseBidAsks: function parseBidAsks(bidasks) {
            var result = [];
            for (var i = 0; i < bidasks.length; i++) {
                result.push(this.parseBidAsk(bidasks[i]));
            }
            return result;
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                _this119 = this,
                _arguments107 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments107.length > 1 && _arguments107[1] !== undefined ? _arguments107[1] : {};
                return _this119.loadMarkets();
            }).then(function () {
                return _this119.publicGetOrderbook(_this119.extend({
                    'market': _this119.marketId(market),
                    'type': 'both',
                    'depth': 50
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this119.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this119.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];

                    result[key] = _this119.parseBidAsks(orderbook[side]);
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['TimeStamp']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['Bid']),
                'ask': parseFloat(ticker['Ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['Last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _id$split,
                _id$split2,
                quote,
                base,
                _this120 = this;

            return Promise.resolve().then(function () {
                return _this120.loadMarkets();
            }).then(function () {
                return _this120.publicGetMarketsummaries();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['MarketName'];
                    market = undefined;
                    symbol = id;

                    if (id in _this120.markets_by_id) {
                        market = _this120.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        _id$split = id.split('-');
                        _id$split2 = _slicedToArray(_id$split, 2);
                        quote = _id$split2[0];
                        base = _id$split2[1];

                        base = _this120.commonCurrencyCode(base);
                        quote = _this120.commonCurrencyCode(quote);
                        symbol = base + '/' + quote;
                    }
                    result[symbol] = _this120.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var m,
                response,
                ticker,
                _this121 = this;

            return Promise.resolve().then(function () {
                return _this121.loadMarkets();
            }).then(function () {
                m = _this121.market(market);
                return _this121.publicGetMarketsummary({
                    'market': m['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][0];

                return _this121.parseTicker(ticker, m);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['TimeStamp']);
            var side = undefined;
            if (trade['OrderType'] == 'BUY') {
                side = 'buy';
            } else if (trade['OrderType'] == 'SELL') {
                side = 'sell';
            }
            var type = undefined;
            return {
                'id': trade['Id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['Price'],
                'amount': trade['Quantity']
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                response,
                _this122 = this,
                _arguments110 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments110.length > 1 && _arguments110[1] !== undefined ? _arguments110[1] : {};
                return _this122.loadMarkets();
            }).then(function () {
                m = _this122.market(market);
                return _this122.publicGetMarkethistory(_this122.extend({
                    'market': m['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this122.parseTrades(response['result'], m);
            });
        },
        fetchMyOpenOrders: function fetchMyOpenOrders() {
            var market,
                params,
                m,
                response,
                _this123 = this,
                _arguments111 = arguments;

            return Promise.resolve().then(function () {
                market = _arguments111.length > 0 && _arguments111[0] !== undefined ? _arguments111[0] : undefined;
                params = _arguments111.length > 1 && _arguments111[1] !== undefined ? _arguments111[1] : {};
                m = _this123.market(market);
                return _this123.privatePostReturnOpenOrders(_this123.extend({
                    'currencyPair': m['id']
                }));
            }).then(function (_resp) {
                response = _resp;

                return _this123.parseOrders(response['result'], market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                result,
                _this124 = this,
                _arguments112 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments112.length > 4 && _arguments112[4] !== undefined ? _arguments112[4] : undefined;
                params = _arguments112.length > 5 && _arguments112[5] !== undefined ? _arguments112[5] : {};
                return _this124.loadMarkets();
            }).then(function () {
                method = 'marketGet' + _this124.capitalize(side) + type;
                order = {
                    'market': _this124.marketId(market),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this124[method](_this124.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response,
                    'id': response['result']['uuid']
                };

                return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this125 = this;

            return Promise.resolve().then(function () {
                return _this125.loadMarkets();
            }).then(function () {
                return _this125.marketGetCancel({ 'uuid': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = order['Type'] == 'LIMIT_BUY' ? 'buy' : 'sell';
            var open = order['IsOpen'];
            var canceled = order['CancelInitiated'];
            var status = undefined;
            if (open) {
                status = 'open';
            } else if (canceled) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var exchange = order['Exchange'];
                if (exchange in this.markets_by_id) {
                    market = this.markets_by_id[exchange];
                    symbol = ['symbol'];
                }
            }
            var timestamp = this.parse8601(order['Opened']);
            var result = {
                'info': order,
                'id': order['OrderUuid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': 'limit',
                'side': side,
                'price': order['PricePerUnit'],
                'amount': order['Quantity'],
                'remaining': order['QuantityRemaining'],
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                _this126 = this;

            return Promise.resolve().then(function () {
                return _this126.loadMarkets();
            }).then(function () {
                return _this126.accountGetOrder({ 'uuid': id });
            }).then(function (_resp) {
                response = _resp;

                return _this126.parseOrder(response['result']);
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                signature,
                response,
                _test4,
                _this127 = this,
                _arguments115 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments115.length > 1 && _arguments115[1] !== undefined ? _arguments115[1] : 'public';
                method = _arguments115.length > 2 && _arguments115[2] !== undefined ? _arguments115[2] : 'GET';
                params = _arguments115.length > 3 && _arguments115[3] !== undefined ? _arguments115[3] : {};
                headers = _arguments115.length > 4 && _arguments115[4] !== undefined ? _arguments115[4] : undefined;
                body = _arguments115.length > 5 && _arguments115[5] !== undefined ? _arguments115[5] : undefined;
                url = _this127.urls['api'] + '/' + _this127.version + '/';

                if (api == 'public') {
                    url += api + '/' + method.toLowerCase() + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this127.urlencode(params);
                    }
                } else {
                    nonce = _this127.nonce();

                    url += api + '/';
                    if (api == 'account' && path != 'withdraw' || path == 'openorders') {
                        url += method.toLowerCase();
                    }url += path + '?' + _this127.urlencode(_this127.extend({
                        'nonce': nonce,
                        'apikey': _this127.apiKey
                    }, params));
                    signature = _this127.hmac(_this127.encode(url), _this127.encode(_this127.secret), 'sha512');

                    headers = { 'apisign': signature };
                }
                return _this127.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test4 = 'success' in response;

                if (_test4 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this127.id + ' ' + _this127.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var blinktrade = {

        'id': 'blinktrade',
        'name': 'BlinkTrade',
        'countries': ['US', 'VE', 'VN', 'BR', 'PK', 'CL'],
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990968-75d9c884-6470-11e7-9073-46756c8e7e8c.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://blinktrade.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'api': {
            'public': {
                'get': ['{currency}/ticker', // ?crypto_currency=BTC
                '{currency}/orderbook', // ?crypto_currency=BTC
                '{currency}/trades']
            },
            'private': {
                'post': ['D', // order
                'F', // cancel order
                'U2', // balance
                'U4', // my orders
                'U6', // withdraw
                'U18', // deposit
                'U24', // confirm withdrawal
                'U26', // list withdrawals
                'U30', // list deposits
                'U34', // ledger
                'U70']
            }
        },
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        },

        fetchBalance: function fetchBalance() {
            var _this128 = this;

            return _this128.privatePostU2({
                'BalanceReqID': _this128.nonce()
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this129 = this,
                _arguments117 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments117.length > 1 && _arguments117[1] !== undefined ? _arguments117[1] : {};
                p = _this129.market(market);
                return _this129.publicGetCurrencyOrderbook(_this129.extend({
                    'currency': p['quote'],
                    'crypto_currency': p['base']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this129.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this129.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                timestamp,
                lowercaseQuote,
                quoteVolume,
                _this130 = this;

            return Promise.resolve().then(function () {
                p = _this130.market(market);
                return _this130.publicGetCurrencyTicker({
                    'currency': p['quote'],
                    'crypto_currency': p['base']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this130.milliseconds();
                lowercaseQuote = p['quote'].toLowerCase();
                quoteVolume = 'vol_' + lowercaseQuote;

                return {
                    'timestamp': timestamp,
                    'datetime': _this130.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                p,
                _this131 = this,
                _arguments119 = arguments;

            params = _arguments119.length > 1 && _arguments119[1] !== undefined ? _arguments119[1] : {};
            p = _this131.market(market);

            return _this131.publicGetCurrencyTrades(_this131.extend({
                'currency': p['quote'],
                'crypto_currency': p['base']
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                order,
                response,
                _this132 = this,
                _arguments120 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments120.length > 4 && _arguments120[4] !== undefined ? _arguments120[4] : undefined;
                params = _arguments120.length > 5 && _arguments120[5] !== undefined ? _arguments120[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this132.id + ' allows limit orders only');
                }p = _this132.market(market);
                order = {
                    'ClOrdID': _this132.nonce(),
                    'Symbol': p['id'],
                    'Side': _this132.capitalize(side),
                    'OrdType': 2,
                    'Price': price,
                    'OrderQty': amount,
                    'BrokerID': p['brokerId']
                };
                return _this132.privatePostD(_this132.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['OrderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this133 = this,
                _arguments121 = arguments;

            params = _arguments121.length > 1 && _arguments121[1] !== undefined ? _arguments121[1] : {};

            return _this133.privatePostF(_this133.extend({
                'ClOrdID': id
            }, params));
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce().toString();
                var request = this.extend({ 'MsgType': path }, query);
                body = this.json(request);
                headers = {
                    'APIKey': this.apiKey,
                    'Nonce': nonce,
                    'Signature': this.hmac(this.encode(nonce), this.encode(this.secret)),
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bl3p = {

        'id': 'bl3p',
        'name': 'BL3P',
        'countries': ['NL', 'EU'], // Netherlands, EU
        'rateLimit': 1000,
        'version': '1',
        'comment': 'An exchange market by BitonicNL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
            'api': 'https://api.bl3p.eu',
            'www': ['https://bl3p.eu', 'https://bitonic.nl'],
            'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']
        },
        'api': {
            'public': {
                'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']
            },
            'private': {
                'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this134 = this;

            return Promise.resolve().then(function () {
                return _this134.privatePostGENMKTMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['wallets'];
                result = { 'info': data };

                for (c = 0; c < _this134.currencies.length; c++) {
                    currency = _this134.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        if ('available' in balance[currency]) {
                            account['free'] = parseFloat(balance[currency]['available']['value']);
                        }
                    }
                    if (currency in balance) {
                        if ('balance' in balance[currency]) {
                            account['total'] = parseFloat(balance[currency]['balance']['value']);
                        }
                    }
                    if (account['total']) {
                        if (account['free']) {
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this135 = this,
                _arguments123 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments123.length > 1 && _arguments123[1] !== undefined ? _arguments123[1] : {};
                p = _this135.market(market);
                return _this135.publicGetMarketOrderbook(_this135.extend({
                    'market': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = _this135.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this135.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price_int'] / 100000;
                        amount = order['amount_int'] / 100000000;

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this136 = this;

            return Promise.resolve().then(function () {
                return _this136.publicGetMarketTicker({
                    'market': _this136.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this136.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']['24h']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this137 = this,
                _arguments125 = arguments;

            params = _arguments125.length > 1 && _arguments125[1] !== undefined ? _arguments125[1] : {};

            return _this137.publicGetMarketTrades(_this137.extend({
                'market': _this137.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                order,
                response,
                _this138 = this,
                _arguments126 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments126.length > 4 && _arguments126[4] !== undefined ? _arguments126[4] : undefined;
                params = _arguments126.length > 5 && _arguments126[5] !== undefined ? _arguments126[5] : {};
                p = _this138.market(market);
                order = {
                    'market': p['id'],
                    'amount_int': amount,
                    'fee_currency': p['quote'],
                    'type': side == 'buy' ? 'bid' : 'ask'
                };

                if (type == 'limit') {
                    order['price_int'] = price;
                }return _this138.privatePostMarketMoneyOrderAdd(_this138.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this139 = this;

            return _this139.privatePostMarketMoneyOrderCancel({ 'order_id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                secret,
                auth,
                signature,
                _this140 = this,
                _arguments128 = arguments;

            api = _arguments128.length > 1 && _arguments128[1] !== undefined ? _arguments128[1] : 'public';
            method = _arguments128.length > 2 && _arguments128[2] !== undefined ? _arguments128[2] : 'GET';
            params = _arguments128.length > 3 && _arguments128[3] !== undefined ? _arguments128[3] : {};
            headers = _arguments128.length > 4 && _arguments128[4] !== undefined ? _arguments128[4] : undefined;
            body = _arguments128.length > 5 && _arguments128[5] !== undefined ? _arguments128[5] : undefined;
            request = _this140.implodeParams(path, params);
            url = _this140.urls['api'] + '/' + _this140.version + '/' + request;
            query = _this140.omit(params, _this140.extractParams(path));

            if (api == 'public') {
                if (Object.keys(query).length) {
                    url += '?' + _this140.urlencode(query);
                }
            } else {
                nonce = _this140.nonce();

                body = _this140.urlencode(_this140.extend({ 'nonce': nonce }, query));
                secret = _this140.base64ToBinary(_this140.secret);
                auth = request + "\0" + body;
                signature = _this140.hmac(_this140.encode(auth), secret, 'sha512', 'base64');

                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Rest-Key': _this140.apiKey,
                    'Rest-Sign': signature
                };
            }
            return _this140.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcchina = {

        'id': 'btcchina',
        'name': 'BTCChina',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',
            'api': {
                'public': 'https://data.btcchina.com/data',
                'private': 'https://api.btcchina.com/api_trade_v1.php'
            },
            'www': 'https://www.btcchina.com',
            'doc': 'https://www.btcchina.com/apidocs'
        },
        'api': {
            'public': {
                'get': ['historydata', 'orderbook', 'ticker', 'trades']
            },
            'private': {
                'post': ['BuyIcebergOrder', 'BuyOrder', 'BuyOrder2', 'BuyStopOrder', 'CancelIcebergOrder', 'CancelOrder', 'CancelStopOrder', 'GetAccountInfo', 'getArchivedOrder', 'getArchivedOrders', 'GetDeposits', 'GetIcebergOrder', 'GetIcebergOrders', 'GetMarketDepth', 'GetMarketDepth2', 'GetOrder', 'GetOrders', 'GetStopOrder', 'GetStopOrders', 'GetTransactions', 'GetWithdrawal', 'GetWithdrawals', 'RequestWithdrawal', 'SellIcebergOrder', 'SellOrder', 'SellOrder2', 'SellStopOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                key,
                market,
                parts,
                id,
                base,
                quote,
                symbol,
                _this141 = this;

            return Promise.resolve().then(function () {
                return _this141.publicGetTicker({
                    'market': 'all'
                });
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    key = keys[p];
                    market = markets[key];
                    parts = key.split('_');
                    id = parts[1];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this142 = this;

            return Promise.resolve().then(function () {
                return _this142.loadMarkets();
            }).then(function () {
                return _this142.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };


                for (c = 0; c < _this142.currencies.length; c++) {
                    currency = _this142.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances['balance']) {
                        account['total'] = parseFloat(balances['balance'][lowercase]['amount']);
                    }if (lowercase in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][lowercase]['amount']);
                    }account['free'] = account['total'] - account['used'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this143 = this,
                _arguments131 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments131.length > 1 && _arguments131[1] !== undefined ? _arguments131[1] : {};
                return _this143.loadMarkets();
            }).then(function () {
                return _this143.publicGetOrderbook(_this143.extend({
                    'market': _this143.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['date'] * 1000;
                ;
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this143.iso8601(timestamp)
                };

                result['asks'] = _this143.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this144 = this;

            return Promise.resolve().then(function () {
                return _this144.loadMarkets();
            }).then(function () {
                p = _this144.market(market);
                return _this144.publicGetTicker({
                    'market': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers['ticker'];
                timestamp = ticker['date'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this144.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['prev_close']),
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this145 = this,
                _arguments133 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments133.length > 1 && _arguments133[1] !== undefined ? _arguments133[1] : {};
                return _this145.loadMarkets();
            }).then(function () {
                return _this145.publicGetTrades(_this145.extend({
                    'market': _this145.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                id,
                response,
                _this146 = this,
                _arguments134 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments134.length > 4 && _arguments134[4] !== undefined ? _arguments134[4] : undefined;
                params = _arguments134.length > 5 && _arguments134[5] !== undefined ? _arguments134[5] : {};
                return _this146.loadMarkets();
            }).then(function () {
                p = _this146.market(market);
                method = 'privatePost' + _this146.capitalize(side) + 'Order2';
                order = {};
                id = p['id'].toUpperCase();

                if (type == 'market') {
                    order['params'] = [undefined, amount, id];
                } else {
                    order['params'] = [price, amount, id];
                }
                return _this146[method](_this146.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                market,
                _this147 = this,
                _arguments135 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments135.length > 1 && _arguments135[1] !== undefined ? _arguments135[1] : {};
                return _this147.loadMarkets();
            }).then(function () {
                market = params['market']; // TODO fixme

                return _this147.privatePostCancelOrder(_this147.extend({
                    'params': [id, market]
                }, params));
            });
        },
        nonce: function nonce() {
            return this.microseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api] + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                if (!this.apiKey) throw new AuthenticationError(this.id + ' requires `' + this.id + '.apiKey` property for authentication');
                if (!this.secret) throw new AuthenticationError(this.id + ' requires `' + this.id + '.secret` property for authentication');
                var p = [];
                if ('params' in params) p = params['params'];
                var nonce = this.nonce();
                var request = {
                    'method': path,
                    'id': nonce,
                    'params': p
                };
                p = p.join(',');
                body = this.json(request);
                var query = 'tonce=' + nonce + '&accesskey=' + this.apiKey + '&requestmethod=' + method.toLowerCase() + '&id=' + nonce + '&method=' + path + '&params=' + p;
                var signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
                var auth = this.apiKey + ':' + signature;
                headers = {
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + this.stringToBase64(auth),
                    'Json-Rpc-Tonce': nonce
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------

    var btce = {

        'id': 'btce',
        'name': 'BTC-e',
        'countries': ['BG', 'RU'], // Bulgaria, Russia
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27843225-1b571514-611a-11e7-9208-2641a560b561.jpg',
            'api': {
                'public': 'https://btc-e.com/api',
                'private': 'https://btc-e.com/tapi'
            },
            'www': 'https://btc-e.com',
            'doc': ['https://btc-e.com/api/3/docs', 'https://btc-e.com/tapi/docs']
        },
        'api': {
            'public': {
                'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split3,
                _id$split4,
                base,
                quote,
                symbol,
                _this148 = this;

            return Promise.resolve().then(function () {
                return _this148.publicGetInfo();
            }).then(function (_resp) {
                response = _resp;
                markets = response['pairs'];
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split3 = id.split('_');
                    _id$split4 = _slicedToArray(_id$split3, 2);
                    base = _id$split4[0];
                    quote = _id$split4[1];

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    if (base == 'DSH') {
                        base = 'DASH';
                    }base = _this148.commonCurrencyCode(base);
                    quote = _this148.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                funds,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this149 = this;

            return Promise.resolve().then(function () {
                return _this149.loadMarkets();
            }).then(function () {
                return _this149.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                funds = balances['funds'];
                currencies = Object.keys(funds);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    // they misspell DASH as dsh :/

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = {
                        'free': funds[currency],
                        'used': undefined,
                        'total': funds[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                response,
                orderbook,
                timestamp,
                result,
                _this150 = this,
                _arguments138 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments138.length > 1 && _arguments138[1] !== undefined ? _arguments138[1] : {};
                return _this150.loadMarkets();
            }).then(function () {
                p = _this150.market(market);
                return _this150.publicGetDepthPair(_this150.extend({
                    'pair': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                if (p['id'] in response) {
                    orderbook = response[p['id']];
                    timestamp = _this150.milliseconds();
                    result = {
                        'bids': orderbook['bids'],
                        'asks': orderbook['asks'],
                        'timestamp': timestamp,
                        'datetime': _this150.iso8601(timestamp)
                    };

                    result['bids'] = _this150.sortBy(result['bids'], 0, true);
                    result['asks'] = _this150.sortBy(result['asks'], 0);
                    return result;
                } else {
                    throw new ExchangeError(_this150.id + ' ' + p['symbol'] + ' order book is empty or not available');
                }
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this151 = this;

            return Promise.resolve().then(function () {
                return _this151.loadMarkets();
            }).then(function () {
                p = _this151.market(market);
                return _this151.publicGetTickerPair({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this151.iso8601(timestamp),
                    'high': ticker['high'] ? ticker['high'] : undefined,
                    'low': ticker['low'] ? ticker['low'] : undefined,
                    'bid': ticker['sell'] ? ticker['buy'] : undefined,
                    'ask': ticker['buy'] ? ticker['sell'] : undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'] ? ticker['last'] : undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': ticker['avg'] ? ticker['avg'] : undefined,
                    'baseVolume': ticker['vol_cur'] ? ticker['vol_cur'] : undefined,
                    'quoteVolume': ticker['vol'] ? ticker['vol'] : undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this152 = this,
                _arguments140 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments140.length > 1 && _arguments140[1] !== undefined ? _arguments140[1] : {};
                return _this152.loadMarkets();
            }).then(function () {
                return _this152.publicGetTradesPair(_this152.extend({
                    'pair': _this152.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this153 = this,
                _arguments141 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments141.length > 4 && _arguments141[4] !== undefined ? _arguments141[4] : undefined;
                params = _arguments141.length > 5 && _arguments141[5] !== undefined ? _arguments141[5] : {};
                return _this153.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this153.marketId(market),
                    'type': side,
                    'amount': amount,
                    'rate': price
                };
                return _this153.privatePostTrade(_this153.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this154 = this;

            return Promise.resolve().then(function () {
                return _this154.loadMarkets();
            }).then(function () {
                return _this154.privatePostCancelOrder({ 'order_id': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var statusCode = order['status'];
            var status = undefined;
            if (statusCode == 0) {
                status = 'open';
            } else if (statusCode == 2 || statusCode == 3) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var timestamp = order['timestamp_created'] * 1000;
            var market = this.markets_by_id[order['pair']];
            var result = {
                'info': order,
                'id': order['id'],
                'symbol': market['symbol'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'type': 'limit',
                'side': order['type'],
                'price': order['rate'],
                'amount': order['start_amount'],
                'remaining': order['amount'],
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                order,
                _this155 = this;

            return Promise.resolve().then(function () {
                return _this155.loadMarkets();
            }).then(function () {
                return _this155.privatePostOrderInfo({ 'order_id': id });
            }).then(function (_resp) {
                response = _resp;
                order = response['return'][id];

                return _this155.parseOrder(_this155.extend({ 'id': id }, order));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                response,
                _this156 = this,
                _arguments144 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments144.length > 1 && _arguments144[1] !== undefined ? _arguments144[1] : 'public';
                method = _arguments144.length > 2 && _arguments144[2] !== undefined ? _arguments144[2] : 'GET';
                params = _arguments144.length > 3 && _arguments144[3] !== undefined ? _arguments144[3] : {};
                headers = _arguments144.length > 4 && _arguments144[4] !== undefined ? _arguments144[4] : undefined;
                body = _arguments144.length > 5 && _arguments144[5] !== undefined ? _arguments144[5] : undefined;
                url = _this156.urls['api'][api] + '/' + _this156.version + '/' + _this156.implodeParams(path, params);
                query = _this156.omit(params, _this156.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this156.urlencode(query);
                    }
                } else {
                    nonce = _this156.nonce();

                    body = _this156.urlencode(_this156.extend({
                        'nonce': nonce,
                        'method': path
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this156.apiKey,
                        'Sign': _this156.hmac(_this156.encode(body), _this156.encode(_this156.secret), 'sha512')
                    };
                }
                return _this156.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this156.id + ' ' + _this156.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var btcmarkets = {

        'id': 'btcmarkets',
        'name': 'BTC Markets',
        'countries': 'AU', // Australia
        'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg',
            'api': 'https://api.btcmarkets.net',
            'www': 'https://btcmarkets.net/',
            'doc': 'https://github.com/BTCMarkets/API'
        },
        'api': {
            'public': {
                'get': ['market/{id}/tick', 'market/{id}/orderbook', 'market/{id}/trades']
            },
            'private': {
                'get': ['account/balance', 'account/{id}/tradingfee'],
                'post': ['fundtransfer/withdrawCrypto', 'fundtransfer/withdrawEFT', 'order/create', 'order/cancel', 'order/history', 'order/open', 'order/trade/history', 'order/createBatch', // they promise it's coming soon...
                'order/detail']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC/AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC/AUD', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'ETH/AUD': { 'id': 'ETH/AUD', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD' },
            'ETC/AUD': { 'id': 'ETC/AUD', 'symbol': 'ETC/AUD', 'base': 'ETC', 'quote': 'AUD' },
            'XRP/AUD': { 'id': 'XRP/AUD', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD' },
            'BCH/AUD': { 'id': 'BCH/AUD', 'symbol': 'BCH/AUD', 'base': 'BCH', 'quote': 'AUD' },
            'LTC/BTC': { 'id': 'LTC/BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/BTC': { 'id': 'ETH/BTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'ETC/BTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRP/BTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'BCH/BTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                multiplier,
                free,
                used,
                account,
                _this157 = this;

            return Promise.resolve().then(function () {
                return _this157.loadMarkets();
            }).then(function () {
                return _this157.privateGetAccountBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    multiplier = 100000000;
                    free = parseFloat(balance['balance'] / multiplier);
                    used = parseFloat(balance['pendingFunds'] / multiplier);
                    account = {
                        'free': free,
                        'used': used,
                        'total': _this157.sum(free, used)
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        parseBidAsk: function parseBidAsk(bidask) {
            var price = bidask[0];
            var amount = bidask[1];
            return [price, amount];
        },
        parseBidAsks: function parseBidAsks(bidasks) {
            var result = [];
            for (var i = 0; i < bidasks.length; i++) {
                result.push(this.parseBidAsk(bidasks[i]));
            }
            return result;
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                m,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                _this158 = this,
                _arguments146 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments146.length > 1 && _arguments146[1] !== undefined ? _arguments146[1] : {};
                return _this158.loadMarkets();
            }).then(function () {
                m = _this158.market(market);
                return _this158.publicGetMarketIdOrderbook(_this158.extend({
                    'id': m['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this158.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];

                    result[side] = _this158.parseBidAsks(orderbook[side]);
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bestBid']),
                'ask': parseFloat(ticker['bestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume24h']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(market) {
            var m,
                ticker,
                _this159 = this;

            return Promise.resolve().then(function () {
                return _this159.loadMarkets();
            }).then(function () {
                m = _this159.market(market);
                return _this159.publicGetMarketIdTick({
                    'id': m['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this159.parseTicker(ticker, m);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this160 = this,
                _arguments148 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments148.length > 1 && _arguments148[1] !== undefined ? _arguments148[1] : {};
                return _this160.loadMarkets();
            }).then(function () {
                return _this160.publicGetMarketIdTrades(_this160.extend({
                    // 'since': 59868345231,
                    'id': _this160.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                m,
                multiplier,
                orderSide,
                order,
                response,
                _this161 = this,
                _arguments149 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments149.length > 4 && _arguments149[4] !== undefined ? _arguments149[4] : undefined;
                params = _arguments149.length > 5 && _arguments149[5] !== undefined ? _arguments149[5] : {};
                return _this161.loadMarkets();
            }).then(function () {
                m = _this161.market(market);
                multiplier = 100000000; // for price and volume
                // does BTC Markets support market orders at all?

                orderSide = side == 'buy' ? 'Bid' : 'Ask';
                order = _this161.ordered({
                    'currency': m['quote'],
                    'instrument': m['base'],
                    'price': price * multiplier,
                    'volume': amount * multiplier,
                    'orderSide': orderSide,
                    'ordertype': _this161.capitalize(type),
                    'clientRequestId': _this161.nonce().toString()
                });
                return _this161.privatePostOrderCreate(_this161.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrders: function cancelOrders(ids) {
            var _this162 = this;

            return Promise.resolve().then(function () {
                return _this162.loadMarkets();
            }).then(function () {
                return _this162.privatePostOrderCancel({ 'order_ids': ids });
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this163 = this;

            return Promise.resolve().then(function () {
                return _this163.loadMarkets();
            }).then(function () {
                return _this163.cancelOrders([id]);
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                uri,
                url,
                query,
                nonce,
                auth,
                secret,
                signature,
                response,
                _test5,
                _this164 = this,
                _arguments152 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments152.length > 1 && _arguments152[1] !== undefined ? _arguments152[1] : 'public';
                method = _arguments152.length > 2 && _arguments152[2] !== undefined ? _arguments152[2] : 'GET';
                params = _arguments152.length > 3 && _arguments152[3] !== undefined ? _arguments152[3] : {};
                headers = _arguments152.length > 4 && _arguments152[4] !== undefined ? _arguments152[4] : undefined;
                body = _arguments152.length > 5 && _arguments152[5] !== undefined ? _arguments152[5] : undefined;
                uri = '/' + _this164.implodeParams(path, params);
                url = _this164.urls['api'] + uri;
                query = _this164.omit(params, _this164.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this164.urlencode(params);
                    }
                } else {
                    nonce = _this164.nonce().toString();
                    auth = uri + "\n" + nonce + "\n";

                    headers = {
                        'Content-Type': 'application/json',
                        'apikey': _this164.apiKey,
                        'timestamp': nonce
                    };
                    if (method == 'POST') {
                        body = _this164.urlencode(query);
                        headers['Content-Length'] = body.length;
                        auth += body;
                    }
                    secret = _this164.base64ToBinary(_this164.secret);
                    signature = _this164.hmac(_this164.encode(auth), secret, 'sha512', 'base64');

                    headers['signature'] = signature;
                }
                return _this164.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test5 = api == 'private';

                if (_test5 && 'success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this164.id + ' ' + _this164.json(response));
                    }
                }
                if (_test5) {
                    return response;
                } else {
                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var btctrader = {

        'id': 'btctrader',
        'name': 'BTCTrader',
        'countries': ['TR', 'GR', 'PH'], // Turkey, Greece, Philippines
        'rateLimit': 1000,
        'comment': 'base API for BTCExchange, BTCTurk',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992404-cda1e386-649c-11e7-8dc1-40bbd2897768.jpg',
            'api': 'https://www.btctrader.com/api',
            'www': 'https://www.btctrader.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'api': {
            'public': {
                'get': ['ohlcdata', // ?last=COUNT
                'orderbook', 'ticker', 'trades']
            },
            'private': {
                'get': ['balance', 'openOrders', 'userTransactions'],
                'post': ['buy', 'cancelOrder', 'sell']
            }
        },

        fetchBalance: function fetchBalance() {
            var response,
                result,
                base,
                quote,
                symbol,
                market,
                _this165 = this;

            return Promise.resolve().then(function () {
                return _this165.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                base = {
                    'free': response['bitcoin_available'],
                    'used': response['bitcoin_reserved'],
                    'total': response['bitcoin_balance']
                };
                quote = {
                    'free': response['money_available'],
                    'used': response['money_reserved'],
                    'total': response['money_balance']
                };
                symbol = _this165.symbols[0];
                market = _this165.markets[symbol];

                result[market['base']] = base;
                result[market['quote']] = quote;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this166 = this,
                _arguments154 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments154.length > 1 && _arguments154[1] !== undefined ? _arguments154[1] : {};
                return _this166.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp'] * 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this166.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this167 = this;

            return Promise.resolve().then(function () {
                return _this167.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp'] * 1000);

                return {
                    'timestamp': timestamp,
                    'datetime': _this167.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                maxCount,
                _this168 = this,
                _arguments156 = arguments;

            params = _arguments156.length > 1 && _arguments156[1] !== undefined ? _arguments156[1] : {};
            maxCount = 50;

            return _this168.publicGetTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this169 = this,
                _arguments157 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments157.length > 4 && _arguments157[4] !== undefined ? _arguments157[4] : undefined;
                params = _arguments157.length > 5 && _arguments157[5] !== undefined ? _arguments157[5] : {};
                method = 'privatePost' + _this169.capitalize(side);
                order = {
                    'Type': side == 'buy' ? 'BuyBtc' : 'SelBtc',
                    'IsMarketOrder': type == 'market' ? 1 : 0
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['Total'] = amount;
                    } else {
                        order['Amount'] = amount;
                    }
                } else {
                    order['Price'] = price;
                    order['Amount'] = amount;
                }
                return _this169[method](_this169.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this170 = this;

            return _this170.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (this.id == 'btctrader') throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');
            var url = this.urls['api'] + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString;
                body = this.urlencode(params);
                var secret = this.base64ToString(this.secret);
                var auth = this.apiKey + nonce;
                headers = {
                    'X-PCK': this.apiKey,
                    'X-Stamp': nonce.toString(),
                    'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcexchange = extend(btctrader, {

        'id': 'btcexchange',
        'name': 'BTCExchange',
        'countries': 'PH', // Philippines
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',
            'api': 'https://www.btcexchange.ph/api',
            'www': 'https://www.btcexchange.ph',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' }
        }
    });

    //-----------------------------------------------------------------------------

    var btctradeua = {

        'id': 'btctradeua',
        'name': 'BTC Trade UA',
        'countries': 'UA', // Ukraine,
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
            'api': 'https://btc-trade.com.ua/api',
            'www': 'https://btc-trade.com.ua',
            'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'
        },
        'api': {
            'public': {
                'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']
            },
            'private': {
                'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']
            }
        },
        'markets': {
            'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH' },
            'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },
            'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },
            'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },
            'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },
            'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },
            'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },
            'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },
            'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        signIn: function signIn() {
            return this.privatePostAuth();
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                accounts,
                b,
                account,
                currency,
                balance,
                _this171 = this;

            return Promise.resolve().then(function () {
                return _this171.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('accounts' in result) {
                    accounts = response['accounts'];

                    for (b = 0; b < accounts.length; b++) {
                        account = accounts[b];
                        currency = account['currency'];
                        balance = parseFloat(account['balance']);

                        result[currency] = {
                            'free': balance,
                            'used': undefined,
                            'total': balance
                        };
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                bids,
                asks,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this172 = this,
                _arguments160 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments160.length > 1 && _arguments160[1] !== undefined ? _arguments160[1] : {};
                p = _this172.market(market);
                return _this172.publicGetTradesBuySymbol(_this172.extend({
                    'symbol': p['id']
                }, params));
            }).then(function (_resp) {
                bids = _resp;
                return _this172.publicGetTradesSellSymbol(_this172.extend({
                    'symbol': p['id']
                }, params));
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': [],
                    'asks': []
                };

                if (bids) {
                    if ('list' in bids) {
                        orderbook['bids'] = bids['list'];
                    }
                }
                if (asks) {
                    if ('list' in asks) {
                        orderbook['asks'] = asks['list'];
                    }
                }
                timestamp = _this172.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this172.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['currency_trade']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                result,
                tickerLength,
                start,
                t,
                candle,
                last,
                _this173 = this;

            return Promise.resolve().then(function () {
                return _this173.publicGetJapanStatHighSymbol({
                    'symbol': _this173.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['trades'];
                timestamp = _this173.milliseconds();
                result = {
                    'timestamp': timestamp,
                    'datetime': _this173.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
                tickerLength = ticker.length;

                if (tickerLength > 0) {
                    start = Math.max(tickerLength - 48, 0);

                    for (t = start; t < ticker.length; t++) {
                        candle = ticker[t];

                        if (typeof result['open'] == 'undefined') {
                            result['open'] = candle[1];
                        }if (typeof result['high'] == 'undefined' || result['high'] < candle[2]) {
                            result['high'] = candle[2];
                        }if (typeof result['low'] == 'undefined' || result['low'] > candle[3]) {
                            result['low'] = candle[3];
                        }if (typeof result['quoteVolume'] == 'undefined') {
                            result['quoteVolume'] = -candle[5];
                        } else {
                            result['quoteVolume'] -= candle[5];
                        }
                    }
                    last = tickerLength - 1;

                    result['close'] = ticker[last][4];
                    result['quoteVolume'] = -1 * result['quoteVolume'];
                }
                return result;
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this174 = this,
                _arguments162 = arguments;

            params = _arguments162.length > 1 && _arguments162[1] !== undefined ? _arguments162[1] : {};

            return _this174.publicGetDealsSymbol(_this174.extend({
                'symbol': _this174.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                _this175 = this,
                _arguments163 = arguments;

            price = _arguments163.length > 4 && _arguments163[4] !== undefined ? _arguments163[4] : undefined;
            params = _arguments163.length > 5 && _arguments163[5] !== undefined ? _arguments163[5] : {};

            if (type == 'market') {
                throw new ExchangeError(_this175.id + ' allows limit orders only');
            }p = _this175.market(market);
            method = 'privatePost' + _this175.capitalize(side) + 'Id';
            order = {
                'count': amount,
                'currency1': p['quote'],
                'currency': p['base'],
                'price': price
            };

            return _this175[method](_this175.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this176 = this;

            return _this176.privatePostRemoveOrderId({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += this.implodeParams(path, query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'out_order_id': nonce,
                    'nonce': nonce
                }, query));
                var auth = body + this.secret;
                headers = {
                    'public-key': this.apiKey,
                    'api-sign': this.hash(this.encode(auth), 'sha256'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcturk = extend(btctrader, {

        'id': 'btcturk',
        'name': 'BTCTurk',
        'countries': 'TR', // Turkey
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',
            'api': 'https://www.btcturk.com/api',
            'www': 'https://www.btcturk.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/TRY': { 'id': 'BTC/TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' }
        }
    });

    //-----------------------------------------------------------------------------

    var btcx = {

        'id': 'btcx',
        'name': 'BTCX',
        'countries': ['IS', 'US', 'EU'],
        'rateLimit': 1500, // support in english is very poor, unable to tell rate limits
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',
            'api': 'https://btc-x.is/api',
            'www': 'https://btc-x.is',
            'doc': 'https://btc-x.is/custom/api-document.html'
        },
        'api': {
            'public': {
                'get': ['depth/{id}/{limit}', 'ticker/{id}', 'trade/{id}/{limit}']
            },
            'private': {
                'post': ['balance', 'cancel', 'history', 'order', 'redeem', 'trade', 'withdraw']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this177 = this;

            return Promise.resolve().then(function () {
                return _this177.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balances[currency],
                        'used': undefined,
                        'total': balances[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this178 = this,
                _arguments166 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments166.length > 1 && _arguments166[1] !== undefined ? _arguments166[1] : {};
                return _this178.publicGetDepthIdLimit(_this178.extend({
                    'id': _this178.marketId(market),
                    'limit': 1000
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this178.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this178.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this179 = this;

            return Promise.resolve().then(function () {
                return _this179.publicGetTickerId({
                    'id': _this179.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['time'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this179.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['sell']),
                    'ask': parseFloat(ticker['buy']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this180 = this,
                _arguments168 = arguments;

            params = _arguments168.length > 1 && _arguments168[1] !== undefined ? _arguments168[1] : {};

            return _this180.publicGetTradeIdLimit(_this180.extend({
                'id': _this180.marketId(market),
                'limit': 1000
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this181 = this,
                _arguments169 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments169.length > 4 && _arguments169[4] !== undefined ? _arguments169[4] : undefined;
                params = _arguments169.length > 5 && _arguments169[5] !== undefined ? _arguments169[5] : {};
                return _this181.privatePostTrade(_this181.extend({
                    'type': side.toUpperCase(),
                    'market': _this181.marketId(market),
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this182 = this;

            return _this182.privatePostCancel({ 'order': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this183 = this,
                _arguments171 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments171.length > 1 && _arguments171[1] !== undefined ? _arguments171[1] : 'public';
                method = _arguments171.length > 2 && _arguments171[2] !== undefined ? _arguments171[2] : 'GET';
                params = _arguments171.length > 3 && _arguments171[3] !== undefined ? _arguments171[3] : {};
                headers = _arguments171.length > 4 && _arguments171[4] !== undefined ? _arguments171[4] : undefined;
                body = _arguments171.length > 5 && _arguments171[5] !== undefined ? _arguments171[5] : undefined;
                url = _this183.urls['api'] + '/' + _this183.version + '/';

                if (api == 'public') {
                    url += _this183.implodeParams(path, params);
                } else {
                    nonce = _this183.nonce();

                    url += api;
                    body = _this183.urlencode(_this183.extend({
                        'Method': path.toUpperCase(),
                        'Nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this183.apiKey,
                        'Signature': _this183.hmac(_this183.encode(body), _this183.encode(_this183.secret), 'sha512')
                    };
                }
                return _this183.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this183.id + ' ' + _this183.json(response['error']));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bter = {
        'id': 'bter',
        'name': 'Bter',
        'countries': ['VG', 'CN'], // British Virgin Islands, China
        'version': '2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',
            'api': {
                'public': 'https://data.bter.com/api',
                'private': 'https://api.bter.com/api'
            },
            'www': 'https://bter.com',
            'doc': 'https://bter.com/api2'
        },
        'api': {
            'public': {
                'get': ['pairs', 'marketinfo', 'marketlist', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']
            },
            'private': {
                'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this184 = this;

            return Promise.resolve().then(function () {
                return _this184.publicGetMarketlist();
            }).then(function (_resp) {
                response = _resp;
                markets = response['data'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'];
                    base = market['curr_a'];
                    quote = market['curr_b'];

                    base = _this184.commonCurrencyCode(base);
                    quote = _this184.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                code,
                account,
                _this185 = this;

            return Promise.resolve().then(function () {
                return _this185.loadMarkets();
            }).then(function () {
                return _this185.privatePostBalances();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this185.currencies.length; c++) {
                    currency = _this185.currencies[c];
                    code = _this185.commonCurrencyCode(currency);
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('available' in balance) {
                        if (currency in balance['available']) {
                            account['free'] = parseFloat(balance['available'][currency]);
                        }
                    }
                    if ('locked' in balance) {
                        if (currency in balance['locked']) {
                            account['used'] = parseFloat(balance['locked'][currency]);
                        }
                    }
                    account['total'] = _this185.sum(account['free'], account['used']);
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this186 = this,
                _arguments174 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments174.length > 1 && _arguments174[1] !== undefined ? _arguments174[1] : {};
                return _this186.loadMarkets();
            }).then(function () {
                return _this186.publicGetOrderBookId(_this186.extend({
                    'id': _this186.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this186.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this186.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                result['asks'] = _this186.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                _id$split5,
                _id$split6,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                ticker,
                market,
                _this187 = this;

            return Promise.resolve().then(function () {
                return _this187.loadMarkets();
            }).then(function () {
                return _this187.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _id$split5 = id.split('_');
                    _id$split6 = _slicedToArray(_id$split5, 2);
                    baseId = _id$split6[0];
                    quoteId = _id$split6[1];
                    base = baseId.toUpperCase();
                    quote = quoteId.toUpperCase();

                    base = _this187.commonCurrencyCode(base);
                    quote = _this187.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;
                    ticker = tickers[id];
                    market = undefined;

                    if (symbol in _this187.markets) {
                        market = _this187.markets[symbol];
                    }if (id in _this187.markets_by_id) {
                        market = _this187.markets_by_id[id];
                    }result[symbol] = _this187.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this188 = this;

            return Promise.resolve().then(function () {
                return _this188.loadMarkets();
            }).then(function () {
                p = _this188.market(market);
                return _this188.publicGetTickerId({
                    'id': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this188.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this189 = this,
                _arguments177 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments177.length > 1 && _arguments177[1] !== undefined ? _arguments177[1] : {};
                return _this189.loadMarkets();
            }).then(function () {
                return _this189.publicGetTradeHistoryId(_this189.extend({
                    'id': _this189.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this190 = this,
                _arguments178 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments178.length > 4 && _arguments178[4] !== undefined ? _arguments178[4] : undefined;
                params = _arguments178.length > 5 && _arguments178[5] !== undefined ? _arguments178[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this190.id + ' allows limit orders only');
                }return _this190.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this190.capitalize(side);
                order = {
                    'currencyPair': _this190.marketId(market),
                    'rate': price,
                    'amount': amount
                };
                return _this190[method](_this190.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderNumber']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this191 = this;

            return Promise.resolve().then(function () {
                return _this191.loadMarkets();
            }).then(function () {
                return _this191.privatePostCancelOrder({ 'orderNumber': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                prefix,
                url,
                query,
                nonce,
                request,
                signature,
                response,
                _this192 = this,
                _arguments180 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments180.length > 1 && _arguments180[1] !== undefined ? _arguments180[1] : 'public';
                method = _arguments180.length > 2 && _arguments180[2] !== undefined ? _arguments180[2] : 'GET';
                params = _arguments180.length > 3 && _arguments180[3] !== undefined ? _arguments180[3] : {};
                headers = _arguments180.length > 4 && _arguments180[4] !== undefined ? _arguments180[4] : undefined;
                body = _arguments180.length > 5 && _arguments180[5] !== undefined ? _arguments180[5] : undefined;
                prefix = api == 'private' ? api + '/' : '';
                url = _this192.urls['api'][api] + _this192.version + '/1/' + prefix + _this192.implodeParams(path, params);
                query = _this192.omit(params, _this192.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this192.urlencode(query);
                    }
                } else {
                    nonce = _this192.nonce();
                    request = { 'nonce': nonce };

                    body = _this192.urlencode(_this192.extend(request, query));
                    signature = _this192.hmac(_this192.encode(body), _this192.encode(_this192.secret), 'sha512');

                    headers = {
                        'Key': _this192.apiKey,
                        'Sign': signature,
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this192.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] != 'true') {
                        throw new ExchangeError(_this192.id + ' ' + _this192.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bxinth = {

        'id': 'bxinth',
        'name': 'BX.in.th',
        'countries': 'TH', // Thailand
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',
            'api': 'https://bx.in.th/api',
            'www': 'https://bx.in.th',
            'doc': 'https://bx.in.th/info/api'
        },
        'api': {
            'public': {
                'get': ['', // ticker
                'options', 'optionbook', 'orderbook', 'pairing', 'trade', 'tradehistory']
            },
            'private': {
                'post': ['balance', 'biller', 'billgroup', 'billpay', 'cancel', 'deposit', 'getorders', 'history', 'option-issue', 'option-bid', 'option-sell', 'option-myissue', 'option-mybid', 'option-myoptions', 'option-exercise', 'option-cancel', 'option-history', 'order', 'withdrawal', 'withdrawal-history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this193 = this;

            return Promise.resolve().then(function () {
                return _this193.publicGetPairing();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['pairing_id'].toString();
                    base = market['primary_currency'];
                    quote = market['secondary_currency'];

                    base = _this193.commonCurrencyCode(base);
                    quote = _this193.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        commonCurrencyCode: function commonCurrencyCode(currency) {
            // why would they use three letters instead of four for currency codes
            if (currency == 'DAS') return 'DASH';
            if (currency == 'DOG') return 'DOGE';
            return currency;
        },
        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                currencies,
                c,
                currency,
                code,
                account,
                _this194 = this;

            return Promise.resolve().then(function () {
                return _this194.loadMarkets();
            }).then(function () {
                return _this194.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balance'];
                result = { 'info': balance };
                currencies = Object.keys(balance);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = _this194.commonCurrencyCode(currency);
                    account = {
                        'free': parseFloat(balance[currency]['available']),
                        'used': undefined,
                        'total': parseFloat(balance[currency]['total'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this195 = this,
                _arguments183 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments183.length > 1 && _arguments183[1] !== undefined ? _arguments183[1] : {};
                return _this195.loadMarkets();
            }).then(function () {
                return _this195.publicGetOrderbook(_this195.extend({
                    'pairing': _this195.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this195.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this195.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['orderbook']['bids']['highbid']),
                'ask': parseFloat(ticker['orderbook']['asks']['highbid']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_price']),
                'change': parseFloat(ticker['change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume_24hours']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                ticker,
                market,
                symbol,
                _this196 = this;

            return Promise.resolve().then(function () {
                return _this196.loadMarkets();
            }).then(function () {
                return _this196.publicGet();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    ticker = tickers[id];
                    market = _this196.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this196.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                id,
                ticker,
                _this197 = this;

            return Promise.resolve().then(function () {
                return _this197.loadMarkets();
            }).then(function () {
                p = _this197.market(market);
                return _this197.publicGet({ 'pairing': p['id'] });
            }).then(function (_resp) {
                tickers = _resp;
                id = p['id'].toString();
                ticker = tickers[id];

                return _this197.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this198 = this,
                _arguments186 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments186.length > 1 && _arguments186[1] !== undefined ? _arguments186[1] : {};
                return _this198.loadMarkets();
            }).then(function () {
                return _this198.publicGetTrade(_this198.extend({
                    'pairing': _this198.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this199 = this,
                _arguments187 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments187.length > 4 && _arguments187[4] !== undefined ? _arguments187[4] : undefined;
                params = _arguments187.length > 5 && _arguments187[5] !== undefined ? _arguments187[5] : {};
                return _this199.loadMarkets();
            }).then(function () {
                return _this199.privatePostOrder(_this199.extend({
                    'pairing': _this199.marketId(market),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var pairing,
                _this200 = this;

            return Promise.resolve().then(function () {
                return _this200.loadMarkets();
            }).then(function () {
                pairing = undefined; // TODO fixme

                return _this200.privatePostCancel({
                    'order_id': id,
                    'pairing': pairing
                });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test6,
                _this201 = this,
                _arguments189 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments189.length > 1 && _arguments189[1] !== undefined ? _arguments189[1] : 'public';
                method = _arguments189.length > 2 && _arguments189[2] !== undefined ? _arguments189[2] : 'GET';
                params = _arguments189.length > 3 && _arguments189[3] !== undefined ? _arguments189[3] : {};
                headers = _arguments189.length > 4 && _arguments189[4] !== undefined ? _arguments189[4] : undefined;
                body = _arguments189.length > 5 && _arguments189[5] !== undefined ? _arguments189[5] : undefined;
                url = _this201.urls['api'] + '/';

                if (path) {
                    url += path + '/';
                }if (Object.keys(params).length) {
                    url += '?' + _this201.urlencode(params);
                }if (api == 'private') {
                    nonce = _this201.nonce();
                    auth = _this201.apiKey + nonce.toString() + _this201.secret;
                    signature = _this201.hash(_this201.encode(auth), 'sha256');

                    body = _this201.urlencode(_this201.extend({
                        'key': _this201.apiKey,
                        'nonce': nonce,
                        'signature': signature
                        // twofa: this.twofa,
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this201.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test6 = 'success' in response;

                    if (_test6 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this201.id + ' ' + _this201.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var ccex = {

        'id': 'ccex',
        'name': 'C-CEX',
        'countries': ['DE', 'EU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',
            'api': {
                'tickers': 'https://c-cex.com/t',
                'public': 'https://c-cex.com/t/api_pub.html',
                'private': 'https://c-cex.com/t/api.html'
            },
            'www': 'https://c-cex.com',
            'doc': 'https://c-cex.com/?id=api'
        },
        'api': {
            'tickers': {
                'get': ['coinnames', '{market}', 'pairs', 'prices', 'volume_{coin}']
            },
            'public': {
                'get': ['balancedistribution', 'markethistory', 'markets', 'marketsummaries', 'orderbook']
            },
            'private': {
                'get': ['buylimit', 'cancel', 'getbalance', 'getbalances', 'getopenorders', 'getorder', 'getorderhistory', 'mytrades', 'selllimit']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this202 = this;

            return Promise.resolve().then(function () {
                return _this202.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this203 = this;

            return Promise.resolve().then(function () {
                return _this203.loadMarkets();
            }).then(function () {
                return _this203.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    account = {
                        'free': balance['Available'],
                        'used': balance['Pending'],
                        'total': balance['Balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this204 = this,
                _arguments192 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments192.length > 1 && _arguments192[1] !== undefined ? _arguments192[1] : {};
                return _this204.loadMarkets();
            }).then(function () {
                return _this204.publicGetOrderbook(_this204.extend({
                    'market': _this204.marketId(market),
                    'type': 'both',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this204.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this204.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Rate']);
                        amount = parseFloat(order['Quantity']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastprice']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['buysupport']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                response,
                ticker,
                _this205 = this;

            return Promise.resolve().then(function () {
                return _this205.loadMarkets();
            }).then(function () {
                p = _this205.market(market);
                return _this205.tickersGetMarket({
                    'market': p['id'].toLowerCase()
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this205.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this206 = this,
                _arguments194 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments194.length > 1 && _arguments194[1] !== undefined ? _arguments194[1] : {};
                return _this206.loadMarkets();
            }).then(function () {
                return _this206.publicGetMarkethistory(_this206.extend({
                    'market': _this206.marketId(market),
                    'type': 'both',
                    'depth': 100
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                response,
                _this207 = this,
                _arguments195 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments195.length > 4 && _arguments195[4] !== undefined ? _arguments195[4] : undefined;
                params = _arguments195.length > 5 && _arguments195[5] !== undefined ? _arguments195[5] : {};
                return _this207.loadMarkets();
            }).then(function () {
                method = 'privateGet' + _this207.capitalize(side) + type;
                return _this207[method](_this207.extend({
                    'market': _this207.marketId(market),
                    'quantity': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this208 = this;

            return Promise.resolve().then(function () {
                return _this208.loadMarkets();
            }).then(function () {
                return _this208.privateGetCancel({ 'uuid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                response,
                _test7,
                _this209 = this,
                _arguments197 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments197.length > 1 && _arguments197[1] !== undefined ? _arguments197[1] : 'public';
                method = _arguments197.length > 2 && _arguments197[2] !== undefined ? _arguments197[2] : 'GET';
                params = _arguments197.length > 3 && _arguments197[3] !== undefined ? _arguments197[3] : {};
                headers = _arguments197.length > 4 && _arguments197[4] !== undefined ? _arguments197[4] : undefined;
                body = _arguments197.length > 5 && _arguments197[5] !== undefined ? _arguments197[5] : undefined;
                url = _this209.urls['api'][api];

                if (api == 'private') {
                    nonce = _this209.nonce().toString();
                    query = _this209.keysort(_this209.extend({
                        'a': path,
                        'apikey': _this209.apiKey,
                        'nonce': nonce
                    }, params));

                    url += '?' + _this209.urlencode(query);
                    headers = { 'apisign': _this209.hmac(_this209.encode(url), _this209.encode(_this209.secret), 'sha512') };
                } else {
                    if (api == 'public') {
                        url += '?' + _this209.urlencode(_this209.extend({
                            'a': 'get' + path
                        }, params));
                    } else {
                        url += '/' + _this209.implodeParams(path, params) + '.json';
                    }
                }return _this209.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'tickers') {
                    return response;
                } else {
                    _test7 = 'success' in response;

                    if (_test7 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this209.id + ' ' + _this209.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cex = {

        'id': 'cex',
        'name': 'CEX.IO',
        'countries': ['GB', 'EU', 'CY', 'RU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
            'api': 'https://cex.io/api',
            'www': 'https://cex.io',
            'doc': 'https://cex.io/cex-api'
        },
        'api': {
            'public': {
                'get': ['currency_limits', 'last_price/{pair}', 'last_prices/{currencies}', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}', 'ticker/{pair}', 'tickers/{currencies}', 'trade_history/{pair}'],
                'post': ['convert/{pair}', 'price_stats/{pair}']
            },
            'private': {
                'post': ['active_orders_status/', 'archived_orders/{pair}', 'balance/', 'cancel_order/', 'cancel_orders/{pair}', 'cancel_replace_order/{pair}', 'close_position/{pair}', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}', 'open_orders/', 'open_position/{pair}', 'open_positions/{pair}', 'place_order/{pair}', 'place_order/{pair}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split5,
                _symbol$split6,
                base,
                quote,
                _this210 = this;

            return Promise.resolve().then(function () {
                return _this210.publicGetCurrencyLimits();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['data']['pairs'].length; p++) {
                    market = markets['data']['pairs'][p];
                    id = market['symbol1'] + '/' + market['symbol2'];
                    symbol = id;
                    _symbol$split5 = symbol.split('/');
                    _symbol$split6 = _slicedToArray(_symbol$split5, 2);
                    base = _symbol$split6[0];
                    quote = _symbol$split6[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                account,
                _this211 = this;

            return Promise.resolve().then(function () {
                return _this211.loadMarkets();
            }).then(function () {
                return _this211.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this211.currencies.length; c++) {
                    currency = _this211.currencies[c];
                    account = {
                        'free': parseFloat(balances[currency]['available']),
                        'used': parseFloat(balances[currency]['orders']),
                        'total': undefined
                    };

                    account['total'] = _this211.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this212 = this,
                _arguments200 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments200.length > 1 && _arguments200[1] !== undefined ? _arguments200[1] : {};
                return _this212.loadMarkets();
            }).then(function () {
                return _this212.publicGetOrderBookPair(_this212.extend({
                    'pair': _this212.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this212.iso8601(timestamp)
                };

                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = parseInt(ticker['timestamp']) * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currencies,
                response,
                tickers,
                result,
                t,
                ticker,
                symbol,
                market,
                _this213 = this;

            return Promise.resolve().then(function () {
                return _this213.loadMarkets();
            }).then(function () {
                currencies = _this213.currencies.join('/');
                return _this213.publicGetTickersCurrencies({
                    'currencies': currencies
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['data'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    symbol = ticker['pair'].replace(':', '/');
                    market = _this213.markets[symbol];

                    result[symbol] = _this213.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this214 = this;

            return Promise.resolve().then(function () {
                return _this214.loadMarkets();
            }).then(function () {
                p = _this214.market(market);
                return _this214.publicGetTickerPair({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this214.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this215 = this,
                _arguments203 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments203.length > 1 && _arguments203[1] !== undefined ? _arguments203[1] : {};
                return _this215.loadMarkets();
            }).then(function () {
                return _this215.publicGetTradeHistoryPair(_this215.extend({
                    'pair': _this215.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this216 = this,
                _arguments204 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments204.length > 4 && _arguments204[4] !== undefined ? _arguments204[4] : undefined;
                params = _arguments204.length > 5 && _arguments204[5] !== undefined ? _arguments204[5] : {};
                return _this216.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this216.marketId(market),
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['order_type'] = type;
                }return _this216.privatePostPlaceOrderPair(_this216.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this217 = this;

            return Promise.resolve().then(function () {
                return _this217.loadMarkets();
            }).then(function () {
                return _this217.privatePostCancelOrder({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _test8,
                _test9,
                _this218 = this,
                _arguments206 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments206.length > 1 && _arguments206[1] !== undefined ? _arguments206[1] : 'public';
                method = _arguments206.length > 2 && _arguments206[2] !== undefined ? _arguments206[2] : 'GET';
                params = _arguments206.length > 3 && _arguments206[3] !== undefined ? _arguments206[3] : {};
                headers = _arguments206.length > 4 && _arguments206[4] !== undefined ? _arguments206[4] : undefined;
                body = _arguments206.length > 5 && _arguments206[5] !== undefined ? _arguments206[5] : undefined;
                url = _this218.urls['api'] + '/' + _this218.implodeParams(path, params);
                query = _this218.omit(params, _this218.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this218.urlencode(query);
                    }
                } else {
                    if (!_this218.uid) {
                        throw new AuthenticationError(_this218.id + ' requires `' + _this218.id + '.uid` property for authentication');
                    }nonce = _this218.nonce().toString();
                    auth = nonce + _this218.uid + _this218.apiKey;
                    signature = _this218.hmac(_this218.encode(auth), _this218.encode(_this218.secret));

                    body = _this218.urlencode(_this218.extend({
                        'key': _this218.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this218.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test8 = 'e' in response;
                _test9 = _test8 && 'ok' in response;

                if (_test9 && response['ok'] == 'ok') {
                    return response;
                } else {
                    if (_test8) {
                        throw new ExchangeError(_this218.id + ' ' + _this218.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chbtc = {
        'id': 'chbtc',
        'name': 'CHBTC',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',
            'api': {
                'public': 'http://api.chbtc.com/data', // no https for public API
                'private': 'https://trade.chbtc.com/api'
            },
            'www': 'https://trade.chbtc.com/api',
            'doc': 'https://www.chbtc.com/i/developer'
        },
        'api': {
            'public': {
                'get': ['ticker', 'depth', 'trades', 'kline']
            },
            'private': {
                'post': ['order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
            'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },
            'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                account,
                _this219 = this;

            return Promise.resolve().then(function () {
                return _this219.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (c = 0; c < _this219.currencies.length; c++) {
                    currency = _this219.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balances['balance']) {
                        account['free'] = balances['balance'][currency]['amount'];
                    }if (currency in balances['frozen']) {
                        account['used'] = balances['frozen'][currency]['amount'];
                    }account['total'] = _this219.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this220 = this,
                _arguments208 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments208.length > 1 && _arguments208[1] !== undefined ? _arguments208[1] : {};
                p = _this220.market(market);
                return _this220.publicGetDepth(_this220.extend({
                    'currency': p['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this220.milliseconds();
                bids = undefined;
                asks = undefined;

                if ('bids' in orderbook) {
                    bids = orderbook['bids'];
                }if ('asks' in orderbook) {
                    asks = orderbook['asks'];
                }result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this220.iso8601(timestamp)
                };

                if (result['bids']) {
                    result['bids'] = _this220.sortBy(result['bids'], 0, true);
                }if (result['asks']) {
                    result['asks'] = _this220.sortBy(result['asks'], 0);
                }return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this221 = this;

            return Promise.resolve().then(function () {
                return _this221.publicGetTicker({
                    'currency': _this221.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = _this221.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this221.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this222 = this,
                _arguments210 = arguments;

            params = _arguments210.length > 1 && _arguments210[1] !== undefined ? _arguments210[1] : {};

            return _this222.publicGetTrades(_this222.extend({
                'currency': _this222.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                paramString,
                tradeType,
                response,
                _this223 = this,
                _arguments211 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments211.length > 4 && _arguments211[4] !== undefined ? _arguments211[4] : undefined;
                params = _arguments211.length > 5 && _arguments211[5] !== undefined ? _arguments211[5] : {};
                paramString = '&price=' + price.toString();

                paramString += '&amount=' + amount.toString();
                tradeType = side == 'buy' ? '1' : '0';

                paramString += '&tradeType=' + tradeType;
                paramString += '&currency=' + _this223.marketId(market);
                return _this223.privatePostOrder(paramString);
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                paramString,
                _this224 = this,
                _arguments212 = arguments;

            params = _arguments212.length > 1 && _arguments212[1] !== undefined ? _arguments212[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this224.privatePostCancelOrder(paramString);
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                paramString,
                _this225 = this,
                _arguments213 = arguments;

            params = _arguments213.length > 1 && _arguments213[1] !== undefined ? _arguments213[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this225.privatePostGetOrder(paramString);
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                paramsLength,
                nonce,
                auth,
                secret,
                signature,
                suffix,
                response,
                _this226 = this,
                _arguments214 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments214.length > 1 && _arguments214[1] !== undefined ? _arguments214[1] : 'public';
                method = _arguments214.length > 2 && _arguments214[2] !== undefined ? _arguments214[2] : 'GET';
                params = _arguments214.length > 3 && _arguments214[3] !== undefined ? _arguments214[3] : {};
                headers = _arguments214.length > 4 && _arguments214[4] !== undefined ? _arguments214[4] : undefined;
                body = _arguments214.length > 5 && _arguments214[5] !== undefined ? _arguments214[5] : undefined;
                url = _this226.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this226.version + '/' + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this226.urlencode(params);
                    }
                } else {
                    paramsLength = params.length; // params should be a string here

                    nonce = _this226.nonce();
                    auth = 'method=' + path;

                    auth += '&accesskey=' + _this226.apiKey;
                    auth += paramsLength ? params : '';
                    secret = _this226.hash(_this226.encode(_this226.secret), 'sha1');
                    signature = _this226.hmac(_this226.encode(auth), _this226.encode(secret), 'md5');
                    suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();

                    url += '/' + path + '?' + auth + '&' + suffix;
                }
                return _this226.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('code' in response) {
                        throw new ExchangeError(_this226.id + ' ' + _this226.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chilebit = extend(blinktrade, {
        'id': 'chilebit',
        'name': 'ChileBit',
        'countries': 'CL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://chilebit.net',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var coincheck = {

        'id': 'coincheck',
        'name': 'coincheck',
        'countries': ['JP', 'ID'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',
            'api': 'https://coincheck.com/api',
            'www': 'https://coincheck.com',
            'doc': 'https://coincheck.com/documents/exchange/api'
        },
        'api': {
            'public': {
                'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']
            },
            'private': {
                'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],
                'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],
                'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']
            }
        },
        'markets': {
            'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }, // the only real pair
            'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },
            'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },
            'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },
            'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },
            'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },
            'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },
            'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },
            'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },
            'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },
            'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },
            'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },
            'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },
            'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                reserved,
                _this227 = this;

            return Promise.resolve().then(function () {
                return _this227.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this227.currencies.length; c++) {
                    currency = _this227.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]);
                    }reserved = lowercase + '_reserved';

                    if (reserved in balances) {
                        account['used'] = parseFloat(balances[reserved]);
                    }account['total'] = _this227.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this228 = this,
                _arguments216 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments216.length > 1 && _arguments216[1] !== undefined ? _arguments216[1] : {};
                return _this228.publicGetOrderBooks(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this228.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this228.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this229 = this;

            return Promise.resolve().then(function () {
                return _this229.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this229.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this230 = this,
                _arguments218 = arguments;

            params = _arguments218.length > 1 && _arguments218[1] !== undefined ? _arguments218[1] : {};

            return _this230.publicGetTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                order_type,
                _prefix,
                response,
                _this231 = this,
                _arguments219 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments219.length > 4 && _arguments219[4] !== undefined ? _arguments219[4] : undefined;
                params = _arguments219.length > 5 && _arguments219[5] !== undefined ? _arguments219[5] : {};
                prefix = '';
                order = {
                    'pair': _this231.marketId(market)
                };

                if (type == 'market') {
                    order_type = type + '_' + side;

                    order['order_type'] = order_type;
                    _prefix = side == 'buy' ? order_type + '_' : '';

                    order[_prefix + 'amount'] = amount;
                } else {
                    order['order_type'] = side;
                    order['rate'] = price;
                    order['amount'] = amount;
                }
                return _this231.privatePostExchangeOrders(_this231.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this232 = this;

            return _this232.privateDeleteExchangeOrdersId({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                length,
                auth,
                response,
                _test10,
                _this233 = this,
                _arguments221 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments221.length > 1 && _arguments221[1] !== undefined ? _arguments221[1] : 'public';
                method = _arguments221.length > 2 && _arguments221[2] !== undefined ? _arguments221[2] : 'GET';
                params = _arguments221.length > 3 && _arguments221[3] !== undefined ? _arguments221[3] : {};
                headers = _arguments221.length > 4 && _arguments221[4] !== undefined ? _arguments221[4] : undefined;
                body = _arguments221.length > 5 && _arguments221[5] !== undefined ? _arguments221[5] : undefined;
                url = _this233.urls['api'] + '/' + _this233.implodeParams(path, params);
                query = _this233.omit(params, _this233.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this233.urlencode(query);
                    }
                } else {
                    nonce = _this233.nonce().toString();
                    length = 0;

                    if (Object.keys(query).length) {
                        body = _this233.urlencode(_this233.keysort(query));
                        length = body.length;
                    }
                    auth = nonce + url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': length,
                        'ACCESS-KEY': _this233.apiKey,
                        'ACCESS-NONCE': nonce,
                        'ACCESS-SIGNATURE': _this233.hmac(_this233.encode(auth), _this233.encode(_this233.secret))
                    };
                }
                return _this233.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test10 = 'success' in response;

                    if (_test10 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this233.id + ' ' + _this233.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinfloor = {

        'id': 'coinfloor',
        'name': 'coinfloor',
        'rateLimit': 1000,
        'countries': 'UK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg',
            'api': 'https://webapi.coinfloor.co.uk:8090/bist',
            'www': 'https://www.coinfloor.co.uk',
            'doc': ['https://github.com/coinfloor/api', 'https://www.coinfloor.co.uk/api']
        },
        'api': {
            'public': {
                'get': ['{id}/ticker/', '{id}/order_book/', '{id}/transactions/']
            },
            'private': {
                'post': ['{id}/balance/', '{id}/user_transactions/', '{id}/open_orders/', '{id}/cancel_order/', '{id}/buy/', '{id}/sell/', '{id}/buy_market/', '{id}/sell_market/', '{id}/estimate_sell_market/', '{id}/estimate_buy_market/']
            }
        },
        'markets': {
            'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/USD': { 'id': 'XBT/USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/PLN': { 'id': 'XBT/PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BCH/GBP': { 'id': 'BCH/GBP', 'symbol': 'BCH/GBP', 'base': 'BCH', 'quote': 'GBP' }
        },

        fetchBalance: function fetchBalance(market) {
            var _this234 = this;

            return _this234.privatePostIdBalance({
                'id': _this234.marketId(market)
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this235 = this;

            return Promise.resolve().then(function () {
                return _this235.publicGetIdOrderBook({
                    'id': _this235.marketId(market)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this235.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this235.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            // rewrite to get the timestamp from HTTP headers
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(market) {
            var m,
                ticker,
                _this236 = this;

            return Promise.resolve().then(function () {
                m = _this236.market(market);
                return _this236.publicGetIdTicker({
                    'id': m['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this236.parseTicker(ticker, m);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this237 = this,
                _arguments225 = arguments;

            params = _arguments225.length > 1 && _arguments225[1] !== undefined ? _arguments225[1] : {};

            return _this237.publicGetIdTransactions(_this237.extend({
                'id': _this237.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                method,
                _this238 = this,
                _arguments226 = arguments;

            price = _arguments226.length > 4 && _arguments226[4] !== undefined ? _arguments226[4] : undefined;
            params = _arguments226.length > 5 && _arguments226[5] !== undefined ? _arguments226[5] : {};
            order = { 'id': _this238.marketId(market) };
            method = 'privatePostId' + _this238.capitalize(side);

            if (type == 'market') {
                order['quantity'] = amount;
                method += 'Market';
            } else {
                order['price'] = price;
                order['amount'] = amount;
            }
            return _this238[method](_this238.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this239 = this;

            return _this239.privatePostIdCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/
            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({ 'nonce': nonce }, query));
                var auth = this.uid + '/' + this.apiKey + ':' + this.password;
                var signature = this.stringToBase64(auth);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + signature
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coingi = {

        'id': 'coingi',
        'name': 'Coingi',
        'rateLimit': 1000,
        'countries': ['PA', 'BG', 'CN', 'US'], // Panama, Bulgaria, China, US
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',
            'api': 'https://api.coingi.com',
            'www': 'https://coingi.com',
            'doc': 'http://docs.coingi.apiary.io/'
        },
        'api': {
            'current': {
                'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']
            },
            'user': {
                'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']
            }
        },
        'markets': {
            'LTC/BTC': { 'id': 'ltc-btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'PPC/BTC': { 'id': 'ppc-btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'doge-btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'VTC/BTC': { 'id': 'vtc-btc', 'symbol': 'VTC/BTC', 'base': 'VTC', 'quote': 'BTC' },
            'FTC/BTC': { 'id': 'ftc-btc', 'symbol': 'FTC/BTC', 'base': 'FTC', 'quote': 'BTC' },
            'NMC/BTC': { 'id': 'nmc-btc', 'symbol': 'NMC/BTC', 'base': 'NMC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash-btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var currencies,
                c,
                currency,
                balances,
                result,
                b,
                balance,
                _currency4,
                account,
                _this240 = this;

            return Promise.resolve().then(function () {
                currencies = [];

                for (c = 0; c < _this240.currencies.length; c++) {
                    currency = _this240.currencies[c].toLowerCase();

                    currencies.push(currency);
                }
                return _this240.userPostBalance({
                    'currencies': currencies.join(',')
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    _currency4 = balance['currency']['name'];

                    _currency4 = _currency4.toUpperCase();
                    account = {
                        'free': balance['available'],
                        'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],
                        'total': undefined
                    };

                    account['total'] = _this240.sum(account['free'], account['used']);
                    result[_currency4] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this241 = this,
                _arguments229 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments229.length > 1 && _arguments229[1] !== undefined ? _arguments229[1] : {};
                p = _this241.market(market);
                return _this241.currentGetOrderBookPairAskCountBidCountDepth(_this241.extend({
                    'pair': p['id'],
                    'askCount': 512, // maximum returned number of asks 1-512
                    'bidCount': 512, // maximum returned number of bids 1-512
                    'depth': 32 // maximum number of depth range steps 1-32
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this241.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this241.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['baseAmount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['high'],
                'low': ticker['low'],
                'bid': ticker['highestBid'],
                'ask': ticker['lowestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': ticker['baseVolume'],
                'quoteVolume': ticker['counterVolume'],
                'info': ticker
            };
            return ticker;
        },
        fetchTickers: function fetchTickers() {
            var response,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this242 = this;

            return Promise.resolve().then(function () {
                return _this242.currentGet24hourRollingAggregation();
            }).then(function (_resp) {
                response = _resp;
                result = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    base = ticker['currencyPair']['base'].toUpperCase();
                    quote = ticker['currencyPair']['counter'].toUpperCase();
                    symbol = base + '/' + quote;
                    market = _this242.markets[symbol];

                    result[symbol] = _this242.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                tickers,
                t,
                ticker,
                base,
                quote,
                _symbol,
                p,
                symbol,
                _ticker,
                _this243 = this;

            return Promise.resolve().then(function () {
                return _this243.currentGet24hourRollingAggregation();
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    base = ticker['currencyPair']['base'].toUpperCase();
                    quote = ticker['currencyPair']['counter'].toUpperCase();
                    _symbol = base + '/' + quote;

                    tickers[_symbol] = ticker;
                }
                p = _this243.market(market);
                symbol = p['symbol'];

                if (symbol in tickers) {
                    _ticker = tickers[symbol];

                    return _this243.parseTicker(_ticker, p);
                } else {
                    throw new ExchangeError(_this243.id + ' ' + symbol + ' ticker not found');
                }
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this244 = this,
                _arguments232 = arguments;

            params = _arguments232.length > 1 && _arguments232[1] !== undefined ? _arguments232[1] : {};

            return _this244.currentGetTransactionsPairMaxCount(_this244.extend({
                'pair': _this244.marketId(market),
                'maxCount': 128
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this245 = this,
                _arguments233 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments233.length > 4 && _arguments233[4] !== undefined ? _arguments233[4] : undefined;
                params = _arguments233.length > 5 && _arguments233[5] !== undefined ? _arguments233[5] : {};
                order = {
                    'currencyPair': _this245.marketId(market),
                    'volume': amount,
                    'price': price,
                    'orderType': side == 'buy' ? 0 : 1
                };
                return _this245.userPostAddOrder(_this245.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this246 = this;

            return _this246.userPostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                auth,
                response,
                _this247 = this,
                _arguments235 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments235.length > 1 && _arguments235[1] !== undefined ? _arguments235[1] : 'public';
                method = _arguments235.length > 2 && _arguments235[2] !== undefined ? _arguments235[2] : 'GET';
                params = _arguments235.length > 3 && _arguments235[3] !== undefined ? _arguments235[3] : {};
                headers = _arguments235.length > 4 && _arguments235[4] !== undefined ? _arguments235[4] : undefined;
                body = _arguments235.length > 5 && _arguments235[5] !== undefined ? _arguments235[5] : undefined;
                url = _this247.urls['api'] + '/' + api + '/' + _this247.implodeParams(path, params);
                query = _this247.omit(params, _this247.extractParams(path));

                if (api == 'current') {
                    if (Object.keys(query).length) {
                        url += '?' + _this247.urlencode(query);
                    }
                } else {
                    nonce = _this247.nonce();
                    request = _this247.extend({
                        'token': _this247.apiKey,
                        'nonce': nonce
                    }, query);
                    auth = nonce.toString() + '$' + _this247.apiKey;

                    request['signature'] = _this247.hmac(_this247.encode(auth), _this247.encode(_this247.secret));
                    body = _this247.json(request);
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this247.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this247.id + ' ' + _this247.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinmarketcap = {

        'id': 'coinmarketcap',
        'name': 'CoinMarketCap',
        'rateLimit': 10000,
        'version': 'v1',
        'countries': 'US',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',
            'api': 'https://api.coinmarketcap.com',
            'www': 'https://coinmarketcap.com',
            'doc': 'https://coinmarketcap.com/api'
        },
        'api': {
            'public': {
                'get': ['ticker/', 'ticker/{id}/', 'global/']
            }
        },
        'currencies': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD'],

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                _this248 = this,
                _arguments236 = arguments;

            params = _arguments236.length > 1 && _arguments236[1] !== undefined ? _arguments236[1] : {};

            throw new ExchangeError('Fetching order books is not supported by the API of ' + _this248.id);
        },
        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                c,
                base,
                baseId,
                quote,
                quoteId,
                symbol,
                id,
                _this249 = this;

            return Promise.resolve().then(function () {
                return _this249.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];

                    for (c = 0; c < _this249.currencies.length; c++) {
                        base = market['symbol'];
                        baseId = market['id'];
                        quote = _this249.currencies[c];
                        quoteId = quote.toLowerCase();
                        symbol = base + '/' + quote;
                        id = baseId + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'baseId': baseId,
                            'quoteId': quoteId,
                            'info': market
                        });
                    }
                }
                return result;
            });
        },
        fetchGlobal: function fetchGlobal() {
            var currency,
                request,
                _this250 = this,
                _arguments238 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments238.length > 0 && _arguments238[0] !== undefined ? _arguments238[0] : 'USD';
                return _this250.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this250.publicGetGlobal(request);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            if ('last_updated' in ticker) if (ticker['last_updated']) timestamp = parseInt(ticker['last_updated']) * 1000;
            var volume = undefined;
            var volumeKey = '24h_volume_' + market['quoteId'];
            if (ticker[volumeKey]) volume = parseFloat(ticker[volumeKey]);
            var price = 'price_' + market['quoteId'];
            var change = undefined;
            var changeKey = 'percent_change_24h';
            if (ticker[changeKey]) change = parseFloat(ticker[changeKey]);
            var last = undefined;
            if (price in ticker) if (ticker[price]) last = parseFloat(ticker[price]);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': change,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                request,
                response,
                tickers,
                t,
                ticker,
                id,
                market,
                symbol,
                _this251 = this,
                _arguments239 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments239.length > 0 && _arguments239[0] !== undefined ? _arguments239[0] : 'USD';
                return _this251.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this251.publicGetTicker(request);
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    id = ticker['id'] + '/' + currency;
                    market = _this251.markets_by_id[id];
                    symbol = market['symbol'];

                    tickers[symbol] = _this251.parseTicker(ticker, market);
                }
                return tickers;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                request,
                response,
                ticker,
                _this252 = this;

            return Promise.resolve().then(function () {
                return _this252.loadMarkets();
            }).then(function () {
                p = _this252.market(market);
                request = {
                    'convert': p['quote'],
                    'id': p['baseId']
                };
                return _this252.publicGetTickerId(request);
            }).then(function (_resp) {
                response = _resp;
                ticker = response[0];

                return _this252.parseTicker(ticker, p);
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinmate = {

        'id': 'coinmate',
        'name': 'CoinMate',
        'countries': ['GB', 'CZ'], // UK, Czech Republic
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',
            'api': 'https://coinmate.io/api',
            'www': 'https://coinmate.io',
            'doc': ['http://docs.coinmate.apiary.io', 'https://coinmate.io/developers']
        },
        'api': {
            'public': {
                'get': ['orderBook', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balances', 'bitcoinWithdrawal', 'bitcoinDepositAddresses', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'openOrders', 'redeemVoucher', 'sellInstant', 'sellLimit', 'transactionHistory', 'unconfirmedBitcoinDeposits']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                account,
                _this253 = this;

            return Promise.resolve().then(function () {
                return _this253.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (c = 0; c < _this253.currencies.length; c++) {
                    currency = _this253.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balances) {
                        account['free'] = balances[currency]['available'];
                        account['used'] = balances[currency]['reserved'];
                        account['total'] = balances[currency]['balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this254 = this,
                _arguments242 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments242.length > 1 && _arguments242[1] !== undefined ? _arguments242[1] : {};
                return _this254.publicGetOrderBook(_this254.extend({
                    'currencyPair': _this254.marketId(market),
                    'groupByPriceLimit': 'False'
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this254.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this255 = this;

            return Promise.resolve().then(function () {
                return _this255.publicGetTicker({
                    'currencyPair': _this255.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this255.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['amount']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this256 = this,
                _arguments244 = arguments;

            params = _arguments244.length > 1 && _arguments244[1] !== undefined ? _arguments244[1] : {};

            return _this256.publicGetTransactions(_this256.extend({
                'currencyPair': _this256.marketId(market),
                'minutesIntoHistory': 10
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this257 = this,
                _arguments245 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments245.length > 4 && _arguments245[4] !== undefined ? _arguments245[4] : undefined;
                params = _arguments245.length > 5 && _arguments245[5] !== undefined ? _arguments245[5] : {};
                method = 'privatePost' + _this257.capitalize(side);
                order = {
                    'currencyPair': _this257.marketId(market)
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['total'] = amount; // amount in fiat
                    } else {
                        order['amount'] = amount;
                    } // amount in fiat
                    method += 'Instant';
                } else {
                    order['amount'] = amount; // amount in crypto
                    order['price'] = price;
                    method += _this257.capitalize(type);
                }
                return _this257[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this258 = this;

            return _this258.privatePostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _this259 = this,
                _arguments247 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments247.length > 1 && _arguments247[1] !== undefined ? _arguments247[1] : 'public';
                method = _arguments247.length > 2 && _arguments247[2] !== undefined ? _arguments247[2] : 'GET';
                params = _arguments247.length > 3 && _arguments247[3] !== undefined ? _arguments247[3] : {};
                headers = _arguments247.length > 4 && _arguments247[4] !== undefined ? _arguments247[4] : undefined;
                body = _arguments247.length > 5 && _arguments247[5] !== undefined ? _arguments247[5] : undefined;
                url = _this259.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this259.urlencode(params);
                    }
                } else {
                    if (!_this259.uid) {
                        throw new AuthenticationError(_this259.id + ' requires `' + _this259.id + '.uid` property for authentication');
                    }nonce = _this259.nonce().toString();
                    auth = nonce + _this259.uid + _this259.apiKey;
                    signature = _this259.hmac(_this259.encode(auth), _this259.encode(_this259.secret));

                    body = _this259.urlencode(_this259.extend({
                        'clientId': _this259.uid,
                        'nonce': nonce,
                        'publicKey': _this259.apiKey,
                        'signature': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this259.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this259.id + ' ' + _this259.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinsecure = {

        'id': 'coinsecure',
        'name': 'Coinsecure',
        'countries': 'IN', // India
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',
            'api': 'https://api.coinsecure.in',
            'www': 'https://coinsecure.in',
            'doc': ['https://api.coinsecure.in', 'https://github.com/coinsecure/plugins']
        },
        'api': {
            'public': {
                'get': ['bitcoin/search/confirmation/{txid}', 'exchange/ask/low', 'exchange/ask/orders', 'exchange/bid/high', 'exchange/bid/orders', 'exchange/lastTrade', 'exchange/max24Hr', 'exchange/min24Hr', 'exchange/ticker', 'exchange/trades']
            },
            'private': {
                'get': ['mfa/authy/call', 'mfa/authy/sms', 'netki/search/{netkiName}', 'user/bank/otp/{number}', 'user/kyc/otp/{number}', 'user/profile/phone/otp/{number}', 'user/wallet/coin/address/{id}', 'user/wallet/coin/deposit/confirmed/all', 'user/wallet/coin/deposit/confirmed/{id}', 'user/wallet/coin/deposit/unconfirmed/all', 'user/wallet/coin/deposit/unconfirmed/{id}', 'user/wallet/coin/wallets', 'user/exchange/bank/fiat/accounts', 'user/exchange/bank/fiat/balance/available', 'user/exchange/bank/fiat/balance/pending', 'user/exchange/bank/fiat/balance/total', 'user/exchange/bank/fiat/deposit/cancelled', 'user/exchange/bank/fiat/deposit/unverified', 'user/exchange/bank/fiat/deposit/verified', 'user/exchange/bank/fiat/withdraw/cancelled', 'user/exchange/bank/fiat/withdraw/completed', 'user/exchange/bank/fiat/withdraw/unverified', 'user/exchange/bank/fiat/withdraw/verified', 'user/exchange/ask/cancelled', 'user/exchange/ask/completed', 'user/exchange/ask/pending', 'user/exchange/bid/cancelled', 'user/exchange/bid/completed', 'user/exchange/bid/pending', 'user/exchange/bank/coin/addresses', 'user/exchange/bank/coin/balance/available', 'user/exchange/bank/coin/balance/pending', 'user/exchange/bank/coin/balance/total', 'user/exchange/bank/coin/deposit/cancelled', 'user/exchange/bank/coin/deposit/unverified', 'user/exchange/bank/coin/deposit/verified', 'user/exchange/bank/coin/withdraw/cancelled', 'user/exchange/bank/coin/withdraw/completed', 'user/exchange/bank/coin/withdraw/unverified', 'user/exchange/bank/coin/withdraw/verified', 'user/exchange/bank/summary', 'user/exchange/coin/fee', 'user/exchange/fiat/fee', 'user/exchange/kycs', 'user/exchange/referral/coin/paid', 'user/exchange/referral/coin/successful', 'user/exchange/referral/fiat/paid', 'user/exchange/referrals', 'user/exchange/trade/summary', 'user/login/token/{token}', 'user/summary', 'user/wallet/summary', 'wallet/coin/withdraw/cancelled', 'wallet/coin/withdraw/completed', 'wallet/coin/withdraw/unverified', 'wallet/coin/withdraw/verified'],
                'post': ['login', 'login/initiate', 'login/password/forgot', 'mfa/authy/initiate', 'mfa/ga/initiate', 'signup', 'user/netki/update', 'user/profile/image/update', 'user/exchange/bank/coin/withdraw/initiate', 'user/exchange/bank/coin/withdraw/newVerifycode', 'user/exchange/bank/fiat/withdraw/initiate', 'user/exchange/bank/fiat/withdraw/newVerifycode', 'user/password/change', 'user/password/reset', 'user/wallet/coin/withdraw/initiate', 'wallet/coin/withdraw/newVerifycode'],
                'put': ['signup/verify/{token}', 'user/exchange/kyc', 'user/exchange/bank/fiat/deposit/new', 'user/exchange/ask/new', 'user/exchange/bid/new', 'user/exchange/instant/buy', 'user/exchange/instant/sell', 'user/exchange/bank/coin/withdraw/verify', 'user/exchange/bank/fiat/account/new', 'user/exchange/bank/fiat/withdraw/verify', 'user/mfa/authy/initiate/enable', 'user/mfa/ga/initiate/enable', 'user/netki/create', 'user/profile/phone/new', 'user/wallet/coin/address/new', 'user/wallet/coin/new', 'user/wallet/coin/withdraw/sendToExchange', 'user/wallet/coin/withdraw/verify'],
                'delete': ['user/gcm/{code}', 'user/logout', 'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}', 'user/exchange/bank/fiat/deposit/cancel/{depositID}', 'user/exchange/ask/cancel/{orderID}', 'user/exchange/bid/cancel/{orderID}', 'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}', 'user/mfa/authy/disable/{code}', 'user/mfa/ga/disable/{code}', 'user/profile/phone/delete', 'user/profile/image/delete/{netkiName}', 'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}']
            }
        },
        'markets': {
            'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                coin,
                fiat,
                result,
                _this260 = this;

            return Promise.resolve().then(function () {
                return _this260.privateGetUserExchangeBankSummary();
            }).then(function (_resp) {
                response = _resp;
                balance = response['message'];
                coin = {
                    'free': balance['availableCoinBalance'],
                    'used': balance['pendingCoinBalance'],
                    'total': balance['totalCoinBalance']
                };
                fiat = {
                    'free': balance['availableFiatBalance'],
                    'used': balance['pendingFiatBalance'],
                    'total': balance['totalFiatBalance']
                };
                result = {
                    'info': balance,
                    'BTC': coin,
                    'INR': fiat
                };

                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                bids,
                asks,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this261 = this,
                _arguments249 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments249.length > 1 && _arguments249[1] !== undefined ? _arguments249[1] : {};
                return _this261.publicGetExchangeBidOrders(params);
            }).then(function (_resp) {
                bids = _resp;
                return _this261.publicGetExchangeAskOrders(params);
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': bids['message'],
                    'asks': asks['message']
                };
                timestamp = _this261.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this261.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['rate'];
                        amount = order['vol'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this262 = this;

            return Promise.resolve().then(function () {
                return _this262.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['message'];
                timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this262.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['coinvolume']),
                    'quoteVolume': parseFloat(ticker['fiatvolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this263 = this,
                _arguments251 = arguments;

            params = _arguments251.length > 1 && _arguments251[1] !== undefined ? _arguments251[1] : {};

            return _this263.publicGetExchangeTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                direction,
                response,
                _this264 = this,
                _arguments252 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments252.length > 4 && _arguments252[4] !== undefined ? _arguments252[4] : undefined;
                params = _arguments252.length > 5 && _arguments252[5] !== undefined ? _arguments252[5] : {};
                method = 'privatePutUserExchange';
                order = {};

                if (type == 'market') {
                    method += 'Instant' + _this264.capitalize(side);
                    if (side == 'buy') {
                        order['maxFiat'] = amount;
                    } else {
                        order['maxVol'] = amount;
                    }
                } else {
                    direction = side == 'buy' ? 'Bid' : 'Ask';

                    method += direction + 'New';
                    order['rate'] = price;
                    order['vol'] = amount;
                }
                return _this264[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['message']['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var method,
                _this265 = this;

            throw new ExchangeError(_this265.id + ' cancelOrder () is not fully implemented yet');
            method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here

            return _this265[method]({ 'orderID': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _test11,
                _this266 = this,
                _arguments254 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments254.length > 1 && _arguments254[1] !== undefined ? _arguments254[1] : 'public';
                method = _arguments254.length > 2 && _arguments254[2] !== undefined ? _arguments254[2] : 'GET';
                params = _arguments254.length > 3 && _arguments254[3] !== undefined ? _arguments254[3] : {};
                headers = _arguments254.length > 4 && _arguments254[4] !== undefined ? _arguments254[4] : undefined;
                body = _arguments254.length > 5 && _arguments254[5] !== undefined ? _arguments254[5] : undefined;
                url = _this266.urls['api'] + '/' + _this266.version + '/' + _this266.implodeParams(path, params);
                query = _this266.omit(params, _this266.extractParams(path));

                if (api == 'private') {
                    headers = { 'Authorization': _this266.apiKey };
                    if (Object.keys(query).length) {
                        body = _this266.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this266.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test11 = 'success' in response;

                if (_test11 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this266.id + ' ' + _this266.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinspot = {

        'id': 'coinspot',
        'name': 'CoinSpot',
        'countries': 'AU', // Australia
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
            'api': {
                'public': 'https://www.coinspot.com.au/pubapi',
                'private': 'https://www.coinspot.com.au/api'
            },
            'www': 'https://www.coinspot.com.au',
            'doc': 'https://www.coinspot.com.au/api'
        },
        'api': {
            'public': {
                'get': ['latest']
            },
            'private': {
                'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                result,
                balances,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this267 = this;

            return Promise.resolve().then(function () {
                return _this267.privatePostMyBalances();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('balance' in response) {
                    balances = response['balance'];
                    currencies = Object.keys(balances);

                    for (c = 0; c < currencies.length; c++) {
                        currency = currencies[c];
                        uppercase = currency.toUpperCase();
                        account = {
                            'free': balances[currency],
                            'used': undefined,
                            'total': balances[currency]
                        };

                        if (uppercase == 'DRK') {
                            uppercase = 'DASH';
                        }result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this268 = this,
                _arguments256 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments256.length > 1 && _arguments256[1] !== undefined ? _arguments256[1] : {};
                p = _this268.market(market);
                return _this268.privatePostOrders(_this268.extend({
                    'cointype': p['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this268.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this268.iso8601(timestamp)
                };
                sides = { 'bids': 'buyorders', 'asks': 'sellorders' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['rate']);
                        amount = parseFloat(order['amount']);

                        result[key].push([price, amount]);
                    }
                }
                result['bids'] = _this268.sortBy(result['bids'], 0, true);
                result['asks'] = _this268.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                id,
                ticker,
                timestamp,
                _this269 = this;

            return Promise.resolve().then(function () {
                return _this269.publicGetLatest();
            }).then(function (_resp) {
                response = _resp;
                id = _this269.marketId(market);

                id = id.toLowerCase();
                ticker = response['prices'][id];
                timestamp = _this269.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this269.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this270 = this,
                _arguments258 = arguments;

            params = _arguments258.length > 1 && _arguments258[1] !== undefined ? _arguments258[1] : {};

            return _this270.privatePostOrdersHistory(_this270.extend({
                'cointype': _this270.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this271 = this,
                _arguments259 = arguments;

            price = _arguments259.length > 4 && _arguments259[4] !== undefined ? _arguments259[4] : undefined;
            params = _arguments259.length > 5 && _arguments259[5] !== undefined ? _arguments259[5] : {};
            method = 'privatePostMy' + _this271.capitalize(side);

            if (type == 'market') {
                throw new ExchangeError(_this271.id + ' allows limit orders only');
            }order = {
                'cointype': _this271.marketId(market),
                'amount': amount,
                'rate': price
            };

            return _this271[method](_this271.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                method,
                _this272 = this,
                _arguments260 = arguments;

            params = _arguments260.length > 1 && _arguments260[1] !== undefined ? _arguments260[1] : {};

            throw new ExchangeError(_this272.id + ' cancelOrder () is not fully implemented yet');
            method = 'privatePostMyBuy';

            return _this272[method]({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                _this273 = this,
                _arguments261 = arguments;

            api = _arguments261.length > 1 && _arguments261[1] !== undefined ? _arguments261[1] : 'public';
            method = _arguments261.length > 2 && _arguments261[2] !== undefined ? _arguments261[2] : 'GET';
            params = _arguments261.length > 3 && _arguments261[3] !== undefined ? _arguments261[3] : {};
            headers = _arguments261.length > 4 && _arguments261[4] !== undefined ? _arguments261[4] : undefined;
            body = _arguments261.length > 5 && _arguments261[5] !== undefined ? _arguments261[5] : undefined;

            if (!_this273.apiKey) {
                throw new AuthenticationError(_this273.id + ' requires apiKey for all requests');
            }url = _this273.urls['api'][api] + '/' + path;

            if (api == 'private') {
                nonce = _this273.nonce();

                body = _this273.json(_this273.extend({ 'nonce': nonce }, params));
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length,
                    'key': _this273.apiKey,
                    'sign': _this273.hmac(_this273.encode(body), _this273.encode(_this273.secret), 'sha512')
                };
            }
            return _this273.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var cryptopia = {

        'id': 'cryptopia',
        'name': 'Cryptopia',
        'rateLimit': 1500,
        'countries': 'NZ', // New Zealand
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg',
            'api': 'https://www.cryptopia.co.nz/api',
            'www': 'https://www.cryptopia.co.nz',
            'doc': ['https://www.cryptopia.co.nz/Forum/Thread/255', 'https://www.cryptopia.co.nz/Forum/Thread/256']
        },
        'api': {
            'public': {
                'get': ['GetCurrencies', 'GetTradePairs', 'GetMarkets', 'GetMarkets/{id}', 'GetMarkets/{hours}', 'GetMarkets/{id}/{hours}', 'GetMarket/{id}', 'GetMarket/{id}/{hours}', 'GetMarketHistory/{id}', 'GetMarketHistory/{id}/{hours}', 'GetMarketOrders/{id}', 'GetMarketOrders/{id}/{count}', 'GetMarketOrderGroups/{ids}/{count}']
            },
            'private': {
                'post': ['CancelTrade', 'GetBalance', 'GetDepositAddress', 'GetOpenOrders', 'GetTradeHistory', 'GetTransactions', 'SubmitTip', 'SubmitTrade', 'SubmitTransfer', 'SubmitWithdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                result,
                markets,
                i,
                market,
                id,
                symbol,
                _symbol$split7,
                _symbol$split8,
                base,
                quote,
                _this274 = this;

            return Promise.resolve().then(function () {
                return _this274.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = [];
                markets = response['Data'];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    id = market['TradePairId'];
                    symbol = market['Label'];
                    _symbol$split7 = symbol.split('/');
                    _symbol$split8 = _slicedToArray(_symbol$split7, 2);
                    base = _symbol$split8[0];
                    quote = _symbol$split8[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this275 = this,
                _arguments263 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments263.length > 1 && _arguments263[1] !== undefined ? _arguments263[1] : {};
                return _this275.loadMarkets();
            }).then(function () {
                return _this275.publicGetMarketOrdersId(_this275.extend({
                    'id': _this275.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['Data'];
                timestamp = _this275.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this275.iso8601(timestamp)
                };
                sides = { 'bids': 'Buy', 'asks': 'Sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Price']);
                        amount = parseFloat(order['Total']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'info': ticker,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['BidPrice']),
                'ask': parseFloat(ticker['AskPrice']),
                'vwap': undefined,
                'open': parseFloat(ticker['Open']),
                'close': parseFloat(ticker['Close']),
                'first': undefined,
                'last': parseFloat(ticker['LastPrice']),
                'change': parseFloat(ticker['Change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume'])
            };
        },
        fetchTicker: function fetchTicker(market) {
            var m,
                response,
                ticker,
                _this276 = this;

            return Promise.resolve().then(function () {
                return _this276.loadMarkets();
            }).then(function () {
                m = _this276.market(market);
                return _this276.publicGetMarketId({
                    'id': m['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['Data'];

                return _this276.parseTicker(ticker, m);
            });
        },
        fetchTickers: function fetchTickers() {
            var response,
                result,
                tickers,
                i,
                ticker,
                id,
                market,
                symbol,
                _this277 = this;

            return Promise.resolve().then(function () {
                return _this277.loadMarkets();
            }).then(function () {
                return _this277.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                tickers = response['Data'];

                for (i = 0; i < tickers.length; i++) {
                    ticker = tickers[i];
                    id = ticker['TradePairId'];
                    market = _this277.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this277.parseTicker(ticker, market);
                }
                return result;
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['Timestamp'] * 1000;
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['Type'].toLowerCase(),
                'price': trade['Price'],
                'amount': trade['Amount']
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                response,
                trades,
                _this278 = this,
                _arguments266 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments266.length > 1 && _arguments266[1] !== undefined ? _arguments266[1] : {};
                return _this278.loadMarkets();
            }).then(function () {
                m = _this278.market(market);
                return _this278.publicGetMarketHistoryIdHours(_this278.extend({
                    'id': m['id'],
                    'hours': 24 // default
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['Data'];

                return _this278.parseTrades(trades, m);
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                i,
                balance,
                currency,
                account,
                _this279 = this;

            return Promise.resolve().then(function () {
                return _this279.loadMarkets();
            }).then(function () {
                return _this279.privatePostGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['Data'];
                result = { 'info': response };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    currency = balance['Symbol'];
                    account = {
                        'free': balance['Available'],
                        'used': undefined,
                        'total': balance['Total']
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this280 = this,
                _arguments268 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments268.length > 4 && _arguments268[4] !== undefined ? _arguments268[4] : undefined;
                params = _arguments268.length > 5 && _arguments268[5] !== undefined ? _arguments268[5] : {};
                return _this280.loadMarkets();
            }).then(function () {
                order = {
                    'Market': _this280.marketId(market),
                    'Type': _this280.capitalize(side),
                    'Rate': price,
                    'Amount': amount
                };
                return _this280.privatePostSubmitTrade(_this280.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Data']['OrderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this281 = this;

            return Promise.resolve().then(function () {
                return _this281.loadMarkets();
            }).then(function () {
                return _this281.privatePostCancelTrade({
                    'Type': 'Trade',
                    'OrderId': id
                });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _hash,
                secret,
                uri,
                lowercase,
                payload,
                signature,
                auth,
                response,
                _test12,
                _this282 = this,
                _arguments270 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments270.length > 1 && _arguments270[1] !== undefined ? _arguments270[1] : 'public';
                method = _arguments270.length > 2 && _arguments270[2] !== undefined ? _arguments270[2] : 'GET';
                params = _arguments270.length > 3 && _arguments270[3] !== undefined ? _arguments270[3] : {};
                headers = _arguments270.length > 4 && _arguments270[4] !== undefined ? _arguments270[4] : undefined;
                body = _arguments270.length > 5 && _arguments270[5] !== undefined ? _arguments270[5] : undefined;
                url = _this282.urls['api'] + '/' + _this282.implodeParams(path, params);
                query = _this282.omit(params, _this282.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this282.urlencode(query);
                    }
                } else {
                    nonce = _this282.nonce().toString();

                    body = _this282.json(query);
                    _hash = _this282.hash(_this282.encode(body), 'md5', 'base64');
                    secret = _this282.base64ToBinary(_this282.secret);
                    uri = _this282.encodeURIComponent(url);
                    lowercase = uri.toLowerCase();
                    payload = _this282.apiKey + method + lowercase + nonce + _this282.binaryToString(_hash);
                    signature = _this282.hmac(_this282.encode(payload), secret, 'sha256', 'base64');
                    auth = 'amx ' + _this282.apiKey + ':' + _this282.binaryToString(signature) + ':' + nonce;

                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length,
                        'Authorization': auth
                    };
                }
                return _this282.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test12 = 'Success' in response;

                if (_test12 && response['Success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this282.id + ' ' + _this282.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var dsx = {

        'id': 'dsx',
        'name': 'DSX',
        'countries': 'UK',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',
            'api': {
                'mapi': 'https://dsx.uk/mapi', // market data
                'tapi': 'https://dsx.uk/tapi', // trading
                'dwapi': 'https://dsx.uk/dwapi' // deposit/withdraw
            },
            'www': 'https://dsx.uk',
            'doc': ['https://api.dsx.uk', 'https://dsx.uk/api_docs/public', 'https://dsx.uk/api_docs/private', '']
        },
        'api': {
            'mapi': { // market data (public)
                'get': ['barsFromMoment/{id}/{period}/{start}', // empty reply :\
                'depth/{id}', 'info', 'lastBars/{id}/{period}/{amount}', // period is (m, h or d)
                'periodBars/{id}/{period}/{start}/{end}', 'ticker/{id}', 'trades/{id}']
            },
            'tapi': { // trading (private)
                'post': ['getInfo', 'TransHistory', 'TradeHistory', 'OrderHistory', 'ActiveOrders', 'Trade', 'CancelOrder']
            },
            'dwapi': { // deposit / withdraw (private)
                'post': ['getCryptoDepositAddress', 'cryptoWithdraw', 'fiatWithdraw', 'getTransactionStatus', 'getTransactions']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                symbol,
                _this283 = this;

            return Promise.resolve().then(function () {
                return _this283.mapiGetInfo();
            }).then(function (_resp) {
                response = _resp;
                keys = Object.keys(response['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = response['pairs'][id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                currencies,
                c,
                currency,
                account,
                _this284 = this;

            return Promise.resolve().then(function () {
                return _this284.loadMarkets();
            }).then(function () {
                return _this284.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['total']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': balances['funds'][currency],
                        'used': undefined,
                        'total': balances['total'][currency]
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this285 = this,
                _arguments273 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments273.length > 1 && _arguments273[1] !== undefined ? _arguments273[1] : {};
                return _this285.loadMarkets();
            }).then(function () {
                p = _this285.market(market);
                return _this285.mapiGetDepthId(_this285.extend({
                    'id': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this285.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this285.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order[0];
                        amount = order[1];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                response,
                ticker,
                timestamp,
                _this286 = this;

            return Promise.resolve().then(function () {
                return _this286.loadMarkets();
            }).then(function () {
                p = _this286.market(market);
                return _this286.mapiGetTickerId({
                    'id': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this286.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker['vol_cur']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this287 = this,
                _arguments275 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments275.length > 1 && _arguments275[1] !== undefined ? _arguments275[1] : {};
                return _this287.loadMarkets();
            }).then(function () {
                return _this287.mapiGetTradesId(_this287.extend({
                    'id': _this287.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this288 = this,
                _arguments276 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments276.length > 4 && _arguments276[4] !== undefined ? _arguments276[4] : undefined;
                params = _arguments276.length > 5 && _arguments276[5] !== undefined ? _arguments276[5] : {};
                return _this288.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this288.id + ' allows limit orders only');
                }order = {
                    'pair': _this288.marketId(market),
                    'type': side,
                    'rate': price,
                    'amount': amount
                };
                return _this288.tapiPostTrade(_this288.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['orderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this289 = this;

            return Promise.resolve().then(function () {
                return _this289.loadMarkets();
            }).then(function () {
                return _this289.tapiPostCancelOrder({ 'orderId': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _method,
                response,
                _test13,
                _this290 = this,
                _arguments278 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments278.length > 1 && _arguments278[1] !== undefined ? _arguments278[1] : 'mapi';
                method = _arguments278.length > 2 && _arguments278[2] !== undefined ? _arguments278[2] : 'GET';
                params = _arguments278.length > 3 && _arguments278[3] !== undefined ? _arguments278[3] : {};
                headers = _arguments278.length > 4 && _arguments278[4] !== undefined ? _arguments278[4] : undefined;
                body = _arguments278.length > 5 && _arguments278[5] !== undefined ? _arguments278[5] : undefined;
                url = _this290.urls['api'][api];

                if (api == 'mapi' || api == 'dwapi') {
                    url += '/' + _this290.implodeParams(path, params);
                }query = _this290.omit(params, _this290.extractParams(path));

                if (api == 'mapi') {
                    if (Object.keys(query).length) {
                        url += '?' + _this290.urlencode(query);
                    }
                } else {
                    nonce = _this290.nonce();
                    _method = path;

                    body = _this290.urlencode(_this290.extend({
                        'method': path,
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this290.apiKey,
                        'Sign': _this290.hmac(_this290.encode(body), _this290.encode(_this290.secret), 'sha512', 'base64')
                    };
                }
                return _this290.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'mapi') {
                    return response;
                } else {
                    _test13 = 'success' in response;

                    if (_test13 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this290.id + ' ' + _this290.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var exmo = {

        'id': 'exmo',
        'name': 'EXMO',
        'countries': ['ES', 'RU'], // Spain, Russia
        'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
            'api': 'https://api.exmo.com',
            'www': 'https://exmo.me',
            'markets': 'https://exmo.me/en/trade#?pair=BTC_USD',
            'doc': ['https://exmo.me/ru/api_doc', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs']
        },
        'api': {
            'public': {
                'get': ['currency', 'order_book', 'pair_settings', 'ticker', 'trades']
            },
            'private': {
                'post': ['user_info', 'order_create', 'order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'required_amount', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'wallet_history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split9,
                _symbol$split10,
                base,
                quote,
                _this291 = this;

            return Promise.resolve().then(function () {
                return _this291.publicGetPairSettings();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    symbol = id.replace('_', '/');
                    _symbol$split9 = symbol.split('/');
                    _symbol$split10 = _slicedToArray(_symbol$split9, 2);
                    base = _symbol$split10[0];
                    quote = _symbol$split10[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                c,
                currency,
                account,
                _this292 = this;

            return Promise.resolve().then(function () {
                return _this292.loadMarkets();
            }).then(function () {
                return _this292.privatePostUserInfo();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (c = 0; c < _this292.currencies.length; c++) {
                    currency = _this292.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in response['balances']) {
                        account['free'] = parseFloat(response['balances'][currency]);
                    }if (currency in response['reserved']) {
                        account['used'] = parseFloat(response['reserved'][currency]);
                    }account['total'] = _this292.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this293 = this,
                _arguments281 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments281.length > 1 && _arguments281[1] !== undefined ? _arguments281[1] : {};
                return _this293.loadMarkets();
            }).then(function () {
                p = _this293.market(market);
                return _this293.publicGetOrderBook(_this293.extend({
                    'pair': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this293.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this293.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy_price']),
                'ask': parseFloat(ticker['sell_price']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['vol_curr']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                response,
                result,
                ids,
                i,
                id,
                market,
                symbol,
                ticker,
                _this294 = this,
                _arguments282 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments282.length > 0 && _arguments282[0] !== undefined ? _arguments282[0] : 'USD';
                return _this294.loadMarkets();
            }).then(function () {
                return _this294.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                ids = Object.keys(response);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this294.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = response[id];

                    result[symbol] = _this294.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                p,
                _this295 = this;

            return Promise.resolve().then(function () {
                return _this295.loadMarkets();
            }).then(function () {
                return _this295.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                p = _this295.market(market);

                return _this295.parseTicker(response[p['id']], p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this296 = this,
                _arguments284 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments284.length > 1 && _arguments284[1] !== undefined ? _arguments284[1] : {};
                return _this296.loadMarkets();
            }).then(function () {
                return _this296.publicGetTrades(_this296.extend({
                    'pair': _this296.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                response,
                _this297 = this,
                _arguments285 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments285.length > 4 && _arguments285[4] !== undefined ? _arguments285[4] : undefined;
                params = _arguments285.length > 5 && _arguments285[5] !== undefined ? _arguments285[5] : {};
                return _this297.loadMarkets();
            }).then(function () {
                prefix = '';

                if (type == 'market') {
                    prefix = 'market_';
                }order = {
                    'pair': _this297.marketId(market),
                    'quantity': amount,
                    'price': price || 0,
                    'type': prefix + side
                };
                return _this297.privatePostOrderCreate(_this297.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this298 = this;

            return Promise.resolve().then(function () {
                return _this298.loadMarkets();
            }).then(function () {
                return _this298.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test14,
                _this299 = this,
                _arguments287 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments287.length > 1 && _arguments287[1] !== undefined ? _arguments287[1] : 'public';
                method = _arguments287.length > 2 && _arguments287[2] !== undefined ? _arguments287[2] : 'GET';
                params = _arguments287.length > 3 && _arguments287[3] !== undefined ? _arguments287[3] : {};
                headers = _arguments287.length > 4 && _arguments287[4] !== undefined ? _arguments287[4] : undefined;
                body = _arguments287.length > 5 && _arguments287[5] !== undefined ? _arguments287[5] : undefined;
                url = _this299.urls['api'] + '/' + _this299.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this299.urlencode(params);
                    }
                } else {
                    nonce = _this299.nonce();

                    body = _this299.urlencode(_this299.extend({ 'nonce': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this299.apiKey,
                        'Sign': _this299.hmac(_this299.encode(body), _this299.encode(_this299.secret), 'sha512')
                    };
                }
                return _this299.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test14 = 'result' in response;

                if (_test14 && response['result']) {
                    return response;
                } else {
                    if (_test14) {
                        throw new ExchangeError(_this299.id + ' ' + _this299.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var flowbtc = {

        'id': 'flowbtc',
        'name': 'flowBTC',
        'countries': 'BR', // Brazil
        'version': 'v1',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',
            'api': 'https://api.flowbtc.com:8400/ajax',
            'www': 'https://trader.flowbtc.com',
            'doc': 'http://www.flowbtc.com.br/api/'
        },
        'api': {
            'public': {
                'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']
            },
            'private': {
                'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this300 = this;

            return Promise.resolve().then(function () {
                return _this300.publicPostGetProductPairs();
            }).then(function (_resp) {
                response = _resp;
                markets = response['productPairs'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['name'];
                    base = market['product1Label'];
                    quote = market['product2Label'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this301 = this;

            return Promise.resolve().then(function () {
                return _this301.loadMarkets();
            }).then(function () {
                return _this301.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['currencies'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['name'];
                    account = {
                        'free': balance['balance'],
                        'used': balance['hold'],
                        'total': undefined
                    };

                    account['total'] = _this301.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this302 = this,
                _arguments290 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments290.length > 1 && _arguments290[1] !== undefined ? _arguments290[1] : {};
                return _this302.loadMarkets();
            }).then(function () {
                p = _this302.market(market);
                return _this302.publicPostGetOrderBook(_this302.extend({
                    'productPair': p['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this302.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this302.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['px']);
                        amount = parseFloat(order['qty']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                timestamp,
                _this303 = this;

            return Promise.resolve().then(function () {
                return _this303.loadMarkets();
            }).then(function () {
                p = _this303.market(market);
                return _this303.publicPostGetTicker({
                    'productPair': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this303.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this303.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume24hr']),
                    'quoteVolume': parseFloat(ticker['volume24hrProduct2']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this304 = this,
                _arguments292 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments292.length > 1 && _arguments292[1] !== undefined ? _arguments292[1] : {};
                return _this304.loadMarkets();
            }).then(function () {
                return _this304.publicPostGetTrades(_this304.extend({
                    'ins': _this304.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                response,
                _this305 = this,
                _arguments293 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments293.length > 4 && _arguments293[4] !== undefined ? _arguments293[4] : undefined;
                params = _arguments293.length > 5 && _arguments293[5] !== undefined ? _arguments293[5] : {};
                return _this305.loadMarkets();
            }).then(function () {
                orderType = type == 'market' ? 1 : 0;
                order = {
                    'ins': _this305.marketId(market),
                    'side': side,
                    'orderType': orderType,
                    'qty': amount,
                    'px': price
                };
                return _this305.privatePostCreateOrder(_this305.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['serverOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this306 = this,
                _arguments294 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments294.length > 1 && _arguments294[1] !== undefined ? _arguments294[1] : {};
                return _this306.loadMarkets();
            }).then(function () {
                if ('ins' in params) {
                    return _this306.privatePostCancelOrder(_this306.extend({
                        'serverOrderId': id
                    }, params));
                } else {
                    throw new ExchangeError(_this306.id + ' requires `ins` symbol parameter for cancelling an order');
                }
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test15,
                _this307 = this,
                _arguments295 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments295.length > 1 && _arguments295[1] !== undefined ? _arguments295[1] : 'public';
                method = _arguments295.length > 2 && _arguments295[2] !== undefined ? _arguments295[2] : 'GET';
                params = _arguments295.length > 3 && _arguments295[3] !== undefined ? _arguments295[3] : {};
                headers = _arguments295.length > 4 && _arguments295[4] !== undefined ? _arguments295[4] : undefined;
                body = _arguments295.length > 5 && _arguments295[5] !== undefined ? _arguments295[5] : undefined;
                url = _this307.urls['api'] + '/' + _this307.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        body = _this307.json(params);
                    }
                } else {
                    if (!_this307.uid) {
                        throw new AuthenticationError(_this307.id + ' requires `' + _this307.id + '.uid` property for authentication');
                    }nonce = _this307.nonce();
                    auth = nonce.toString() + _this307.uid + _this307.apiKey;
                    signature = _this307.hmac(_this307.encode(auth), _this307.encode(_this307.secret));

                    body = _this307.json(_this307.extend({
                        'apiKey': _this307.apiKey,
                        'apiNonce': nonce,
                        'apiSig': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this307.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test15 = 'isAccepted' in response;

                if (_test15 && response['isAccepted']) {
                    return response;
                } else {
                    throw new ExchangeError(_this307.id + ' ' + _this307.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var foxbit = extend(blinktrade, {
        'id': 'foxbit',
        'name': 'FoxBit',
        'countries': 'BR',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://foxbit.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var fyb = {

        'rateLimit': 1500,
        'api': {
            'public': {
                'get': ['ticker', 'tickerdetailed', 'orderbook', 'trades']
            },
            'private': {
                'post': ['test', 'getaccinfo', 'getpendingorders', 'getorderhistory', 'cancelpendingorder', 'placeorder', 'withdraw']
            }
        },

        fetchBalance: function fetchBalance() {
            var balance,
                btc,
                symbol,
                quote,
                lowercase,
                fiat,
                crypto,
                accounts,
                _this308 = this;

            return Promise.resolve().then(function () {
                return _this308.privatePostGetaccinfo();
            }).then(function (_resp) {
                balance = _resp;
                btc = parseFloat(balance['btcBal']);
                symbol = _this308.symbols[0];
                quote = _this308.markets[symbol]['quote'];
                lowercase = quote.toLowerCase() + 'Bal';
                fiat = parseFloat(balance[lowercase]);
                crypto = {
                    'free': btc,
                    'used': undefined,
                    'total': btc
                };
                accounts = { 'BTC': crypto };

                accounts[quote] = {
                    'free': fiat,
                    'used': undefined,
                    'total': fiat
                };
                accounts['info'] = balance;
                return accounts;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this309 = this,
                _arguments297 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments297.length > 1 && _arguments297[1] !== undefined ? _arguments297[1] : {};
                return _this309.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this309.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this309.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                last,
                volume,
                _this310 = this;

            return Promise.resolve().then(function () {
                return _this310.publicGetTickerdetailed();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this310.milliseconds();
                last = undefined;
                volume = undefined;

                if ('last' in ticker) {
                    last = parseFloat(ticker['last']);
                }if ('vol' in ticker) {
                    volume = parseFloat(ticker['vol']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this310.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this311 = this,
                _arguments299 = arguments;

            params = _arguments299.length > 1 && _arguments299[1] !== undefined ? _arguments299[1] : {};

            return _this311.publicGetTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this312 = this,
                _arguments300 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments300.length > 4 && _arguments300[4] !== undefined ? _arguments300[4] : undefined;
                params = _arguments300.length > 5 && _arguments300[5] !== undefined ? _arguments300[5] : {};
                return _this312.privatePostPlaceorder(_this312.extend({
                    'qty': amount,
                    'price': price,
                    'type': side[0].toUpperCase()
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['pending_oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this313 = this;

            return _this313.privatePostCancelpendingorder({ 'orderNo': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this314 = this,
                _arguments302 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments302.length > 1 && _arguments302[1] !== undefined ? _arguments302[1] : 'public';
                method = _arguments302.length > 2 && _arguments302[2] !== undefined ? _arguments302[2] : 'GET';
                params = _arguments302.length > 3 && _arguments302[3] !== undefined ? _arguments302[3] : {};
                headers = _arguments302.length > 4 && _arguments302[4] !== undefined ? _arguments302[4] : undefined;
                body = _arguments302.length > 5 && _arguments302[5] !== undefined ? _arguments302[5] : undefined;
                url = _this314.urls['api'] + '/' + path;

                if (api == 'public') {
                    url += '.json';
                } else {
                    nonce = _this314.nonce();

                    body = _this314.urlencode(_this314.extend({ 'timestamp': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this314.apiKey,
                        'sig': _this314.hmac(_this314.encode(body), _this314.encode(_this314.secret), 'sha1')
                    };
                }
                return _this314.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('error' in response) {
                        if (response['error']) {
                            throw new ExchangeError(_this314.id + ' ' + _this314.json(response));
                        }
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var fybse = extend(fyb, {
        'id': 'fybse',
        'name': 'FYB-SE',
        'countries': 'SE', // Sweden
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
            'api': 'https://www.fybse.se/api/SEK',
            'www': 'https://www.fybse.se',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' }
        }
    });

    //-----------------------------------------------------------------------------

    var fybsg = extend(fyb, {
        'id': 'fybsg',
        'name': 'FYB-SG',
        'countries': 'SG', // Singapore
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',
            'api': 'https://www.fybsg.com/api/SGD',
            'www': 'https://www.fybsg.com',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' }
        }
    });

    //-----------------------------------------------------------------------------

    var gatecoin = {

        'id': 'gatecoin',
        'name': 'Gatecoin',
        'rateLimit': 2000,
        'countries': 'HK', // Hong Kong
        'comment': 'a regulated/licensed exchange',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',
            'api': 'https://api.gatecoin.com',
            'www': 'https://gatecoin.com',
            'doc': ['https://gatecoin.com/api', 'https://github.com/Gatecoin/RESTful-API-Implementation', 'https://api.gatecoin.com/swagger-ui/index.html']
        },
        'api': {
            'public': {
                'get': ['Public/ExchangeRate', // Get the exchange rates
                'Public/LiveTicker', // Get live ticker for all currency
                'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency
                'Public/LiveTickers', // Get live ticker for all currency
                'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.
                'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency
                'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency
                'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history
                'Public/Transactions/{CurrencyPair}', // Gets recent transactions
                'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions
                'Reference/BusinessNatureList', // Get the business nature list.
                'Reference/Countries', // Get the country list.
                'Reference/Currencies', // Get the currency list.
                'Reference/CurrencyPairs', // Get the currency pair list.
                'Reference/CurrentStatusList', // Get the current status list.
                'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.
                'Reference/IncomeRangeList', // Get the income range list.
                'Reference/IncomeSourceList', // Get the income source list.
                'Reference/VerificationLevelList', // Get the verif level list.
                'Stream/PublicChannel'],
                'post': ['Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date
                'Ping', // Post a string, then get it back.
                'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails
                'RegisterUser']
            },
            'private': {
                'get': ['Account/CorporateData', // Get corporate account data
                'Account/DocumentAddress', // Check if residence proof uploaded
                'Account/DocumentCorporation', // Check if registered document uploaded
                'Account/DocumentID', // Check if ID document copy uploaded
                'Account/DocumentInformation', // Get Step3 Data
                'Account/Email', // Get user email
                'Account/FeeRate', // Get fee rate of logged in user
                'Account/Level', // Get verif level of logged in user
                'Account/PersonalInformation', // Get Step1 Data
                'Account/Phone', // Get user phone number
                'Account/Profile', // Get trader profile
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Get referral information
                'Account/ReferralCode', // Get the referral code of the logged in user
                'Account/ReferralNames', // Get names of referred traders
                'Account/ReferralReward', // Get referral reward information
                'Account/ReferredCode', // Get referral code
                'Account/ResidentInformation', // Get Step2 Data
                'Account/SecuritySettings', // Get verif details of logged in user
                'Account/User', // Get all user info
                'APIKey/APIKey', // Get API Key for logged in user
                'Auth/ConnectionHistory', // Gets connection history of logged in user
                'Balance/Balances', // Gets the available balance for each currency for the logged in account.
                'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.
                'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user
                'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user
                'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit
                'Bank/Transactions', // Get all account transactions of the logged in user
                'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.
                'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.
                'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.
                'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.
                'Info/ReferenceCurrency', // Get user's reference currency
                'Info/ReferenceLanguage', // Get user's reference language
                'Notification/Messages', // Get from oldest unread + 3 read message to newest messages
                'Trade/Orders', // Gets open orders for the logged in trader.
                'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.
                'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/Trades', // Gets all transactions of logged in user
                'Trade/UserTrades'],
                'post': ['Account/DocumentAddress', // Upload address proof document
                'Account/DocumentCorporation', // Upload registered document document
                'Account/DocumentID', // Upload ID document copy
                'Account/Email/RequestVerify', // Request for verification email
                'Account/Email/Verify', // Verification email
                'Account/GoogleAuth', // Enable google auth
                'Account/Level', // Request verif level of logged in user
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Post a referral email
                'APIKey/APIKey', // Create a new API key for logged in user
                'Auth/ChangePassword', // Change password.
                'Auth/ForgotPassword', // Request reset password
                'Auth/ForgotUserID', // Request user id
                'Auth/Login', // Trader session log in.
                'Auth/Logout', // Logout from the current session.
                'Auth/LogoutOtherSessions', // Logout other sessions.
                'Auth/ResetPassword', // Reset password
                'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account
                'Bank/UserAccounts', // Add an account the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.
                'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.
                'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.
                'Notification/Messages', // Mark all as read
                'Notification/Messages/{ID}', // Mark as read
                'Trade/Orders', // Place an order at the exchange.
                'Trade/StopOrders'],
                'put': ['Account/CorporateData', // Update user company data for corporate account
                'Account/DocumentID', // Update ID document meta data
                'Account/DocumentInformation', // Update Step3 Data
                'Account/Email', // Update user email
                'Account/PersonalInformation', // Update Step1 Data
                'Account/Phone', // Update user phone number
                'Account/Questionnaire', // update the questionnaire
                'Account/ReferredCode', // Update referral code
                'Account/ResidentInformation', // Update Step2 Data
                'Account/SecuritySettings', // Update verif details of logged in user
                'Account/User', // Update all user info
                'Bank/UserAccounts', // Update the label of existing user bank accounnt
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address
                'Info/ReferenceCurrency', // User's reference currency
                'Info/ReferenceLanguage'],
                'delete': ['APIKey/APIKey/{PublicKey}', // Remove an API key
                'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user
                'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.
                'Trade/Orders', // Cancels all existing order
                'Trade/Orders/{OrderID}', // Cancels an existing order
                'Trade/StopOrders', // Cancels all existing stop orders
                'Trade/StopOrders/{ID}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this315 = this;

            return Promise.resolve().then(function () {
                return _this315.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                markets = response['tickers'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currencyPair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this316 = this;

            return Promise.resolve().then(function () {
                return _this316.loadMarkets();
            }).then(function () {
                return _this316.privateGetBalanceBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': balance['availableBalance'],
                        'used': _this316.sum(balance['pendingIncoming'], balance['pendingOutgoing'], balance['openOrder']),
                        'total': balance['balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this317 = this,
                _arguments305 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments305.length > 1 && _arguments305[1] !== undefined ? _arguments305[1] : {};
                return _this317.loadMarkets();
            }).then(function () {
                p = _this317.market(market);
                return _this317.publicGetPublicMarketDepthCurrencyPair(_this317.extend({
                    'CurrencyPair': p['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this317.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this317.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = parseInt(ticker['createDateTime']) * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _this318 = this;

            return Promise.resolve().then(function () {
                return _this318.loadMarkets();
            }).then(function () {
                return _this318.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['tickers'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['currencyPair'];
                    market = _this318.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this318.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                response,
                ticker,
                _this319 = this;

            return Promise.resolve().then(function () {
                return _this319.loadMarkets();
            }).then(function () {
                p = _this319.market(market);
                return _this319.publicGetPublicLiveTickerCurrencyPair({
                    'CurrencyPair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this319.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this320 = this,
                _arguments308 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments308.length > 1 && _arguments308[1] !== undefined ? _arguments308[1] : {};
                return _this320.loadMarkets();
            }).then(function () {
                return _this320.publicGetPublicTransactionsCurrencyPair(_this320.extend({
                    'CurrencyPair': _this320.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this321 = this,
                _arguments309 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments309.length > 4 && _arguments309[4] !== undefined ? _arguments309[4] : undefined;
                params = _arguments309.length > 5 && _arguments309[5] !== undefined ? _arguments309[5] : {};
                return _this321.loadMarkets();
            }).then(function () {
                order = {
                    'Code': _this321.marketId(market),
                    'Way': side == 'buy' ? 'Bid' : 'Ask',
                    'Amount': amount
                };

                if (type == 'limit') {
                    order['Price'] = price;
                }if (_this321.twofa) {
                    if ('ValidationCode' in params) {
                        order['ValidationCode'] = params['ValidationCode'];
                    } else {
                        throw new AuthenticationError(_this321.id + ' two-factor authentication requires a missing ValidationCode parameter');
                    }
                }
                return _this321.privatePostTradeOrders(_this321.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['clOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this322 = this;

            return Promise.resolve().then(function () {
                return _this322.loadMarkets();
            }).then(function () {
                return _this322.privateDeleteTradeOrdersOrderID({ 'OrderID': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                contentType,
                auth,
                signature,
                response,
                _test16,
                _test17,
                _this323 = this,
                _arguments311 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments311.length > 1 && _arguments311[1] !== undefined ? _arguments311[1] : 'public';
                method = _arguments311.length > 2 && _arguments311[2] !== undefined ? _arguments311[2] : 'GET';
                params = _arguments311.length > 3 && _arguments311[3] !== undefined ? _arguments311[3] : {};
                headers = _arguments311.length > 4 && _arguments311[4] !== undefined ? _arguments311[4] : undefined;
                body = _arguments311.length > 5 && _arguments311[5] !== undefined ? _arguments311[5] : undefined;
                url = _this323.urls['api'] + '/' + _this323.implodeParams(path, params);
                query = _this323.omit(params, _this323.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this323.urlencode(query);
                    }
                } else {
                    nonce = _this323.nonce();
                    contentType = method == 'GET' ? '' : 'application/json';
                    auth = method + url + contentType + nonce.toString();

                    auth = auth.toLowerCase();
                    signature = _this323.hmac(_this323.encode(auth), _this323.encode(_this323.secret), 'sha256', 'base64');

                    headers = {
                        'API_PUBLIC_KEY': _this323.apiKey,
                        'API_REQUEST_SIGNATURE': signature,
                        'API_REQUEST_DATE': nonce
                    };
                    if (method != 'GET') {
                        headers['Content-Type'] = contentType;
                        body = _this323.json(_this323.extend({ 'nonce': nonce }, params));
                    }
                }
                return _this323.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test16 = 'responseStatus' in response;
                _test17 = _test16 && 'message' in response['responseStatus'];

                if (_test17 && response['responseStatus']['message'] == 'OK') {
                    return response;
                } else {
                    throw new ExchangeError(_this323.id + ' ' + _this323.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gdax = {
        'id': 'gdax',
        'name': 'GDAX',
        'countries': 'US',
        'rateLimit': 1000,
        'urls': {
            'test': 'https://api-public.sandbox.gdax.com',
            'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',
            'api': 'https://api.gdax.com',
            'www': 'https://www.gdax.com',
            'doc': 'https://docs.gdax.com'
        },
        'api': {
            'public': {
                'get': ['currencies', 'products', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']
            },
            'private': {
                'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'coinbase-accounts', 'fills', 'funding', 'orders', 'orders/{id}', 'payment-methods', 'position', 'reports/{id}', 'users/self/trailing-volume'],
                'post': ['deposits/coinbase-account', 'deposits/payment-method', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/crypto', 'withdrawals/payment-method'],
                'delete': ['orders', 'orders/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this324 = this;

            return Promise.resolve().then(function () {
                return _this324.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quote_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this325 = this;

            return Promise.resolve().then(function () {
                return _this325.loadMarkets();
            }).then(function () {
                return _this325.privateGetAccounts();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['hold']),
                        'total': parseFloat(balance['balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this326 = this,
                _arguments314 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments314.length > 1 && _arguments314[1] !== undefined ? _arguments314[1] : {};
                return _this326.loadMarkets();
            }).then(function () {
                return _this326.publicGetProductsIdBook(_this326.extend({
                    'id': _this326.marketId(market),
                    'level': 2 // 1 best bidask, 2 aggregated, 3 full
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this326.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this326.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                quote,
                timestamp,
                bid,
                ask,
                _this327 = this;

            return Promise.resolve().then(function () {
                return _this327.loadMarkets();
            }).then(function () {
                p = _this327.market(market);
                return _this327.publicGetProductsIdTicker({
                    'id': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                return _this327.publicGetProductsIdStats({
                    'id': p['id']
                });
            }).then(function (_resp) {
                quote = _resp;
                timestamp = _this327.parse8601(ticker['time']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    bid = parseFloat(ticker['bid']);
                }if ('ask' in ticker) {
                    ask = parseFloat(ticker['ask']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this327.iso8601(timestamp),
                    'high': parseFloat(quote['high']),
                    'low': parseFloat(quote['low']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': parseFloat(quote['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(quote['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(['time']);
            var type = undefined;
            return {
                'id': trade['trade_id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['size'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this328 = this,
                _arguments316 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments316.length > 1 && _arguments316[1] !== undefined ? _arguments316[1] : {};
                return _this328.loadMarkets();
            }).then(function () {
                return _this328.publicGetProductsIdTrades(_this328.extend({
                    'id': _this328.marketId(market) // fixes issue #2
                }, params));
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, ohlcv[3], ohlcv[2], ohlcv[1], ohlcv[4], ohlcv[5]];
        },
        fetchOHLCV: function fetchOHLCV(market) {
            var timeframe,
                since,
                limit,
                m,
                response,
                _this329 = this,
                _arguments317 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments317.length > 1 && _arguments317[1] !== undefined ? _arguments317[1] : 60;
                since = _arguments317.length > 2 && _arguments317[2] !== undefined ? _arguments317[2] : undefined;
                limit = _arguments317.length > 3 && _arguments317[3] !== undefined ? _arguments317[3] : undefined;
                m = _this329.market(market);
                return _this329.publicGetProductsIdCandles({
                    'id': m['id'],
                    'granularity': timeframe,
                    'start': since,
                    'end': limit
                });
            }).then(function (_resp) {
                response = _resp;

                return _this329.parseOHLCVs(m, response, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                oid,
                order,
                response,
                _this330 = this,
                _arguments318 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments318.length > 4 && _arguments318[4] !== undefined ? _arguments318[4] : undefined;
                params = _arguments318.length > 5 && _arguments318[5] !== undefined ? _arguments318[5] : {};
                return _this330.loadMarkets();
            }).then(function () {
                oid = _this330.nonce().toString();
                order = {
                    'product_id': _this330.marketId(market),
                    'side': side,
                    'size': amount,
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this330.privatePostOrders(_this330.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this331 = this;

            return Promise.resolve().then(function () {
                return _this331.loadMarkets();
            }).then(function () {
                return _this331.privateDeleteOrdersId({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                what,
                secret,
                signature,
                response,
                _this332 = this,
                _arguments320 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments320.length > 1 && _arguments320[1] !== undefined ? _arguments320[1] : 'public';
                method = _arguments320.length > 2 && _arguments320[2] !== undefined ? _arguments320[2] : 'GET';
                params = _arguments320.length > 3 && _arguments320[3] !== undefined ? _arguments320[3] : {};
                headers = _arguments320.length > 4 && _arguments320[4] !== undefined ? _arguments320[4] : undefined;
                body = _arguments320.length > 5 && _arguments320[5] !== undefined ? _arguments320[5] : undefined;
                request = '/' + _this332.implodeParams(path, params);
                url = _this332.urls['api'] + request;
                query = _this332.omit(params, _this332.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this332.urlencode(query);
                    }
                } else {
                    if (!_this332.apiKey) {
                        throw new AuthenticationError(_this332.id + ' requires apiKey property for authentication and trading');
                    }if (!_this332.secret) {
                        throw new AuthenticationError(_this332.id + ' requires secret property for authentication and trading');
                    }if (!_this332.password) {
                        throw new AuthenticationError(_this332.id + ' requires password property for authentication and trading');
                    }nonce = _this332.nonce().toString();

                    if (Object.keys(query).length) {
                        body = _this332.json(query);
                    }what = nonce + method + request + (body || '');
                    secret = _this332.base64ToBinary(_this332.secret);
                    signature = _this332.hmac(_this332.encode(what), secret, 'sha256', 'base64');

                    headers = {
                        'CB-ACCESS-KEY': _this332.apiKey,
                        'CB-ACCESS-SIGN': _this332.decode(signature),
                        'CB-ACCESS-TIMESTAMP': nonce,
                        'CB-ACCESS-PASSPHRASE': _this332.password,
                        'Content-Type': 'application/json'
                    };
                }
                return _this332.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this332.id + ' ' + _this332.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gemini = {
        'id': 'gemini',
        'name': 'Gemini',
        'countries': 'US',
        'rateLimit': 1500, // 200 for private API
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
            'api': 'https://api.gemini.com',
            'www': 'https://gemini.com',
            'doc': 'https://docs.gemini.com/rest-api'
        },
        'api': {
            'public': {
                'get': ['symbols', 'pubticker/{symbol}', 'book/{symbol}', 'trades/{symbol}', 'auction/{symbol}', 'auction/{symbol}/history']
            },
            'private': {
                'post': ['order/new', 'order/cancel', 'order/cancel/session', 'order/cancel/all', 'order/status', 'orders', 'mytrades', 'tradevolume', 'balances', 'deposit/{currency}/newAddress', 'withdraw/{currency}', 'heartbeat']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                id,
                market,
                uppercase,
                base,
                quote,
                symbol,
                _this333 = this;

            return Promise.resolve().then(function () {
                return _this333.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    id = markets[p];
                    market = id;
                    uppercase = market.toUpperCase();
                    base = uppercase.slice(0, 3);
                    quote = uppercase.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp4,
                _this334 = this,
                _arguments322 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments322.length > 1 && _arguments322[1] !== undefined ? _arguments322[1] : {};
                return _this334.loadMarkets();
            }).then(function () {
                return _this334.publicGetBookSymbol(_this334.extend({
                    'symbol': _this334.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this334.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this334.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);
                        _timestamp4 = parseInt(order['timestamp']) * 1000;

                        result[side].push([price, amount, _timestamp4]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this335 = this;

            return Promise.resolve().then(function () {
                return _this335.loadMarkets();
            }).then(function () {
                p = _this335.market(market);
                return _this335.publicGetPubtickerSymbol({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['volume']['timestamp'];
                baseVolume = p['base'];
                quoteVolume = p['quote'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this335.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume'][baseVolume]),
                    'quoteVolume': parseFloat(ticker['volume'][quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this336 = this,
                _arguments324 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments324.length > 1 && _arguments324[1] !== undefined ? _arguments324[1] : {};
                return _this336.loadMarkets();
            }).then(function () {
                return _this336.publicGetTradesSymbol(_this336.extend({
                    'symbol': _this336.marketId(market)
                }, params));
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this337 = this;

            return Promise.resolve().then(function () {
                return _this337.loadMarkets();
            }).then(function () {
                return _this337.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': undefined,
                        'total': parseFloat(balance['amount'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this338 = this,
                _arguments326 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments326.length > 4 && _arguments326[4] !== undefined ? _arguments326[4] : undefined;
                params = _arguments326.length > 5 && _arguments326[5] !== undefined ? _arguments326[5] : {};
                return _this338.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this338.id + ' allows limit orders only');
                }order = {
                    'client_order_id': _this338.nonce(),
                    'symbol': _this338.marketId(market),
                    'amount': amount.toString(),
                    'price': price.toString(),
                    'side': side,
                    'type': 'exchange limit' // gemini allows limit orders only
                };
                return _this338.privatePostOrderNew(_this338.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this339 = this;

            return Promise.resolve().then(function () {
                return _this339.loadMarkets();
            }).then(function () {
                return _this339.privatePostCancelOrder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                payload,
                signature,
                response,
                _this340 = this,
                _arguments328 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments328.length > 1 && _arguments328[1] !== undefined ? _arguments328[1] : 'public';
                method = _arguments328.length > 2 && _arguments328[2] !== undefined ? _arguments328[2] : 'GET';
                params = _arguments328.length > 3 && _arguments328[3] !== undefined ? _arguments328[3] : {};
                headers = _arguments328.length > 4 && _arguments328[4] !== undefined ? _arguments328[4] : undefined;
                body = _arguments328.length > 5 && _arguments328[5] !== undefined ? _arguments328[5] : undefined;
                url = '/' + _this340.version + '/' + _this340.implodeParams(path, params);
                query = _this340.omit(params, _this340.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this340.urlencode(query);
                    }
                } else {
                    nonce = _this340.nonce();
                    request = _this340.extend({
                        'request': url,
                        'nonce': nonce
                    }, query);
                    payload = _this340.json(request);

                    payload = _this340.stringToBase64(_this340.encode(payload));
                    signature = _this340.hmac(payload, _this340.encode(_this340.secret), 'sha384');

                    headers = {
                        'Content-Type': 'text/plain',
                        'Content-Length': 0,
                        'X-GEMINI-APIKEY': _this340.apiKey,
                        'X-GEMINI-PAYLOAD': payload,
                        'X-GEMINI-SIGNATURE': signature
                    };
                }
                url = _this340.urls['api'] + url;
                return _this340.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] == 'error') {
                        throw new ExchangeError(_this340.id + ' ' + _this340.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc = {

        'id': 'hitbtc',
        'name': 'HitBTC',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'http://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://hitbtc.com/api', 'http://hitbtc-com.github.io/hitbtc-api', 'http://jsfiddle.net/bmknight/RqbYB']
        },
        'api': {
            'public': {
                'get': ['{symbol}/orderbook', '{symbol}/ticker', '{symbol}/trades', '{symbol}/trades/recent', 'symbols', 'ticker', 'time,']
            },
            'trading': {
                'get': ['balance', 'orders/active', 'orders/recent', 'order', 'trades/by/order', 'trades'],
                'post': ['new_order', 'cancel_order', 'cancel_orders']
            },
            'payment': {
                'get': ['balance', 'address/{currency}', 'transactions', 'transactions/{transaction}'],
                'post': ['transfer_to_trading', 'transfer_to_main', 'address/{currency}', 'payout']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                lot,
                step,
                symbol,
                _this341 = this;

            return Promise.resolve().then(function () {
                return _this341.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['symbols'].length; p++) {
                    market = markets['symbols'][p];
                    id = market['symbol'];
                    base = market['commodity'];
                    quote = market['currency'];
                    lot = parseFloat(market['lot']);
                    step = parseFloat(market['step']);

                    base = _this341.commonCurrencyCode(base);
                    quote = _this341.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'lot': lot,
                        'step': step,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this342 = this;

            return Promise.resolve().then(function () {
                return _this342.loadMarkets();
            }).then(function () {
                return _this342.tradingGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    account = {
                        'free': parseFloat(balance['cash']),
                        'used': parseFloat(balance['reserved']),
                        'total': undefined
                    };

                    account['total'] = _this342.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this343 = this,
                _arguments331 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments331.length > 1 && _arguments331[1] !== undefined ? _arguments331[1] : {};
                return _this343.loadMarkets();
            }).then(function () {
                return _this343.publicGetSymbolOrderbook(_this343.extend({
                    'symbol': _this343.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this343.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this343.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': parseFloat(ticker['volume_quote']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this344 = this;

            return Promise.resolve().then(function () {
                return _this344.loadMarkets();
            }).then(function () {
                return _this344.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this344.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this344.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this345 = this;

            return Promise.resolve().then(function () {
                return _this345.loadMarkets();
            }).then(function () {
                p = _this345.market(market);
                return _this345.publicGetSymbolTicker({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new ExchangeError(_this345.id + ' ' + ticker['message']);
                }return _this345.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this346 = this,
                _arguments334 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments334.length > 1 && _arguments334[1] !== undefined ? _arguments334[1] : {};
                return _this346.loadMarkets();
            }).then(function () {
                return _this346.publicGetSymbolTrades(_this346.extend({
                    'symbol': _this346.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                quantity,
                wholeLots,
                difference,
                clientOrderId,
                order,
                response,
                _this347 = this,
                _arguments335 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments335.length > 4 && _arguments335[4] !== undefined ? _arguments335[4] : undefined;
                params = _arguments335.length > 5 && _arguments335[5] !== undefined ? _arguments335[5] : {};
                return _this347.loadMarkets();
            }).then(function () {
                p = _this347.market(market);
                // check if amount can be evenly divided into lots
                // they want integer quantity in lot units

                quantity = parseFloat(amount) / p['lot'];
                wholeLots = Math.round(quantity);
                difference = quantity - wholeLots;

                if (Math.abs(difference) > p['step']) {
                    throw new ExchangeError(_this347.id + ' order amount should be evenly divisible by lot unit size of ' + p['lot'].toString());
                }clientOrderId = _this347.nonce();
                order = {
                    'clientOrderId': clientOrderId.toString(),
                    'symbol': p['id'],
                    'side': side,
                    'quantity': wholeLots.toString(), // quantity in integer lot units
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = '%.10f'.sprintf(price);
                }return _this347.tradingPostNewOrder(_this347.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['ExecutionReport']['clientOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this348 = this,
                _arguments336 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments336.length > 1 && _arguments336[1] !== undefined ? _arguments336[1] : {};
                return _this348.loadMarkets();
            }).then(function () {
                return _this348.tradingPostCancelOrder(_this348.extend({
                    'clientOrderId': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this349 = this,
                _arguments337 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments337.length > 1 && _arguments337[1] !== undefined ? _arguments337[1] : 'public';
                method = _arguments337.length > 2 && _arguments337[2] !== undefined ? _arguments337[2] : 'GET';
                params = _arguments337.length > 3 && _arguments337[3] !== undefined ? _arguments337[3] : {};
                headers = _arguments337.length > 4 && _arguments337[4] !== undefined ? _arguments337[4] : undefined;
                body = _arguments337.length > 5 && _arguments337[5] !== undefined ? _arguments337[5] : undefined;
                url = '/' + 'api' + '/' + _this349.version + '/' + api + '/' + _this349.implodeParams(path, params);
                query = _this349.omit(params, _this349.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this349.urlencode(query);
                    }
                } else {
                    nonce = _this349.nonce();

                    query = _this349.extend({ 'nonce': nonce, 'apikey': _this349.apiKey }, query);
                    if (method == 'POST') {
                        if (Object.keys(query).length) {
                            body = _this349.urlencode(query);
                        }
                    }url += '?' + _this349.urlencode(query);
                    auth = url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Signature': _this349.hmac(_this349.encode(auth), _this349.encode(_this349.secret), 'sha512').toLowerCase()
                    };
                }
                url = _this349.urls['api'] + url;
                return _this349.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    throw new ExchangeError(_this349.id + ' ' + _this349.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var huobi = {

        'id': 'huobi',
        'name': 'Huobi',
        'countries': 'CN',
        'rateLimit': 2000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'http://api.huobi.com',
            'www': 'https://www.huobi.com',
            'doc': 'https://github.com/huobiapi/API_Docs_en/wiki'
        },
        'api': {
            'staticmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'usdmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'trade': {
                'post': ['get_account_info', 'get_orders', 'order_info', 'buy', 'sell', 'buy_market', 'sell_market', 'cancel_order', 'get_new_deal_orders', 'get_order_id_by_trade_id', 'withdraw_coin', 'cancel_withdraw_coin', 'get_withdraw_coin_result', 'transfer', 'loan', 'repayment', 'get_loan_available', 'get_loans']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },
            'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 },
            'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket', 'coinType': 1 }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                available,
                frozen,
                loan,
                _this350 = this;

            return Promise.resolve().then(function () {
                return _this350.tradePostGetAccountInfo();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this350.currencies.length; c++) {
                    currency = _this350.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    available = 'available_' + lowercase + '_display';
                    frozen = 'frozen_' + lowercase + '_display';
                    loan = 'loan_' + lowercase + '_display';

                    if (available in balances) {
                        account['free'] = parseFloat(balances[available]);
                    }if (frozen in balances) {
                        account['used'] = parseFloat(balances[frozen]);
                    }if (loan in balances) {
                        account['used'] = _this350.sum(account['used'], parseFloat(balances[loan]));
                    }account['total'] = _this350.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                method,
                orderbook,
                timestamp,
                result,
                _this351 = this,
                _arguments339 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments339.length > 1 && _arguments339[1] !== undefined ? _arguments339[1] : {};
                p = _this351.market(market);
                method = p['type'] + 'GetDepthId';
                return _this351[method](_this351.extend({ 'id': p['id'] }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this351.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this351.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                method,
                response,
                ticker,
                timestamp,
                _this352 = this;

            return Promise.resolve().then(function () {
                p = _this352.market(market);
                method = p['type'] + 'GetTickerId';
                return _this352[method]({ 'id': p['id'] });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['time']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this352.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                p,
                method,
                _this353 = this,
                _arguments341 = arguments;

            params = _arguments341.length > 1 && _arguments341[1] !== undefined ? _arguments341[1] : {};
            p = _this353.market(market);
            method = p['type'] + 'GetDetailId';

            return _this353[method](_this353.extend({ 'id': p['id'] }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                response,
                _this354 = this,
                _arguments342 = arguments;

            price = _arguments342.length > 4 && _arguments342[4] !== undefined ? _arguments342[4] : undefined;
            params = _arguments342.length > 5 && _arguments342[5] !== undefined ? _arguments342[5] : {};
            p = _this354.market(market);
            method = 'tradePost' + _this354.capitalize(side);
            order = {
                'coin_type': p['coinType'],
                'amount': amount,
                'market': p['quote'].toLowerCase()
            };

            if (type == 'limit') {
                order['price'] = price;
            } else {
                method += _this354.capitalize(type);
            }response = _this354[method](_this354.extend(order, params));

            return {
                'info': response,
                'id': response['id']
            };
        },
        cancelOrder: function cancelOrder(id) {
            var _this355 = this;

            return _this355.tradePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                _query,
                response,
                _this356 = this,
                _arguments344 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments344.length > 1 && _arguments344[1] !== undefined ? _arguments344[1] : 'trade';
                method = _arguments344.length > 2 && _arguments344[2] !== undefined ? _arguments344[2] : 'GET';
                params = _arguments344.length > 3 && _arguments344[3] !== undefined ? _arguments344[3] : {};
                headers = _arguments344.length > 4 && _arguments344[4] !== undefined ? _arguments344[4] : undefined;
                body = _arguments344.length > 5 && _arguments344[5] !== undefined ? _arguments344[5] : undefined;
                url = _this356.urls['api'];

                if (api == 'trade') {
                    url += '/api' + _this356.version;
                    query = _this356.keysort(_this356.extend({
                        'method': path,
                        'access_key': _this356.apiKey,
                        'created': _this356.nonce()
                    }, params));
                    queryString = _this356.urlencode(_this356.omit(query, 'market'));
                    // secret key must be at the end of query to be signed

                    queryString += '&secret_key=' + _this356.secret;
                    query['sign'] = _this356.hash(_this356.encode(queryString));
                    body = _this356.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                } else {
                    url += '/' + api + '/' + _this356.implodeParams(path, params) + '_json.js';
                    _query = _this356.omit(params, _this356.extractParams(path));

                    if (Object.keys(_query).length) {
                        url += '?' + _this356.urlencode(_query);
                    }
                }
                return _this356.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this356.id + ' ' + _this356.json(response));
                    }
                }if ('code' in response) {
                    throw new ExchangeError(_this356.id + ' ' + _this356.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var itbit = {

        'id': 'itbit',
        'name': 'itBit',
        'countries': 'US',
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
            'api': 'https://api.itbit.com',
            'www': 'https://www.itbit.com',
            'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']
        },
        'api': {
            'public': {
                'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']
            },
            'private': {
                'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders/{id}'],
                'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],
                'delete': ['wallets/{walletId}/orders/{id}']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this357 = this,
                _arguments345 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments345.length > 1 && _arguments345[1] !== undefined ? _arguments345[1] : {};
                return _this357.publicGetMarketsSymbolOrderBook(_this357.extend({
                    'symbol': _this357.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this357.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this357.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                bid,
                ask,
                _this358 = this;

            return Promise.resolve().then(function () {
                return _this358.publicGetMarketsSymbolTicker({
                    'symbol': _this358.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this358.parse8601(ticker['serverTimeUTC']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    if (ticker['bid']) {
                        bid = parseFloat(ticker['bid']);
                    }
                }if ('ask' in ticker) {
                    if (ticker['ask']) {
                        ask = parseFloat(ticker['ask']);
                    }
                }return {
                    'timestamp': timestamp,
                    'datetime': _this358.iso8601(timestamp),
                    'high': parseFloat(ticker['high24h']),
                    'low': parseFloat(ticker['low24h']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': parseFloat(ticker['vwap24h']),
                    'open': parseFloat(ticker['openToday']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume24h']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this359 = this,
                _arguments347 = arguments;

            params = _arguments347.length > 1 && _arguments347[1] !== undefined ? _arguments347[1] : {};

            return _this359.publicGetMarketsSymbolTrades(_this359.extend({
                'symbol': _this359.marketId(market)
            }, params));
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this360 = this;

            return Promise.resolve().then(function () {
                return _this360.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['availableBalance']),
                        'used': undefined,
                        'total': parseFloat(balance['totalBalance'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchWallets: function fetchWallets() {
            return this.privateGetWallets();
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                order,
                response,
                _this361 = this,
                _arguments349 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments349.length > 4 && _arguments349[4] !== undefined ? _arguments349[4] : undefined;
                params = _arguments349.length > 5 && _arguments349[5] !== undefined ? _arguments349[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this361.id + ' allows limit orders only');
                }amount = amount.toString();
                price = price.toString();
                p = _this361.market(market);
                order = {
                    'side': side,
                    'type': type,
                    'currency': p['base'],
                    'amount': amount,
                    'display': amount,
                    'price': price,
                    'instrument': p['id']
                };
                return _this361.privatePostTradeAdd(_this361.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this362 = this,
                _arguments350 = arguments;

            params = _arguments350.length > 1 && _arguments350[1] !== undefined ? _arguments350[1] : {};

            return _this362.privateDeleteWalletsWalletIdOrdersId(_this362.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                timestamp,
                auth,
                message,
                _hash2,
                binhash,
                signature,
                response,
                _this363 = this,
                _arguments351 = arguments;

            api = _arguments351.length > 1 && _arguments351[1] !== undefined ? _arguments351[1] : 'public';
            method = _arguments351.length > 2 && _arguments351[2] !== undefined ? _arguments351[2] : 'GET';
            params = _arguments351.length > 3 && _arguments351[3] !== undefined ? _arguments351[3] : {};
            headers = _arguments351.length > 4 && _arguments351[4] !== undefined ? _arguments351[4] : undefined;
            body = _arguments351.length > 5 && _arguments351[5] !== undefined ? _arguments351[5] : undefined;
            url = _this363.urls['api'] + '/' + _this363.version + '/' + _this363.implodeParams(path, params);
            query = _this363.omit(params, _this363.extractParams(path));

            if (api == 'public') {
                if (Object.keys(query).length) {
                    url += '?' + _this363.urlencode(query);
                }
            } else {
                if (Object.keys(query).length) {
                    body = _this363.json(query);
                } else {
                    body = '';
                }nonce = _this363.nonce().toString();
                timestamp = nonce;
                auth = [method, url, body, nonce, timestamp];
                message = nonce + _this363.json(auth);
                _hash2 = _this363.hash(_this363.encode(message), 'sha256', 'binary');
                binhash = _this363.binaryConcat(url, _hash2);
                signature = _this363.hmac(binhash, _this363.encode(_this363.secret), 'sha512', 'base64');

                headers = {
                    'Authorization': self.apiKey + ':' + signature,
                    'Content-Type': 'application/json',
                    'X-Auth-Timestamp': timestamp,
                    'X-Auth-Nonce': nonce
                };
            }
            response = _this363.fetch(url, method, headers, body);

            if ('code' in response) {
                throw new ExchangeError(_this363.id + ' ' + _this363.json(response));
            }return response;
        }
    };

    //-----------------------------------------------------------------------------

    var jubi = {

        'id': 'jubi',
        'name': 'jubi.com',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',
            'api': 'https://www.jubi.com/api',
            'www': 'https://www.jubi.com',
            'doc': 'https://www.jubi.com/help/api.html'
        },
        'api': {
            'public': {
                'get': ['depth', 'orders', 'ticker', 'allticker']
            },
            'private': {
                'post': ['balance', 'trade_add', 'trade_cancel', 'trade_list', 'trade_view', 'wallet']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                base,
                quote,
                symbol,
                _this364 = this;

            return Promise.resolve().then(function () {
                return _this364.publicGetAllticker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    base = id.toUpperCase();
                    quote = 'CNY';
                    symbol = base + '/' + quote;

                    base = _this364.commonCurrencyCode(base);
                    quote = _this364.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': id
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                free,
                used,
                _this365 = this;

            return Promise.resolve().then(function () {
                return _this365.loadMarkets();
            }).then(function () {
                return _this365.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this365.currencies.length; c++) {
                    currency = _this365.currencies[c];
                    lowercase = currency.toLowerCase();

                    if (lowercase == 'dash') {
                        lowercase = 'drk';
                    }account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    free = lowercase + '_balance';
                    used = lowercase + '_lock';

                    if (free in balances) {
                        account['free'] = parseFloat(balances[free]);
                    }if (used in balances) {
                        account['used'] = parseFloat(balances[used]);
                    }account['total'] = _this365.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this366 = this,
                _arguments354 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments354.length > 1 && _arguments354[1] !== undefined ? _arguments354[1] : {};
                return _this366.loadMarkets();
            }).then(function () {
                return _this366.publicGetDepth(_this366.extend({
                    'coin': _this366.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this366.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this366.iso8601(timestamp)
                };

                result['asks'] = _this366.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this367 = this;

            return Promise.resolve().then(function () {
                return _this367.loadMarkets();
            }).then(function () {
                return _this367.publicGetAllticker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this367.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this367.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this368 = this;

            return Promise.resolve().then(function () {
                return _this368.loadMarkets();
            }).then(function () {
                p = _this368.market(market);
                return _this368.publicGetTicker({
                    'coin': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this368.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this369 = this,
                _arguments357 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments357.length > 1 && _arguments357[1] !== undefined ? _arguments357[1] : {};
                return _this369.loadMarkets();
            }).then(function () {
                return _this369.publicGetOrders(_this369.extend({
                    'coin': _this369.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this370 = this,
                _arguments358 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments358.length > 4 && _arguments358[4] !== undefined ? _arguments358[4] : undefined;
                params = _arguments358.length > 5 && _arguments358[5] !== undefined ? _arguments358[5] : {};
                return _this370.loadMarkets();
            }).then(function () {
                return _this370.privatePostTradeAdd(_this370.extend({
                    'amount': amount,
                    'price': price,
                    'type': side,
                    'coin': _this370.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this371 = this,
                _arguments359 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments359.length > 1 && _arguments359[1] !== undefined ? _arguments359[1] : {};
                return _this371.loadMarkets();
            }).then(function () {
                return _this371.privateDeleteWalletsWalletIdOrdersId(_this371.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                request,
                secret,
                response,
                _this372 = this,
                _arguments360 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments360.length > 1 && _arguments360[1] !== undefined ? _arguments360[1] : 'public';
                method = _arguments360.length > 2 && _arguments360[2] !== undefined ? _arguments360[2] : 'GET';
                params = _arguments360.length > 3 && _arguments360[3] !== undefined ? _arguments360[3] : {};
                headers = _arguments360.length > 4 && _arguments360[4] !== undefined ? _arguments360[4] : undefined;
                body = _arguments360.length > 5 && _arguments360[5] !== undefined ? _arguments360[5] : undefined;
                url = _this372.urls['api'] + '/' + _this372.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this372.urlencode(params);
                    }
                } else {
                    nonce = _this372.nonce().toString();
                    query = _this372.extend({
                        'key': _this372.apiKey,
                        'nonce': nonce
                    }, params);
                    request = _this372.urlencode(query);
                    secret = _this372.hash(_this372.encode(_this372.secret));

                    query['signature'] = _this372.hmac(_this372.encode(request), _this372.encode(secret));
                    body = _this372.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this372.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this372.id + ' ' + _this372.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // kraken is also owner of ex. Coinsetter / CaVirtEx / Clevercoin

    var kraken = {

        'id': 'kraken',
        'name': 'Kraken',
        'countries': 'US',
        'version': '0',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',
            'api': 'https://api.kraken.com',
            'www': 'https://www.kraken.com',
            'doc': ['https://www.kraken.com/en-us/help/api', 'https://github.com/nothingisdead/npm-kraken-api']
        },
        'api': {
            'public': {
                'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']
            },
            'private': {
                'post': ['AddOrder', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                darkpool,
                symbol,
                _this373 = this;

            return Promise.resolve().then(function () {
                return _this373.publicGetAssetPairs();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['result'][id];
                    base = market['base'];
                    quote = market['quote'];

                    if (base[0] == 'X' || base[0] == 'Z') {
                        base = base.slice(1);
                    }if (quote[0] == 'X' || quote[0] == 'Z') {
                        quote = quote.slice(1);
                    }base = _this373.commonCurrencyCode(base);
                    quote = _this373.commonCurrencyCode(quote);
                    darkpool = id.indexOf('.d') >= 0;
                    symbol = darkpool ? market['altname'] : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'darkpool': darkpool,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                darkpool,
                p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp5,
                _this374 = this,
                _arguments362 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments362.length > 1 && _arguments362[1] !== undefined ? _arguments362[1] : {};
                return _this374.loadMarkets();
            }).then(function () {
                darkpool = market.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this374.id + ' does not provide an order book for darkpool symbol ' + market);
                }p = _this374.market(market);
                return _this374.publicGetDepth(_this374.extend({
                    'pair': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][p['id']];
                timestamp = _this374.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this374.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);
                        _timestamp5 = order[2] * 1000;

                        result[side].push([price, amount, _timestamp5]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['h'][1]),
                'low': parseFloat(ticker['l'][1]),
                'bid': parseFloat(ticker['b'][0]),
                'ask': parseFloat(ticker['a'][0]),
                'vwap': parseFloat(ticker['p'][1]),
                'open': parseFloat(ticker['o']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['c'][0]),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['v'][1]),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var pairs,
                s,
                symbol,
                market,
                filter,
                response,
                tickers,
                ids,
                result,
                i,
                id,
                _market,
                _symbol2,
                ticker,
                _this375 = this;

            return Promise.resolve().then(function () {
                return _this375.loadMarkets();
            }).then(function () {
                pairs = [];

                for (s = 0; s < _this375.symbols.length; s++) {
                    symbol = _this375.symbols[s];
                    market = _this375.markets[symbol];

                    if (!market['darkpool']) {
                        pairs.push(market['id']);
                    }
                }
                filter = pairs.join(',');
                return _this375.publicGetTicker({
                    'pair': filter
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _market = _this375.markets_by_id[id];
                    _symbol2 = _market['symbol'];
                    ticker = tickers[id];

                    result[_symbol2] = _this375.parseTicker(ticker, _market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var darkpool,
                p,
                response,
                ticker,
                _this376 = this;

            return Promise.resolve().then(function () {
                return _this376.loadMarkets();
            }).then(function () {
                darkpool = market.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this376.id + ' does not provide a ticker for darkpool symbol ' + market);
                }p = _this376.market(market);
                return _this376.publicGetTicker({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][p['id']];

                return _this376.parseTicker(ticker, p);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade[2] * 1000);
            var side = trade[3] == 's' ? 'sell' : 'buy';
            var type = trade[4] == 'l' ? 'limit' : 'market';
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': type,
                'side': side,
                'price': parseFloat(trade[0]),
                'amount': parseFloat(trade[1])
            };
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0], ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[6]];
        },
        fetchOHLCV: function fetchOHLCV(market) {
            var timeframe,
                since,
                limit,
                m,
                response,
                ohlcvs,
                _this377 = this,
                _arguments365 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments365.length > 1 && _arguments365[1] !== undefined ? _arguments365[1] : 60;
                since = _arguments365.length > 2 && _arguments365[2] !== undefined ? _arguments365[2] : undefined;
                limit = _arguments365.length > 3 && _arguments365[3] !== undefined ? _arguments365[3] : undefined;
                m = _this377.market(market);
                return _this377.publicGetOHLC({
                    'pair': m['id'],
                    'interval': parseInt(timeframe / 60),
                    'since': since
                });
            }).then(function (_resp) {
                response = _resp;
                ohlcvs = response[m['id']];

                return _this377.parseOHLCVs(m, ohlcvs, timeframe, since, limit);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                id,
                response,
                trades,
                _this378 = this,
                _arguments366 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments366.length > 1 && _arguments366[1] !== undefined ? _arguments366[1] : {};
                return _this378.loadMarkets();
            }).then(function () {
                m = _this378.market(market);
                id = m['id'];
                return _this378.publicGetTrades(_this378.extend({
                    'pair': id
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['result'][id];

                return _this378.parseTrades(trades, m);
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                currencies,
                c,
                currency,
                code,
                balance,
                account,
                _this379 = this;

            return Promise.resolve().then(function () {
                return _this379.loadMarkets();
            }).then(function () {
                return _this379.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = currency;
                    // X-ISO4217-A3 standard currency codes

                    if (code[0] == 'X') {
                        code = code.slice(1);
                    } else {
                        if (code[0] == 'Z') {
                            code = code.slice(1);
                        }
                    }code = _this379.commonCurrencyCode(code);
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': undefined,
                        'total': balance
                    };

                    result[code] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                length,
                id,
                _this380 = this,
                _arguments368 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments368.length > 4 && _arguments368[4] !== undefined ? _arguments368[4] : undefined;
                params = _arguments368.length > 5 && _arguments368[5] !== undefined ? _arguments368[5] : {};
                return _this380.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this380.marketId(market),
                    'type': side,
                    'ordertype': type,
                    'volume': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this380.privatePostAddOrder(_this380.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                length = response['txid'].length;
                id = length > 1 ? response['txid'] : response['txid'][0];

                return {
                    'info': response,
                    'id': id
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this381 = this;

            return Promise.resolve().then(function () {
                return _this381.loadMarkets();
            }).then(function () {
                return _this381.privatePostCancelOrder({ 'txid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                _hash3,
                binary,
                binhash,
                secret,
                signature,
                response,
                numErrors,
                _this382 = this,
                _arguments370 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments370.length > 1 && _arguments370[1] !== undefined ? _arguments370[1] : 'public';
                method = _arguments370.length > 2 && _arguments370[2] !== undefined ? _arguments370[2] : 'GET';
                params = _arguments370.length > 3 && _arguments370[3] !== undefined ? _arguments370[3] : {};
                headers = _arguments370.length > 4 && _arguments370[4] !== undefined ? _arguments370[4] : undefined;
                body = _arguments370.length > 5 && _arguments370[5] !== undefined ? _arguments370[5] : undefined;
                url = '/' + _this382.version + '/' + api + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this382.urlencode(params);
                    }
                } else {
                    nonce = _this382.nonce().toString();

                    body = _this382.urlencode(_this382.extend({ 'nonce': nonce }, params));
                    auth = _this382.encode(nonce + body);
                    _hash3 = _this382.hash(auth, 'sha256', 'binary');
                    binary = _this382.stringToBinary(_this382.encode(url));
                    binhash = _this382.binaryConcat(binary, _hash3);
                    secret = _this382.base64ToBinary(_this382.secret);
                    signature = _this382.hmac(binhash, secret, 'sha512', 'base64');

                    headers = {
                        'API-Key': _this382.apiKey,
                        'API-Sign': _this382.decode(signature),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                url = _this382.urls['api'] + url;
                return _this382.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    numErrors = response['error'].length;

                    if (numErrors) {
                        throw new ExchangeError(_this382.id + ' ' + _this382.json(response));
                    }
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var lakebtc = {

        'id': 'lakebtc',
        'name': 'LakeBTC',
        'countries': 'US',
        'version': 'api_v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',
            'api': 'https://api.lakebtc.com',
            'www': 'https://www.lakebtc.com',
            'doc': ['https://www.lakebtc.com/s/api', 'https://www.lakebtc.com/s/api_v2']
        },
        'api': {
            'public': {
                'get': ['bcorderbook', 'bctrades', 'ticker']
            },
            'private': {
                'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                k,
                id,
                market,
                base,
                quote,
                symbol,
                _this383 = this;

            return Promise.resolve().then(function () {
                return _this383.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    market = markets[id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this384 = this;

            return Promise.resolve().then(function () {
                return _this384.loadMarkets();
            }).then(function () {
                return _this384.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': undefined,
                        'total': balance
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this385 = this,
                _arguments373 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments373.length > 1 && _arguments373[1] !== undefined ? _arguments373[1] : {};
                return _this385.loadMarkets();
            }).then(function () {
                return _this385.publicGetBcorderbook(_this385.extend({
                    'symbol': _this385.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this385.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this385.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this386 = this;

            return Promise.resolve().then(function () {
                return _this386.loadMarkets();
            }).then(function () {
                p = _this386.market(market);
                return _this386.publicGetTicker({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = _this386.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this386.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this387 = this,
                _arguments375 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments375.length > 1 && _arguments375[1] !== undefined ? _arguments375[1] : {};
                return _this387.loadMarkets();
            }).then(function () {
                return _this387.publicGetBctrades(_this387.extend({
                    'symbol': _this387.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                marketId,
                order,
                response,
                _this388 = this,
                _arguments376 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments376.length > 4 && _arguments376[4] !== undefined ? _arguments376[4] : undefined;
                params = _arguments376.length > 5 && _arguments376[5] !== undefined ? _arguments376[5] : {};
                return _this388.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this388.id + ' allows limit orders only');
                }method = 'privatePost' + _this388.capitalize(side) + 'Order';
                marketId = _this388.marketId(market);
                order = {
                    'params': [price, amount, marketId]
                };
                return _this388[method](_this388.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this389 = this;

            return Promise.resolve().then(function () {
                return _this389.loadMarkets();
            }).then(function () {
                return _this389.privatePostCancelOrder({ 'params': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                signature,
                response,
                _this390 = this,
                _arguments378 = arguments;

            api = _arguments378.length > 1 && _arguments378[1] !== undefined ? _arguments378[1] : 'public';
            method = _arguments378.length > 2 && _arguments378[2] !== undefined ? _arguments378[2] : 'GET';
            params = _arguments378.length > 3 && _arguments378[3] !== undefined ? _arguments378[3] : {};
            headers = _arguments378.length > 4 && _arguments378[4] !== undefined ? _arguments378[4] : undefined;
            body = _arguments378.length > 5 && _arguments378[5] !== undefined ? _arguments378[5] : undefined;
            url = _this390.urls['api'] + '/' + _this390.version;

            if (api == 'public') {
                url += '/' + path;
                if (Object.keys(params).length) {
                    url += '?' + _this390.urlencode(params);
                }
            } else {
                nonce = _this390.nonce();

                if (Object.keys(params).length) {
                    params = params.join(',');
                } else {
                    params = '';
                }query = _this390.urlencode({
                    'tonce': nonce,
                    'accesskey': _this390.apiKey,
                    'requestmethod': method.toLowerCase(),
                    'id': nonce,
                    'method': path,
                    'params': params
                });

                body = _this390.json({
                    'method': path,
                    'params': params,
                    'id': nonce
                });
                signature = _this390.hmac(_this390.encode(query), _this390.secret, 'sha1', 'base64');

                headers = {
                    'Json-Rpc-Tonce': nonce,
                    'Authorization': "Basic " + _this390.apiKey + ':' + signature,
                    'Content-Length': body.length,
                    'Content-Type': 'application/json'
                };
            }
            response = _this390.fetch(url, method, headers, body);

            if ('error' in response) {
                throw new ExchangeError(_this390.id + ' ' + _this390.json(response));
            }return response;
        }
    };

    //-----------------------------------------------------------------------------

    var livecoin = {

        'id': 'livecoin',
        'name': 'LiveCoin',
        'countries': ['US', 'UK', 'RU'],
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',
            'api': 'https://api.livecoin.net',
            'www': 'https://www.livecoin.net',
            'doc': 'https://www.livecoin.net/api?lang=en'
        },
        'api': {
            'public': {
                'get': ['exchange/all/order_book', 'exchange/last_trades', 'exchange/maxbid_minask', 'exchange/order_book', 'exchange/restrictions', 'exchange/ticker', // omit params to get all tickers at once
                'info/coinInfo']
            },
            'private': {
                'get': ['exchange/client_orders', 'exchange/order', 'exchange/trades', 'exchange/commission', 'exchange/commissionCommonInfo', 'payment/balances', 'payment/balance', 'payment/get/address', 'payment/history/size', 'payment/history/transactions'],
                'post': ['exchange/buylimit', 'exchange/buymarket', 'exchange/cancellimit', 'exchange/selllimit', 'exchange/sellmarket', 'payment/out/capitalist', 'payment/out/card', 'payment/out/coin', 'payment/out/okpay', 'payment/out/payeer', 'payment/out/perfectmoney', 'payment/voucher/amount', 'payment/voucher/make', 'payment/voucher/redeem']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split11,
                _symbol$split12,
                base,
                quote,
                _this391 = this;

            return Promise.resolve().then(function () {
                return _this391.publicGetExchangeTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    symbol = id;
                    _symbol$split11 = symbol.split('/');
                    _symbol$split12 = _slicedToArray(_symbol$split11, 2);
                    base = _symbol$split12[0];
                    quote = _symbol$split12[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this392 = this;

            return Promise.resolve().then(function () {
                return _this392.loadMarkets();
            }).then(function () {
                return _this392.privateGetPaymentBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < _this392.currencies.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = undefined;

                    if (currency in result) {
                        account = result[currency];
                    } else {
                        account = {
                            'free': undefined,
                            'used': undefined,
                            'total': undefined
                        };
                    }if (balance['type'] == 'total') {
                        account['total'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'available') {
                        account['free'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'trade') {
                        account['used'] = parseFloat(balance['value']);
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this393 = this,
                _arguments381 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments381.length > 1 && _arguments381[1] !== undefined ? _arguments381[1] : {};
                return _this393.loadMarkets();
            }).then(function () {
                return _this393.publicGetExchangeOrderBook(_this393.extend({
                    'currencyPair': _this393.marketId(market),
                    'groupByPrice': 'false',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this393.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['best_bid']),
                'ask': parseFloat(ticker['best_ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this394 = this;

            return Promise.resolve().then(function () {
                return _this394.loadMarkets();
            }).then(function () {
                return _this394.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this394.indexBy(response, 'symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this394.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this394.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this395 = this;

            return Promise.resolve().then(function () {
                return _this395.loadMarkets();
            }).then(function () {
                p = _this395.market(market);
                return _this395.publicGetExchangeTicker({
                    'currencyPair': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this395.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this396 = this,
                _arguments384 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments384.length > 1 && _arguments384[1] !== undefined ? _arguments384[1] : {};
                return _this396.loadMarkets();
            }).then(function () {
                return _this396.publicGetExchangeLastTrades(_this396.extend({
                    'currencyPair': _this396.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this397 = this,
                _arguments385 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments385.length > 4 && _arguments385[4] !== undefined ? _arguments385[4] : undefined;
                params = _arguments385.length > 5 && _arguments385[5] !== undefined ? _arguments385[5] : {};
                return _this397.loadMarkets();
            }).then(function () {
                method = 'privatePostExchange' + _this397.capitalize(side) + type;
                order = {
                    'currencyPair': _this397.marketId(market),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this397[method](_this397.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this398 = this,
                _arguments386 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments386.length > 1 && _arguments386[1] !== undefined ? _arguments386[1] : {};
                return _this398.loadMarkets();
            }).then(function () {
                return _this398.privatePostExchangeCancellimit(_this398.extend({
                    'orderId': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                signature,
                response,
                _this399 = this,
                _arguments387 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments387.length > 1 && _arguments387[1] !== undefined ? _arguments387[1] : 'public';
                method = _arguments387.length > 2 && _arguments387[2] !== undefined ? _arguments387[2] : 'GET';
                params = _arguments387.length > 3 && _arguments387[3] !== undefined ? _arguments387[3] : {};
                headers = _arguments387.length > 4 && _arguments387[4] !== undefined ? _arguments387[4] : undefined;
                body = _arguments387.length > 5 && _arguments387[5] !== undefined ? _arguments387[5] : undefined;
                url = _this399.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this399.urlencode(params);
                    }
                } else {
                    query = _this399.urlencode(_this399.keysort(params));

                    if (method == 'GET') {
                        if (query) {
                            url += '?' + query;
                        } else {
                            if (query) {
                                body = query;
                            }
                        }
                    }signature = _this399.hmac(_this399.encode(query), _this399.encode(_this399.secret), 'sha256');

                    headers = {
                        'Api-Key': _this399.apiKey,
                        'Sign': signature.toUpperCase(),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this399.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this399.id + ' ' + _this399.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var liqui = extend(btce, {
        'id': 'liqui',
        'name': 'Liqui',
        'countries': 'UA',
        'rateLimit': 1000,
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',
            'api': {
                'public': 'https://api.liqui.io/api',
                'private': 'https://api.liqui.io/tapi'
            },
            'www': 'https://liqui.io',
            'doc': 'https://liqui.io/api'
        },

        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                signature,
                response,
                _this400 = this,
                _arguments388 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments388.length > 1 && _arguments388[1] !== undefined ? _arguments388[1] : 'public';
                method = _arguments388.length > 2 && _arguments388[2] !== undefined ? _arguments388[2] : 'GET';
                params = _arguments388.length > 3 && _arguments388[3] !== undefined ? _arguments388[3] : {};
                headers = _arguments388.length > 4 && _arguments388[4] !== undefined ? _arguments388[4] : undefined;
                body = _arguments388.length > 5 && _arguments388[5] !== undefined ? _arguments388[5] : undefined;
                url = _this400.urls['api'][api];
                query = _this400.omit(params, _this400.extractParams(path));

                if (api == 'public') {
                    url += '/' + _this400.version + '/' + _this400.implodeParams(path, params);
                    if (Object.keys(query).length) {
                        url += '?' + _this400.urlencode(query);
                    }
                } else {
                    nonce = _this400.nonce();

                    body = _this400.urlencode(_this400.extend({
                        'nonce': nonce,
                        'method': path
                    }, query));
                    signature = _this400.hmac(_this400.encode(body), _this400.encode(_this400.secret), 'sha512');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString(),
                        'Key': _this400.apiKey,
                        'Sign': signature
                    };
                }
                return _this400.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this400.id + ' ' + _this400.json(response));
                    }
                }return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var luno = {

        'id': 'luno',
        'name': 'luno',
        'countries': ['GB', 'SG', 'ZA'],
        'rateLimit': 3000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
            'api': 'https://api.mybitx.com/api',
            'www': 'https://www.luno.com',
            'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']
        },
        'api': {
            'public': {
                'get': ['orderbook', 'ticker', 'tickers', 'trades']
            },
            'private': {
                'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}'],
                'post': ['accounts', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],
                'put': ['quotes/{id}'],
                'delete': ['quotes/{id}', 'withdrawals/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this401 = this;

            return Promise.resolve().then(function () {
                return _this401.publicGetTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['pair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = _this401.commonCurrencyCode(base);
                    quote = _this401.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                reserved,
                unconfirmed,
                account,
                _this402 = this;

            return Promise.resolve().then(function () {
                return _this402.loadMarkets();
            }).then(function () {
                return _this402.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = _this402.commonCurrencyCode(balance['asset']);
                    reserved = parseFloat(balance['reserved']);
                    unconfirmed = parseFloat(balance['unconfirmed']);
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': _this402.sum(reserved, unconfirmed),
                        'total': undefined
                    };

                    account['total'] = _this402.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this403 = this,
                _arguments391 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments391.length > 1 && _arguments391[1] !== undefined ? _arguments391[1] : {};
                return _this403.loadMarkets();
            }).then(function () {
                return _this403.publicGetOrderbook(_this403.extend({
                    'pair': _this403.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this403.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);
                        // let timestamp = order[2] * 1000;

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['rolling_24_hour_volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this404 = this;

            return Promise.resolve().then(function () {
                return _this404.loadMarkets();
            }).then(function () {
                return _this404.publicGetTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this404.indexBy(response['tickers'], 'pair');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this404.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this404.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this405 = this;

            return Promise.resolve().then(function () {
                return _this405.loadMarkets();
            }).then(function () {
                p = _this405.market(market);
                return _this405.publicGetTicker({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this405.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this406 = this,
                _arguments394 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments394.length > 1 && _arguments394[1] !== undefined ? _arguments394[1] : {};
                return _this406.loadMarkets();
            }).then(function () {
                return _this406.publicGetTrades(_this406.extend({
                    'pair': _this406.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this407 = this,
                _arguments395 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments395.length > 4 && _arguments395[4] !== undefined ? _arguments395[4] : undefined;
                params = _arguments395.length > 5 && _arguments395[5] !== undefined ? _arguments395[5] : {};
                return _this407.loadMarkets();
            }).then(function () {
                method = 'privatePost';
                order = { 'pair': _this407.marketId(market) };

                if (type == 'market') {
                    method += 'Marketorder';
                    order['type'] = side.toUpperCase();
                    if (side == 'buy') {
                        order['counter_volume'] = amount;
                    } else {
                        order['base_volume'] = amount;
                    }
                } else {
                    method += 'Order';
                    order['volume'] = amount;
                    order['price'] = price;
                    if (side == 'buy') {
                        order['type'] = 'BID';
                    } else {
                        order['type'] = 'ASK';
                    }
                }
                return _this407[method](_this407.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this408 = this;

            return Promise.resolve().then(function () {
                return _this408.loadMarkets();
            }).then(function () {
                return _this408.privatePostStoporder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                auth,
                response,
                _this409 = this,
                _arguments397 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments397.length > 1 && _arguments397[1] !== undefined ? _arguments397[1] : 'public';
                method = _arguments397.length > 2 && _arguments397[2] !== undefined ? _arguments397[2] : 'GET';
                params = _arguments397.length > 3 && _arguments397[3] !== undefined ? _arguments397[3] : {};
                headers = _arguments397.length > 4 && _arguments397[4] !== undefined ? _arguments397[4] : undefined;
                body = _arguments397.length > 5 && _arguments397[5] !== undefined ? _arguments397[5] : undefined;
                url = _this409.urls['api'] + '/' + _this409.version + '/' + _this409.implodeParams(path, params);
                query = _this409.omit(params, _this409.extractParams(path));

                if (Object.keys(query).length) {
                    url += '?' + _this409.urlencode(query);
                }if (api == 'private') {
                    auth = _this409.encode(_this409.apiKey + ':' + _this409.secret);

                    auth = _this409.stringToBase64(auth);
                    headers = { 'Authorization': 'Basic ' + _this409.decode(auth) };
                }
                return _this409.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this409.id + ' ' + _this409.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var mercado = {

        'id': 'mercado',
        'name': 'Mercado Bitcoin',
        'countries': 'BR', // Brazil
        'rateLimit': 1000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
            'api': {
                'public': 'https://www.mercadobitcoin.net/api',
                'private': 'https://www.mercadobitcoin.net/tapi'
            },
            'www': 'https://www.mercadobitcoin.com.br',
            'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']
        },
        'api': {
            'public': {
                'get': [// last slash critical
                'orderbook/', 'orderbook_litecoin/', 'ticker/', 'ticker_litecoin/', 'trades/', 'trades_litecoin/', 'v2/ticker/', 'v2/ticker_litecoin/']
            },
            'private': {
                'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'withdraw_coin']
            }
        },
        'markets': {
            'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': '' },
            'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                method,
                orderbook,
                timestamp,
                result,
                _this410 = this,
                _arguments398 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments398.length > 1 && _arguments398[1] !== undefined ? _arguments398[1] : {};
                p = _this410.market(market);
                method = 'publicGetOrderbook' + _this410.capitalize(p['suffix']);
                return _this410[method](params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this410.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this410.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                method,
                response,
                ticker,
                timestamp,
                _this411 = this;

            return Promise.resolve().then(function () {
                p = _this411.market(market);
                method = 'publicGetV2Ticker' + _this411.capitalize(p['suffix']);
                return _this411[method]();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(ticker['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this411.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                p,
                method,
                _this412 = this,
                _arguments400 = arguments;

            params = _arguments400.length > 1 && _arguments400[1] !== undefined ? _arguments400[1] : {};
            p = _this412.market(market);
            method = 'publicGetTrades' + _this412.capitalize(p['suffix']);

            return _this412[method](params);
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this413 = this;

            return Promise.resolve().then(function () {
                return _this413.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (c = 0; c < _this413.currencies.length; c++) {
                    currency = _this413.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]['available']);
                        account['total'] = parseFloat(balances[lowercase]['total']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this414 = this,
                _arguments402 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments402.length > 4 && _arguments402[4] !== undefined ? _arguments402[4] : undefined;
                params = _arguments402.length > 5 && _arguments402[5] !== undefined ? _arguments402[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this414.id + ' allows limit orders only');
                }method = 'privatePostPlace' + _this414.capitalize(side) + 'Order';
                order = {
                    'coin_pair': _this414.marketId(market),
                    'quantity': amount,
                    'limit_price': price
                };
                return _this414[method](_this414.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['response_data']['order']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this415 = this,
                _arguments403 = arguments;

            params = _arguments403.length > 1 && _arguments403[1] !== undefined ? _arguments403[1] : {};

            return _this415.privatePostCancelOrder(_this415.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                response,
                _this416 = this,
                _arguments404 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments404.length > 1 && _arguments404[1] !== undefined ? _arguments404[1] : 'public';
                method = _arguments404.length > 2 && _arguments404[2] !== undefined ? _arguments404[2] : 'GET';
                params = _arguments404.length > 3 && _arguments404[3] !== undefined ? _arguments404[3] : {};
                headers = _arguments404.length > 4 && _arguments404[4] !== undefined ? _arguments404[4] : undefined;
                body = _arguments404.length > 5 && _arguments404[5] !== undefined ? _arguments404[5] : undefined;
                url = _this416.urls['api'][api] + '/';

                if (api == 'public') {
                    url += path;
                } else {
                    url += _this416.version + '/';
                    nonce = _this416.nonce();

                    body = _this416.urlencode(_this416.extend({
                        'tapi_method': path,
                        'tapi_nonce': nonce
                    }, params));
                    auth = '/tapi/' + _this416.version + '/' + '?' + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'TAPI-ID': _this416.apiKey,
                        'TAPI-MAC': _this416.hmac(_this416.encode(auth), _this416.secret, 'sha512')
                    };
                }
                return _this416.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error_message' in response) {
                    throw new ExchangeError(_this416.id + ' ' + _this416.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // OKCoin
    // China
    // https://www.okcoin.com/
    // https://www.okcoin.com/rest_getStarted.html
    // https://github.com/OKCoin/websocket
    // https://www.npmjs.com/package/okcoin.com
    // https://www.okcoin.cn
    // https://www.okcoin.cn/rest_getStarted.html

    var okcoin = {

        'version': 'v1',
        'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
        'api': {
            'public': {
                'get': ['depth', 'exchange_rate', 'future_depth', 'future_estimated_price', 'future_hold_amount', 'future_index', 'future_kline', 'future_price_limit', 'future_ticker', 'future_trades', 'kline', 'otcs', 'ticker', 'trades']
            },
            'private': {
                'post': ['account_records', 'batch_trade', 'borrow_money', 'borrow_order_info', 'borrows_info', 'cancel_borrow', 'cancel_order', 'cancel_otc_order', 'cancel_withdraw', 'future_batch_trade', 'future_cancel', 'future_devolve', 'future_explosive', 'future_order_info', 'future_orders_info', 'future_position', 'future_position_4fix', 'future_trade', 'future_trades_history', 'future_userinfo', 'future_userinfo_4fix', 'lend_depth', 'order_fee', 'order_history', 'order_info', 'orders_info', 'otc_order_history', 'otc_order_info', 'repayment', 'submit_otc_order', 'trade', 'trade_history', 'trade_otc_order', 'withdraw', 'withdraw_info', 'unrepayments_info', 'userinfo']
            }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this417 = this,
                _arguments405 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments405.length > 1 && _arguments405[1] !== undefined ? _arguments405[1] : {};
                return _this417.publicGetDepth(_this417.extend({
                    'symbol': _this417.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this417.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': _this417.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this417.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this418 = this;

            return Promise.resolve().then(function () {
                return _this418.publicGetTicker({
                    'symbol': _this418.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this418.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this419 = this,
                _arguments407 = arguments;

            params = _arguments407.length > 1 && _arguments407[1] !== undefined ? _arguments407[1] : {};

            return _this419.publicGetTrades(_this419.extend({
                'symbol': _this419.marketId(market)
            }, params));
        },
        fetchOHLCV: function fetchOHLCV(market) {
            var timeframe,
                since,
                limit,
                m,
                response,
                _this420 = this,
                _arguments408 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments408.length > 1 && _arguments408[1] !== undefined ? _arguments408[1] : 60;
                since = _arguments408.length > 2 && _arguments408[2] !== undefined ? _arguments408[2] : undefined;
                limit = _arguments408.length > 3 && _arguments408[3] !== undefined ? _arguments408[3] : undefined;
                m = _this420.market(market);
                return _this420.publicGetKline({
                    'symbol': m['id'],
                    'type': '1min',
                    'since': since,
                    'size': parseInt(limit)
                });
            }).then(function (_resp) {
                response = _resp;

                return _this420.parseOHLCVs(m, response, timeframe, since, limit);
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this421 = this;

            return Promise.resolve().then(function () {
                return _this421.privatePostUserinfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['info']['funds'];
                result = { 'info': response };

                for (c = 0; c < _this421.currencies.length; c++) {
                    currency = _this421.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances['free']) {
                        account['free'] = parseFloat(balances['free'][lowercase]);
                    }if (lowercase in balances['freezed']) {
                        account['used'] = parseFloat(balances['freezed'][lowercase]);
                    }account['total'] = _this421.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this422 = this,
                _arguments410 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments410.length > 4 && _arguments410[4] !== undefined ? _arguments410[4] : undefined;
                params = _arguments410.length > 5 && _arguments410[5] !== undefined ? _arguments410[5] : {};
                order = {
                    'symbol': _this422.marketId(market),
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                    order['amount'] = amount;
                } else {
                    if (side == 'buy') {
                        order['price'] = params;
                    } else {
                        order['amount'] = amount;
                    }
                    order['type'] += '_market';
                }
                return _this422.privatePostTrade(_this422.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this423 = this,
                _arguments411 = arguments;

            params = _arguments411.length > 1 && _arguments411[1] !== undefined ? _arguments411[1] : {};

            return _this423.privatePostCancelOrder(_this423.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                response,
                _this424 = this,
                _arguments412 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments412.length > 1 && _arguments412[1] !== undefined ? _arguments412[1] : 'public';
                method = _arguments412.length > 2 && _arguments412[2] !== undefined ? _arguments412[2] : 'GET';
                params = _arguments412.length > 3 && _arguments412[3] !== undefined ? _arguments412[3] : {};
                headers = _arguments412.length > 4 && _arguments412[4] !== undefined ? _arguments412[4] : undefined;
                body = _arguments412.length > 5 && _arguments412[5] !== undefined ? _arguments412[5] : undefined;
                url = '/' + 'api' + '/' + _this424.version + '/' + path + '.do';

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this424.urlencode(params);
                    }
                } else {
                    query = _this424.keysort(_this424.extend({
                        'api_key': _this424.apiKey
                    }, params));
                    // secret key must be at the end of query

                    queryString = _this424.urlencode(query) + '&secret_key=' + _this424.secret;

                    query['sign'] = _this424.hash(_this424.encode(queryString)).toUpperCase();
                    body = _this424.urlencode(query);
                    headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
                }
                url = _this424.urls['api'] + url;
                return _this424.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this424.id + ' ' + _this424.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var okcoincny = extend(okcoin, {
        'id': 'okcoincny',
        'name': 'OKCoin CNY',
        'countries': 'CN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',
            'api': 'https://www.okcoin.cn',
            'www': 'https://www.okcoin.cn',
            'doc': 'https://www.okcoin.cn/rest_getStarted.html'
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' }
        }
    });

    //-----------------------------------------------------------------------------

    var okcoinusd = extend(okcoin, {
        'id': 'okcoinusd',
        'name': 'OKCoin USD',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
            'api': 'https://www.okcoin.com',
            'www': 'https://www.okcoin.com',
            'doc': ['https://www.okcoin.com/rest_getStarted.html', 'https://www.npmjs.com/package/okcoin.com']
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETC/USD': { 'id': 'etc_usd', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' }
        }
    });

    //-----------------------------------------------------------------------------

    var paymium = {

        'id': 'paymium',
        'name': 'Paymium',
        'countries': ['FR', 'EU'],
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
            'api': 'https://paymium.com/api',
            'www': 'https://www.paymium.com',
            'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers']
        },
        'api': {
            'public': {
                'get': ['countries', 'data/{id}/ticker', 'data/{id}/trades', 'data/{id}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']
            },
            'private': {
                'get': ['merchant/get_payment/{UUID}', 'user', 'user/addresses', 'user/addresses/{btc_address}', 'user/orders', 'user/orders/{UUID}', 'user/price_alerts'],
                'post': ['user/orders', 'user/addresses', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],
                'delete': ['user/orders/{UUID}/cancel', 'user/price_alerts/{id}']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                balance,
                locked,
                _this425 = this;

            return Promise.resolve().then(function () {
                return _this425.privateGetUser();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this425.currencies.length; c++) {
                    currency = _this425.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    balance = 'balance_' + lowercase;
                    locked = 'locked_' + lowercase;

                    if (balance in balances) {
                        account['free'] = balances[balance];
                    }if (locked in balances) {
                        account['used'] = balances[locked];
                    }account['total'] = _this425.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp6,
                _this426 = this,
                _arguments414 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments414.length > 1 && _arguments414[1] !== undefined ? _arguments414[1] : {};
                return _this426.publicGetDataIdDepth(_this426.extend({
                    'id': _this426.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this426.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this426.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];
                        _timestamp6 = order['timestamp'] * 1000;

                        result[side].push([price, amount, _timestamp6]);
                    }
                }
                result['bids'] = _this426.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this427 = this;

            return Promise.resolve().then(function () {
                return _this427.publicGetDataIdTicker({
                    'id': _this427.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['at'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this427.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['price']),
                    'change': undefined,
                    'percentage': parseFloat(ticker['variation']),
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this428 = this,
                _arguments416 = arguments;

            params = _arguments416.length > 1 && _arguments416[1] !== undefined ? _arguments416[1] : {};

            return _this428.publicGetDataIdTrades(_this428.extend({
                'id': _this428.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this429 = this,
                _arguments417 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments417.length > 4 && _arguments417[4] !== undefined ? _arguments417[4] : undefined;
                params = _arguments417.length > 5 && _arguments417[5] !== undefined ? _arguments417[5] : {};
                order = {
                    'type': _this429.capitalize(type) + 'Order',
                    'currency': _this429.marketId(market),
                    'direction': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['price'] = price;
                }return _this429.privatePostUserOrders(_this429.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this430 = this,
                _arguments418 = arguments;

            params = _arguments418.length > 1 && _arguments418[1] !== undefined ? _arguments418[1] : {};

            return _this430.privatePostCancelOrder(_this430.extend({
                'orderNumber': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this431 = this,
                _arguments419 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments419.length > 1 && _arguments419[1] !== undefined ? _arguments419[1] : 'public';
                method = _arguments419.length > 2 && _arguments419[2] !== undefined ? _arguments419[2] : 'GET';
                params = _arguments419.length > 3 && _arguments419[3] !== undefined ? _arguments419[3] : {};
                headers = _arguments419.length > 4 && _arguments419[4] !== undefined ? _arguments419[4] : undefined;
                body = _arguments419.length > 5 && _arguments419[5] !== undefined ? _arguments419[5] : undefined;
                url = _this431.urls['api'] + '/' + _this431.version + '/' + _this431.implodeParams(path, params);
                query = _this431.omit(params, _this431.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this431.urlencode(query);
                    }
                } else {
                    body = _this431.json(params);
                    nonce = _this431.nonce().toString();
                    auth = nonce + url + body;

                    headers = {
                        'Api-Key': _this431.apiKey,
                        'Api-Signature': _this431.hmac(_this431.encode(auth), _this431.secret),
                        'Api-Nonce': nonce,
                        'Content-Type': 'application/json'
                    };
                }
                return _this431.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this431.id + ' ' + _this431.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var poloniex = {

        'id': 'poloniex',
        'name': 'Poloniex',
        'countries': 'US',
        'rateLimit': 500, // 6 calls per second
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
            'api': {
                'public': 'https://poloniex.com/public',
                'private': 'https://poloniex.com/tradingApi'
            },
            'www': 'https://poloniex.com',
            'doc': ['https://poloniex.com/support/api/', 'http://pastebin.com/dMX7mZE0']
        },
        'api': {
            'public': {
                'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']
            },
            'private': {
                'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split7,
                _id$split8,
                quote,
                base,
                symbol,
                _this432 = this;

            return Promise.resolve().then(function () {
                return _this432.publicGetReturnTicker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split7 = id.split('_');
                    _id$split8 = _slicedToArray(_id$split7, 2);
                    quote = _id$split8[0];
                    base = _id$split8[1];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this433 = this;

            return Promise.resolve().then(function () {
                return _this433.loadMarkets();
            }).then(function () {
                return _this433.privatePostReturnCompleteBalances({
                    'account': 'all'
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances[currency];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['onOrders']),
                        'total': undefined
                    };

                    account['total'] = _this433.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        parseBidAsk: function parseBidAsk(bidask) {
            var price = parseFloat(bidask[0]);
            var amount = parseFloat(bidask[1]);
            return [price, amount];
        },
        parseBidAsks: function parseBidAsks(bidasks) {
            var result = [];
            for (var i = 0; i < bidasks.length; i++) {
                result.push(this.parseBidAsk(bidasks[i]));
            }
            return result;
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                _this434 = this,
                _arguments422 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments422.length > 1 && _arguments422[1] !== undefined ? _arguments422[1] : {};
                return _this434.loadMarkets();
            }).then(function () {
                return _this434.publicGetReturnOrderBook(_this434.extend({
                    'currencyPair': _this434.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this434.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this434.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];

                    result[side] = _this434.parseBidAsks(orderbook[side]);
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this435 = this;

            return Promise.resolve().then(function () {
                return _this435.loadMarkets();
            }).then(function () {
                return _this435.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this435.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this435.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var m,
                tickers,
                ticker,
                _this436 = this;

            return Promise.resolve().then(function () {
                return _this436.loadMarkets();
            }).then(function () {
                m = _this436.market(market);
                return _this436.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[m['id']];

                return _this436.parseTicker(ticker, m);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['date']);
            var id = undefined;
            var order = undefined;
            if ('tradeID' in trade) id = trade['tradeID'];
            if ('orderNumber' in trade) order = trade['orderNumber'];
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': id,
                'order': order,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['rate']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                trades,
                _this437 = this,
                _arguments425 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments425.length > 1 && _arguments425[1] !== undefined ? _arguments425[1] : {};
                return _this437.loadMarkets();
            }).then(function () {
                m = _this437.market(market);
                return _this437.publicGetReturnTradeHistory(_this437.extend({
                    'currencyPair': m['id'],
                    'end': _this437.seconds() // last 50000 trades by default
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this437.parseTrades(trades, m);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var market,
                params,
                now,
                request,
                _m,
                trades,
                result,
                ids,
                i,
                id,
                _trades,
                _market2,
                symbol,
                _this438 = this,
                _arguments426 = arguments;

            return Promise.resolve().then(function () {
                market = _arguments426.length > 0 && _arguments426[0] !== undefined ? _arguments426[0] : undefined;
                params = _arguments426.length > 1 && _arguments426[1] !== undefined ? _arguments426[1] : {};
                now = _this438.seconds();
                request = _this438.extend({
                    'currencyPair': 'all',
                    'end': _this438.seconds() // last 50000 trades by default
                }, params);

                if (market) {
                    _m = _this438.market(market);

                    request['currencyPair'] = _m['id'];
                }
                return _this438.privatePostReturnTradeHistory(request);
            }).then(function (_resp) {
                trades = _resp;

                if (market) {
                    return _this438.parseTrades(trades, m);
                } else {
                    result = { 'info': trades };
                    ids = Object.keys(trades);

                    for (i = 0; i < ids.length; i++) {
                        id = ids[i];
                        _trades = _trades[id];
                        _market2 = _this438.markets_by_id[id];
                        symbol = _market2['symbol'];

                        result[symbol] = _this438.parseTrades(_trades, _market2);
                    }
                    return result;
                }
            });
        },
        parseOrder: function parseOrder(order, market) {
            return {
                'id': order['orderNumber'],
                'timestamp': order['timestamp'],
                'datetime': this.iso8601(order['timestamp']),
                'status': order['status'],
                'symbol': market['symbol'],
                'type': order['type'],
                'side': order['side'],
                'price': order['price'],
                'amount': order['amount'],
                'trades': this.parseTrades(order['resultingTrades'], market)
            };
        },
        fetchMyOpenOrders: function fetchMyOpenOrders() {
            var market,
                params,
                m,
                pair,
                orders,
                _this439 = this,
                _arguments427 = arguments;

            return Promise.resolve().then(function () {
                market = _arguments427.length > 0 && _arguments427[0] !== undefined ? _arguments427[0] : undefined;
                params = _arguments427.length > 1 && _arguments427[1] !== undefined ? _arguments427[1] : {};
                m = undefined;

                if (market) {
                    m = _this439.market(market);
                }pair = m ? m['id'] : 'all';
                return _this439.privatePostReturnOpenOrders(_this439.extend({
                    'currencyPair': pair
                }));
            }).then(function (_resp) {
                orders = _resp;

                return _this439.parseOrders(orders, m);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                m,
                response,
                timestamp,
                order,
                id,
                _this440 = this,
                _arguments428 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments428.length > 4 && _arguments428[4] !== undefined ? _arguments428[4] : undefined;
                params = _arguments428.length > 5 && _arguments428[5] !== undefined ? _arguments428[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this440.id + ' allows limit orders only');
                }return _this440.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this440.capitalize(side);
                m = _this440.market(market);
                return _this440[method](_this440.extend({
                    'currencyPair': m['id'],
                    'rate': price,
                    'amount': amount
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this440.milliseconds();
                order = _this440.parseOrder(_this440.extend({
                    'timestamp': timestamp,
                    'status': 'open',
                    'type': type,
                    'side': side,
                    'price': price,
                    'amount': amount
                }, response), m);
                id = order['id'];

                _this440.orders[id] = order;
                return _this440.extend({ 'info': response }, order);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var found,
                _this441 = this;

            return Promise.resolve().then(function () {
                return _this441.loadMarkets();
            }).then(function () {
                found = id in _this441.orders;

                if (!found) {
                    throw new ExchangeError(_this441.id + ' order ' + id + ' not found');
                }return _this441.orders[id];
            });
        },
        fetchOrderTrades: function fetchOrderTrades(id) {
            var params,
                trades,
                _this442 = this,
                _arguments430 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments430.length > 1 && _arguments430[1] !== undefined ? _arguments430[1] : {};
                return _this442.loadMarkets();
            }).then(function () {
                return _this442.privatePostReturnOrderTrades(_this442.extend({
                    'orderNumber': id
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this442.parseTrades(trades);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this443 = this,
                _arguments431 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments431.length > 1 && _arguments431[1] !== undefined ? _arguments431[1] : {};
                return _this443.loadMarkets();
            }).then(function () {
                return _this443.privatePostCancelOrder(_this443.extend({
                    'orderNumber': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _this444 = this,
                _arguments432 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments432.length > 1 && _arguments432[1] !== undefined ? _arguments432[1] : 'public';
                method = _arguments432.length > 2 && _arguments432[2] !== undefined ? _arguments432[2] : 'GET';
                params = _arguments432.length > 3 && _arguments432[3] !== undefined ? _arguments432[3] : {};
                headers = _arguments432.length > 4 && _arguments432[4] !== undefined ? _arguments432[4] : undefined;
                body = _arguments432.length > 5 && _arguments432[5] !== undefined ? _arguments432[5] : undefined;
                url = _this444.urls['api'][api];
                query = _this444.extend({ 'command': path }, params);

                if (api == 'public') {
                    url += '?' + _this444.urlencode(query);
                } else {
                    query['nonce'] = _this444.nonce();
                    body = _this444.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this444.apiKey,
                        'Sign': _this444.hmac(_this444.encode(body), _this444.encode(_this444.secret), 'sha512')
                    };
                }
                return _this444.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this444.id + ' ' + _this444.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quadrigacx = {

        'id': 'quadrigacx',
        'name': 'QuadrigaCX',
        'countries': 'CA',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',
            'api': 'https://api.quadrigacx.com',
            'www': 'https://www.quadrigacx.com',
            'doc': 'https://www.quadrigacx.com/api_info'
        },
        'api': {
            'public': {
                'get': ['order_book', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balance', 'bitcoin_deposit_address', 'bitcoin_withdrawal', 'buy', 'cancel_order', 'ether_deposit_address', 'ether_withdrawal', 'lookup_order', 'open_orders', 'sell', 'user_transactions']
            }
        },
        'markets': {
            'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this445 = this;

            return Promise.resolve().then(function () {
                return _this445.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this445.currencies.length; c++) {
                    currency = _this445.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': parseFloat(balances[lowercase + '_available']),
                        'used': parseFloat(balances[lowercase + '_reserved']),
                        'total': parseFloat(balances[lowercase + '_balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this446 = this,
                _arguments434 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments434.length > 1 && _arguments434[1] !== undefined ? _arguments434[1] : {};
                return _this446.publicGetOrderBook(_this446.extend({
                    'book': _this446.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this446.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this447 = this;

            return Promise.resolve().then(function () {
                return _this447.publicGetTicker({
                    'book': _this447.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this447.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this448 = this,
                _arguments436 = arguments;

            params = _arguments436.length > 1 && _arguments436[1] !== undefined ? _arguments436[1] : {};

            return _this448.publicGetTransactions(_this448.extend({
                'book': _this448.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this449 = this,
                _arguments437 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments437.length > 4 && _arguments437[4] !== undefined ? _arguments437[4] : undefined;
                params = _arguments437.length > 5 && _arguments437[5] !== undefined ? _arguments437[5] : {};
                method = 'privatePost' + _this449.capitalize(side);
                order = {
                    'amount': amount,
                    'book': _this449.marketId(market)
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this449[method](_this449.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this450 = this,
                _arguments438 = arguments;

            params = _arguments438.length > 1 && _arguments438[1] !== undefined ? _arguments438[1] : {};

            return _this450.privatePostCancelOrder(_this450.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                request,
                signature,
                query,
                response,
                _this451 = this,
                _arguments439 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments439.length > 1 && _arguments439[1] !== undefined ? _arguments439[1] : 'public';
                method = _arguments439.length > 2 && _arguments439[2] !== undefined ? _arguments439[2] : 'GET';
                params = _arguments439.length > 3 && _arguments439[3] !== undefined ? _arguments439[3] : {};
                headers = _arguments439.length > 4 && _arguments439[4] !== undefined ? _arguments439[4] : undefined;
                body = _arguments439.length > 5 && _arguments439[5] !== undefined ? _arguments439[5] : undefined;
                url = _this451.urls['api'] + '/' + _this451.version + '/' + path;

                if (api == 'public') {
                    url += '?' + _this451.urlencode(params);
                } else {
                    if (!_this451.uid) {
                        throw new AuthenticationError(_this451.id + ' requires `' + _this451.id + '.uid` property for authentication');
                    }nonce = _this451.nonce();
                    request = [nonce.toString(), _this451.uid, _this451.apiKey].join('');
                    signature = _this451.hmac(_this451.encode(request), _this451.encode(_this451.secret));
                    query = _this451.extend({
                        'key': _this451.apiKey,
                        'nonce': nonce,
                        'signature': signature
                    }, params);

                    body = _this451.json(query);
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this451.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this451.id + ' ' + _this451.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quoine = {

        'id': 'quoine',
        'name': 'QUOINE',
        'countries': ['JP', 'SG', 'VN'],
        'version': '2',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',
            'api': 'https://api.quoine.com',
            'www': 'https://www.quoine.com',
            'doc': 'https://developers.quoine.com'
        },
        'api': {
            'public': {
                'get': ['products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}']
            },
            'private': {
                'get': ['accounts/balance', 'crypto_accounts', 'executions/me', 'fiat_accounts', 'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', 'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}'],
                'post': ['fiat_accounts', 'loan_bids', 'orders'],
                'put': ['loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', 'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this452 = this;

            return Promise.resolve().then(function () {
                return _this452.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quoted_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this453 = this;

            return Promise.resolve().then(function () {
                return _this453.loadMarkets();
            }).then(function () {
                return _this453.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = parseFloat(balance['balance']);
                    account = {
                        'free': total,
                        'used': undefined,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this454 = this,
                _arguments442 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments442.length > 1 && _arguments442[1] !== undefined ? _arguments442[1] : {};
                return _this454.loadMarkets();
            }).then(function () {
                return _this454.publicGetProductsIdPriceLevels(_this454.extend({
                    'id': _this454.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this454.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this454.iso8601(timestamp)
                };
                sides = { 'bids': 'buy_price_levels', 'asks': 'sell_price_levels' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            var last = undefined;
            if ('last_traded_price' in ticker) {
                if (ticker['last_traded_price']) {
                    var length = ticker['last_traded_price'].length;
                    if (length > 0) last = parseFloat(ticker['last_traded_price']);
                }
            }
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high_market_ask']),
                'low': parseFloat(ticker['low_market_bid']),
                'bid': parseFloat(ticker['market_bid']),
                'ask': parseFloat(ticker['market_ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_24h']),
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this455 = this;

            return Promise.resolve().then(function () {
                return _this455.loadMarkets();
            }).then(function () {
                return _this455.publicGetProducts();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    base = ticker['base_currency'];
                    quote = ticker['quoted_currency'];
                    symbol = base + '/' + quote;
                    market = _this455.markets[symbol];

                    result[symbol] = _this455.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this456 = this;

            return Promise.resolve().then(function () {
                return _this456.loadMarkets();
            }).then(function () {
                p = _this456.market(market);
                return _this456.publicGetProductsId({
                    'id': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this456.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this457 = this,
                _arguments445 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments445.length > 1 && _arguments445[1] !== undefined ? _arguments445[1] : {};
                return _this457.loadMarkets();
            }).then(function () {
                return _this457.publicGetExecutions(_this457.extend({
                    'product_id': _this457.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this458 = this,
                _arguments446 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments446.length > 4 && _arguments446[4] !== undefined ? _arguments446[4] : undefined;
                params = _arguments446.length > 5 && _arguments446[5] !== undefined ? _arguments446[5] : {};
                return _this458.loadMarkets();
            }).then(function () {
                order = {
                    'order_type': type,
                    'product_id': _this458.marketId(market),
                    'side': side,
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this458.privatePostOrders(_this458.extend({
                    'order': order
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this459 = this,
                _arguments447 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments447.length > 1 && _arguments447[1] !== undefined ? _arguments447[1] : {};
                return _this459.loadMarkets();
            }).then(function () {
                return _this459.privatePutOrdersIdCancel(_this459.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                response,
                _this460 = this,
                _arguments448 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments448.length > 1 && _arguments448[1] !== undefined ? _arguments448[1] : 'public';
                method = _arguments448.length > 2 && _arguments448[2] !== undefined ? _arguments448[2] : 'GET';
                params = _arguments448.length > 3 && _arguments448[3] !== undefined ? _arguments448[3] : {};
                headers = _arguments448.length > 4 && _arguments448[4] !== undefined ? _arguments448[4] : undefined;
                body = _arguments448.length > 5 && _arguments448[5] !== undefined ? _arguments448[5] : undefined;
                url = '/' + _this460.implodeParams(path, params);
                query = _this460.omit(params, _this460.extractParams(path));

                headers = {
                    'X-Quoine-API-Version': _this460.version,
                    'Content-Type': 'application/json'
                };
                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this460.urlencode(query);
                    }
                } else {
                    nonce = _this460.nonce();
                    request = {
                        'path': url,
                        'nonce': nonce,
                        'token_id': _this460.apiKey,
                        'iat': Math.floor(nonce / 1000) // issued at
                    };

                    if (Object.keys(query).length) {
                        body = _this460.json(query);
                    }headers['X-Quoine-Auth'] = _this460.jwt(request, _this460.secret);
                }
                return _this460.fetch(_this460.urls['api'] + url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this460.id + ' ' + _this460.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var southxchange = {

        'id': 'southxchange',
        'name': 'SouthXchange',
        'countries': 'AR', // Argentina
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',
            'api': 'https://www.southxchange.com/api',
            'www': 'https://www.southxchange.com',
            'doc': 'https://www.southxchange.com/Home/Api'
        },
        'api': {
            'public': {
                'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']
            },
            'private': {
                'post': ['cancelMarketOrders', 'cancelOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'placeOrder', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                base,
                quote,
                symbol,
                id,
                _this461 = this;

            return Promise.resolve().then(function () {
                return _this461.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    base = market[0];
                    quote = market[1];
                    symbol = base + '/' + quote;
                    id = symbol;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this462 = this;

            return Promise.resolve().then(function () {
                return _this462.loadMarkets();
            }).then(function () {
                return _this462.privatePostListBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.uppercase;
                    free = parseFloat(balance['Available']);
                    used = parseFloat(balance['Unconfirmed']);
                    total = _this462.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this463 = this,
                _arguments451 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments451.length > 1 && _arguments451[1] !== undefined ? _arguments451[1] : {};
                return _this463.loadMarkets();
            }).then(function () {
                return _this463.publicGetBookSymbol(_this463.extend({
                    'symbol': _this463.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this463.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this463.iso8601(timestamp)
                };
                sides = { 'bids': 'BuyOrders', 'asks': 'SellOrders' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Price']);
                        amount = parseFloat(order['Amount']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            var bid = undefined;
            var ask = undefined;
            if ('Bid' in ticker) if (ticker['Bid']) bid = parseFloat(ticker['Bid']);
            if ('Ask' in ticker) if (ticker['Ask']) ask = parseFloat(ticker['Ask']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['Last']),
                'change': parseFloat(ticker['Variation24Hr']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['Volume24Hr']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this464 = this;

            return Promise.resolve().then(function () {
                return _this464.loadMarkets();
            }).then(function () {
                return _this464.publicGetPrices();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this464.indexBy(response, 'Market');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this464.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this464.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this465 = this;

            return Promise.resolve().then(function () {
                return _this465.loadMarkets();
            }).then(function () {
                p = _this465.market(market);
                return _this465.publicGetPriceSymbol({
                    'symbol': _this465.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this465.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this466 = this,
                _arguments454 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments454.length > 1 && _arguments454[1] !== undefined ? _arguments454[1] : {};
                return _this466.loadMarkets();
            }).then(function () {
                return _this466.publicGetTradesSymbol(_this466.extend({
                    'symbol': _this466.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                order,
                response,
                _this467 = this,
                _arguments455 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments455.length > 4 && _arguments455[4] !== undefined ? _arguments455[4] : undefined;
                params = _arguments455.length > 5 && _arguments455[5] !== undefined ? _arguments455[5] : {};
                return _this467.loadMarkets();
            }).then(function () {
                p = _this467.market(market);
                order = {
                    'listingCurrency': p['base'],
                    'referenceCurrency': p['quote'],
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limitPrice'] = price;
                }return _this467.privatePostPlaceOrder(_this467.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response.toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this468 = this,
                _arguments456 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments456.length > 1 && _arguments456[1] !== undefined ? _arguments456[1] : {};
                return _this468.loadMarkets();
            }).then(function () {
                return _this468.privatePostCancelOrder(_this468.extend({
                    'orderCode': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                response,
                _this469 = this,
                _arguments457 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments457.length > 1 && _arguments457[1] !== undefined ? _arguments457[1] : 'public';
                method = _arguments457.length > 2 && _arguments457[2] !== undefined ? _arguments457[2] : 'GET';
                params = _arguments457.length > 3 && _arguments457[3] !== undefined ? _arguments457[3] : {};
                headers = _arguments457.length > 4 && _arguments457[4] !== undefined ? _arguments457[4] : undefined;
                body = _arguments457.length > 5 && _arguments457[5] !== undefined ? _arguments457[5] : undefined;
                url = _this469.urls['api'] + '/' + _this469.implodeParams(path, params);
                query = _this469.omit(params, _this469.extractParams(path));

                if (api == 'private') {
                    nonce = _this469.nonce();

                    query = _this469.extend({
                        'key': _this469.apiKey,
                        'nonce': nonce
                    }, query);
                    body = _this469.json(query);
                    headers = {
                        'Content-Type': 'application/json',
                        'Hash': _this469.hmac(_this469.encode(body), _this469.encode(_this469.secret), 'sha512')
                    };
                }
                return _this469.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                // if (!response)
                //     throw new ExchangeError (this.id + ' ' + this.json (response));

                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var surbitcoin = extend(blinktrade, {
        'id': 'surbitcoin',
        'name': 'SurBitcoin',
        'countries': 'VE',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://surbitcoin.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' }
        }
    });

    //-----------------------------------------------------------------------------

    var therock = {

        'id': 'therock',
        'name': 'TheRockTrading',
        'countries': 'MT',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
            'api': 'https://api.therocktrading.com',
            'www': 'https://therocktrading.com',
            'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']
        },
        'api': {
            'public': {
                'get': ['funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']
            },
            'private': {
                'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],
                'post': ['atms/withdraw', 'funds/{fund_id}/orders'],
                'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this470 = this;

            return Promise.resolve().then(function () {
                return _this470.publicGetFundsTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['fund_id'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                free,
                total,
                used,
                account,
                _this471 = this;

            return Promise.resolve().then(function () {
                return _this471.loadMarkets();
            }).then(function () {
                return _this471.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    free = balance['trading_balance'];
                    total = balance['balance'];
                    used = total - free;
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this472 = this,
                _arguments460 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments460.length > 1 && _arguments460[1] !== undefined ? _arguments460[1] : {};
                return _this472.loadMarkets();
            }).then(function () {
                return _this472.publicGetFundsIdOrderbook(_this472.extend({
                    'id': _this472.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this472.parse8601(orderbook['date']);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this472.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['date']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': parseFloat(ticker['close']),
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_traded']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this473 = this;

            return Promise.resolve().then(function () {
                return _this473.loadMarkets();
            }).then(function () {
                return _this473.publicGetFundsTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this473.indexBy(response['tickers'], 'fund_id');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this473.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this473.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                ticker,
                _this474 = this;

            return Promise.resolve().then(function () {
                return _this474.loadMarkets();
            }).then(function () {
                p = _this474.market(market);
                return _this474.publicGetFundsIdTicker({
                    'id': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this474.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this475 = this,
                _arguments463 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments463.length > 1 && _arguments463[1] !== undefined ? _arguments463[1] : {};
                return _this475.loadMarkets();
            }).then(function () {
                return _this475.publicGetFundsIdTrades(_this475.extend({
                    'id': _this475.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this476 = this,
                _arguments464 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments464.length > 4 && _arguments464[4] !== undefined ? _arguments464[4] : undefined;
                params = _arguments464.length > 5 && _arguments464[5] !== undefined ? _arguments464[5] : {};
                return _this476.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this476.id + ' allows limit orders only');
                }return _this476.privatePostFundsFundIdOrders(_this476.extend({
                    'fund_id': _this476.marketId(market),
                    'side': side,
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this477 = this,
                _arguments465 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments465.length > 1 && _arguments465[1] !== undefined ? _arguments465[1] : {};
                return _this477.loadMarkets();
            }).then(function () {
                return _this477.privateDeleteFundsFundIdOrdersId(_this477.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this478 = this,
                _arguments466 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments466.length > 1 && _arguments466[1] !== undefined ? _arguments466[1] : 'public';
                method = _arguments466.length > 2 && _arguments466[2] !== undefined ? _arguments466[2] : 'GET';
                params = _arguments466.length > 3 && _arguments466[3] !== undefined ? _arguments466[3] : {};
                headers = _arguments466.length > 4 && _arguments466[4] !== undefined ? _arguments466[4] : undefined;
                body = _arguments466.length > 5 && _arguments466[5] !== undefined ? _arguments466[5] : undefined;
                url = _this478.urls['api'] + '/' + _this478.version + '/' + _this478.implodeParams(path, params);
                query = _this478.omit(params, _this478.extractParams(path));

                if (api == 'private') {
                    nonce = _this478.nonce().toString();
                    auth = nonce + url;

                    headers = {
                        'X-TRT-KEY': _this478.apiKey,
                        'X-TRT-NONCE': nonce,
                        'X-TRT-SIGN': _this478.hmac(_this478.encode(auth), _this478.encode(_this478.secret), 'sha512')
                    };
                    if (Object.keys(query).length) {
                        body = _this478.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this478.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this478.id + ' ' + _this478.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var urdubit = extend(blinktrade, {
        'id': 'urdubit',
        'name': 'UrduBit',
        'countries': 'PK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://urdubit.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var vaultoro = {

        'id': 'vaultoro',
        'name': 'Vaultoro',
        'countries': 'CH',
        'rateLimit': 1000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',
            'api': 'https://api.vaultoro.com',
            'www': 'https://www.vaultoro.com',
            'doc': 'https://api.vaultoro.com'
        },
        'api': {
            'public': {
                'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']
            },
            'private': {
                'get': ['balance', 'mytrades', 'orders'],
                'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var result,
                markets,
                market,
                base,
                quote,
                symbol,
                baseId,
                quoteId,
                id,
                _this479 = this;

            return Promise.resolve().then(function () {
                result = [];
                return _this479.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                market = markets['data'];
                base = market['BaseCurrency'];
                quote = market['MarketCurrency'];
                symbol = base + '/' + quote;
                baseId = base;
                quoteId = quote;
                id = market['MarketName'];

                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'info': market
                });
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this480 = this;

            return Promise.resolve().then(function () {
                return _this480.loadMarkets();
            }).then(function () {
                return _this480.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    uppercase = currency.toUpperCase();
                    free = balance['cash'];
                    used = balance['reserved'];
                    total = _this480.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this481 = this,
                _arguments469 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments469.length > 1 && _arguments469[1] !== undefined ? _arguments469[1] : {};
                return _this481.loadMarkets();
            }).then(function () {
                return _this481.publicGetOrderbook(params);
            }).then(function (_resp) {
                response = _resp;
                orderbook = {
                    'bids': response['data'][0]['b'],
                    'asks': response['data'][1]['s']
                };
                timestamp = _this481.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this481.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['Gold_Price'];
                        amount = order['Gold_Amount'];

                        result[side].push([price, amount]);
                    }
                }
                result['bids'] = _this481.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var quote,
                bidsLength,
                bid,
                ask,
                response,
                ticker,
                timestamp,
                _this482 = this;

            return Promise.resolve().then(function () {
                return _this482.loadMarkets();
            }).then(function () {
                return _this482.publicGetBidandask();
            }).then(function (_resp) {
                quote = _resp;
                bidsLength = quote['bids'].length;
                bid = quote['bids'][bidsLength - 1];
                ask = quote['asks'][0];
                return _this482.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = _this482.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this482.iso8601(timestamp),
                    'high': parseFloat(ticker['24hHigh']),
                    'low': parseFloat(ticker['24hLow']),
                    'bid': bid[0],
                    'ask': ask[0],
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['LastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['24hVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this483 = this,
                _arguments471 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments471.length > 1 && _arguments471[1] !== undefined ? _arguments471[1] : {};
                return _this483.loadMarkets();
            }).then(function () {
                return _this483.publicGetTransactionsDay(params);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                p,
                method,
                response,
                _this484 = this,
                _arguments472 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments472.length > 4 && _arguments472[4] !== undefined ? _arguments472[4] : undefined;
                params = _arguments472.length > 5 && _arguments472[5] !== undefined ? _arguments472[5] : {};
                return _this484.loadMarkets();
            }).then(function () {
                p = _this484.market(market);
                method = 'privatePost' + _this484.capitalize(side) + 'SymbolType';
                return _this484[method](_this484.extend({
                    'symbol': p['quoteId'].toLowerCase(),
                    'type': type,
                    'gld': amount,
                    'price': price || 1
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data']['Order_ID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this485 = this,
                _arguments473 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments473.length > 1 && _arguments473[1] !== undefined ? _arguments473[1] : {};
                return _this485.loadMarkets();
            }).then(function () {
                return _this485.privatePostCancelId(_this485.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/';
            if (api == 'public') {
                url += path;
            } else {
                var nonce = this.nonce();
                url += this.version + '/' + this.implodeParams(path, params);
                var query = this.extend({
                    'nonce': nonce,
                    'apikey': this.apiKey
                }, this.omit(params, this.extractParams(path)));
                url += '?' + this.urlencode(query);
                headers = {
                    'Content-Type': 'application/json',
                    'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var vbtc = extend(blinktrade, {
        'id': 'vbtc',
        'name': 'VBTC',
        'countries': 'VN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://vbtc.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' }
        }
    });

    //-----------------------------------------------------------------------------

    var virwox = {

        'id': 'virwox',
        'name': 'VirWoX',
        'countries': 'AT',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',
            'api': {
                'public': 'http://api.virwox.com/api/json.php',
                'private': 'https://www.virwox.com/api/trading.php'
            },
            'www': 'https://www.virwox.com',
            'doc': 'https://www.virwox.com/developers.php'
        },
        'api': {
            'public': {
                'get': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics'],
                'post': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics']
            },
            'private': {
                'get': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder'],
                'post': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                _this486 = this;

            return Promise.resolve().then(function () {
                return _this486.publicGetInstruments();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets['result'][keys[p]];
                    id = market['instrumentID'];
                    symbol = market['symbol'];
                    base = market['longCurrency'];
                    quote = market['shortCurrency'];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this487 = this;

            return Promise.resolve().then(function () {
                return _this487.loadMarkets();
            }).then(function () {
                return _this487.privatePostGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result']['accountList'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = balance['balance'];
                    account = {
                        'free': total,
                        'used': undefined,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchBestPrices: function fetchBestPrices(market) {
            var _this488 = this;

            return Promise.resolve().then(function () {
                return _this488.loadMarkets();
            }).then(function () {
                return _this488.publicPostGetBestPrices({
                    'symbols': [_this488.symbol(market)]
                });
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this489 = this,
                _arguments477 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments477.length > 1 && _arguments477[1] !== undefined ? _arguments477[1] : {};
                return _this489.loadMarkets();
            }).then(function () {
                return _this489.publicPostGetMarketDepth(_this489.extend({
                    'symbols': [_this489.symbol(market)],
                    'buyDepth': 100,
                    'sellDepth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][0];
                timestamp = _this489.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this489.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var end,
                start,
                response,
                tickers,
                keys,
                length,
                lastKey,
                ticker,
                timestamp,
                _this490 = this;

            return Promise.resolve().then(function () {
                return _this490.loadMarkets();
            }).then(function () {
                end = _this490.milliseconds();
                start = end - 86400000;
                return _this490.publicGetTradedPriceVolume({
                    'instrument': _this490.symbol(market),
                    'endDate': _this490.yyyymmddhhmmss(end),
                    'startDate': _this490.yyyymmddhhmmss(start),
                    'HLOC': 1
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result']['priceVolumeList'];
                keys = Object.keys(tickers);
                length = keys.length;
                lastKey = keys[length - 1];
                ticker = tickers[lastKey];
                timestamp = _this490.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this490.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['longVolume']),
                    'quoteVolume': parseFloat(ticker['shortVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this491 = this,
                _arguments479 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments479.length > 1 && _arguments479[1] !== undefined ? _arguments479[1] : {};
                return _this491.loadMarkets();
            }).then(function () {
                return _this491.publicGetRawTradeData(_this491.extend({
                    'instrument': _this491.symbol(market),
                    'timespan': 3600
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this492 = this,
                _arguments480 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments480.length > 4 && _arguments480[4] !== undefined ? _arguments480[4] : undefined;
                params = _arguments480.length > 5 && _arguments480[5] !== undefined ? _arguments480[5] : {};
                return _this492.loadMarkets();
            }).then(function () {
                order = {
                    'instrument': _this492.symbol(market),
                    'orderType': side.toUpperCase(),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this492.privatePostPlaceOrder(_this492.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this493 = this,
                _arguments481 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments481.length > 1 && _arguments481[1] !== undefined ? _arguments481[1] : {};
                return _this493.loadMarkets();
            }).then(function () {
                return _this493.privatePostCancelOrder(_this493.extend({
                    'orderID': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                auth,
                nonce,
                response,
                _this494 = this,
                _arguments482 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments482.length > 1 && _arguments482[1] !== undefined ? _arguments482[1] : 'public';
                method = _arguments482.length > 2 && _arguments482[2] !== undefined ? _arguments482[2] : 'GET';
                params = _arguments482.length > 3 && _arguments482[3] !== undefined ? _arguments482[3] : {};
                headers = _arguments482.length > 4 && _arguments482[4] !== undefined ? _arguments482[4] : undefined;
                body = _arguments482.length > 5 && _arguments482[5] !== undefined ? _arguments482[5] : undefined;
                url = _this494.urls['api'][api];
                auth = {};

                if (api == 'private') {
                    auth['key'] = _this494.apiKey;
                    auth['user'] = _this494.login;
                    auth['pass'] = _this494.password;
                }
                nonce = _this494.nonce();

                if (method == 'GET') {
                    url += '?' + _this494.urlencode(_this494.extend({
                        'method': path,
                        'id': nonce
                    }, auth, params));
                } else {
                    headers = { 'Content-Type': 'application/json' };
                    body = _this494.json({
                        'method': path,
                        'params': _this494.extend(auth, params),
                        'id': nonce
                    });
                }
                return _this494.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this494.id + ' ' + _this494.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var xbtce = {

        'id': 'xbtce',
        'name': 'xBTCe',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',
            'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',
            'www': 'https://www.xbtce.com',
            'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']
        },
        'api': {
            'public': {
                'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']
            },
            'private': {
                'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],
                'post': ['trade', 'tradehistory'],
                'put': ['trade'],
                'delete': ['trade']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this495 = this;

            return Promise.resolve().then(function () {
                return _this495.privateGetSymbol();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['Symbol'];
                    base = market['MarginCurrency'];
                    quote = market['ProfitCurrency'];

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    symbol = market['IsTradeAllowed'] ? symbol : id;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                total,
                account,
                _this496 = this;

            return Promise.resolve().then(function () {
                return _this496.loadMarkets();
            }).then(function () {
                return _this496.privateGetAsset();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.toUpperCase();
                    // xbtce names DASH incorrectly as DSH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }total = balance['balance'];
                    account = {
                        'free': balance['FreeAmount'],
                        'used': balance['LockedAmount'],
                        'total': balance['Amount']
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                Side,
                orders,
                i,
                order,
                price,
                amount,
                _this497 = this,
                _arguments485 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments485.length > 1 && _arguments485[1] !== undefined ? _arguments485[1] : {};
                return _this497.loadMarkets();
            }).then(function () {
                p = _this497.market(market);
                return _this497.privateGetLevel2Filter(_this497.extend({
                    'filter': p['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                orderbook = orderbook[0];
                timestamp = orderbook['Timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this497.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    Side = _this497.capitalize(side);
                    orders = orderbook[Side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Price']);
                        amount = parseFloat(order['Volume']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = 0;
            var last = undefined;
            if ('LastBuyTimestamp' in ticker) if (timestamp < ticker['LastBuyTimestamp']) {
                timestamp = ticker['LastBuyTimestamp'];
                last = ticker['LastBuyPrice'];
            }
            if ('LastSellTimestamp' in ticker) if (timestamp < ticker['LastSellTimestamp']) {
                timestamp = ticker['LastSellTimestamp'];
                last = ticker['LastSellPrice'];
            }
            if (!timestamp) timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['DailyBestBuyPrice'],
                'low': ticker['DailyBestSellPrice'],
                'bid': ticker['BestBid'],
                'ask': ticker['BestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': ticker['DailyTradedTotalVolume'],
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                ticker,
                _this498 = this;

            return Promise.resolve().then(function () {
                return _this498.loadMarkets();
            }).then(function () {
                return _this498.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;

                tickers = _this498.indexBy(tickers, 'Symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = undefined;

                    if (id in _this498.markets_by_id) {
                        market = _this498.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        if (base == 'DSH') {
                            base = 'DASH';
                        }if (quote == 'DSH') {
                            quote = 'DASH';
                        }symbol = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this498.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                length,
                ticker,
                _this499 = this;

            return Promise.resolve().then(function () {
                return _this499.loadMarkets();
            }).then(function () {
                p = _this499.market(market);
                return _this499.publicGetTickerFilter({
                    'filter': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                length = tickers.length;

                if (length < 1) {
                    throw new ExchangeError(_this499.id + ' fetchTicker returned empty response, xBTCe public API error');
                }tickers = _this499.indexBy(tickers, 'Symbol');
                ticker = tickers[p['id']];

                return _this499.parseTicker(ticker, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this500 = this,
                _arguments488 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments488.length > 1 && _arguments488[1] !== undefined ? _arguments488[1] : {};
                return _this500.loadMarkets();
            }).then(function () {
                // no method for trades?
                return _this500.privateGetTrade(params);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this501 = this,
                _arguments489 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments489.length > 4 && _arguments489[4] !== undefined ? _arguments489[4] : undefined;
                params = _arguments489.length > 5 && _arguments489[5] !== undefined ? _arguments489[5] : {};
                return _this501.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this501.id + ' allows limit orders only');
                }return _this501.tapiPostTrade(_this501.extend({
                    'pair': _this501.marketId(market),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this502 = this,
                _arguments490 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments490.length > 1 && _arguments490[1] !== undefined ? _arguments490[1] : {};
                return _this502.loadMarkets();
            }).then(function () {
                return _this502.privateDeleteTrade(_this502.extend({
                    'Type': 'Cancel',
                    'Id': id
                }, params));
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');
            if (!this.uid) throw new AuthenticationError(this.id + ' requires uid property for authentication and trading');
            var url = this.urls['api'] + '/' + this.version;
            if (api == 'public') url += '/' + api;
            url += '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                headers = { 'Accept-Encoding': 'gzip, deflate' };
                var nonce = this.nonce().toString();
                if (method == 'POST') {
                    if (Object.keys(query).length) {
                        headers['Content-Type'] = 'application/json';
                        body = this.json(query);
                    } else url += '?' + this.urlencode(query);
                }
                var auth = nonce + this.uid + this.apiKey + method + url;
                if (body) auth += body;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
                var credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + this.binaryToString(signature);
                headers['Authorization'] = 'HMAC ' + credentials;
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var yobit = {

        'id': 'yobit',
        'name': 'YoBit',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
            'api': 'https://yobit.net',
            'www': 'https://www.yobit.net',
            'doc': 'https://www.yobit.net/en/api/'
        },
        'api': {
            'api': {
                'get': ['depth/{pairs}', 'info', 'ticker/{pairs}', 'trades/{pairs}']
            },
            'tapi': {
                'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split13,
                _symbol$split14,
                base,
                quote,
                _this503 = this;

            return Promise.resolve().then(function () {
                return _this503.apiGetInfo();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['pairs'][id];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split13 = symbol.split('/');
                    _symbol$split14 = _slicedToArray(_symbol$split13, 2);
                    base = _symbol$split14[0];
                    quote = _symbol$split14[1];

                    base = _this503.commonCurrencyCode(base);
                    quote = _this503.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this504 = this;

            return Promise.resolve().then(function () {
                return _this504.loadMarkets();
            }).then(function () {
                return _this504.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this504.currencies.length; c++) {
                    currency = _this504.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                response,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this505 = this,
                _arguments493 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments493.length > 1 && _arguments493[1] !== undefined ? _arguments493[1] : {};
                return _this505.loadMarkets();
            }).then(function () {
                p = _this505.market(market);
                return _this505.apiGetDepthPairs(_this505.extend({
                    'pairs': p['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this505.milliseconds();
                bids = 'bids' in orderbook ? orderbook['bids'] : [];
                asks = 'asks' in orderbook ? orderbook['asks'] : [];
                result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this505.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this506 = this;

            return Promise.resolve().then(function () {
                return _this506.loadMarkets();
            }).then(function () {
                p = _this506.market(market);
                return _this506.apiGetTickerPairs({
                    'pairs': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this506.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol_cur']),
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this507 = this,
                _arguments495 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments495.length > 1 && _arguments495[1] !== undefined ? _arguments495[1] : {};
                return _this507.loadMarkets();
            }).then(function () {
                return _this507.apiGetTradesPairs(_this507.extend({
                    'pairs': _this507.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                rate,
                response,
                _this508 = this,
                _arguments496 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments496.length > 4 && _arguments496[4] !== undefined ? _arguments496[4] : undefined;
                params = _arguments496.length > 5 && _arguments496[5] !== undefined ? _arguments496[5] : {};
                return _this508.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this508.id + ' allows limit orders only');
                }rate = price.toString();
                return _this508.tapiPostTrade(_this508.extend({
                    'pair': _this508.marketId(market),
                    'type': side,
                    'amount': amount,
                    'rate': '%.8f'.sprintf(price)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this509 = this,
                _arguments497 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments497.length > 1 && _arguments497[1] !== undefined ? _arguments497[1] : {};
                return _this509.loadMarkets();
            }).then(function () {
                return _this509.tapiPostCancelOrder(_this509.extend({
                    'order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _query2,
                response,
                _this510 = this,
                _arguments498 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments498.length > 1 && _arguments498[1] !== undefined ? _arguments498[1] : 'api';
                method = _arguments498.length > 2 && _arguments498[2] !== undefined ? _arguments498[2] : 'GET';
                params = _arguments498.length > 3 && _arguments498[3] !== undefined ? _arguments498[3] : {};
                headers = _arguments498.length > 4 && _arguments498[4] !== undefined ? _arguments498[4] : undefined;
                body = _arguments498.length > 5 && _arguments498[5] !== undefined ? _arguments498[5] : undefined;
                url = _this510.urls['api'] + '/' + api;

                if (api == 'api') {
                    url += '/' + _this510.version + '/' + _this510.implodeParams(path, params);
                    query = _this510.omit(params, _this510.extractParams(path));

                    if (Object.keys(query).length) {
                        url += '?' + _this510.urlencode(query);
                    }
                } else {
                    nonce = _this510.nonce();
                    _query2 = _this510.extend({ 'method': path, 'nonce': nonce }, params);

                    body = _this510.urlencode(_query2);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this510.apiKey,
                        'sign': _this510.hmac(_this510.encode(body), _this510.encode(_this510.secret), 'sha512')
                    };
                }
                return _this510.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this510.id + ' ' + _this510.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var yunbi = {

        'id': 'yunbi',
        'name': 'YUNBI',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',
            'api': 'https://yunbi.com',
            'www': 'https://yunbi.com',
            'doc': ['https://yunbi.com/documents/api/guide', 'https://yunbi.com/swagger/']
        },
        'api': {
            'public': {
                'get': ['tickers', 'tickers/{market}', 'markets', 'order_book', 'k', 'depth', 'trades', 'k_with_pending_trades', 'timestamp', 'addresses/{address}', 'partners/orders/{id}/trades']
            },
            'private': {
                'get': ['deposits', 'members/me', 'deposit', 'deposit_address', 'order', 'orders', 'trades/my'],
                'post': ['order/delete', 'orders', 'orders/multi', 'orders/clear']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split15,
                _symbol$split16,
                base,
                quote,
                _this511 = this;

            return Promise.resolve().then(function () {
                return _this511.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split15 = symbol.split('/');
                    _symbol$split16 = _slicedToArray(_symbol$split15, 2);
                    base = _symbol$split16[0];
                    quote = _symbol$split16[1];

                    base = _this511.commonCurrencyCode(base);
                    quote = _this511.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                account,
                _this512 = this;

            return Promise.resolve().then(function () {
                return _this512.loadMarkets();
            }).then(function () {
                return _this512.privateGetMembersMe();
            }).then(function (_resp) {
                response = _resp;
                balances = response['accounts'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': parseFloat(balance['locked']),
                        'total': undefined
                    };

                    account['total'] = _this512.sum(account['free'], account['used']);
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this513 = this,
                _arguments501 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments501.length > 1 && _arguments501[1] !== undefined ? _arguments501[1] : {};
                return _this513.loadMarkets();
            }).then(function () {
                p = _this513.market(market);
                return _this513.publicGetDepth(_this513.extend({
                    'market': p['id'],
                    'limit': 300
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this513.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                result['bids'] = _this513.sortBy(result['bids'], 0, true);
                result['asks'] = _this513.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['at'] * 1000;
            ticker = ticker['ticker'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['vol']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                _symbol3,
                ticker,
                _this514 = this;

            return Promise.resolve().then(function () {
                return _this514.loadMarkets();
            }).then(function () {
                return _this514.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = id;

                    if (id in _this514.markets_by_id) {
                        market = _this514.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        base = base.toUpperCase();
                        quote = quote.toUpperCase();
                        base = _this514.commonCurrencyCode(base);
                        quote = _this514.commonCurrencyCode(quote);
                        _symbol3 = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this514.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var p,
                response,
                _this515 = this;

            return Promise.resolve().then(function () {
                return _this515.loadMarkets();
            }).then(function () {
                p = _this515.market(market);
                return _this515.publicGetTickersMarket({
                    'market': p['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this515.parseTicker(response, p);
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                m,
                _this516 = this,
                _arguments504 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments504.length > 1 && _arguments504[1] !== undefined ? _arguments504[1] : {};
                return _this516.loadMarkets();
            }).then(function () {
                m = _this516.market(market);

                return _this516.publicGetTrades(_this516.extend({
                    'market': m['id']
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this517 = this,
                _arguments505 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments505.length > 4 && _arguments505[4] !== undefined ? _arguments505[4] : undefined;
                params = _arguments505.length > 5 && _arguments505[5] !== undefined ? _arguments505[5] : {};
                return _this517.loadMarkets();
            }).then(function () {
                order = {
                    'market': _this517.marketId(market),
                    'side': side,
                    'volume': amount.toString(),
                    'ord_type': type
                };

                if (type == 'limit') {
                    order['price'] = price.toString();
                }
                return _this517.privatePostOrders(_this517.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this518 = this;

            return Promise.resolve().then(function () {
                return _this518.loadMarkets();
            }).then(function () {
                return _this518.privatePostOrderDelete({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                _query3,
                auth,
                signature,
                suffix,
                response,
                _this519 = this,
                _arguments507 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments507.length > 1 && _arguments507[1] !== undefined ? _arguments507[1] : 'public';
                method = _arguments507.length > 2 && _arguments507[2] !== undefined ? _arguments507[2] : 'GET';
                params = _arguments507.length > 3 && _arguments507[3] !== undefined ? _arguments507[3] : {};
                headers = _arguments507.length > 4 && _arguments507[4] !== undefined ? _arguments507[4] : undefined;
                body = _arguments507.length > 5 && _arguments507[5] !== undefined ? _arguments507[5] : undefined;
                request = '/api/' + _this519.version + '/' + _this519.implodeParams(path, params) + '.json';
                query = _this519.omit(params, _this519.extractParams(path));
                url = _this519.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this519.urlencode(query);
                    }
                } else {
                    nonce = _this519.nonce().toString();
                    _query3 = _this519.urlencode(_this519.keysort(_this519.extend({
                        'access_key': _this519.apiKey,
                        'tonce': nonce
                    }, params)));
                    auth = method + '|' + request + '|' + _query3;
                    signature = _this519.hmac(_this519.encode(auth), _this519.encode(_this519.secret));
                    suffix = _query3 + '&signature=' + signature;

                    if (method == 'GET') {
                        url += '?' + suffix;
                    } else {
                        body = suffix;
                        headers = {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'Content-Length': body.length
                        };
                    }
                }
                return _this519.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this519.id + ' ' + _this519.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var zaif = {

        'id': 'zaif',
        'name': 'Zaif',
        'countries': 'JP',
        'rateLimit': 2000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
            'api': 'https://api.zaif.jp',
            'www': 'https://zaif.jp',
            'doc': ['http://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif']
        },
        'api': {
            'api': {
                'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']
            },
            'tapi': {
                'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']
            },
            'ecapi': {
                'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split17,
                _symbol$split18,
                base,
                quote,
                _this520 = this;

            return Promise.resolve().then(function () {
                return _this520.apiGetCurrencyPairsAll();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currency_pair'];
                    symbol = market['name'];
                    _symbol$split17 = symbol.split('/');
                    _symbol$split18 = _slicedToArray(_symbol$split17, 2);
                    base = _symbol$split18[0];
                    quote = _symbol$split18[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this521 = this;

            return Promise.resolve().then(function () {
                return _this521.loadMarkets();
            }).then(function () {
                return _this521.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this521.currencies.length; c++) {
                    currency = _this521.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                result,
                _this522 = this,
                _arguments510 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments510.length > 1 && _arguments510[1] !== undefined ? _arguments510[1] : {};
                return _this522.loadMarkets();
            }).then(function () {
                return _this522.apiGetDepthPair(_this522.extend({
                    'pair': _this522.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this522.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this522.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this523 = this;

            return Promise.resolve().then(function () {
                return _this523.loadMarkets();
            }).then(function () {
                return _this523.apiGetTickerPair({
                    'pair': _this523.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this523.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this523.iso8601(timestamp),
                    'high': ticker['high'],
                    'low': ticker['low'],
                    'bid': ticker['bid'],
                    'ask': ticker['ask'],
                    'vwap': ticker['vwap'],
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'],
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': ticker['volume'],
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this524 = this,
                _arguments512 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments512.length > 1 && _arguments512[1] !== undefined ? _arguments512[1] : {};
                return _this524.loadMarkets();
            }).then(function () {
                return _this524.apiGetTradesPair(_this524.extend({
                    'pair': _this524.marketId(market)
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                response,
                _this525 = this,
                _arguments513 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments513.length > 4 && _arguments513[4] !== undefined ? _arguments513[4] : undefined;
                params = _arguments513.length > 5 && _arguments513[5] !== undefined ? _arguments513[5] : {};
                return _this525.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this525.id + ' allows limit orders only');
                }return _this525.tapiPostTrade(_this525.extend({
                    'currency_pair': _this525.marketId(market),
                    'action': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this526 = this,
                _arguments514 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments514.length > 1 && _arguments514[1] !== undefined ? _arguments514[1] : {};
                return _this526.loadMarkets();
            }).then(function () {
                return _this526.tapiPostCancelOrder(_this526.extend({
                    'order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this527 = this,
                _arguments515 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments515.length > 1 && _arguments515[1] !== undefined ? _arguments515[1] : 'api';
                method = _arguments515.length > 2 && _arguments515[2] !== undefined ? _arguments515[2] : 'GET';
                params = _arguments515.length > 3 && _arguments515[3] !== undefined ? _arguments515[3] : {};
                headers = _arguments515.length > 4 && _arguments515[4] !== undefined ? _arguments515[4] : undefined;
                body = _arguments515.length > 5 && _arguments515[5] !== undefined ? _arguments515[5] : undefined;
                url = _this527.urls['api'] + '/' + api;

                if (api == 'api') {
                    url += '/' + _this527.version + '/' + _this527.implodeParams(path, params);
                } else {
                    nonce = _this527.nonce();

                    body = _this527.urlencode(_this527.extend({
                        'method': path,
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this527.apiKey,
                        'Sign': _this527.hmac(_this527.encode(body), _this527.encode(_this527.secret), 'sha512')
                    };
                }
                return _this527.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this527.id + ' ' + response['error']);
                }if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this527.id + ' ' + _this527.json(response));
                    }
                }return response;
            });
        }
    };

    //=============================================================================

    var exchanges = {

        '_1broker': _1broker,
        '_1btcxe': _1btcxe,
        'anxpro': anxpro,
        'bit2c': bit2c,
        'bitbay': bitbay,
        'bitbays': bitbays,
        'bitcoincoid': bitcoincoid,
        'bitfinex': bitfinex,
        'bitflyer': bitflyer,
        'bitlish': bitlish,
        'bitmarket': bitmarket,
        'bitmex': bitmex,
        'bitso': bitso,
        'bitstamp': bitstamp,
        'bittrex': bittrex,
        'bl3p': bl3p,
        'btcchina': btcchina,
        'btce': btce,
        'btcexchange': btcexchange,
        'btcmarkets': btcmarkets,
        'btctradeua': btctradeua,
        'btcturk': btcturk,
        'btcx': btcx,
        'bter': bter,
        'bxinth': bxinth,
        'ccex': ccex,
        'cex': cex,
        'chbtc': chbtc,
        'chilebit': chilebit,
        'coincheck': coincheck,
        'coinfloor': coinfloor,
        'coingi': coingi,
        'coinmarketcap': coinmarketcap,
        'coinmate': coinmate,
        'coinsecure': coinsecure,
        'coinspot': coinspot,
        'cryptopia': cryptopia,
        'dsx': dsx,
        'exmo': exmo,
        'flowbtc': flowbtc,
        'foxbit': foxbit,
        'fybse': fybse,
        'fybsg': fybsg,
        'gatecoin': gatecoin,
        'gdax': gdax,
        'gemini': gemini,
        'hitbtc': hitbtc,
        'huobi': huobi,
        'itbit': itbit,
        'jubi': jubi,
        'kraken': kraken,
        'lakebtc': lakebtc,
        'livecoin': livecoin,
        'liqui': liqui,
        'luno': luno,
        'mercado': mercado,
        'okcoincny': okcoincny,
        'okcoinusd': okcoinusd,
        'paymium': paymium,
        'poloniex': poloniex,
        'quadrigacx': quadrigacx,
        'quoine': quoine,
        'southxchange': southxchange,
        'surbitcoin': surbitcoin,
        'therock': therock,
        'urdubit': urdubit,
        'vaultoro': vaultoro,
        'vbtc': vbtc,
        'virwox': virwox,
        'xbtce': xbtce,
        'yobit': yobit,
        'yunbi': yunbi,
        'zaif': zaif
    };

    var defineAllExchanges = function defineAllExchanges(exchanges) {
        var result = {};

        var _loop3 = function _loop3(id) {
            result[id] = function (params) {
                return new Exchange(extend(exchanges[id], params));
            };
        };

        for (var id in exchanges) {
            _loop3(id);
        }result.exchanges = Object.keys(exchanges);
        return result;
    };

    //-----------------------------------------------------------------------------

    var ccxt = Object.assign(defineAllExchanges(exchanges), {

        version: version,

        // exceptions

        CCXTError: CCXTError,
        ExchangeError: ExchangeError,
        AuthenticationError: AuthenticationError,
        NetworkError: NetworkError,
        DDoSProtection: DDoSProtection,
        RequestTimeout: RequestTimeout,
        ExchangeNotAvailable: ExchangeNotAvailable,

        // common utility functions

        sleep: sleep,
        timeout: timeout,
        capitalize: capitalize,
        keysort: keysort,
        extend: extend,
        omit: omit,
        indexBy: indexBy,
        sortBy: sortBy,
        flatten: flatten,
        unique: unique,
        pluck: pluck,
        urlencode: urlencode,
        sum: sum,
        decimal: decimal,

        // underscore aliases

        index_by: indexBy,
        sort_by: sortBy,

        // crypto functions

        binaryConcat: binaryConcat,
        stringToBinary: stringToBinary,
        binaryToString: binaryToString,
        stringToBase64: stringToBase64,
        utf16ToBase64: utf16ToBase64,
        base64ToBinary: base64ToBinary,
        base64ToString: base64ToString,
        urlencodeBase64: urlencodeBase64,
        hash: hash,
        hmac: hmac,
        jwt: jwt

    });

    //-----------------------------------------------------------------------------

    if (isCommonJS) {

        module.exports = ccxt;
    } else {

        window.ccxt = ccxt;
    }

    //-----------------------------------------------------------------------------
})(); // end of namespace

}).call(this,require('_process'))

},{"_process":37,"crypto-js":11,"qs":39}],2:[function(require,module,exports){
/*  A entry point for the browser bundle version. This gets compiled by:
        
        browserify --debug ./ccxt.browser.js > ./build/ccxt.browser.js
 */

window.ccxt = require ('./build/ccxt.es5')
},{"./build/ccxt.es5":1}],3:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));
},{"./cipher-core":4,"./core":5,"./enc-base64":6,"./evpkdf":8,"./md5":13}],4:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./evpkdf"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./evpkdf"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));
},{"./core":5,"./evpkdf":8}],5:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));
},{}],6:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));
},{"./core":5}],7:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	return CryptoJS.enc.Utf16;

}));
},{"./core":5}],8:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));
},{"./core":5,"./hmac":10,"./sha1":29}],9:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	return CryptoJS.format.Hex;

}));
},{"./cipher-core":4,"./core":5}],10:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));
},{"./core":5}],11:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	return CryptoJS;

}));
},{"./aes":3,"./cipher-core":4,"./core":5,"./enc-base64":6,"./enc-utf16":7,"./evpkdf":8,"./format-hex":9,"./hmac":10,"./lib-typedarrays":12,"./md5":13,"./mode-cfb":14,"./mode-ctr":16,"./mode-ctr-gladman":15,"./mode-ecb":17,"./mode-ofb":18,"./pad-ansix923":19,"./pad-iso10126":20,"./pad-iso97971":21,"./pad-nopadding":22,"./pad-zeropadding":23,"./pbkdf2":24,"./rabbit":26,"./rabbit-legacy":25,"./rc4":27,"./ripemd160":28,"./sha1":29,"./sha224":30,"./sha256":31,"./sha3":32,"./sha384":33,"./sha512":34,"./tripledes":35,"./x64-core":36}],12:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	return CryptoJS.lib.WordArray;

}));
},{"./core":5}],13:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));
},{"./core":5}],14:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	return CryptoJS.mode.CFB;

}));
},{"./cipher-core":4,"./core":5}],15:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	return CryptoJS.mode.CTRGladman;

}));
},{"./cipher-core":4,"./core":5}],16:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	return CryptoJS.mode.CTR;

}));
},{"./cipher-core":4,"./core":5}],17:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	return CryptoJS.mode.ECB;

}));
},{"./cipher-core":4,"./core":5}],18:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	return CryptoJS.mode.OFB;

}));
},{"./cipher-core":4,"./core":5}],19:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Ansix923;

}));
},{"./cipher-core":4,"./core":5}],20:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	return CryptoJS.pad.Iso10126;

}));
},{"./cipher-core":4,"./core":5}],21:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	return CryptoJS.pad.Iso97971;

}));
},{"./cipher-core":4,"./core":5}],22:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	return CryptoJS.pad.NoPadding;

}));
},{"./cipher-core":4,"./core":5}],23:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS.pad.ZeroPadding;

}));
},{"./cipher-core":4,"./core":5}],24:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.PBKDF2;

}));
},{"./core":5,"./hmac":10,"./sha1":29}],25:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	return CryptoJS.RabbitLegacy;

}));
},{"./cipher-core":4,"./core":5,"./enc-base64":6,"./evpkdf":8,"./md5":13}],26:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	return CryptoJS.Rabbit;

}));
},{"./cipher-core":4,"./core":5,"./enc-base64":6,"./evpkdf":8,"./md5":13}],27:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	return CryptoJS.RC4;

}));
},{"./cipher-core":4,"./core":5,"./enc-base64":6,"./evpkdf":8,"./md5":13}],28:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	return CryptoJS.RIPEMD160;

}));
},{"./core":5}],29:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));
},{"./core":5}],30:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha256"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha256"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	return CryptoJS.SHA224;

}));
},{"./core":5,"./sha256":31}],31:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));
},{"./core":5}],32:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	return CryptoJS.SHA3;

}));
},{"./core":5,"./x64-core":36}],33:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./sha512"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	return CryptoJS.SHA384;

}));
},{"./core":5,"./sha512":34,"./x64-core":36}],34:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	return CryptoJS.SHA512;

}));
},{"./core":5,"./x64-core":36}],35:[function(require,module,exports){
;(function (root, factory, undef) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	return CryptoJS.TripleDES;

}));
},{"./cipher-core":4,"./core":5,"./enc-base64":6,"./evpkdf":8,"./md5":13}],36:[function(require,module,exports){
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	}
	else {
		// Global (browser)
		factory(root.CryptoJS);
	}
}(this, function (CryptoJS) {

	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	return CryptoJS;

}));
},{"./core":5}],37:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],38:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

module.exports = {
    'default': 'RFC3986',
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return value;
        }
    },
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

},{}],39:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');
var parse = require('./parse');
var formats = require('./formats');

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"./formats":38,"./parse":40,"./stringify":41}],40:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    parameterLimit: 1000,
    plainObjects: false,
    strictNullHandling: false
};

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);

    for (var i = 0; i < parts.length; ++i) {
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder);
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder);
            val = options.decoder(part.slice(pos + 1), defaults.decoder);
        }
        if (has.call(obj, key)) {
            obj[key] = [].concat(obj[key]).concat(val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function parseObjectRecursive(chain, val, options) {
    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj;
    if (root === '[]') {
        obj = [];
        obj = obj.concat(parseObject(chain, val, options));
    } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (
            !isNaN(index)
            && root !== cleanRoot
            && String(index) === cleanRoot
            && index >= 0
            && (options.parseArrays && index <= options.arrayLimit)
        ) {
            obj = [];
            obj[index] = parseObject(chain, val, options);
        } else {
            obj[cleanRoot] = parseObject(chain, val, options);
        }
    }

    return obj;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys
        // that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options);
};

module.exports = function (str, opts) {
    var options = opts ? utils.assign({}, opts) : {};

    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
    options.parseArrays = options.parseArrays !== false;
    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options);
        obj = utils.merge(obj, newObj, options);
    }

    return utils.compact(obj);
};

},{"./utils":42}],41:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var formats = require('./formats');

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching
        return prefix + '[]';
    },
    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching
        return prefix;
    }
};

var toISO = Date.prototype.toISOString;

var defaults = {
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    formatter,
    encodeValuesOnly
) {
    var obj = object;
    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
        }

        obj = '';
    }

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (Array.isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        if (Array.isArray(obj)) {
            values = values.concat(stringify(
                obj[key],
                generateArrayPrefix(prefix, key),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        } else {
            values = values.concat(stringify(
                obj[key],
                prefix + (allowDots ? '.' + key : '[' + key + ']'),
                generateArrayPrefix,
                strictNullHandling,
                skipNulls,
                encoder,
                filter,
                sort,
                allowDots,
                serializeDate,
                formatter,
                encodeValuesOnly
            ));
        }
    }

    return values;
};

module.exports = function (object, opts) {
    var obj = object;
    var options = opts ? utils.assign({}, opts) : {};

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
    if (typeof options.format === 'undefined') {
        options.format = formats.default;
    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
        throw new TypeError('Unknown format option provided.');
    }
    var formatter = formats.formatters[options.format];
    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (Array.isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    } else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (sort) {
        objKeys.sort(sort);
    }

    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) {
            continue;
        }

        keys = keys.concat(stringify(
            obj[key],
            key,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encode ? encoder : null,
            filter,
            sort,
            allowDots,
            serializeDate,
            formatter,
            encodeValuesOnly
        ));
    }

    var joined = keys.join(delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    return joined.length > 0 ? prefix + joined : '';
};

},{"./formats":38,"./utils":42}],42:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

exports.arrayToObject = function (source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

exports.merge = function (target, source, options) {
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        } else if (typeof target === 'object') {
            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
        mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                if (target[i] && typeof target[i] === 'object') {
                    target[i] = exports.merge(target[i], item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = exports.merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

exports.assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

exports.decode = function (str) {
    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};

exports.encode = function (str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D    // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

exports.compact = function (obj, references) {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    var refs = references || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0; i < obj.length; ++i) {
            if (obj[i] && typeof obj[i] === 'object') {
                compacted.push(exports.compact(obj[i], refs));
            } else if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    keys.forEach(function (key) {
        obj[key] = exports.compact(obj[key], refs);
    });

    return obj;
};

exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

exports.isBuffer = function (obj) {
    if (obj === null || typeof obj === 'undefined') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
