"use strict";

/*

MIT License

Copyright (c) 2017 Igor Kroitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {

    //-----------------------------------------------------------------------------
    // dependencies

    var CryptoJS = require('crypto-js'),
        qs = require('qs'); // querystring
    // , ws       = require ('ws') // websocket

    //-----------------------------------------------------------------------------
    // this is updated by vss.js when building

    var version = '1.7.51';

    //-----------------------------------------------------------------------------
    // platform detection

    var isNode = typeof window === 'undefined',
        isCommonJS = typeof module !== 'undefined' && typeof require !== 'undefined';

    //-----------------------------------------------------------------------------

    var CCXTError = function (_Error) {
        _inherits(CCXTError, _Error);

        function CCXTError(message) {
            _classCallCheck(this, CCXTError);

            // a workaround to make `instanceof CCXTError` work in ES5
            var _this = _possibleConstructorReturn(this, (CCXTError.__proto__ || Object.getPrototypeOf(CCXTError)).call(this, message));

            _this.constructor = CCXTError;
            _this.__proto__ = CCXTError.prototype;
            _this.message = message;
            return _this;
        }

        return CCXTError;
    }(Error);

    var ExchangeError = function (_CCXTError) {
        _inherits(ExchangeError, _CCXTError);

        function ExchangeError(message) {
            _classCallCheck(this, ExchangeError);

            var _this2 = _possibleConstructorReturn(this, (ExchangeError.__proto__ || Object.getPrototypeOf(ExchangeError)).call(this, message));

            _this2.constructor = ExchangeError;
            _this2.__proto__ = ExchangeError.prototype;
            _this2.message = message;
            return _this2;
        }

        return ExchangeError;
    }(CCXTError);

    var NotSupported = function (_ExchangeError) {
        _inherits(NotSupported, _ExchangeError);

        function NotSupported(message) {
            _classCallCheck(this, NotSupported);

            var _this3 = _possibleConstructorReturn(this, (NotSupported.__proto__ || Object.getPrototypeOf(NotSupported)).call(this, message));

            _this3.constructor = NotSupported;
            _this3.__proto__ = NotSupported.prototype;
            _this3.message = message;
            return _this3;
        }

        return NotSupported;
    }(ExchangeError);

    var AuthenticationError = function (_ExchangeError2) {
        _inherits(AuthenticationError, _ExchangeError2);

        function AuthenticationError(message) {
            _classCallCheck(this, AuthenticationError);

            var _this4 = _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call(this, message));

            _this4.constructor = AuthenticationError;
            _this4.__proto__ = AuthenticationError.prototype;
            _this4.message = message;
            return _this4;
        }

        return AuthenticationError;
    }(ExchangeError);

    var InsufficientFunds = function (_ExchangeError3) {
        _inherits(InsufficientFunds, _ExchangeError3);

        function InsufficientFunds(message) {
            _classCallCheck(this, InsufficientFunds);

            var _this5 = _possibleConstructorReturn(this, (InsufficientFunds.__proto__ || Object.getPrototypeOf(InsufficientFunds)).call(this, message));

            _this5.constructor = InsufficientFunds;
            _this5.__proto__ = InsufficientFunds.prototype;
            _this5.message = message;
            return _this5;
        }

        return InsufficientFunds;
    }(ExchangeError);

    var NetworkError = function (_CCXTError2) {
        _inherits(NetworkError, _CCXTError2);

        function NetworkError(message) {
            _classCallCheck(this, NetworkError);

            var _this6 = _possibleConstructorReturn(this, (NetworkError.__proto__ || Object.getPrototypeOf(NetworkError)).call(this, message));

            _this6.constructor = NetworkError;
            _this6.__proto__ = NetworkError.prototype;
            _this6.message = message;
            return _this6;
        }

        return NetworkError;
    }(CCXTError);

    var DDoSProtection = function (_NetworkError) {
        _inherits(DDoSProtection, _NetworkError);

        function DDoSProtection(message) {
            _classCallCheck(this, DDoSProtection);

            var _this7 = _possibleConstructorReturn(this, (DDoSProtection.__proto__ || Object.getPrototypeOf(DDoSProtection)).call(this, message));

            _this7.constructor = DDoSProtection;
            _this7.__proto__ = DDoSProtection.prototype;
            _this7.message = message;
            return _this7;
        }

        return DDoSProtection;
    }(NetworkError);

    var RequestTimeout = function (_NetworkError2) {
        _inherits(RequestTimeout, _NetworkError2);

        function RequestTimeout(message) {
            _classCallCheck(this, RequestTimeout);

            var _this8 = _possibleConstructorReturn(this, (RequestTimeout.__proto__ || Object.getPrototypeOf(RequestTimeout)).call(this, message));

            _this8.constructor = RequestTimeout;
            _this8.__proto__ = RequestTimeout.prototype;
            _this8.message = message;
            return _this8;
        }

        return RequestTimeout;
    }(NetworkError);

    var ExchangeNotAvailable = function (_NetworkError3) {
        _inherits(ExchangeNotAvailable, _NetworkError3);

        function ExchangeNotAvailable(message) {
            _classCallCheck(this, ExchangeNotAvailable);

            var _this9 = _possibleConstructorReturn(this, (ExchangeNotAvailable.__proto__ || Object.getPrototypeOf(ExchangeNotAvailable)).call(this, message));

            _this9.constructor = ExchangeNotAvailable;
            _this9.__proto__ = ExchangeNotAvailable.prototype;
            _this9.message = message;
            return _this9;
        }

        return ExchangeNotAvailable;
    }(NetworkError);

    //-----------------------------------------------------------------------------
    // utility helpers

    var sleep = function sleep(ms) {
        return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
        });
    };

    var decimal = function decimal(float) {
        return parseFloat(float).toString();
    };

    var timeout = function timeout(ms, promise) {
        return Promise.race([promise, sleep(ms).then(function () {
            throw new RequestTimeout('request timed out');
        })]);
    };

    var capitalize = function capitalize(string) {
        return string.length ? string.charAt(0).toUpperCase() + string.slice(1) : string;
    };

    var keysort = function keysort(object) {
        var result = {};
        Object.keys(object).sort().forEach(function (key) {
            return result[key] = object[key];
        });
        return result;
    };

    var extend = function extend() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var result = {};

        var _loop = function _loop(i) {
            if (_typeof(args[i]) === 'object') Object.keys(args[i]).forEach(function (key) {
                return result[key] = args[i][key];
            });
        };

        for (var i = 0; i < args.length; i++) {
            _loop(i);
        }return result;
    };

    var omit = function omit(object) {
        var result = extend(object);
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'string') delete result[arguments[i]];else if (Array.isArray(arguments[i])) for (var k = 0; k < arguments[i].length; k++) {
                delete result[arguments[i][k]];
            }
        }return result;
    };

    var indexBy = function indexBy(array, key) {
        var result = {};
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            if (typeof element[key] != 'undefined') {
                result[element[key]] = element;
            }
        }
        return result;
    };

    var sortBy = function sortBy(array, key) {
        var descending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        descending = descending ? -1 : 1;
        return array.sort(function (a, b) {
            return a[key] < b[key] ? -descending : a[key] > b[key] ? descending : 0;
        });
    };

    var flatten = function flatten(array) {
        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        for (var i = 0, length = array.length; i < length; i++) {
            var value = array[i];
            if (Array.isArray(value)) {
                flatten(value, result);
            } else {
                result.push(value);
            }
        }
        return result;
    };

    var unique = function unique(array) {
        return array.filter(function (value, index, self) {
            return self.indexOf(value) == index;
        });
    };

    var pluck = function pluck(array, key) {
        return array.filter(function (element) {
            return typeof element[key] != 'undefined';
        }).map(function (element) {
            return element[key];
        });
    };

    var urlencode = function urlencode(object) {
        return qs.stringify(object);
    };

    var sum = function sum() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var result = args.filter(function (arg) {
            return typeof arg != 'undefined';
        });
        return result.length > 0 ? result.reduce(function (sum, value) {
            return sum + value;
        }, 0) : undefined;
    };

    var safeFloat = function safeFloat(object, key) {
        var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        return key in object && object[key] ? parseFloat(object[key]) : defaultValue;
    };

    var ordered = function ordered(x) {
        return x;
    }; // a stub to keep assoc keys in order, in JS it does nothing, it's mostly for Python

    //-----------------------------------------------------------------------------
    // a cross-platform Fetch API

    var nodeFetch = isNode && module.require('node-fetch') // using module.require to prevent Webpack / React Native from trying to include it
    ,
        windowFetch = typeof window !== 'undefined' && window.fetch // native Fetch API (in newer browsers)
    ,
        xhrFetch = function xhrFetch(url, options) {
        var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return (// a quick ad-hoc polyfill (for older browsers)
            new Promise(function (resolve, reject) {

                if (verbose) console.log(url, options);

                var xhr = new XMLHttpRequest();
                var method = options.method || 'GET';

                xhr.open(method, url, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) resolve(xhr.responseText);else {
                            // [403, 404, ...].indexOf (xhr.status) >= 0
                            throw new Error(method, url, xhr.status, xhr.responseText);
                        }
                    }
                };

                if (typeof options.headers != 'undefined') for (var header in options.headers) {
                    xhr.setRequestHeader(header, options.headers[header]);
                }xhr.send(options.body);
            })
        );
    };

    var fetch = nodeFetch || windowFetch || xhrFetch;

    //-----------------------------------------------------------------------------
    // string ←→ binary ←→ base64 conversion routines

    var stringToBinary = function stringToBinary(str) {
        var arr = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return CryptoJS.lib.WordArray.create(arr);
    };

    var stringToBase64 = function stringToBase64(string) {
        return CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64);
    },
        utf16ToBase64 = function utf16ToBase64(string) {
        return CryptoJS.enc.Utf16.parse(string).toString(CryptoJS.enc.Base64);
    },
        base64ToBinary = function base64ToBinary(string) {
        return CryptoJS.enc.Base64.parse(string);
    },
        base64ToString = function base64ToString(string) {
        return CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8);
    },
        binaryToString = function binaryToString(string) {
        return string;
    };

    var binaryConcat = function binaryConcat() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return args.reduce(function (a, b) {
            return a.concat(b);
        });
    };

    // url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
    var urlencodeBase64 = function urlencodeBase64(base64string) {
        return base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
    };

    //-----------------------------------------------------------------------------
    // cryptography

    var hash = function hash(request) {
        var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'md5';
        var digest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hex';

        var result = CryptoJS[hash.toUpperCase()](request);
        return digest == 'binary' ? result : result.toString(CryptoJS.enc[capitalize(digest)]);
    };

    var hmac = function hmac(request, secret) {
        var hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sha256';
        var digest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';

        var encoding = digest == 'binary' ? 'Latin1' : capitalize(digest);
        return CryptoJS['Hmac' + hash.toUpperCase()](request, secret).toString(CryptoJS.enc[capitalize(encoding)]);
    };

    //-----------------------------------------------------------------------------
    // a JSON Web Token authentication method

    var jwt = function jwt(request, secret) {
        var alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HS256';
        var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'sha256';

        var encodedHeader = urlencodeBase64(stringToBase64(JSON.stringify({ 'alg': alg, 'typ': 'JWT' }))),
            encodedData = urlencodeBase64(stringToBase64(JSON.stringify(request))),
            token = [encodedHeader, encodedData].join('.'),
            signature = urlencodeBase64(utf16ToBase64(hmac(token, secret, hash, 'utf16')));
        return [token, signature].join('.');
    };

    //-----------------------------------------------------------------------------
    // const WebSocket = require('ws')
    // const ws = new WebSocket (this.urls['websocket'])
    // ws.on ('open', function open () {
    //     console.log ('connected')
    //     // ws.send (Date.now ())
    // })
    // ws.on ('close', function close () {
    //     console.log ('disconnected')
    // });
    // ws.on ('message', function incoming (data) {
    //     // console.log (`Roundtrip time: ${Date.now() - data} ms`);
    //     setTimeout (function timeout () {
    //         ws.send (Date.now ())
    //     }, 500)
    // })
    //-----------------------------------------------------------------------------

    //-----------------------------------------------------------------------------
    // the base class

    var Exchange = function Exchange(config) {
        var _this21 = this;

        this.hash = hash;
        this.hmac = hmac;
        this.jwt = jwt; // JSON Web Token
        this.binaryConcat = binaryConcat;
        this.stringToBinary = stringToBinary;
        this.stringToBase64 = stringToBase64;
        this.base64ToBinary = base64ToBinary;
        this.base64ToString = base64ToString;
        this.binaryToString = binaryToString;
        this.utf16ToBase64 = utf16ToBase64;
        this.urlencode = urlencode;
        this.encodeURIComponent = encodeURIComponent;
        this.omit = omit;
        this.pluck = pluck;
        this.unique = unique;
        this.extend = extend;
        this.flatten = flatten;
        this.indexBy = indexBy;
        this.sortBy = sortBy;
        this.keysort = keysort;
        this.decimal = decimal;
        this.safeFloat = safeFloat;
        this.capitalize = capitalize;
        this.json = JSON.stringify;
        this.sum = sum;
        this.ordered = ordered;

        this.encode = function (string) {
            return string;
        };
        this.decode = function (string) {
            return string;
        };

        if (isNode) this.nodeVersion = process.version.match(/\d+\.\d+.\d+/)[0];

        this.init = function () {
            this.orders = {};
            this.trades = {};
            if (this.api) this.defineRestApi(this.api, 'request');
            if (this.markets) this.setMarkets(this.markets);
        };

        this.defineRestApi = function (api, methodName) {
            var _this10 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            Object.keys(api).forEach(function (type) {
                Object.keys(api[type]).forEach(function (httpMethod) {
                    var urls = api[type][httpMethod];

                    var _loop2 = function _loop2(i) {
                        var url = urls[i].trim();
                        var splitPath = url.split(/[^a-zA-Z0-9]/);

                        var uppercaseMethod = httpMethod.toUpperCase();
                        var lowercaseMethod = httpMethod.toLowerCase();
                        var camelcaseMethod = capitalize(lowercaseMethod);
                        var camelcaseSuffix = splitPath.map(capitalize).join('');
                        var underscoreSuffix = splitPath.map(function (x) {
                            return x.trim().toLowerCase();
                        }).filter(function (x) {
                            return x.length > 0;
                        }).join('_');

                        if (camelcaseSuffix.indexOf(camelcaseMethod) === 0) camelcaseSuffix = camelcaseSuffix.slice(camelcaseMethod.length);

                        if (underscoreSuffix.indexOf(lowercaseMethod) === 0) underscoreSuffix = underscoreSuffix.slice(lowercaseMethod.length);

                        var camelcase = type + camelcaseMethod + capitalize(camelcaseSuffix);
                        var underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix;

                        if ('suffixes' in options) {
                            if ('camelcase' in options['suffixes']) camelcase += options['suffixes']['camelcase'];
                            if ('underscore' in options.suffixes) underscore += options['suffixes']['underscore'];
                        }

                        if ('underscore_suffix' in options) underscore += options.underscoreSuffix;
                        if ('camelcase_suffix' in options) camelcase += options.camelcaseSuffix;

                        var partial = function partial(params) {
                            return _this10[methodName](url, type, uppercaseMethod, params);
                        };

                        _this10[camelcase] = partial;
                        _this10[underscore] = partial;
                    };

                    for (var i = 0; i < urls.length; i++) {
                        _loop2(i);
                    }
                });
            });
        };

        // this.initializeStreamingAPI = function () {
        //     this.ws = new WebSocket (this.urls['websocket'])
        //     ws.on ('open', function open () {
        //         console.log ('connected')
        //         // ws.send (Date.now ())
        //     })
        //     ws.on ('close', function close () {
        //         console.log ('disconnected')
        //     })
        //     ws.on ('message', function incoming (data) {
        //         // console.log (`Roundtrip time: ${Date.now() - data} ms`);
        //         setTimeout (function timeout () {
        //             ws.send (Date.now ())
        //         }, 500)
        //     })
        // },

        var this_ = this; // workaround for a Babel plugin bug (not passing `this` to _recursive() call)

        this.runRestPollerLoop = function () {
            function _recursive() {
                var _test, _test2;

                return Promise.resolve().then(function () {
                    _test = true;

                    if (_test) {
                        elapsed = this_.milliseconds() - this_.lastRestPollTimestamp;
                    }

                    _test2 = _test && elapsed < this_.rateLimit;

                    if (_test2) {
                        delay = Math.max(this_.rateLimit - elapsed, 0);
                    }

                    if (_test2 && delay > 0) {
                        return sleep(delay);
                    } else {
                        if (_test2) {
                            return _recursive;
                        } else {
                            if (_test) {
                                return _recursive;
                            }
                        }
                    }
                }).then(function () {
                    if (_test) {
                        return _recursive();
                    }
                });
            }

            var elapsed,
                delay,
                _this_$restRequestQue,
                _url,
                method,
                headers,
                body,
                resolve,
                reject,
                _this23 = this;

            return Promise.resolve().then(function () {

                if (_this23.restPollerLoopIsRunning) {
                    return false;
                } else {
                    return function () {
                        function _recursive2() {
                            if (this_.restRequestQueue.length > 0) {
                                return Promise.resolve().then(function () {
                                    return _recursive();
                                }).then(function () {
                                    _this_$restRequestQue = this_.restRequestQueue.shift();

                                    // rate limiter

                                    _url = _this_$restRequestQue.url;
                                    method = _this_$restRequestQue.method;
                                    headers = _this_$restRequestQue.headers;
                                    body = _this_$restRequestQue.body;
                                    resolve = _this_$restRequestQue.resolve;
                                    reject = _this_$restRequestQue.reject;

                                    this_.lastRestPollTimestamp = this_.milliseconds();
                                    this_.executeRestRequest(_url, method, headers, body).then(resolve).catch(reject);
                                    return _recursive2();
                                });
                            }
                        }

                        return Promise.resolve().then(function () {
                            _this23.restPollerLoopIsRunning = true;
                            _this23.lastRestPollTimestamp = Math.max(_this23.lastRestPollTimestamp, _this23.lastRestRequestTimestamp);

                            return _recursive2();
                        }).then(function () {

                            _this23.restPollerLoopIsRunning = false;
                        });
                    }();
                }
            }).then(function () {});
        };

        this.issueRestRequest = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

            var _this11 = this;

            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            if (this.enableRateLimit) {
                return new Promise(function (resolve, reject) {
                    _this11.restRequestQueue.push({ url: url, method: method, headers: headers, body: body, resolve: resolve, reject: reject });
                    _this11.runRestPollerLoop();
                });
            }

            return this.executeRestRequest(url, method, headers, body);
        };

        this.executeRestRequest = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

            var _this12 = this;

            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            this.lastRestRequestTimestamp = this.milliseconds();
            var promise = fetch(url, { 'method': method, 'headers': headers, 'body': body }).catch(function (e) {
                if (isNode) throw new ExchangeNotAvailable([_this12.id, method, url, e.type, e.message].join(' '));
                throw e; // rethrow all unknown errors
            }).then(function (response) {
                return _this12.handleRestErrors(response, url, method, headers, body);
            }).then(function (response) {
                return _this12.handleRestResponse(response, url, method, headers, body);
            });

            return timeout(this.timeout, promise);
        };

        this.fetch = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            if (isNode && this.userAgent) if (typeof this.userAgent == 'string') headers = extend({ 'User-Agent': this.userAgent }, headers);else if (_typeof(this.userAgent) == 'object' && 'User-Agent' in this.userAgent) headers = extend(this.userAgent, headers);

            if (this.proxy.length) headers = extend({ 'Origin': '*' }, headers);

            url = this.proxy + url;

            if (this.verbose) console.log(this.id, method, url, "\nRequest:\n", headers, body);

            return this.issueRestRequest(url, method, headers, body);
        };

        this.handleRestErrors = function (response, url) {
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';

            var _this13 = this;

            var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var body = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;


            if (typeof response == 'string') return response;

            return response.text().then(function (text) {
                if (_this13.verbose) console.log(_this13.id, method, url, text ? "\nResponse:\n" + text : '');
                if (response.status >= 200 && response.status <= 300) return text;
                var error = undefined;
                var details = text;
                if ([429].indexOf(response.status) >= 0) {
                    error = DDoSProtection;
                } else if ([404, 409, 422, 500, 501, 502, 520, 521, 522, 525].indexOf(response.status) >= 0) {
                    error = ExchangeNotAvailable;
                } else if ([400, 403, 405, 503].indexOf(response.status) >= 0) {
                    var ddosProtection = text.match(/cloudflare|incapsula/i);
                    if (ddosProtection) {
                        error = DDoSProtection;
                    } else {
                        error = ExchangeNotAvailable;
                        details = text + ' (possible reasons: ' + ['invalid API keys', 'bad or old nonce', 'exchange is down or offline', 'on maintenance', 'DDoS protection', 'rate-limiting'].join(', ') + ')';
                    }
                } else if ([408, 504].indexOf(response.status) >= 0) {
                    error = RequestTimeout;
                } else if ([401, 511].indexOf(response.status) >= 0) {
                    error = AuthenticationError;
                } else {
                    error = ExchangeError;
                }
                throw new error([_this13.id, method, url, response.status, response.statusText, details].join(' '));
            });
        };

        this.handleRestResponse = function (response, url) {
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var body = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;


            try {

                if (typeof response != 'string' || response.length < 2) throw new ExchangeError([this.id, method, url, 'returned empty response'].join(' '));

                return JSON.parse(response);
            } catch (e) {

                var maintenance = response.match(/offline|busy|retry|wait|unavailable|maintain|maintenance|maintenancing/i);
                var ddosProtection = response.match(/cloudflare|incapsula|overload/i);

                if (e instanceof SyntaxError) {

                    var error = ExchangeNotAvailable;
                    var details = 'not accessible from this location at the moment';
                    if (maintenance) details = 'offline, on maintenance or unreachable from this location at the moment';
                    if (ddosProtection) error = DDoSProtection;
                    throw new error([this.id, method, url, details].join(' '));
                }

                if (this.verbose) console.log(this.id, method, url, 'error', e, "response body:\n'" + response + "'");

                throw e;
            }
        };

        this.setMarkets = function (markets) {
            var values = _objectValues(markets);
            this.markets = indexBy(values, 'symbol');
            this.marketsById = indexBy(markets, 'id');
            this.markets_by_id = this.marketsById;
            this.symbols = Object.keys(this.markets).sort();
            this.ids = Object.keys(this.markets_by_id).sort();
            var base = this.pluck(values.filter(function (market) {
                return 'base' in market;
            }), 'base');
            var quote = this.pluck(values.filter(function (market) {
                return 'quote' in market;
            }), 'quote');
            this.currencies = this.unique(base.concat(quote));
            return this.markets;
        };

        this.loadMarkets = function () {
            var _this14 = this;

            var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!reload && this.markets) {
                if (!this.marketsById) {
                    return new Promise(function (resolve, reject) {
                        return resolve(_this14.setMarkets(_this14.markets));
                    });
                }
                return new Promise(function (resolve, reject) {
                    return resolve(_this14.markets);
                });
            }
            return this.fetchMarkets().then(function (markets) {
                return _this14.setMarkets(markets);
            });
        };

        this.fetchTickers = function () {
            var symbols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

            throw new NotSupported(this.id + ' fetchTickers not supoprted yet');
        };

        this.fetchOrder = function (id) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            throw new NotSupported(this.id + ' fetchOrder not supported yet');
        };

        this.fetchOrders = function () {
            var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            throw new NotSupported(this.id + ' fetchOrders not supported yet');
        };

        this.fetchOpenOrders = function () {
            var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            throw new NotSupported(this.id + ' fetchOpenOrders not supported yet');
        };

        this.fetchClosedOrders = function () {
            var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            throw new NotSupported(this.id + ' fetchClosedOrders not supported yet');
        };

        this.fetchMarkets = function () {
            var _this15 = this;

            return new Promise(function (resolve, reject) {
                return resolve(_this15.markets);
            });
        };

        this.fetchOrderStatus = function (id) {
            var market,
                order,
                _arguments11 = arguments;
            return Promise.resolve().then(function () {
                market = _arguments11.length > 1 && _arguments11[1] !== undefined ? _arguments11[1] : undefined;
                return fetchOrder(id);
            }).then(function (_resp) {
                order = _resp;

                return order['status'];
            });
        };

        this.account = function () {
            return {
                'free': 0.0,
                'used': 0.0,
                'total': 0.0
            };
        };

        this.commonCurrencyCode = function (currency) {
            if (!this.substituteCommonCurrencyCodes) return currency;
            if (currency == 'XBT') return 'BTC';
            if (currency == 'BCC') return 'BCH';
            if (currency == 'DRK') return 'DASH';
            return currency;
        };

        this.market = function (symbol) {
            return typeof symbol === 'string' && typeof this.markets != 'undefined' && typeof this.markets[symbol] != 'undefined' ? this.markets[symbol] : symbol;
        };

        this.market_id = this.marketId = function (symbol) {
            return this.market(symbol).id || symbol;
        };

        this.market_ids = this.marketIds = function (symbols) {
            var _this16 = this;

            return symbols.map(function (symbol) {
                return _this16.marketId(symbol);
            });
        };

        this.symbol = function (symbol) {
            return this.market(symbol).symbol || symbol;
        };

        this.extract_params = this.extractParams = function (string) {
            var re = /{([a-zA-Z0-9_]+?)}/g;
            var matches = [];
            var match = void 0;
            while (match = re.exec(string)) {
                matches.push(match[1]);
            }return matches;
        };

        this.implode_params = this.implodeParams = function (string, params) {
            for (var property in params) {
                string = string.replace('{' + property + '}', params[property]);
            }return string;
        };

        this.url = function (path) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var result = this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) result += '?' + this.urlencode(query);
            return result;
        };

        this.parseBidAsk = function (bidask) {
            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

            var price = parseFloat(bidask[priceKey]);
            var amount = parseFloat(bidask[amountKey]);
            return [price, amount];
        };

        this.parseBidAsks = function (bidasks) {
            var _this17 = this;

            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

            return _objectValues(bidasks).map(function (bidask) {
                return _this17.parseBidAsk(bidask, priceKey, amountKey);
            });
        };

        this.parseOrderBook = function (orderbook) {
            var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var bidsKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'bids';
            var asksKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'asks';
            var priceKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var amountKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

            timestamp = timestamp || this.milliseconds();
            return {
                'bids': bidsKey in orderbook ? this.parseBidAsks(orderbook[bidsKey], priceKey, amountKey) : [],
                'asks': asksKey in orderbook ? this.parseBidAsks(orderbook[asksKey], priceKey, amountKey) : [],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp)
            };
        }, this.parseTrades = function (trades) {
            var _this18 = this;

            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return _objectValues(trades).map(function (trade) {
                return _this18.parseTrade(trade, market);
            });
        };

        this.parseOrders = function (orders) {
            var _this19 = this;

            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return _objectValues(orders).map(function (order) {
                return _this19.parseOrder(order, market);
            });
        };

        this.parseOHLCV = function (ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return ohlcv;
        };

        this.parseOHLCVs = function (ohlcvs) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';

            var _this20 = this;

            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return _objectValues(ohlcvs).map(function (ohlcv) {
                return _this20.parseOHLCV(ohlcv, market, timeframe, since, limit);
            });
        };

        this.createLimitBuyOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'buy', amount, price, params);
        };

        this.createLimitSellOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'sell', amount, price, params);
        };

        this.createMarketBuyOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'buy', amount, undefined, params);
        };

        this.createMarketSellOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'sell', amount, undefined, params);
        };

        this.iso8601 = function (timestamp) {
            return new Date(timestamp).toISOString();
        };
        this.parse8601 = Date.parse;
        this.seconds = function () {
            return Math.floor(_this21.milliseconds() / 1000);
        };
        this.microseconds = function () {
            return Math.floor(_this21.milliseconds() * 1000);
        };
        this.milliseconds = Date.now;
        this.nonce = this.seconds;
        this.id = undefined;
        this.enableRateLimit = false;
        this.rateLimit = 2000; // milliseconds = seconds * 1000
        this.timeout = 10000; // milliseconds = seconds * 1000
        this.verbose = false;
        this.userAgent = false;
        this.twofa = false; // two-factor authentication
        this.substituteCommonCurrencyCodes = true;
        this.timeframes = undefined;
        this.hasPublicAPI = true;
        this.hasPrivateAPI = true;
        this.hasFetchTickers = false;
        this.hasFetchOHLCV = false;
        this.hasFetchOrder = false;
        this.hasFetchOrders = false;
        this.hasFetchOpenOrders = false;
        this.hasFetchClosedOrders = false;
        this.hasDeposit = false;
        this.hasWithdraw = false;

        // internal rate-limiting REST poller
        this.lastRestRequestTimestamp = 0;
        this.lastPollTimestamp = 0;
        this.restRequestQueue = [];

        this.YmdHMS = function (timestamp) {
            var infix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';

            var date = new Date(timestamp);
            var Y = date.getUTCFullYear();
            var m = date.getUTCMonth() + 1;
            var d = date.getUTCDate();
            var H = date.getUTCHours();
            var M = date.getUTCMinutes();
            var S = date.getUTCSeconds();
            m = m < 10 ? '0' + m : m;
            d = d < 10 ? '0' + d : d;
            H = H < 10 ? '0' + H : H;
            M = M < 10 ? '0' + M : M;
            S = S < 10 ? '0' + S : S;
            return Y + '-' + m + '-' + d + infix + H + ':' + M + ':' + S;
        };

        if (isNode) this.userAgent = {
            'User-Agent': 'ccxt/' + version + ' (+https://github.com/kroitor/ccxt)' + ' Node.js/' + this.nodeVersion + ' (JavaScript)'

            // prepended to URL, like https://proxy.com/https://exchange.com/api...
        };this.proxy = '';

        for (var property in config) {
            this[property] = config[property];
        }this.account = this.account;
        this.fetch_balance = this.fetchBalance;
        this.fetch_order_book = this.fetchOrderBook;
        this.fetch_tickers = this.fetchTickers;
        this.fetch_ticker = this.fetchTicker;
        this.fetch_trades = this.fetchTrades;
        this.fetch_order = this.fetchOrder;
        this.fetch_orders = this.fetchOrders;
        this.fetch_open_orders = this.fetchOpenOrders;
        this.fetch_closed_orders = this.fetchClosedOrders;
        this.fetch_order_status = this.fetchOrderStatus;
        this.fetch_markets = this.fetchMarkets;
        this.load_markets = this.loadMarkets;
        this.set_markets = this.setMarkets;
        this.parse_bidask = this.parseBidAsk;
        this.parse_bidasks = this.parseBidAsks;
        this.parse_order_book = this.parseOrderBook;
        this.parse_trades = this.parseTrades;
        this.parse_orders = this.parseOrders;
        this.parse_ohlcv = this.parseOHLCV;
        this.parse_ohlcvs = this.parseOHLCVs;
        this.create_limit_buy_order = this.createLimitBuyOrder;
        this.create_limit_sell_order = this.createLimitBuyOrder;
        this.create_market_buy_order = this.createLimitBuyOrder;
        this.create_market_sell_order = this.createLimitBuyOrder;
        this.create_order = this.createOrder;

        this.init();
    };

    //=============================================================================

    var _1broker = {

        'id': '_1broker',
        'name': '1Broker',
        'countries': 'US',
        'rateLimit': 1500,
        'version': 'v2',
        'hasPublicAPI': false,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '60',
            '15m': '900',
            '1h': '3600',
            '1d': '86400'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',
            'api': 'https://1broker.com/api',
            'www': 'https://1broker.com',
            'doc': 'https://1broker.com/?c=en/content/api-documentation'
        },
        'api': {
            'private': {
                'get': ['market/bars', 'market/categories', 'market/details', 'market/list', 'market/quotes', 'market/ticks', 'order/cancel', 'order/create', 'order/open', 'position/close', 'position/close_cancel', 'position/edit', 'position/history', 'position/open', 'position/shared/get', 'social/profile_statistics', 'social/profile_trades', 'user/bitcoin_deposit_address', 'user/details', 'user/overview', 'user/quota_status', 'user/transaction_log']
            }
        },

        fetchCategories: function fetchCategories() {
            var response,
                categories,
                result,
                i,
                _this33 = this;

            return Promise.resolve().then(function () {
                return _this33.privateGetMarketCategories();
            }).then(function (_resp) {
                response = _resp;
                // they return an empty string among their categories, wtf?

                categories = response['response'];
                result = [];

                for (i = 0; i < categories.length; i++) {
                    if (categories[i]) {
                        result.push(categories[i]);
                    }
                }
                return result;
            });
        },
        fetchMarkets: function fetchMarkets() {
            function _recursive3() {
                if (c < categories.length) {
                    return Promise.resolve().then(function () {
                        category = categories[c];
                        return this_.privateGetMarketList({
                            'category': category.toLowerCase()
                        });
                    }).then(function (_resp) {
                        markets = _resp;

                        for (p = 0; p < markets['response'].length; p++) {
                            market = markets['response'][p];
                            id = market['symbol'];
                            symbol = undefined;
                            base = undefined;
                            quote = undefined;

                            if (category == 'FOREX' || category == 'CRYPTO') {
                                symbol = market['name'];
                                parts = symbol.split('/');

                                base = parts[0];
                                quote = parts[1];
                            } else {
                                base = id;
                                quote = 'USD';
                                symbol = base + '/' + quote;
                            }
                            base = this_.commonCurrencyCode(base);
                            quote = this_.commonCurrencyCode(quote);
                            result.push({
                                'id': id,
                                'symbol': symbol,
                                'base': base,
                                'quote': quote,
                                'info': market
                            });
                        }
                        c++;
                        return _recursive3();
                    });
                }
            }

            var this_,
                categories,
                result,
                c,
                category,
                markets,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                parts,
                _this34 = this;

            return Promise.resolve().then(function () {
                this_ = _this34; // workaround for Babel bug (not passing `this` to _recursive() call)

                return _this34.fetchCategories();
            }).then(function (_resp) {
                categories = _resp;
                result = [];
                c = 0;
                return _recursive3();
            }).then(function () {
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                response,
                result,
                c,
                currency,
                total,
                _this38 = this,
                _arguments17 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments17.length > 0 && _arguments17[0] !== undefined ? _arguments17[0] : {};
                return _this38.loadMarkets();
            }).then(function () {
                return _this38.privateGetUserOverview();
            }).then(function (_resp) {
                balance = _resp;
                response = balance['response'];
                result = {
                    'info': response
                };

                for (c = 0; c < _this38.currencies.length; c++) {
                    currency = _this38.currencies[c];

                    result[currency] = _this38.account();
                }
                total = parseFloat(response['balance']);

                result['BTC']['free'] = total;
                result['BTC']['total'] = total;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                bidPrice,
                askPrice,
                bid,
                ask,
                _this39 = this,
                _arguments18 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments18.length > 1 && _arguments18[1] !== undefined ? _arguments18[1] : {};
                return _this39.loadMarkets();
            }).then(function () {
                return _this39.privateGetMarketQuotes(_this39.extend({
                    'symbols': _this39.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['response'][0];
                timestamp = _this39.parse8601(orderbook['updated']);
                bidPrice = parseFloat(orderbook['bid']);
                askPrice = parseFloat(orderbook['ask']);
                bid = [bidPrice, undefined];
                ask = [askPrice, undefined];

                return {
                    'timestamp': timestamp,
                    'datetime': _this39.iso8601(timestamp),
                    'bids': [bid],
                    'asks': [ask]
                };
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var _this40 = this;

            throw new ExchangeError(_this40.id + ' fetchTrades () method not implemented yet');
        },
        fetchTicker: function fetchTicker(symbol) {
            var result,
                orderbook,
                ticker,
                timestamp,
                _this41 = this;

            return Promise.resolve().then(function () {
                return _this41.loadMarkets();
            }).then(function () {
                return _this41.privateGetMarketBars({
                    'symbol': _this41.marketId(symbol),
                    'resolution': 60,
                    'limit': 1
                });
            }).then(function (_resp) {
                result = _resp;
                return _this41.fetchOrderBook(symbol);
            }).then(function (_resp) {
                orderbook = _resp;
                ticker = result['response'][0];
                timestamp = _this41.parse8601(ticker['date']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this41.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': orderbook['bids'][0][0],
                    'ask': orderbook['asks'][0][0],
                    'vwap': undefined,
                    'open': parseFloat(ticker['o']),
                    'close': parseFloat(ticker['c']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [this.parse8601(ohlcv['date']), parseFloat(ohlcv['o']), parseFloat(ohlcv['h']), parseFloat(ohlcv['l']), parseFloat(ohlcv['c']), undefined];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                result,
                _this42 = this,
                _arguments21 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments21.length > 1 && _arguments21[1] !== undefined ? _arguments21[1] : '1m';
                since = _arguments21.length > 2 && _arguments21[2] !== undefined ? _arguments21[2] : undefined;
                limit = _arguments21.length > 3 && _arguments21[3] !== undefined ? _arguments21[3] : undefined;
                params = _arguments21.length > 4 && _arguments21[4] !== undefined ? _arguments21[4] : {};
                return _this42.loadMarkets();
            }).then(function () {
                market = _this42.market(symbol);
                request = {
                    'symbol': market['id'],
                    'resolution': _this42.timeframes[timeframe]
                };

                if (since) {
                    request['date_start'] = _this42.iso8601(since);
                } // they also support date_end
                if (limit) {
                    request['limit'] = limit;
                }return _this42.privateGetMarketBars(_this42.extend(request, params));
            }).then(function (_resp) {
                result = _resp;

                return _this42.parseOHLCVs(result['response'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this43 = this,
                _arguments22 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments22.length > 4 && _arguments22[4] !== undefined ? _arguments22[4] : undefined;
                params = _arguments22.length > 5 && _arguments22[5] !== undefined ? _arguments22[5] : {};
                return _this43.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this43.marketId(symbol),
                    'margin': amount,
                    'direction': side == 'sell' ? 'short' : 'long',
                    'leverage': 1,
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['type'] += '_market';
                }return _this43.privateGetOrderCreate(_this43.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['response']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this44 = this;

            return Promise.resolve().then(function () {
                return _this44.loadMarkets();
            }).then(function () {
                return _this44.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _this45 = this,
                _arguments24 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments24.length > 1 && _arguments24[1] !== undefined ? _arguments24[1] : 'public';
                method = _arguments24.length > 2 && _arguments24[2] !== undefined ? _arguments24[2] : 'GET';
                params = _arguments24.length > 3 && _arguments24[3] !== undefined ? _arguments24[3] : {};
                headers = _arguments24.length > 4 && _arguments24[4] !== undefined ? _arguments24[4] : undefined;
                body = _arguments24.length > 5 && _arguments24[5] !== undefined ? _arguments24[5] : undefined;

                if (!_this45.apiKey) {
                    throw new AuthenticationError(_this45.id + ' requires apiKey for all requests');
                }url = _this45.urls['api'] + '/' + _this45.version + '/' + path + '.php';
                query = _this45.extend({ 'token': _this45.apiKey }, params);

                url += '?' + _this45.urlencode(query);
                return _this45.fetch(url, method);
            }).then(function (_resp) {
                response = _resp;

                if ('warning' in response) {
                    if (response['warning']) {
                        throw new ExchangeError(_this45.id + ' ' + _this45.json(response));
                    }
                }if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this45.id + ' ' + _this45.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cryptocapital = {

        'id': 'cryptocapital',
        'name': 'Crypto Capital',
        'comment': 'Crypto Capital API',
        'countries': 'PA', // Panama
        'hasFetchOHLCV': true,
        'hasWithdraw': true,
        'timeframes': {
            '1d': '1year'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993158-7a13f140-64ac-11e7-89cc-a3b441f0b0f8.jpg',
            'www': 'https://cryptocapital.co',
            'doc': 'https://github.com/cryptocap'
        },
        'api': {
            'public': {
                'get': ['stats', 'historical-prices', 'order-book', 'transactions']
            },
            'private': {
                'post': ['balances-and-info', 'open-orders', 'user-transactions', 'btc-deposit-address/get', 'btc-deposit-address/new', 'deposits/get', 'withdrawals/get', 'orders/new', 'orders/edit', 'orders/cancel', 'orders/status', 'withdrawals/new']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                account,
                _this46 = this,
                _arguments25 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments25.length > 0 && _arguments25[0] !== undefined ? _arguments25[0] : {};
                return _this46.privatePostBalancesAndInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances-and-info'];
                result = { 'info': balance };

                for (c = 0; c < _this46.currencies.length; c++) {
                    currency = _this46.currencies[c];
                    account = _this46.account();

                    account['free'] = _this46.safeFloat(balance['available'], currency, 0.0);
                    account['used'] = _this46.safeFloat(balance['on_hold'], currency, 0.0);
                    account['total'] = _this46.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                timestamp,
                orderbook,
                _this47 = this,
                _arguments26 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments26.length > 1 && _arguments26[1] !== undefined ? _arguments26[1] : {};
                return _this47.publicGetOrderBook(_this47.extend({
                    'currency': _this47.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this47.milliseconds();
                orderbook = response['order-book'];

                return _this47.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'order_amount');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this48 = this;

            return Promise.resolve().then(function () {
                return _this48.publicGetStats({
                    'currency': _this48.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['stats'];
                timestamp = _this48.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this48.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['daily_change']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['total_btc_traded'])
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1d';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [this.parse8601(ohlcv['date'] + ' 00:00:00'), undefined, undefined, undefined, parseFloat(ohlcv['price']), undefined];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                ohlcvs,
                _this49 = this,
                _arguments28 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments28.length > 1 && _arguments28[1] !== undefined ? _arguments28[1] : '1d';
                since = _arguments28.length > 2 && _arguments28[2] !== undefined ? _arguments28[2] : undefined;
                limit = _arguments28.length > 3 && _arguments28[3] !== undefined ? _arguments28[3] : undefined;
                params = _arguments28.length > 4 && _arguments28[4] !== undefined ? _arguments28[4] : {};
                market = _this49.market(symbol);
                return _this49.publicGetHistoricalPrices(_this49.extend({
                    'currency': market['id'],
                    'timeframe': _this49.timeframes[timeframe]
                }, params));
            }).then(function (_resp) {
                response = _resp;
                ohlcvs = _this49.omit(response['historical-prices'], 'request_currency');

                return _this49.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['timestamp']) * 1000;
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['maker_type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                trades,
                _this50 = this,
                _arguments29 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments29.length > 1 && _arguments29[1] !== undefined ? _arguments29[1] : {};
                market = _this50.market(symbol);
                return _this50.publicGetTransactions(_this50.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = _this50.omit(response['transactions'], 'request_currency');

                return _this50.parseTrades(trades, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this51 = this,
                _arguments30 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments30.length > 4 && _arguments30[4] !== undefined ? _arguments30[4] : undefined;
                params = _arguments30.length > 5 && _arguments30[5] !== undefined ? _arguments30[5] : {};
                order = {
                    'side': side,
                    'type': type,
                    'currency': _this51.marketId(symbol),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limit_price'] = price;
                }return _this51.privatePostOrdersNew(_this51.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            return this.privatePostOrdersCancel({ 'id': id });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this52 = this,
                _arguments31 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments31.length > 3 && _arguments31[3] !== undefined ? _arguments31[3] : {};
                return _this52.loadMarkets();
            }).then(function () {
                return _this52.privatePostWithdrawalsNew(_this52.extend({
                    'currency': currency,
                    'amount': parseFloat(amount),
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                request,
                response,
                errors,
                e,
                error,
                _this53 = this,
                _arguments32 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments32.length > 1 && _arguments32[1] !== undefined ? _arguments32[1] : 'public';
                method = _arguments32.length > 2 && _arguments32[2] !== undefined ? _arguments32[2] : 'GET';
                params = _arguments32.length > 3 && _arguments32[3] !== undefined ? _arguments32[3] : {};
                headers = _arguments32.length > 4 && _arguments32[4] !== undefined ? _arguments32[4] : undefined;
                body = _arguments32.length > 5 && _arguments32[5] !== undefined ? _arguments32[5] : undefined;

                if (_this53.id == 'cryptocapital') {
                    throw new ExchangeError(_this53.id + ' is an abstract base API for _1btcxe');
                }url = _this53.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this53.urlencode(params);
                    }
                } else {
                    query = _this53.extend({
                        'api_key': _this53.apiKey,
                        'nonce': _this53.nonce()
                    }, params);
                    request = _this53.json(query);

                    query['signature'] = _this53.hmac(_this53.encode(request), _this53.encode(_this53.secret));
                    body = _this53.json(query);
                    headers = { 'Content-Type': 'application/json' };
                }
                return _this53.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    errors = [];

                    for (e = 0; e < response['errors'].length; e++) {
                        error = response['errors'][e];

                        errors.push(error['code'] + ': ' + error['message']);
                    }
                    errors = errors.join(' ');
                    throw new ExchangeError(_this53.id + ' ' + errors);
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var _1btcxe = extend(cryptocapital, {

        'id': '_1btcxe',
        'name': '1BTCXE',
        'countries': 'PA', // Panama
        'comment': 'Crypto Capital API',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',
            'api': 'https://1btcxe.com/api',
            'www': 'https://1btcxe.com',
            'doc': 'https://1btcxe.com/api-docs.php'
        },
        'markets': {
            'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },
            'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },
            'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },
            'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },
            'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },
            'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },
            'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },
            'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },
            'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },
            'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },
            'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },
            'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },
            'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },
            'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },
            'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },
            'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' }
        }
    });

    //-----------------------------------------------------------------------------

    var acx = {

        'id': 'acx',
        'name': 'ACX',
        'countries': 'AU',
        'rateLimit': 1000,
        'version': 'v2',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '12h': '720',
            '1d': '1440',
            '3d': '4320',
            '1w': '10080'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg',
            'api': 'https://acx.io/api',
            'www': 'https://acx.io',
            'doc': 'https://acx.io/documents/api_v2'
        },
        'api': {
            'public': {
                'get': ['markets', // Get all available markets
                'tickers', // Get ticker of all markets
                'tickers/{market}', // Get ticker of specific market
                'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.
                'order_book', // Get the order book of specified market
                'depth', // Get depth or specified market Both asks and bids are sorted from highest price to lowest.
                'k', // Get OHLC(k line) of specific market
                'k_with_pending_trades', // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator
                'timestamp']
            },
            'private': {
                'get': ['members/me', // Get your profile and accounts info
                'deposits', // Get your deposits history
                'deposit', // Get details of specific deposit
                'deposit_address', // Where to deposit The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.
                'orders', // Get your orders, results is paginated
                'order', // Get information of specified order
                'trades/my', // Get your executed trades Trades are sorted in reverse creation order.
                'withdraws', // Get your cryptocurrency withdraws
                'withdraw'],
                'post': ['orders', // Create a Sell/Buy order
                'orders/multi', // Create multiple sell/buy orders
                'orders/clear', // Cancel all my orders
                'order/delete', // Cancel an order
                'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split,
                _symbol$split2,
                base,
                quote,
                _this54 = this;

            return Promise.resolve().then(function () {
                return _this54.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split = symbol.split('/');
                    _symbol$split2 = _slicedToArray(_symbol$split, 2);
                    base = _symbol$split2[0];
                    quote = _symbol$split2[1];

                    base = _this54.commonCurrencyCode(base);
                    quote = _this54.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                account,
                _this55 = this,
                _arguments34 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments34.length > 0 && _arguments34[0] !== undefined ? _arguments34[0] : {};
                return _this55.loadMarkets();
            }).then(function () {
                return _this55.privateGetMembersMe();
            }).then(function (_resp) {
                response = _resp;
                balances = response['accounts'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': parseFloat(balance['locked']),
                        'total': 0.0
                    };

                    account['total'] = _this55.sum(account['free'], account['used']);
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                result,
                _this56 = this,
                _arguments35 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments35.length > 1 && _arguments35[1] !== undefined ? _arguments35[1] : {};
                return _this56.loadMarkets();
            }).then(function () {
                market = _this56.market(symbol);
                return _this56.publicGetDepth(_this56.extend({
                    'market': market['id'],
                    'limit': 300
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = _this56.parseOrderBook(orderbook, timestamp);

                result['bids'] = _this56.sortBy(result['bids'], 0, true);
                result['asks'] = _this56.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['at'] * 1000;
            ticker = ticker['ticker'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['vol']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                _symbol,
                ticker,
                _this57 = this;

            return Promise.resolve().then(function () {
                return _this57.loadMarkets();
            }).then(function () {
                return _this57.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = id;

                    if (id in _this57.markets_by_id) {
                        market = _this57.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        base = base.toUpperCase();
                        quote = quote.toUpperCase();
                        base = _this57.commonCurrencyCode(base);
                        quote = _this57.commonCurrencyCode(quote);
                        _symbol = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this57.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this58 = this;

            return Promise.resolve().then(function () {
                return _this58.loadMarkets();
            }).then(function () {
                market = _this58.market(symbol);
                return _this58.publicGetTickersMarket({
                    'market': market['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this58.parseTicker(response, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this59 = this,
                _arguments38 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments38.length > 1 && _arguments38[1] !== undefined ? _arguments38[1] : {};
                return _this59.loadMarkets();
            }).then(function () {
                market = _this59.market(symbol);
                return _this59.publicGetTrades(_this59.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                // looks like they switched this endpoint off
                // it returns 503 Service Temporarily Unavailable always
                // return this.parseTrades (reponse, market);

                return response;
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[5]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this60 = this,
                _arguments39 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments39.length > 1 && _arguments39[1] !== undefined ? _arguments39[1] : '1m';
                since = _arguments39.length > 2 && _arguments39[2] !== undefined ? _arguments39[2] : undefined;
                limit = _arguments39.length > 3 && _arguments39[3] !== undefined ? _arguments39[3] : undefined;
                params = _arguments39.length > 4 && _arguments39[4] !== undefined ? _arguments39[4] : {};
                return _this60.loadMarkets();
            }).then(function () {
                market = _this60.market(symbol);

                if (!limit) {
                    limit = 500;
                } // default is 30
                request = {
                    'market': market['id'],
                    'period': _this60.timeframes[timeframe],
                    'limit': limit
                };

                if (since) {
                    request['timestamp'] = since;
                }return _this60.publicGetK(_this60.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this60.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this61 = this,
                _arguments40 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments40.length > 4 && _arguments40[4] !== undefined ? _arguments40[4] : undefined;
                params = _arguments40.length > 5 && _arguments40[5] !== undefined ? _arguments40[5] : {};
                return _this61.loadMarkets();
            }).then(function () {
                order = {
                    'market': _this61.marketId(symbol),
                    'side': side,
                    'volume': amount.toString(),
                    'ord_type': type
                };

                if (type == 'limit') {
                    order['price'] = price.toString();
                }
                return _this61.privatePostOrders(_this61.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this62 = this;

            return Promise.resolve().then(function () {
                return _this62.loadMarkets();
            }).then(function () {
                return _this62.privatePostOrderDelete({ 'id': id });
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                result,
                _this63 = this,
                _arguments42 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments42.length > 3 && _arguments42[3] !== undefined ? _arguments42[3] : {};
                return _this63.loadMarkets();
            }).then(function () {
                return _this63.privatePostWithdraw(_this63.extend({
                    'currency': currency.toLowerCase(),
                    'sum': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': undefined
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                _query,
                auth,
                signature,
                suffix,
                response,
                _this64 = this,
                _arguments43 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments43.length > 1 && _arguments43[1] !== undefined ? _arguments43[1] : 'public';
                method = _arguments43.length > 2 && _arguments43[2] !== undefined ? _arguments43[2] : 'GET';
                params = _arguments43.length > 3 && _arguments43[3] !== undefined ? _arguments43[3] : {};
                headers = _arguments43.length > 4 && _arguments43[4] !== undefined ? _arguments43[4] : undefined;
                body = _arguments43.length > 5 && _arguments43[5] !== undefined ? _arguments43[5] : undefined;
                request = '/api' + '/' + _this64.version + '/' + _this64.implodeParams(path, params) + '.json';
                query = _this64.omit(params, _this64.extractParams(path));
                url = _this64.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this64.urlencode(query);
                    }
                } else {
                    nonce = _this64.nonce().toString();
                    _query = _this64.urlencode(_this64.keysort(_this64.extend({
                        'access_key': _this64.apiKey,
                        'tonce': nonce
                    }, params)));
                    auth = method + '|' + request + '|' + _query;
                    signature = _this64.hmac(_this64.encode(auth), _this64.encode(_this64.secret));
                    suffix = _query + '&signature=' + signature;

                    if (method == 'GET') {
                        url += '?' + suffix;
                    } else {
                        body = suffix;
                        headers = {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'Content-Length': body.length
                        };
                    }
                }
                return _this64.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this64.id + ' ' + _this64.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var anxpro = {

        'id': 'anxpro',
        'name': 'ANXPro',
        'countries': ['JP', 'SG', 'HK', 'NZ'],
        'version': '2',
        'rateLimit': 1500,
        'hasWithdraw': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',
            'api': 'https://anxpro.com/api',
            'www': 'https://anxpro.com',
            'doc': ['http://docs.anxv2.apiary.io', 'https://anxpro.com/pages/api']
        },
        'api': {
            'public': {
                'get': ['{currency_pair}/money/ticker', '{currency_pair}/money/depth/full', '{currency_pair}/money/trade/fetch']
            },
            'private': {
                'post': ['{currency_pair}/money/order/add', '{currency_pair}/money/order/cancel', '{currency_pair}/money/order/quote', '{currency_pair}/money/order/result', '{currency_pair}/money/orders', 'money/{currency}/address', 'money/{currency}/send_simple', 'money/info', 'money/trade/list', 'money/wallet/history']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                currencies,
                result,
                c,
                currency,
                account,
                wallet,
                _this65 = this,
                _arguments44 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments44.length > 0 && _arguments44[0] !== undefined ? _arguments44[0] : {};
                return _this65.privatePostMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['data'];
                currencies = Object.keys(balance['Wallets']);
                result = { 'info': balance };

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = _this65.account();

                    if (currency in balance['Wallets']) {
                        wallet = balance['Wallets'][currency];

                        account['free'] = parseFloat(wallet['Available_Balance']['value']);
                        account['total'] = parseFloat(wallet['Balance']['value']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                t,
                timestamp,
                _this66 = this,
                _arguments45 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments45.length > 1 && _arguments45[1] !== undefined ? _arguments45[1] : {};
                return _this66.publicGetCurrencyPairMoneyDepthFull(_this66.extend({
                    'currency_pair': _this66.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                t = parseInt(orderbook['dataUpdateTime']);
                timestamp = parseInt(t / 1000);

                return _this66.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                t,
                timestamp,
                bid,
                ask,
                _this67 = this;

            return Promise.resolve().then(function () {
                return _this67.publicGetCurrencyPairMoneyTicker({
                    'currency_pair': _this67.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                t = parseInt(ticker['dataUpdateTime']);
                timestamp = parseInt(t / 1000);
                bid = _this67.safeFloat(ticker['buy'], 'value');
                ask = _this67.safeFloat(ticker['sell'], 'value');
                ;
                return {
                    'timestamp': timestamp,
                    'datetime': _this67.iso8601(timestamp),
                    'high': parseFloat(ticker['high']['value']),
                    'low': parseFloat(ticker['low']['value']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': parseFloat(ticker['vwap']['value']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']['value']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']['value']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']['value'])
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                error,
                _this68 = this,
                _arguments47 = arguments;

            params = _arguments47.length > 1 && _arguments47[1] !== undefined ? _arguments47[1] : {};
            error = _this68.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled';

            throw new ExchangeError(error);
            return _this68.publicGetCurrencyPairMoneyTradeFetch(_this68.extend({
                'currency_pair': _this68.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this69 = this,
                _arguments48 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments48.length > 4 && _arguments48[4] !== undefined ? _arguments48[4] : undefined;
                params = _arguments48.length > 5 && _arguments48[5] !== undefined ? _arguments48[5] : {};
                order = {
                    'currency_pair': _this69.marketId(market),
                    'amount_int': parseInt(amount * 100000000), // 10^8
                    'type': side
                };

                if (type == 'limit') {
                    order['price_int'] = parseInt(price * 100000);
                } // 10^5
                return _this69.privatePostCurrencyPairOrderAdd(_this69.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['data']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this70 = this;

            return _this70.privatePostCurrencyPairOrderCancel({ 'oid': id });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this71 = this,
                _arguments50 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments50.length > 3 && _arguments50[3] !== undefined ? _arguments50[3] : {};
                return _this71.loadMarkets();
            }).then(function () {
                return _this71.privatePostMoneyCurrencySendSimple(_this71.extend({
                    'currency': currency,
                    'amount_int': parseInt(amount * 100000000), // 10^8
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                secret,
                auth,
                response,
                _test3,
                _this72 = this,
                _arguments51 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments51.length > 1 && _arguments51[1] !== undefined ? _arguments51[1] : 'public';
                method = _arguments51.length > 2 && _arguments51[2] !== undefined ? _arguments51[2] : 'GET';
                params = _arguments51.length > 3 && _arguments51[3] !== undefined ? _arguments51[3] : {};
                headers = _arguments51.length > 4 && _arguments51[4] !== undefined ? _arguments51[4] : undefined;
                body = _arguments51.length > 5 && _arguments51[5] !== undefined ? _arguments51[5] : undefined;
                request = _this72.implodeParams(path, params);
                query = _this72.omit(params, _this72.extractParams(path));
                url = _this72.urls['api'] + '/' + _this72.version + '/' + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this72.urlencode(query);
                    }
                } else {
                    nonce = _this72.nonce();

                    body = _this72.urlencode(_this72.extend({ 'nonce': nonce }, query));
                    secret = _this72.base64ToBinary(_this72.secret);
                    auth = request + "\0" + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Rest-Key': _this72.apiKey,
                        'Rest-Sign': _this72.hmac(_this72.encode(auth), secret, 'sha512', 'base64')
                    };
                }
                return _this72.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test3 = 'result' in response;

                if (_test3 && response['result'] == 'success') {
                    return response;
                } else {
                    throw new ExchangeError(_this72.id + ' ' + _this72.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var binance = {

        'id': 'binance',
        'name': 'Binance',
        'countries': 'CN', // China
        'rateLimit': 1000,
        'version': 'v1',
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '3m': '3m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '2h': '2h',
            '4h': '4h',
            '6h': '6h',
            '8h': '8h',
            '12h': '12h',
            '1d': '1d',
            '3d': '3d',
            '1w': '1w',
            '1M': '1M'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
            'api': 'https://www.binance.com/api',
            'www': 'https://www.binance.com',
            'doc': 'https://www.binance.com/restapipub.html'
        },
        'api': {
            'public': {
                'get': ['ping', 'time', 'depth', 'aggTrades', 'klines', 'ticker/24hr']
            },
            'private': {
                'get': ['order', 'openOrders', 'allOrders', 'account', 'myTrades'],
                'post': ['order', 'order/test', 'userDataStream'],
                'put': ['userDataStream'],
                'delete': ['order', 'userDataStream']
            }
        },
        'markets': {
            'BNB/BTC': { 'id': 'BNBBTC', 'symbol': 'BNB/BTC', 'base': 'BNB', 'quote': 'BTC' },
            'NEO/BTC': { 'id': 'NEOBTC', 'symbol': 'NEO/BTC', 'base': 'NEO', 'quote': 'BTC' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'HSR/BTC': { 'id': 'HSRBTC', 'symbol': 'HSR/BTC', 'base': 'HSR', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'GAS/BTC': { 'id': 'GASBTC', 'symbol': 'GAS/BTC', 'base': 'GAS', 'quote': 'BTC' },
            'HCC/BTC': { 'id': 'HCCBTC', 'symbol': 'HCC/BTC', 'base': 'HCC', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'BCCBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
            'BNB/ETH': { 'id': 'BNBETH', 'symbol': 'BNB/ETH', 'base': 'BNB', 'quote': 'ETH' },
            'DNT/ETH': { 'id': 'DNTETH', 'symbol': 'DNT/ETH', 'base': 'DNT', 'quote': 'ETH' },
            'OAX/ETH': { 'id': 'OAXETH', 'symbol': 'OAX/ETH', 'base': 'OAX', 'quote': 'ETH' },
            'MCO/ETH': { 'id': 'MCOETH', 'symbol': 'MCO/ETH', 'base': 'MCO', 'quote': 'ETH' },
            'BTM/ETH': { 'id': 'BTMETH', 'symbol': 'BTM/ETH', 'base': 'BTM', 'quote': 'ETH' },
            'SNT/ETH': { 'id': 'SNTETH', 'symbol': 'SNT/ETH', 'base': 'SNT', 'quote': 'ETH' },
            'EOS/ETH': { 'id': 'EOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },
            'BNT/ETH': { 'id': 'BNTETH', 'symbol': 'BNT/ETH', 'base': 'BNT', 'quote': 'ETH' },
            'ICN/ETH': { 'id': 'ICNETH', 'symbol': 'ICN/ETH', 'base': 'ICN', 'quote': 'ETH' },
            'BTC/USDT': { 'id': 'BTCUSDT', 'symbol': 'BTC/USDT', 'base': 'BTC', 'quote': 'USDT' },
            'ETH/USDT': { 'id': 'ETHUSDT', 'symbol': 'ETH/USDT', 'base': 'ETH', 'quote': 'USDT' },
            'QTUM/ETH': { 'id': 'QTUMETH', 'symbol': 'QTUM/ETH', 'base': 'QTUM', 'quote': 'ETH' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                balances,
                i,
                balance,
                asset,
                currency,
                account,
                _this73 = this,
                _arguments52 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments52.length > 0 && _arguments52[0] !== undefined ? _arguments52[0] : {};
                return _this73.privateGetAccount();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                balances = response['balances'];

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    asset = balance['asset'];
                    currency = _this73.commonCurrencyCode(asset);
                    account = {
                        'free': parseFloat(balance['free']),
                        'used': parseFloat(balance['locked']),
                        'total': 0.0
                    };

                    account['total'] = _this73.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this74 = this,
                _arguments53 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments53.length > 1 && _arguments53[1] !== undefined ? _arguments53[1] : {};
                market = _this74.market(symbol);
                return _this74.publicGetDepth(_this74.extend({
                    'symbol': market['id'],
                    'limit': 100 // default = maximum = 100
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this74.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['closeTime'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['highPrice']),
                'low': parseFloat(ticker['lowPrice']),
                'bid': parseFloat(ticker['bidPrice']),
                'ask': parseFloat(ticker['askPrice']),
                'vwap': parseFloat(ticker['weightedAvgPrice']),
                'open': parseFloat(ticker['openPrice']),
                'close': parseFloat(ticker['prevClosePrice']),
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': parseFloat(ticker['priceChangePercent']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this75 = this;

            return Promise.resolve().then(function () {
                market = _this75.market(symbol);
                return _this75.publicGetTicker24hr({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this75.parseTicker(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0], parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[5])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this76 = this,
                _arguments55 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments55.length > 1 && _arguments55[1] !== undefined ? _arguments55[1] : '1m';
                since = _arguments55.length > 2 && _arguments55[2] !== undefined ? _arguments55[2] : undefined;
                limit = _arguments55.length > 3 && _arguments55[3] !== undefined ? _arguments55[3] : undefined;
                params = _arguments55.length > 4 && _arguments55[4] !== undefined ? _arguments55[4] : {};
                market = _this76.market(symbol);
                request = {
                    'symbol': market['id'],
                    'interval': _this76.timeframes[timeframe]
                };

                request['limit'] = limit ? limit : 500; // default == max == 500
                if (since) {
                    request['startTime'] = since;
                }return _this76.publicGetKlines(_this76.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this76.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestampField = 'T' in trade ? 'T' : 'time';
            var timestamp = trade[timestampField];
            var priceField = 'p' in trade ? 'p' : 'price';
            var price = parseFloat(trade[priceField]);
            var amountField = 'q' in trade ? 'q' : 'qty';
            var amount = parseFloat(trade[amountField]);
            var idField = 'a' in trade ? 'a' : 'id';
            var id = trade[idField].toString();
            var side = undefined;
            if ('m' in trade) {
                side = 'sell';
                if (trade['m']) side = 'buy';
            } else {
                var isBuyer = trade['isBuyer'];
                var isMaker = trade['isMaker'];
                if (isBuyer) {
                    side = isMaker ? 'sell' : 'buy';
                } else {
                    side = isMaker ? 'buy' : 'sell';
                }
            }
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': id,
                'type': undefined,
                'side': side,
                'price': price,
                'amount': amount
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this77 = this,
                _arguments56 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments56.length > 1 && _arguments56[1] !== undefined ? _arguments56[1] : {};
                market = _this77.market(symbol);
                return _this77.publicGetAggTrades(_this77.extend({
                    'symbol': market['id'],
                    // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
                    // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
                    // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
                    'limit': 500 // default = maximum = 500
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this77.parseTrades(response, market);
            });
        },
        parseOrderStatus: function parseOrderStatus(status) {
            if (status == 'NEW') return 'open';
            if (status == 'PARTIALLY_FILLED') return 'open';
            if (status == 'FILLED') return 'closed';
            if (status == 'CANCELED') return 'canceled';
            return status.toLowerCase();
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var status = this.parseOrderStatus(order['status']);
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var id = order['symbol'];
                if (id in this.markets_by_id) {
                    market = this.markets_by_id[id];
                    symbol = market['symbol'];
                }
            }
            var timestamp = order['time'];
            var amount = parseFloat(order['origQty']);
            var filled = this.safeFloat(order, 'executedQty', 0.0);
            var remaining = Math.max(amount - filled, 0.0);
            var result = {
                'info': order,
                'id': order['orderId'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': order['type'].toLowerCase(),
                'side': order['side'].toLowerCase(),
                'price': parseFloat(order['price']),
                'amount': amount,
                'filled': filled,
                'remaining': remaining,
                'status': status
            };
            return result;
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this78 = this,
                _arguments57 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments57.length > 4 && _arguments57[4] !== undefined ? _arguments57[4] : undefined;
                params = _arguments57.length > 5 && _arguments57[5] !== undefined ? _arguments57[5] : {};

                price = parseFloat(price);
                order = {
                    'symbol': _this78.marketId(symbol),
                    'quantity': amount.toFixed(8),
                    'price': price.toFixed(8),
                    'type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'timeInForce': 'GTC' // Good To Cancel (default)
                    // 'timeInForce': 'IOC', // Immediate Or Cancel
                };
                return _this78.privatePostOrder(_this78.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderId'].toString()
                };
            });
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                symbol,
                market,
                query,
                response,
                _this79 = this,
                _arguments58 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments58.length > 1 && _arguments58[1] !== undefined ? _arguments58[1] : {};
                symbol = 'symbol' in params;

                if (!symbol) {
                    throw new ExchangeError(_this79.id + ' fetchOrder requires a symbol param');
                }symbol = params['symbol'];
                market = _this79.market(symbol);
                query = _this79.omit(params, 'symbol');
                return _this79.privateGetOrder(_this79.extend({
                    'symbol': market['id'],
                    'orderId': id.toString()
                }, query));
            }).then(function (_resp) {
                response = _resp;

                return _this79.parseOrder(response, market);
            });
        },
        fetchOrders: function fetchOrders() {
            var params,
                symbol,
                market,
                query,
                response,
                _this80 = this,
                _arguments59 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments59.length > 0 && _arguments59[0] !== undefined ? _arguments59[0] : {};

                if ('symbol' in params) {
                    return Promise.resolve().then(function () {
                        symbol = params['symbol'];
                        market = _this80.market(symbol);
                        query = _this80.omit(params, 'symbol');
                        return _this80.privateGetAllOrders(_this80.extend({
                            'symbol': market['id']
                        }, query));
                    }).then(function (_resp) {
                        response = _resp;

                        return _this80.parseOrders(response, market);
                    });
                } else {
                    throw new ExchangeError(_this80.id + ' fetchOrders requires a symbol param');
                }
            }).then(function () {});
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                response,
                _this83 = this,
                _arguments62 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments62.length > 0 && _arguments62[0] !== undefined ? _arguments62[0] : undefined;
                params = _arguments62.length > 1 && _arguments62[1] !== undefined ? _arguments62[1] : {};

                if (!symbol) {
                    throw new ExchangeError(_this83.id + ' fetchOpenOrders requires a symbol param');
                }market = _this83.market(symbol);
                return _this83.privateGetOpenOrders(_this83.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this83.parseOrders(response, market);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this84 = this,
                _arguments63 = arguments;

            params = _arguments63.length > 1 && _arguments63[1] !== undefined ? _arguments63[1] : {};

            return _this84.privatePostOrderCancel(_this84.extend({
                'orderId': parseInt(id)
                // 'origClientOrderId': id,
            }, params));
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                auth,
                signature,
                response,
                _this85 = this,
                _arguments64 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments64.length > 1 && _arguments64[1] !== undefined ? _arguments64[1] : 'public';
                method = _arguments64.length > 2 && _arguments64[2] !== undefined ? _arguments64[2] : 'GET';
                params = _arguments64.length > 3 && _arguments64[3] !== undefined ? _arguments64[3] : {};
                headers = _arguments64.length > 4 && _arguments64[4] !== undefined ? _arguments64[4] : undefined;
                body = _arguments64.length > 5 && _arguments64[5] !== undefined ? _arguments64[5] : undefined;
                url = _this85.urls['api'] + '/' + _this85.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this85.urlencode(params);
                    }
                } else {
                    nonce = _this85.nonce();
                    query = _this85.urlencode(_this85.extend({ 'timestamp': nonce }, params));
                    auth = _this85.secret + '|' + query;
                    signature = _this85.hash(_this85.encode(auth), 'sha256');

                    query += '&' + 'signature=' + signature;
                    headers = {
                        'X-MBX-APIKEY': _this85.apiKey
                    };
                    if (method == 'GET') {
                        url += '?' + query;
                    } else {
                        body = query;
                        headers['Content-Type'] = 'application/x-www-form-urlencoded';
                    }
                }
                return _this85.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    if (response['code'] < 0) {
                        throw new ExchangeError(_this85.id + ' ' + _this85.json(response));
                    }
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bit2c = {

        'id': 'bit2c',
        'name': 'Bit2C',
        'countries': 'IL', // Israel
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
            'api': 'https://www.bit2c.co.il',
            'www': 'https://www.bit2c.co.il',
            'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']
        },
        'api': {
            'public': {
                'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades']
            },
            'private': {
                'post': ['Account/Balance', 'Account/Balance/v2', 'Merchant/CreateCheckout', 'Order/AccountHistory', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/MyOrders', 'Payment/GetMyId', 'Payment/Send']
            }
        },
        'markets': {
            'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },
            'LTC/BTC': { 'id': 'LtcBtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                account,
                available,
                _this86 = this,
                _arguments65 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments65.length > 0 && _arguments65[0] !== undefined ? _arguments65[0] : {};
                return _this86.privatePostAccountBalanceV2();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this86.currencies.length; c++) {
                    currency = _this86.currencies[c];
                    account = _this86.account();

                    if (currency in balance) {
                        available = 'AVAILABLE_' + currency;

                        account['free'] = balance[available];
                        account['total'] = balance[currency];
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this87 = this,
                _arguments66 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments66.length > 1 && _arguments66[1] !== undefined ? _arguments66[1] : {};
                return _this87.publicGetExchangesPairOrderbook(_this87.extend({
                    'pair': _this87.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this87.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this88 = this;

            return Promise.resolve().then(function () {
                return _this88.publicGetExchangesPairTicker({
                    'pair': _this88.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this88.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this88.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ll']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['av']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['a'])
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = parseInt(trade['date']) * 1000;
            var symbol = undefined;
            if (market) symbol = market['symbol'];
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this89 = this,
                _arguments68 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments68.length > 1 && _arguments68[1] !== undefined ? _arguments68[1] : {};
                market = _this89.market(symbol);
                return _this89.publicGetExchangesPairTrades(_this89.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this89.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                result,
                _this90 = this,
                _arguments69 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments69.length > 4 && _arguments69[4] !== undefined ? _arguments69[4] : undefined;
                params = _arguments69.length > 5 && _arguments69[5] !== undefined ? _arguments69[5] : {};
                method = 'privatePostOrderAddOrder';
                order = {
                    'Amount': amount,
                    'Pair': _this90.marketId(symbol)
                };

                if (type == 'market') {
                    method += 'MarketPrice' + _this90.capitalize(side);
                } else {
                    order['Price'] = price;
                    order['Total'] = amount * price;
                    order['IsBid'] = side == 'buy';
                }
                return _this90[method](_this90.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['NewOrder']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this91 = this;

            return _this91.privatePostOrderCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            if (api == 'public') {
                url += '.json';
            } else {
                var nonce = this.nonce();
                var query = this.extend({ 'nonce': nonce }, params);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbay = {

        'id': 'bitbay',
        'name': 'BitBay',
        'countries': ['PL', 'EU'], // Poland
        'rateLimit': 1000,
        'hasWithdraw': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
            'www': 'https://bitbay.net',
            'api': {
                'public': 'https://bitbay.net/API/Public',
                'private': 'https://bitbay.net/API/Trading/tradingApi.php'
            },
            'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API']
        },
        'api': {
            'public': {
                'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD' },
            'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR' },
            'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN' },
            'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                account,
                _this92 = this,
                _arguments71 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments71.length > 0 && _arguments71[0] !== undefined ? _arguments71[0] : {};
                return _this92.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances'];
                result = { 'info': balance };

                for (c = 0; c < _this92.currencies.length; c++) {
                    currency = _this92.currencies[c];
                    account = _this92.account();

                    if (currency in balance) {
                        account['free'] = parseFloat(balance[currency]['available']);
                        account['used'] = parseFloat(balance[currency]['locked']);
                        account['total'] = _this92.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this93 = this,
                _arguments72 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments72.length > 1 && _arguments72[1] !== undefined ? _arguments72[1] : {};
                return _this93.publicGetIdOrderbook(_this93.extend({
                    'id': _this93.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this93.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this94 = this;

            return Promise.resolve().then(function () {
                return _this94.publicGetIdTicker({
                    'id': _this94.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this94.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this94.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this95 = this,
                _arguments74 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments74.length > 1 && _arguments74[1] !== undefined ? _arguments74[1] : {};
                market = _this95.market(symbol);
                return _this95.publicGetIdTrades(_this95.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this95.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                _this96 = this,
                _arguments75 = arguments;

            price = _arguments75.length > 4 && _arguments75[4] !== undefined ? _arguments75[4] : undefined;
            params = _arguments75.length > 5 && _arguments75[5] !== undefined ? _arguments75[5] : {};
            market = _this96.market(symbol);

            return _this96.privatePostTrade(_this96.extend({
                'type': side,
                'currency': market['base'],
                'amount': amount,
                'payment_currency': market['quote'],
                'rate': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this97 = this;

            return _this97.privatePostCancel({ 'id': id });
        },
        isFiat: function isFiat(currency) {
            if (currency == 'USD') return true;
            if (currency == 'EUR') return true;
            if (currency == 'PLN') return true;
            return false;
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                method,
                request,
                response,
                _this98 = this,
                _arguments77 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments77.length > 3 && _arguments77[3] !== undefined ? _arguments77[3] : {};
                return _this98.loadMarkets();
            }).then(function () {
                method = undefined;
                request = {
                    'currency': currency,
                    'quantity': amount
                };

                if (_this98.isFiat(currency)) {
                    method = 'privatePostWithdraw';
                    // request['account'] = params['account']; // they demand an account number
                    // request['express'] = params['express']; // whatever it means, they don't explain
                    // request['bic'] = '';
                } else {
                    method = 'privatePostTransfer';
                    request['address'] = address;
                }
                return _this98[method](_this98.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': undefined
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path, params) + '.json';
            } else {
                body = this.urlencode(this.extend({
                    'method': path,
                    'moment': this.nonce()
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitcoincoid = {

        'id': 'bitcoincoid',
        'name': 'Bitcoin.co.id',
        'countries': 'ID', // Indonesia
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',
            'api': {
                'public': 'https://vip.bitcoin.co.id/api',
                'private': 'https://vip.bitcoin.co.id/tapi'
            },
            'www': 'https://www.bitcoin.co.id',
            'doc': ['https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf', 'https://vip.bitcoin.co.id/trade_api']
        },
        'api': {
            'public': {
                'get': ['{pair}/ticker', '{pair}/trades', '{pair}/depth']
            },
            'private': {
                'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'openOrders', 'cancelOrder']
            }
        },
        'markets': {
            'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },
            'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },
            'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },
            'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },
            'STR/BTC': { 'id': 'str_btc', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },
            'NEM/BTC': { 'id': 'nem_btc', 'symbol': 'NEM/BTC', 'base': 'NEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                lowercase,
                account,
                _this99 = this,
                _arguments78 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments78.length > 0 && _arguments78[0] !== undefined ? _arguments78[0] : {};
                return _this99.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['return'];
                result = { 'info': balance };

                for (c = 0; c < _this99.currencies.length; c++) {
                    currency = _this99.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this99.account();

                    account['free'] = _this99.safeFloat(balance['balance'], lowercase, 0.0);
                    account['used'] = _this99.safeFloat(balance['balance_hold'], lowercase, 0.0);
                    account['total'] = _this99.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this100 = this,
                _arguments79 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments79.length > 1 && _arguments79[1] !== undefined ? _arguments79[1] : {};
                return _this100.publicGetPairDepth(_this100.extend({
                    'pair': _this100.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this100.parseOrderBook(orderbook, undefined, 'buy', 'sell');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this101 = this;

            return Promise.resolve().then(function () {
                market = _this101.market(symbol);
                return _this101.publicGetPairTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseFloat(ticker['server_time']) * 1000;
                baseVolume = 'vol_' + market['baseId'].toLowerCase();
                quoteVolume = 'vol_' + market['quoteId'].toLowerCase();

                return {
                    'timestamp': timestamp,
                    'datetime': _this101.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker[baseVolume]),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this102 = this,
                _arguments81 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments81.length > 1 && _arguments81[1] !== undefined ? _arguments81[1] : {};
                market = _this102.market(symbol);
                return _this102.publicGetPairTrades(_this102.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this102.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                base,
                result,
                _this103 = this,
                _arguments82 = arguments;

            price = _arguments82.length > 4 && _arguments82[4] !== undefined ? _arguments82[4] : undefined;
            params = _arguments82.length > 5 && _arguments82[5] !== undefined ? _arguments82[5] : {};
            market = _this103.market(symbol);
            order = {
                'pair': market['id'],
                'type': side,
                'price': price
            };
            base = market['base'].toLowerCase();

            order[base] = amount;
            result = _this103.privatePostTrade(_this103.extend(order, params));

            return {
                'info': result,
                'id': result['return']['order_id'].toString()
            };
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this104 = this,
                _arguments83 = arguments;

            params = _arguments83.length > 1 && _arguments83[1] !== undefined ? _arguments83[1] : {};

            return _this104.privatePostCancelOrder(_this104.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                response,
                _this105 = this,
                _arguments84 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments84.length > 1 && _arguments84[1] !== undefined ? _arguments84[1] : 'public';
                method = _arguments84.length > 2 && _arguments84[2] !== undefined ? _arguments84[2] : 'GET';
                params = _arguments84.length > 3 && _arguments84[3] !== undefined ? _arguments84[3] : {};
                headers = _arguments84.length > 4 && _arguments84[4] !== undefined ? _arguments84[4] : undefined;
                body = _arguments84.length > 5 && _arguments84[5] !== undefined ? _arguments84[5] : undefined;
                url = _this105.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this105.implodeParams(path, params);
                } else {
                    body = _this105.urlencode(_this105.extend({
                        'method': path,
                        'nonce': _this105.nonce()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this105.apiKey,
                        'Sign': _this105.hmac(_this105.encode(body), _this105.encode(_this105.secret), 'sha512')
                    };
                }
                return _this105.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this105.id + ' ' + response['error']);
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex = {

        'id': 'bitfinex',
        'name': 'Bitfinex',
        'countries': 'US',
        'version': 'v1',
        'rateLimit': 1500,
        'hasFetchTickers': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v1/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['book/{symbol}',
                // 'candles/{symbol}',
                'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'today', 'trades/{symbol}']
            },
            'private': {
                'post': ['account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'mytrades_funding', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'offers/hist', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'orders/hist', 'position/claim', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                _this106 = this;

            return Promise.resolve().then(function () {
                return _this106.publicGetSymbolsDetails();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'].toUpperCase();
                    baseId = id.slice(0, 3);
                    quoteId = id.slice(3, 6);
                    base = baseId;
                    quote = quoteId;
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                i,
                balance,
                currency,
                uppercase,
                account,
                _this107 = this;

            return Promise.resolve().then(function () {
                return _this107.loadMarkets();
            }).then(function () {
                return _this107.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];

                    if (balance['type'] == 'exchange') {
                        currency = balance['currency'];
                        uppercase = currency.toUpperCase();
                        // issue #4 Bitfinex names dash as dsh

                        if (uppercase == 'DSH') {
                            uppercase = 'DASH';
                        }account = _this107.account();

                        account['free'] = parseFloat(balance['available']);
                        account['total'] = parseFloat(balance['amount']);
                        account['used'] = account['total'] - account['free'];
                        result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this108 = this,
                _arguments87 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments87.length > 1 && _arguments87[1] !== undefined ? _arguments87[1] : {};
                return _this108.loadMarkets();
            }).then(function () {
                return _this108.publicGetBookSymbol(_this108.extend({
                    'symbol': _this108.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this108.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this109 = this;

            return Promise.resolve().then(function () {
                return _this109.loadMarkets();
            }).then(function () {
                return _this109.publicGetPubtickerSymbol({
                    'symbol': _this109.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseFloat(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this109.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['mid']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestamp'] * 1000;
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this110 = this,
                _arguments89 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments89.length > 1 && _arguments89[1] !== undefined ? _arguments89[1] : {};
                return _this110.loadMarkets();
            }).then(function () {
                market = _this110.market(symbol);
                return _this110.publicGetTradesSymbol(_this110.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this110.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                result,
                _this111 = this,
                _arguments90 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments90.length > 4 && _arguments90[4] !== undefined ? _arguments90[4] : undefined;
                params = _arguments90.length > 5 && _arguments90[5] !== undefined ? _arguments90[5] : {};
                return _this111.loadMarkets();
            }).then(function () {
                orderType = type;

                if (type == 'limit' || type == 'market') {
                    orderType = 'exchange ' + type;
                }order = {
                    'symbol': _this111.marketId(symbol),
                    'amount': amount.toString(),
                    'side': side,
                    'type': orderType,
                    'ocoorder': false,
                    'buy_price_oco': 0,
                    'sell_price_oco': 0
                };

                if (type == 'market') {
                    order['price'] = _this111.nonce().toString();
                } else {
                    order['price'] = price.toString();
                }
                return _this111.privatePostOrderNew(_this111.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this112 = this;

            return Promise.resolve().then(function () {
                return _this112.loadMarkets();
            }).then(function () {
                return _this112.privatePostOrderCancel({ 'order_id': parseInt(id) });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = order['side'];
            var open = order['is_live'];
            var canceled = order['is_cancelled'];
            var status = undefined;
            if (open) {
                status = 'open';
            } else if (canceled) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var _exchange = order['symbol'].toUpperCase();
                if (_exchange in this.markets_by_id) {
                    market = this.markets_by_id[_exchange];
                    symbol = market['symbol'];
                }
            }
            var orderType = order['type'];
            var exchange = orderType.indexOf('exchange ') >= 0;
            if (exchange) {
                var _order$type$split = order['type'].split(' '),
                    _order$type$split2 = _slicedToArray(_order$type$split, 2),
                    prefix = _order$type$split2[0],
                    _orderType = _order$type$split2[1];
            }
            var timestamp = parseInt(parseFloat(order['timestamp']) * 1000);
            var result = {
                'info': order,
                'id': order['id'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': orderType,
                'side': side,
                'price': parseFloat(order['price']),
                'amount': parseFloat(order['original_amount']),
                'remaining': parseFloat(order['remaining_amount']),
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                response,
                _this113 = this,
                _arguments92 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments92.length > 1 && _arguments92[1] !== undefined ? _arguments92[1] : {};
                return _this113.loadMarkets();
            }).then(function () {
                return _this113.privatePostOrderStatus(_this113.extend({
                    'order_id': parseInt(id)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this113.parseOrder(response);
            });
        },
        getCurrencyName: function getCurrencyName(currency) {
            if (currency == 'BTC') {
                return 'bitcoin';
            } else if (currency == 'LTC') {
                return 'litecoin';
            } else if (currency == 'ETH') {
                return 'ethereum';
            } else if (currency == 'ETC') {
                return 'ethereumc';
            } else if (currency == 'OMNI') {
                return 'mastercoin'; // ???
            } else if (currency == 'ZEC') {
                return 'zcash';
            } else if (currency == 'XMR') {
                return 'monero';
            } else if (currency == 'USD') {
                return 'wire';
            } else if (currency == 'DASH') {
                return 'dash';
            } else if (currency == 'XRP') {
                return 'ripple';
            } else if (currency == 'EOS') {
                return 'eos';
            }
            throw new NotSupported(this.id + ' ' + currency + ' not supported for withdrawal');
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                name,
                response,
                _this114 = this,
                _arguments93 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments93.length > 3 && _arguments93[3] !== undefined ? _arguments93[3] : {};
                return _this114.loadMarkets();
            }).then(function () {
                name = _this114.getCurrencyName(currency);
                return _this114.privatePostWithdraw(_this114.extend({
                    'withdraw_type': name,
                    'walletselected': 'exchange',
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['withdrawal_id']
                };
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                payload,
                secret,
                signature,
                response,
                _this115 = this,
                _arguments94 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments94.length > 1 && _arguments94[1] !== undefined ? _arguments94[1] : 'public';
                method = _arguments94.length > 2 && _arguments94[2] !== undefined ? _arguments94[2] : 'GET';
                params = _arguments94.length > 3 && _arguments94[3] !== undefined ? _arguments94[3] : {};
                headers = _arguments94.length > 4 && _arguments94[4] !== undefined ? _arguments94[4] : undefined;
                body = _arguments94.length > 5 && _arguments94[5] !== undefined ? _arguments94[5] : undefined;
                request = '/' + _this115.version + '/' + _this115.implodeParams(path, params);
                query = _this115.omit(params, _this115.extractParams(path));
                url = _this115.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this115.urlencode(query);
                    }
                } else {
                    nonce = _this115.nonce();

                    query = _this115.extend({
                        'nonce': nonce.toString(),
                        'request': request
                    }, query);
                    query = _this115.json(query);
                    query = _this115.encode(query);
                    payload = _this115.stringToBase64(query);
                    secret = _this115.encode(_this115.secret);
                    signature = _this115.hmac(payload, secret, 'sha384');

                    headers = {
                        'X-BFX-APIKEY': _this115.apiKey,
                        'X-BFX-PAYLOAD': _this115.decode(payload),
                        'X-BFX-SIGNATURE': signature
                    };
                }
                return _this115.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    if (response['message'].indexOf('not enough exchange balance') >= 0) {
                        throw new InsufficientFunds(_this115.id + ' ' + _this115.json(response));
                    }throw new ExchangeError(_this115.id + ' ' + _this115.json(response));
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex2 = extend(bitfinex, {

        'id': 'bitfinex2',
        'name': 'Bitfinex v2',
        'countries': 'US',
        'version': 'v2',
        'hasFetchTickers': false, // true but at least one pair is required
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '3h': '3h',
            '6h': '6h',
            '12h': '12h',
            '1d': '1D',
            '1w': '7D',
            '2w': '14D',
            '1M': '1M'
        },
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v2/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['platform/status', 'tickers', // replies with an empty list :\
                'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'symbols_details', 'stats1/{key}:{size}:{symbol}/{side}/{section}', 'stats1/{key}:{size}:{symbol}/long/last', 'stats1/{key}:{size}:{symbol}/long/hist', 'stats1/{key}:{size}:{symbol}/short/last', 'stats1/{key}:{size}:{symbol}/short/hist', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist'],
                'post': ['calc/trade/avg']
            },
            'private': {
                'post': ['auth/r/wallets', 'auth/r/orders/{symbol}', 'auth/r/orders/{symbol}/new', 'auth/r/orders/{symbol}/hist', 'auth/r/order/{symbol}:{id}/trades', 'auth/r/trades/{symbol}/hist', 'auth/r/funding/offers/{symbol}', 'auth/r/funding/offers/{symbol}/hist', 'auth/r/funding/loans/{symbol}', 'auth/r/funding/loans/{symbol}/hist', 'auth/r/funding/credits/{symbol}', 'auth/r/funding/credits/{symbol}/hist', 'auth/r/funding/trades/{symbol}/hist', 'auth/r/info/margin/{key}', 'auth/r/info/funding/{key}', 'auth/r/movements/{currency}/hist', 'auth/r/stats/perf:{timeframe}/hist', 'auth/r/alerts', 'auth/w/alert/set', 'auth/w/alert/{type}:{symbol}:{price}/del', 'auth/calc/order/avail']
            }
        },
        'markets': {
            'BCC/BTC': { 'id': 'tBCCBTC', 'symbol': 'BCC/BTC', 'base': 'BCC', 'quote': 'BTC' },
            'BCC/USD': { 'id': 'tBCCUSD', 'symbol': 'BCC/USD', 'base': 'BCC', 'quote': 'USD' },
            'BCH/BTC': { 'id': 'tBCHBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
            'BCH/ETH': { 'id': 'tBCHETH', 'symbol': 'BCH/ETH', 'base': 'BCH', 'quote': 'ETH' },
            'BCH/USD': { 'id': 'tBCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD' },
            'BCU/BTC': { 'id': 'tBCUBTC', 'symbol': 'BCU/BTC', 'base': 'BCU', 'quote': 'BTC' },
            'BCU/USD': { 'id': 'tBCUUSD', 'symbol': 'BCU/USD', 'base': 'BCU', 'quote': 'USD' },
            'BTC/USD': { 'id': 'tBTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'DASH/BTC': { 'id': 'tDSHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },
            'DASH/USD': { 'id': 'tDSHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD' },
            'EOS/BTC': { 'id': 'tEOSBTC', 'symbol': 'EOS/BTC', 'base': 'EOS', 'quote': 'BTC' },
            'EOS/ETH': { 'id': 'tEOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },
            'EOS/USD': { 'id': 'tEOSUSD', 'symbol': 'EOS/USD', 'base': 'EOS', 'quote': 'USD' },
            'ETC/BTC': { 'id': 'tETCBTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'ETC/USD': { 'id': 'tETCUSD', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'tETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'tETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'IOT/BTC': { 'id': 'tIOTBTC', 'symbol': 'IOT/BTC', 'base': 'IOT', 'quote': 'BTC' },
            'IOT/ETH': { 'id': 'tIOTETH', 'symbol': 'IOT/ETH', 'base': 'IOT', 'quote': 'ETH' },
            'IOT/USD': { 'id': 'tIOTUSD', 'symbol': 'IOT/USD', 'base': 'IOT', 'quote': 'USD' },
            'LTC/BTC': { 'id': 'tLTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'tLTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'OMG/BTC': { 'id': 'tOMGBTC', 'symbol': 'OMG/BTC', 'base': 'OMG', 'quote': 'BTC' },
            'OMG/ETH': { 'id': 'tOMGETH', 'symbol': 'OMG/ETH', 'base': 'OMG', 'quote': 'ETH' },
            'OMG/USD': { 'id': 'tOMGUSD', 'symbol': 'OMG/USD', 'base': 'OMG', 'quote': 'USD' },
            'RRT/BTC': { 'id': 'tRRTBTC', 'symbol': 'RRT/BTC', 'base': 'RRT', 'quote': 'BTC' },
            'RRT/USD': { 'id': 'tRRTUSD', 'symbol': 'RRT/USD', 'base': 'RRT', 'quote': 'USD' },
            'SAN/BTC': { 'id': 'tSANBTC', 'symbol': 'SAN/BTC', 'base': 'SAN', 'quote': 'BTC' },
            'SAN/ETH': { 'id': 'tSANETH', 'symbol': 'SAN/ETH', 'base': 'SAN', 'quote': 'ETH' },
            'SAN/USD': { 'id': 'tSANUSD', 'symbol': 'SAN/USD', 'base': 'SAN', 'quote': 'USD' },
            'XMR/BTC': { 'id': 'tXMRBTC', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'XMR/USD': { 'id': 'tXMRUSD', 'symbol': 'XMR/USD', 'base': 'XMR', 'quote': 'USD' },
            'XRP/BTC': { 'id': 'tXRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'XRP/USD': { 'id': 'tXRPUSD', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'ZEC/BTC': { 'id': 'tZECBTC', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'ZEC/USD': { 'id': 'tZECUSD', 'symbol': 'ZEC/USD', 'base': 'ZEC', 'quote': 'USD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                b,
                balance,
                _balance,
                type,
                currency,
                total,
                interest,
                available,
                uppercase,
                account,
                _this116 = this,
                _arguments95 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments95.length > 0 && _arguments95[0] !== undefined ? _arguments95[0] : {};
                return _this116.privatePostAuthRWallets();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    _balance = _slicedToArray(balance, 5);
                    type = _balance[0];
                    currency = _balance[1];
                    total = _balance[2];
                    interest = _balance[3];
                    available = _balance[4];

                    if (currency[0] == 't') {
                        currency = currency.slice(1);
                    }uppercase = currency.toUpperCase();
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = _this116.account();

                    account['free'] = available;
                    account['total'] = total;
                    if (account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                result,
                i,
                order,
                _order,
                _timestamp,
                price,
                amount,
                side,
                _this117 = this,
                _arguments96 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments96.length > 1 && _arguments96[1] !== undefined ? _arguments96[1] : {};
                return _this117.publicGetBookSymbolPrecision(_this117.extend({
                    'symbol': _this117.marketId(symbol),
                    'precision': 'R0'
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this117.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this117.iso8601(timestamp)
                };

                for (i = 0; i < orderbook.length; i++) {
                    order = orderbook[i];
                    _order = _slicedToArray(order, 3);
                    _timestamp = _order[0];
                    price = _order[1];
                    amount = _order[2];
                    side = amount > 0 ? 'bids' : 'asks';

                    amount = Math.abs(amount);
                    result[side].push([price, amount, _timestamp]);
                }
                result['bids'] = _this117.sortBy(result['bids'], 0, true);
                result['asks'] = _this117.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _ticker,
                bid,
                bidSize,
                ask,
                askSize,
                change,
                percentage,
                last,
                volume,
                high,
                low,
                _this118 = this;

            return Promise.resolve().then(function () {
                return _this118.publicGetTickerSymbol({
                    'symbol': _this118.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this118.milliseconds();
                _ticker = _slicedToArray(ticker, 10);
                bid = _ticker[0];
                bidSize = _ticker[1];
                ask = _ticker[2];
                askSize = _ticker[3];
                change = _ticker[4];
                percentage = _ticker[5];
                last = _ticker[6];
                volume = _ticker[7];
                high = _ticker[8];
                low = _ticker[9];

                return {
                    'timestamp': timestamp,
                    'datetime': _this118.iso8601(timestamp),
                    'high': high,
                    'low': low,
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': change,
                    'percentage': percentage,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var _trade = _slicedToArray(trade, 4),
                id = _trade[0],
                timestamp = _trade[1],
                amount = _trade[2],
                price = _trade[3];

            var side = amount < 0 ? 'sell' : 'buy';
            return {
                'id': id.toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': price,
                'amount': amount
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this119 = this,
                _arguments98 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments98.length > 1 && _arguments98[1] !== undefined ? _arguments98[1] : {};
                market = _this119.market(symbol);
                return _this119.publicGetTradesSymbolHist(_this119.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this119.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this120 = this,
                _arguments99 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments99.length > 1 && _arguments99[1] !== undefined ? _arguments99[1] : '1m';
                since = _arguments99.length > 2 && _arguments99[2] !== undefined ? _arguments99[2] : undefined;
                limit = _arguments99.length > 3 && _arguments99[3] !== undefined ? _arguments99[3] : undefined;
                params = _arguments99.length > 4 && _arguments99[4] !== undefined ? _arguments99[4] : {};
                market = _this120.market(symbol);
                request = {
                    'symbol': market['id'],
                    'timeframe': _this120.timeframes[timeframe]
                };

                if (limit) {
                    request['limit'] = limit;
                }if (since) {
                    request['start'] = since;
                }request = _this120.extend(request, params);
                return _this120.publicGetCandlesTradeTimeframeSymbolHist(request);
            }).then(function (_resp) {
                response = _resp;

                return _this120.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                _this121 = this,
                _arguments100 = arguments;

            price = _arguments100.length > 4 && _arguments100[4] !== undefined ? _arguments100[4] : undefined;
            params = _arguments100.length > 5 && _arguments100[5] !== undefined ? _arguments100[5] : {};
            market = _this121.market(symbol);

            throw new NotSupported(_this121.id + ' createOrder not implemented yet');
        },
        cancelOrder: function cancelOrder(id) {
            var _this122 = this;

            throw new NotSupported(_this122.id + ' cancelOrder not implemented yet');
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                _this123 = this,
                _arguments102 = arguments;

            params = _arguments102.length > 1 && _arguments102[1] !== undefined ? _arguments102[1] : {};

            throw new NotSupported(_this123.id + ' fetchOrder not implemented yet');
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                _this124 = this,
                _arguments103 = arguments;

            params = _arguments103.length > 3 && _arguments103[3] !== undefined ? _arguments103[3] : {};

            throw new NotSupported(_this124.id + ' withdraw not implemented yet');
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                auth,
                signature,
                response,
                _this125 = this,
                _arguments104 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments104.length > 1 && _arguments104[1] !== undefined ? _arguments104[1] : 'public';
                method = _arguments104.length > 2 && _arguments104[2] !== undefined ? _arguments104[2] : 'GET';
                params = _arguments104.length > 3 && _arguments104[3] !== undefined ? _arguments104[3] : {};
                headers = _arguments104.length > 4 && _arguments104[4] !== undefined ? _arguments104[4] : undefined;
                body = _arguments104.length > 5 && _arguments104[5] !== undefined ? _arguments104[5] : undefined;
                request = _this125.version + '/' + _this125.implodeParams(path, params);
                query = _this125.omit(params, _this125.extractParams(path));
                url = _this125.urls['api'] + '/' + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this125.urlencode(query);
                    }
                } else {
                    nonce = _this125.nonce().toString();

                    body = _this125.json(query);
                    auth = '/api' + '/' + request + nonce + body;
                    signature = _this125.hmac(_this125.encode(auth), _this125.encode(_this125.secret), 'sha384');

                    headers = {
                        'bfx-nonce': nonce,
                        'bfx-apikey': _this125.apiKey,
                        'bfx-signature': signature,
                        'Content-Type': 'application/json'
                    };
                }
                return _this125.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    if (response['message'].indexOf('not enough exchange balance') >= 0) {
                        throw new InsufficientFunds(_this125.id + ' ' + _this125.json(response));
                    }throw new ExchangeError(_this125.id + ' ' + _this125.json(response));
                }
                return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var bitflyer = {

        'id': 'bitflyer',
        'name': 'bitFlyer',
        'countries': 'JP',
        'version': 'v1',
        'rateLimit': 500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
            'api': 'https://api.bitflyer.jp',
            'www': 'https://bitflyer.jp',
            'doc': 'https://bitflyer.jp/API'
        },
        'api': {
            'public': {
                'get': ['getmarkets', // or 'markets'
                'getboard', // or 'board'
                'getticker', // or 'ticker'
                'getexecutions', // or 'executions'
                'gethealth', 'getchats']
            },
            'private': {
                'get': ['getpermissions', 'getbalance', 'getcollateral', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],
                'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                currencies,
                base,
                quote,
                symbol,
                numCurrencies,
                _this126 = this;

            return Promise.resolve().then(function () {
                return _this126.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['product_code'];
                    currencies = id.split('_');
                    base = undefined;
                    quote = undefined;
                    symbol = id;
                    numCurrencies = currencies.length;

                    if (numCurrencies == 1) {
                        base = symbol.slice(0, 3);
                        quote = symbol.slice(3, 6);
                    } else {
                        if (numCurrencies == 2) {
                            base = currencies[0];
                            quote = currencies[1];
                            symbol = base + '/' + quote;
                        } else {
                            base = currencies[1];
                            quote = currencies[2];
                        }
                    }result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                b,
                account,
                currency,
                result,
                c,
                _currency,
                _account,
                _this127 = this,
                _arguments106 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments106.length > 0 && _arguments106[0] !== undefined ? _arguments106[0] : {};
                return _this127.loadMarkets();
            }).then(function () {
                return _this127.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];
                    currency = account['currency_code'];

                    balances[currency] = account;
                }
                result = { 'info': response };

                for (c = 0; c < _this127.currencies.length; c++) {
                    _currency = _this127.currencies[c];
                    _account = _this127.account();

                    if (_currency in balances) {
                        _account['total'] = balances[_currency]['amount'];
                        _account['free'] = balances[_currency]['available'];
                        _account['used'] = _account['total'] - _account['free'];
                    }
                    result[_currency] = _account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this128 = this,
                _arguments107 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments107.length > 1 && _arguments107[1] !== undefined ? _arguments107[1] : {};
                return _this128.loadMarkets();
            }).then(function () {
                return _this128.publicGetBoard(_this128.extend({
                    'product_code': _this128.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this128.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'size');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this129 = this;

            return Promise.resolve().then(function () {
                return _this129.loadMarkets();
            }).then(function () {
                return _this129.publicGetTicker({
                    'product_code': _this129.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this129.parse8601(ticker['timestamp']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this129.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['best_bid']),
                    'ask': parseFloat(ticker['best_ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ltp']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_by_product']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = undefined;
            var order = undefined;
            if ('side' in trade) if (trade['side']) {
                side = trade['side'].toLowerCase();
                var id = side + '_child_order_acceptance_id';
                if (id in trade) order = trade[id];
            }
            var timestamp = this.parse8601(trade['exec_date']);
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': order,
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['size']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this130 = this,
                _arguments109 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments109.length > 1 && _arguments109[1] !== undefined ? _arguments109[1] : {};
                return _this130.loadMarkets();
            }).then(function () {
                market = _this130.market(symbol);
                return _this130.publicGetExecutions(_this130.extend({
                    'product_code': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this130.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this131 = this,
                _arguments110 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments110.length > 4 && _arguments110[4] !== undefined ? _arguments110[4] : undefined;
                params = _arguments110.length > 5 && _arguments110[5] !== undefined ? _arguments110[5] : {};
                return _this131.loadMarkets();
            }).then(function () {
                order = {
                    'product_code': _this131.marketId(symbol),
                    'child_order_type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'price': price,
                    'size': amount
                };
                return _this131.privatePostSendchildorder(_this131.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['child_order_acceptance_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this132 = this,
                _arguments111 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments111.length > 1 && _arguments111[1] !== undefined ? _arguments111[1] : {};
                return _this132.loadMarkets();
            }).then(function () {
                return _this132.privatePostCancelchildorder(_this132.extend({
                    'parent_order_id': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this133 = this,
                _arguments112 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments112.length > 3 && _arguments112[3] !== undefined ? _arguments112[3] : {};
                return _this133.loadMarkets();
            }).then(function () {
                return _this133.privatePostWithdraw(_this133.extend({
                    'currency_code': currency,
                    'amount': amount
                    // 'bank_account_id': 1234,
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['message_id']
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var request = '/' + this.version + '/';
            if (api == 'private') request += 'me/';
            request += path;
            if (method == 'GET') {
                if (Object.keys(params).length) request += '?' + this.urlencode(params);
            }
            var url = this.urls['api'] + request;
            if (api == 'private') {
                var nonce = this.nonce().toString();
                body = this.json(params);
                var auth = [nonce, method, request, body].join('');
                headers = {
                    'ACCESS-KEY': this.apiKey,
                    'ACCESS-TIMESTAMP': nonce,
                    'ACCESS-SIGN': this.hmac(this.encode(auth), this.secret),
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitlish = {

        'id': 'bitlish',
        'name': 'bitlish',
        'countries': ['GB', 'EU', 'RU'],
        'rateLimit': 1500,
        'version': 'v1',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',
            'api': 'https://bitlish.com/api',
            'www': 'https://bitlish.com',
            'doc': 'https://bitlish.com/api'
        },
        'api': {
            'public': {
                'get': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history'],
                'post': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history']
            },
            'private': {
                'post': ['accounts_operations', 'balance', 'cancel_trade', 'cancel_trades_by_ids', 'cancel_all_trades', 'create_bcode', 'create_template_wallet', 'create_trade', 'deposit', 'list_accounts_operations_from_ts', 'list_active_trades', 'list_bcodes', 'list_my_matches_from_ts', 'list_my_trades', 'list_my_trads_from_ts', 'list_payment_methods', 'list_payments', 'redeem_code', 'resign', 'signin', 'signout', 'trade_details', 'trade_options', 'withdraw', 'withdraw_by_id']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                market,
                id,
                symbol,
                _symbol$split3,
                _symbol$split4,
                base,
                quote,
                _this134 = this;

            return Promise.resolve().then(function () {
                return _this134.publicGetPairs();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split3 = symbol.split('/');
                    _symbol$split4 = _slicedToArray(_symbol$split3, 2);
                    base = _symbol$split4[0];
                    quote = _symbol$split4[1];
                    // issue #4 bitlish names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['max']),
                'low': parseFloat(ticker['min']),
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': parseFloat(ticker['first']),
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this135 = this;

            return Promise.resolve().then(function () {
                return _this135.loadMarkets();
            }).then(function () {
                return _this135.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this135.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this135.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                _this136 = this;

            return Promise.resolve().then(function () {
                return _this136.loadMarkets();
            }).then(function () {
                market = _this136.market(symbol);
                return _this136.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];

                return _this136.parseTicker(ticker, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                now,
                start,
                interval,
                _this137 = this,
                _arguments116 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments116.length > 1 && _arguments116[1] !== undefined ? _arguments116[1] : '1m';
                since = _arguments116.length > 2 && _arguments116[2] !== undefined ? _arguments116[2] : undefined;
                limit = _arguments116.length > 3 && _arguments116[3] !== undefined ? _arguments116[3] : undefined;
                params = _arguments116.length > 4 && _arguments116[4] !== undefined ? _arguments116[4] : {};
                return _this137.loadMarkets();
            }).then(function () {
                market = _this137.market(symbol);
                now = _this137.seconds();
                start = now - 86400 * 30; // last 30 days

                interval = [start.toString(), undefined];

                return _this137.publicPostOhlcv(_this137.extend({
                    'time_range': interval
                }, params));
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this138 = this,
                _arguments117 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments117.length > 1 && _arguments117[1] !== undefined ? _arguments117[1] : {};
                return _this138.loadMarkets();
            }).then(function () {
                return _this138.publicGetTradesDepth(_this138.extend({
                    'pair_id': _this138.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(parseInt(orderbook['last']) / 1000);

                return _this138.parseOrderBook(orderbook, timestamp, 'bid', 'ask', 'price', 'volume');
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['dir'] == 'bid' ? 'buy' : 'sell';
            var symbol = undefined;
            var timestamp = parseInt(trade['created'] / 1000);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this139 = this,
                _arguments118 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments118.length > 1 && _arguments118[1] !== undefined ? _arguments118[1] : {};
                return _this139.loadMarkets();
            }).then(function () {
                market = _this139.market(symbol);
                return _this139.publicGetTradesHistory(_this139.extend({
                    'pair_id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this139.parseTrades(response['list'], market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                currencies,
                balance,
                c,
                currency,
                account,
                _c,
                _currency2,
                _account2,
                _this140 = this,
                _arguments119 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments119.length > 0 && _arguments119[0] !== undefined ? _arguments119[0] : {};
                return _this140.loadMarkets();
            }).then(function () {
                return _this140.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                currencies = Object.keys(response);
                balance = {};

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = response[currency];

                    currency = currency.toUpperCase();
                    // issue #4 bitlish names Dash as DSH, instead of DASH
                    if (currency == 'DSH') {
                        currency = 'DASH';
                    }balance[currency] = account;
                }
                for (_c = 0; _c < _this140.currencies.length; _c++) {
                    _currency2 = _this140.currencies[_c];
                    _account2 = _this140.account();

                    if (_currency2 in balance) {
                        _account2['free'] = parseFloat(balance[_currency2]['funds']);
                        _account2['used'] = parseFloat(balance[_currency2]['holded']);
                        _account2['total'] = _this140.sum(_account2['free'], _account2['used']);
                    }
                    result[_currency2] = _account2;
                }
                return result;
            });
        },
        signIn: function signIn() {
            return this.privatePostSignin({
                'login': this.login,
                'passwd': this.password
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this141 = this,
                _arguments120 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments120.length > 4 && _arguments120[4] !== undefined ? _arguments120[4] : undefined;
                params = _arguments120.length > 5 && _arguments120[5] !== undefined ? _arguments120[5] : {};
                return _this141.loadMarkets();
            }).then(function () {
                order = {
                    'pair_id': _this141.marketId(symbol),
                    'dir': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this141.privatePostCreateTrade(_this141.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this142 = this;

            return Promise.resolve().then(function () {
                return _this142.loadMarkets();
            }).then(function () {
                return _this142.privatePostCancelTrade({ 'id': id });
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this143 = this,
                _arguments122 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments122.length > 3 && _arguments122[3] !== undefined ? _arguments122[3] : {};
                return _this143.loadMarkets();
            }).then(function () {
                if (currency != 'BTC') {
                    // they did not document other types...
                    throw new NotSupported(_this143.id + ' currently supports BTC withdrawals only, until they document other currencies...');
                }
                return _this143.privatePostWithdraw(_this143.extend({
                    'currency': currency.toLowerCase(),
                    'amount': parseFloat(amount),
                    'account': address,
                    'payment_method': 'bitcoin' // they did not document other types...
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['message_id']
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (api == 'public') {
                if (method == 'GET') {
                    if (Object.keys(params).length) url += '?' + this.urlencode(params);
                } else {
                    body = this.json(params);
                    headers = { 'Content-Type': 'application/json' };
                }
            } else {
                body = this.json(this.extend({ 'token': this.apiKey }, params));
                headers = { 'Content-Type': 'application/json' };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmarket = {

        'id': 'bitmarket',
        'name': 'BitMarket',
        'countries': ['PL', 'EU'],
        'rateLimit': 1500,
        'hasFetchOHLCV': true,
        'hasWithdraw': true,
        'timeframes': {
            '90m': '90m',
            '6h': '6h',
            '1d': '1d',
            '1w': '7d',
            '1M': '1m',
            '3M': '3m',
            '6M': '6m',
            '1y': '1y'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',
            'api': {
                'public': 'https://www.bitmarket.net',
                'private': 'https://www.bitmarket.pl/api2/' // last slash is critical
            },
            'www': ['https://www.bitmarket.pl', 'https://www.bitmarket.net'],
            'doc': ['https://www.bitmarket.net/docs.php?file=api_public.html', 'https://www.bitmarket.net/docs.php?file=api_private.html', 'https://github.com/bitmarket-net/api']
        },
        'api': {
            'public': {
                'get': ['json/{market}/ticker', 'json/{market}/orderbook', 'json/{market}/trades', 'json/ctransfer', 'graphs/{market}/90m', 'graphs/{market}/6h', 'graphs/{market}/1d', 'graphs/{market}/7d', 'graphs/{market}/1m', 'graphs/{market}/3m', 'graphs/{market}/6m', 'graphs/{market}/1y']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orders', 'trades', 'history', 'withdrawals', 'tradingdesk', 'tradingdeskStatus', 'tradingdeskConfirm', 'cryptotradingdesk', 'cryptotradingdeskStatus', 'cryptotradingdeskConfirm', 'withdraw', 'withdrawFiat', 'withdrawPLNPP', 'withdrawFiatFast', 'deposit', 'transfer', 'transfers', 'marginList', 'marginOpen', 'marginClose', 'marginCancel', 'marginModify', 'marginBalanceAdd', 'marginBalanceRemove', 'swapList', 'swapOpen', 'swapClose']
            }
        },
        'markets': {
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' },
            'PlnX/BTC': { 'id': 'PlnxBTC', 'symbol': 'PlnX/BTC', 'base': 'PlnX', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this144 = this,
                _arguments123 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments123.length > 0 && _arguments123[0] !== undefined ? _arguments123[0] : {};
                return _this144.loadMarkets();
            }).then(function () {
                return _this144.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['balances'];
                result = { 'info': data };

                for (c = 0; c < _this144.currencies.length; c++) {
                    currency = _this144.currencies[c];
                    account = _this144.account();

                    if (currency in balance['available']) {
                        account['free'] = balance['available'][currency];
                    }if (currency in balance['blocked']) {
                        account['used'] = balance['blocked'][currency];
                    }account['total'] = _this144.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this145 = this,
                _arguments124 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments124.length > 1 && _arguments124[1] !== undefined ? _arguments124[1] : {};
                return _this145.publicGetJsonMarketOrderbook(_this145.extend({
                    'market': _this145.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this145.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this145.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this146 = this;

            return Promise.resolve().then(function () {
                return _this146.publicGetJsonMarketTicker({
                    'market': _this146.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this146.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this146.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this147 = this,
                _arguments126 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments126.length > 1 && _arguments126[1] !== undefined ? _arguments126[1] : {};
                market = _this147.market(symbol);
                return _this147.publicGetJsonMarketTrades(_this147.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this147.parseTrades(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '90m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv['time'] * 1000, parseFloat(ohlcv['open']), parseFloat(ohlcv['high']), parseFloat(ohlcv['low']), parseFloat(ohlcv['close']), parseFloat(ohlcv['vol'])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                method,
                market,
                response,
                _this148 = this,
                _arguments127 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments127.length > 1 && _arguments127[1] !== undefined ? _arguments127[1] : '90m';
                since = _arguments127.length > 2 && _arguments127[2] !== undefined ? _arguments127[2] : undefined;
                limit = _arguments127.length > 3 && _arguments127[3] !== undefined ? _arguments127[3] : undefined;
                params = _arguments127.length > 4 && _arguments127[4] !== undefined ? _arguments127[4] : {};
                return _this148.loadMarkets();
            }).then(function () {
                method = 'publicGetGraphsMarket' + _this148.timeframes[timeframe];
                market = _this148.market(symbol);
                return _this148[method](_this148.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this148.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                result,
                _this149 = this,
                _arguments128 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments128.length > 4 && _arguments128[4] !== undefined ? _arguments128[4] : undefined;
                params = _arguments128.length > 5 && _arguments128[5] !== undefined ? _arguments128[5] : {};
                return _this149.privatePostTrade(_this149.extend({
                    'market': _this149.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response
                };

                if ('id' in response['order']) {
                    result['id'] = response['id'];
                }return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this150 = this;

            return _this150.privatePostCancel({ 'id': id });
        },
        isFiat: function isFiat(currency) {
            if (currency == 'EUR') return true;
            if (currency == 'PLN') return true;
            return false;
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                method,
                request,
                response,
                _this151 = this,
                _arguments130 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments130.length > 3 && _arguments130[3] !== undefined ? _arguments130[3] : {};
                return _this151.loadMarkets();
            }).then(function () {
                method = undefined;
                request = {
                    'currency': currency,
                    'quantity': amount
                };

                if (_this151.isFiat(currency)) {
                    method = 'privatePostWithdrawFiat';
                    if ('account' in params) {
                        request['account'] = params['account']; // bank account code for withdrawal
                    } else {
                        throw new ExchangeError(_this151.id + ' requires account parameter to withdraw fiat currency');
                    }
                    if ('account2' in params) {
                        request['account2'] = params['account2']; // bank SWIFT code (EUR only)
                    } else {
                        if (currency == 'EUR') {
                            throw new ExchangeError(_this151.id + ' requires account2 parameter to withdraw EUR');
                        }
                    }
                    if ('withdrawal_note' in params) {
                        request['withdrawal_note'] = params['withdrawal_note']; // a 10-character user-specified withdrawal note (PLN only)
                    } else {
                        if (currency == 'PLN') {
                            throw new ExchangeError(_this151.id + ' requires withdrawal_note parameter to withdraw PLN');
                        }
                    }
                } else {
                    method = 'privatePostWithdraw';
                    request['address'] = address;
                }
                return _this151[method](_this151.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path + '.json', params);
            } else {
                var nonce = this.nonce();
                var query = this.extend({
                    'tonce': nonce,
                    'method': path
                }, params);
                body = this.urlencode(query);
                headers = {
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmex = {

        'id': 'bitmex',
        'name': 'BitMEX',
        'countries': 'SC', // Seychelles
        'version': 'v1',
        'rateLimit': 1500,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '5m': '5m',
            '1h': '1h',
            '1d': '1d'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
            'api': 'https://www.bitmex.com',
            'www': 'https://www.bitmex.com',
            'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http']
        },
        'api': {
            'public': {
                'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']
            },
            'private': {
                'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],
                'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],
                'put': ['order', 'order/bulk', 'user'],
                'delete': ['apiKey', 'order', 'order/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                isFuturesContract,
                symbol,
                _this152 = this;

            return Promise.resolve().then(function () {
                return _this152.publicGetInstrumentActiveAndIndices();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    base = market['underlying'];
                    quote = market['quoteCurrency'];
                    isFuturesContract = id != base + quote;

                    base = _this152.commonCurrencyCode(base);
                    quote = _this152.commonCurrencyCode(quote);
                    symbol = isFuturesContract ? id : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                b,
                balance,
                currency,
                account,
                _this153 = this,
                _arguments132 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments132.length > 0 && _arguments132[0] !== undefined ? _arguments132[0] : {};
                return _this153.loadMarkets();
            }).then(function () {
                return _this153.privateGetUserMargin({ 'currency': 'all' });
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    currency = balance['currency'].toUpperCase();

                    currency = _this153.commonCurrencyCode(currency);
                    account = {
                        'free': balance['availableMargin'],
                        'used': 0.0,
                        'total': balance['amount']
                    };

                    if (currency == 'BTC') {
                        account['free'] = account['free'] * 0.00000001;
                        account['total'] = account['total'] * 0.00000001;
                    }
                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                result,
                o,
                order,
                side,
                amount,
                price,
                _this154 = this,
                _arguments133 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments133.length > 1 && _arguments133[1] !== undefined ? _arguments133[1] : {};
                return _this154.loadMarkets();
            }).then(function () {
                return _this154.publicGetOrderBookL2(_this154.extend({
                    'symbol': _this154.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this154.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this154.iso8601(timestamp)
                };

                for (o = 0; o < orderbook.length; o++) {
                    order = orderbook[o];
                    side = order['side'] == 'Sell' ? 'asks' : 'bids';
                    amount = order['size'];
                    price = order['price'];

                    result[side].push([price, amount]);
                }
                result['bids'] = _this154.sortBy(result['bids'], 0, true);
                result['asks'] = _this154.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var request,
                quotes,
                quotesLength,
                quote,
                tickers,
                ticker,
                timestamp,
                _this155 = this;

            return Promise.resolve().then(function () {
                return _this155.loadMarkets();
            }).then(function () {
                request = {
                    'symbol': _this155.marketId(symbol),
                    'binSize': '1d',
                    'partial': true,
                    'count': 1,
                    'reverse': true
                };
                return _this155.publicGetQuoteBucketed(request);
            }).then(function (_resp) {
                quotes = _resp;
                quotesLength = quotes.length;
                quote = quotes[quotesLength - 1];
                return _this155.publicGetTradeBucketed(request);
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[0];
                timestamp = _this155.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this155.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(quote['bidPrice']),
                    'ask': parseFloat(quote['askPrice']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['homeNotional']),
                    'quoteVolume': parseFloat(ticker['foreignNotional']),
                    'info': ticker
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var timestamp = this.parse8601(ohlcv['timestamp']);
            return [timestamp, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                filter,
                market,
                request,
                response,
                _this156 = this,
                _arguments135 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments135.length > 1 && _arguments135[1] !== undefined ? _arguments135[1] : '1m';
                since = _arguments135.length > 2 && _arguments135[2] !== undefined ? _arguments135[2] : undefined;
                limit = _arguments135.length > 3 && _arguments135[3] !== undefined ? _arguments135[3] : undefined;
                params = _arguments135.length > 4 && _arguments135[4] !== undefined ? _arguments135[4] : {};
                return _this156.loadMarkets();
            }).then(function () {
                // send JSON key/value pairs, such as {"key": "value"}
                // filter by individual fields and do advanced queries on timestamps
                filter = { 'key': 'value' };
                // send a bare series (e.g. XBU) to nearest expiring contract in that series
                // you can also send a timeframe, e.g. XBU:monthly
                // timeframes: daily, weekly, monthly, quarterly, and biquarterly

                market = _this156.market(symbol);
                request = {
                    'symbol': market['id'],
                    'binSize': _this156.timeframes[timeframe],
                    'partial': true // true == include yet-incomplete current bins
                    // 'filter': filter, // filter by individual fields and do advanced queries
                    // 'columns': [],    // will return all columns if omitted
                    // 'start': 0,       // starting point for results (wtf?)
                    // 'reverse': false, // true == newest first
                    // 'endTime': '',    // ending date filter for results
                };

                if (since) {
                    request['startTime'] = since;
                } // starting date filter for results
                if (limit) {
                    request['count'] = limit;
                } // default 100
                return _this156.publicGetTradeBucketed(_this156.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this156.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['timestamp']);
            var symbol = undefined;
            if (!market) {
                if ('symbol' in trade) market = this.markets_by_id[trade['symbol']];
            }
            return {
                'id': trade['trdMatchID'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['side'].toLowerCase(),
                'price': trade['price'],
                'amount': trade['size']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this157 = this,
                _arguments136 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments136.length > 1 && _arguments136[1] !== undefined ? _arguments136[1] : {};
                return _this157.loadMarkets();
            }).then(function () {
                market = _this157.market(symbol);
                return _this157.publicGetTrade(_this157.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this157.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this158 = this,
                _arguments137 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments137.length > 4 && _arguments137[4] !== undefined ? _arguments137[4] : undefined;
                params = _arguments137.length > 5 && _arguments137[5] !== undefined ? _arguments137[5] : {};
                return _this158.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this158.marketId(symbol),
                    'side': _this158.capitalize(side),
                    'orderQty': amount,
                    'ordType': _this158.capitalize(type)
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this158.privatePostOrder(_this158.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this159 = this;

            return Promise.resolve().then(function () {
                return _this159.loadMarkets();
            }).then(function () {
                return _this159.privateDeleteOrder({ 'orderID': id });
            });
        },
        isFiat: function isFiat(currency) {
            if (currency == 'EUR') return true;
            if (currency == 'PLN') return true;
            return false;
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                request,
                response,
                _this160 = this,
                _arguments139 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments139.length > 3 && _arguments139[3] !== undefined ? _arguments139[3] : {};
                return _this160.loadMarkets();
            }).then(function () {
                if (currency != 'BTC') {
                    throw new ExchangeError(_this160.id + ' supoprts BTC withdrawals only, other currencies coming soon...');
                }request = {
                    'currency': 'XBt', // temporarily
                    'amount': amount,
                    'address': address
                    // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled
                    // 'fee': 0.001, // bitcoin network fee
                };
                return _this160.privatePostUserRequestWithdrawal(_this160.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['transactID']
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var query = '/api' + '/' + this.version + '/' + path;
            if (Object.keys(params).length) query += '?' + this.urlencode(params);
            var url = this.urls['api'] + query;
            if (api == 'private') {
                var nonce = this.nonce().toString();
                if (method == 'POST') if (Object.keys(params).length) body = this.json(params);
                var request = [method, query, nonce, body || ''].join('');
                headers = {
                    'Content-Type': 'application/json',
                    'api-nonce': nonce,
                    'api-key': this.apiKey,
                    'api-signature': this.hmac(this.encode(request), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitso = {

        'id': 'bitso',
        'name': 'Bitso',
        'countries': 'MX', // Mexico
        'rateLimit': 2000, // 30 requests per minute
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',
            'api': 'https://api.bitso.com',
            'www': 'https://bitso.com',
            'doc': 'https://bitso.com/api_info'
        },
        'api': {
            'public': {
                'get': ['available_books', 'ticker', 'order_book', 'trades']
            },
            'private': {
                'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],
                'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal'],
                'delete': ['orders/{oid}', 'orders/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split5,
                _symbol$split6,
                base,
                quote,
                _this161 = this;

            return Promise.resolve().then(function () {
                return _this161.publicGetAvailableBooks();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['payload'].length; p++) {
                    market = markets['payload'][p];
                    id = market['book'];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split5 = symbol.split('/');
                    _symbol$split6 = _slicedToArray(_symbol$split5, 2);
                    base = _symbol$split6[0];
                    quote = _symbol$split6[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this162 = this,
                _arguments141 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments141.length > 0 && _arguments141[0] !== undefined ? _arguments141[0] : {};
                return _this162.loadMarkets();
            }).then(function () {
                return _this162.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['payload']['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'].toUpperCase();
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['locked']),
                        'total': parseFloat(balance['total'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                _this163 = this,
                _arguments142 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments142.length > 1 && _arguments142[1] !== undefined ? _arguments142[1] : {};
                return _this163.loadMarkets();
            }).then(function () {
                return _this163.publicGetOrderBook(_this163.extend({
                    'book': _this163.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['payload'];
                timestamp = _this163.parse8601(orderbook['updated_at']);

                return _this163.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this164 = this;

            return Promise.resolve().then(function () {
                return _this164.loadMarkets();
            }).then(function () {
                return _this164.publicGetTicker({
                    'book': _this164.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['payload'];
                timestamp = _this164.parse8601(ticker['created_at']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this164.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['created_at']);
            var symbol = undefined;
            if (!market) {
                if ('book' in trade) market = this.markets_by_id[trade['book']];
            }
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['maker_side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this165 = this,
                _arguments144 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments144.length > 1 && _arguments144[1] !== undefined ? _arguments144[1] : {};
                return _this165.loadMarkets();
            }).then(function () {
                market = _this165.market(symbol);
                return _this165.publicGetTrades(_this165.extend({
                    'book': _this165.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this165.parseTrades(response['payload'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this166 = this,
                _arguments145 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments145.length > 4 && _arguments145[4] !== undefined ? _arguments145[4] : undefined;
                params = _arguments145.length > 5 && _arguments145[5] !== undefined ? _arguments145[5] : {};
                return _this166.loadMarkets();
            }).then(function () {
                order = {
                    'book': _this166.marketId(symbol),
                    'side': side,
                    'type': type,
                    'major': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this166.privatePostOrders(_this166.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['payload']['oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this167 = this;

            return Promise.resolve().then(function () {
                return _this167.loadMarkets();
            }).then(function () {
                return _this167.privateDeleteOrders({ 'oid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                query,
                url,
                nonce,
                request,
                signature,
                auth,
                response,
                _test4,
                _this168 = this,
                _arguments147 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments147.length > 1 && _arguments147[1] !== undefined ? _arguments147[1] : 'public';
                method = _arguments147.length > 2 && _arguments147[2] !== undefined ? _arguments147[2] : 'GET';
                params = _arguments147.length > 3 && _arguments147[3] !== undefined ? _arguments147[3] : {};
                headers = _arguments147.length > 4 && _arguments147[4] !== undefined ? _arguments147[4] : undefined;
                body = _arguments147.length > 5 && _arguments147[5] !== undefined ? _arguments147[5] : undefined;
                query = '/' + _this168.version + '/' + _this168.implodeParams(path, params);
                url = _this168.urls['api'] + query;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this168.urlencode(params);
                    }
                } else {
                    if (Object.keys(params).length) {
                        body = _this168.json(params);
                    }nonce = _this168.nonce().toString();
                    request = [nonce, method, query, body || ''].join('');
                    signature = _this168.hmac(_this168.encode(request), _this168.encode(_this168.secret));
                    auth = _this168.apiKey + ':' + nonce + ':' + signature;

                    headers = { 'Authorization': "Bitso " + auth };
                }
                return _this168.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test4 = 'success' in response;

                if (_test4 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this168.id + ' ' + _this168.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitstamp1 = {

        'id': 'bitstamp1',
        'name': 'Bitstamp v1',
        'countries': 'GB',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
            'api': 'https://www.bitstamp.net/api',
            'www': 'https://www.bitstamp.net',
            'doc': 'https://www.bitstamp.net/api'
        },
        'api': {
            'public': {
                'get': ['ticker', 'ticker_hour', 'order_book', 'transactions', 'eur_usd']
            },
            'private': {
                'post': ['balance', 'user_transactions', 'open_orders', 'order_status', 'cancel_order', 'cancel_all_orders', 'buy', 'sell', 'bitcoin_deposit_address', 'unconfirmed_btc', 'ripple_withdrawal', 'ripple_address', 'withdrawal_requests', 'bitcoin_withdrawal']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD' },
            'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR' },
            'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this169 = this,
                _arguments148 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments148.length > 1 && _arguments148[1] !== undefined ? _arguments148[1] : {};

                if (symbol != 'BTC/USD') {
                    throw new ExchangeError(_this169.id + ' ' + _this169.version + " fetchOrderBook doesn't support " + symbol + ', use it for BTC/USD only');
                }return _this169.publicGetOrderBook(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;

                return _this169.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this170 = this;

            return Promise.resolve().then(function () {
                if (symbol != 'BTC/USD') {
                    throw new ExchangeError(_this170.id + ' ' + _this170.version + " fetchTicker doesn't support " + symbol + ', use it for BTC/USD only');
                }return _this170.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this170.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = undefined;
            if ('date' in trade) {
                timestamp = parseInt(trade['date']);
            } else if ('datetime' in trade) {
                // timestamp = this.parse8601 (trade['datetime']);
                timestamp = parseInt(trade['datetime']);
            }
            var side = trade['type'] == 0 ? 'buy' : 'sell';
            var order = undefined;
            if ('order_id' in trade) order = trade['order_id'].toString();
            if ('currency_pair' in trade) {
                if (trade['currency_pair'] in this.markets_by_id) market = this.markets_by_id[trade['currency_pair']];
            }
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': order,
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this171 = this,
                _arguments150 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments150.length > 1 && _arguments150[1] !== undefined ? _arguments150[1] : {};

                if (symbol != 'BTC/USD') {
                    throw new ExchangeError(_this171.id + ' ' + _this171.version + " fetchTrades doesn't support " + symbol + ', use it for BTC/USD only');
                }market = _this171.market(symbol);
                return _this171.publicGetTransactions(_this171.extend({
                    'time': 'minute'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this171.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                lowercase,
                total,
                free,
                used,
                account,
                _this172 = this,
                _arguments151 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments151.length > 0 && _arguments151[0] !== undefined ? _arguments151[0] : {};
                return _this172.privatePostBalance();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this172.currencies.length; c++) {
                    currency = _this172.currencies[c];
                    lowercase = currency.toLowerCase();
                    total = lowercase + '_balance';
                    free = lowercase + '_available';
                    used = lowercase + '_reserved';
                    account = _this172.account();

                    account['free'] = _this172.safeFloat(balance, free, 0.0);
                    account['used'] = _this172.safeFloat(balance, used, 0.0);
                    account['total'] = _this172.safeFloat(balance, total, 0.0);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this173 = this,
                _arguments152 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments152.length > 4 && _arguments152[4] !== undefined ? _arguments152[4] : undefined;
                params = _arguments152.length > 5 && _arguments152[5] !== undefined ? _arguments152[5] : {};

                if (type != 'limit') {
                    throw new ExchangeError(_this173.id + ' ' + _this173.version + ' accepts limit orders only');
                }method = 'privatePost' + _this173.capitalize(side);
                order = {
                    'id': _this173.marketId(symbol),
                    'amount': amount,
                    'price': price
                };
                return _this173[method](_this173.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this174 = this;

            return _this174.privatePostCancelOrder({ 'id': id });
        },
        parseOrderStatus: function parseOrderStatus(order) {
            if (order['status'] == 'Queue' || order['status'] == 'Open') return 'open';
            if (order['status'] == 'Finished') return 'closed';
            return order['status'];
        },
        fetchOrderStatus: function fetchOrderStatus(id) {
            var symbol,
                response,
                _this175 = this,
                _arguments154 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments154.length > 1 && _arguments154[1] !== undefined ? _arguments154[1] : undefined;
                return _this175.loadMarkets();
            }).then(function () {
                return _this175.privatePostOrderStatus({ 'id': id });
            }).then(function (_resp) {
                response = _resp;

                return _this175.parseOrderStatus(response);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var symbol,
                params,
                market,
                pair,
                request,
                response,
                result,
                _this176 = this,
                _arguments155 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments155.length > 0 && _arguments155[0] !== undefined ? _arguments155[0] : undefined;
                params = _arguments155.length > 1 && _arguments155[1] !== undefined ? _arguments155[1] : {};
                return _this176.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this176.market(symbol);
                }pair = market ? market['id'] : 'all';
                request = _this176.extend({ 'id': pair }, params);
                return _this176.privatePostOpenOrdersId(request);
            }).then(function (_resp) {
                response = _resp;
                result = _this176.parseTrades(response, market);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var _this177 = this;

            return Promise.resolve().then(function () {
                throw new NotSupported(_this177.id + ' fetchOrder is not implemented yet');
                return _this177.loadMarkets();
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _this178 = this,
                _arguments157 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments157.length > 1 && _arguments157[1] !== undefined ? _arguments157[1] : 'public';
                method = _arguments157.length > 2 && _arguments157[2] !== undefined ? _arguments157[2] : 'GET';
                params = _arguments157.length > 3 && _arguments157[3] !== undefined ? _arguments157[3] : {};
                headers = _arguments157.length > 4 && _arguments157[4] !== undefined ? _arguments157[4] : undefined;
                body = _arguments157.length > 5 && _arguments157[5] !== undefined ? _arguments157[5] : undefined;
                url = _this178.urls['api'] + '/' + _this178.implodeParams(path, params);
                query = _this178.omit(params, _this178.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this178.urlencode(query);
                    }
                } else {
                    if (!_this178.uid) {
                        throw new AuthenticationError(_this178.id + ' requires `' + _this178.id + '.uid` property for authentication');
                    }nonce = _this178.nonce().toString();
                    auth = nonce + _this178.uid + _this178.apiKey;
                    signature = _this178.encode(_this178.hmac(_this178.encode(auth), _this178.encode(_this178.secret)));

                    query = _this178.extend({
                        'key': _this178.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query);
                    body = _this178.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this178.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this178.id + ' ' + _this178.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitstamp = {

        'id': 'bitstamp',
        'name': 'Bitstamp',
        'countries': 'GB',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
            'api': 'https://www.bitstamp.net/api',
            'www': 'https://www.bitstamp.net',
            'doc': 'https://www.bitstamp.net/api'
        },
        'api': {
            'public': {
                'get': ['order_book/{pair}/', 'ticker_hour/{pair}/', 'ticker/{pair}/', 'transactions/{pair}/']
            },
            'private': {
                'post': ['balance/', 'balance/{pair}/', 'user_transactions/', 'user_transactions/{pair}/', 'open_orders/all/', 'open_orders/{pair}', 'cancel_order/', 'buy/{pair}/', 'buy/market/{pair}/', 'sell/{pair}/', 'sell/market/{pair}/', 'ltc_withdrawal', 'ltc_address', 'eth_withdrawal', 'eth_address', 'transfer-to-main/', 'transfer-from-main/', 'xrp_withdrawal/', 'xrp_address/', 'withdrawal/open/', 'withdrawal/status/', 'withdrawal/cancel/', 'liquidation_address/new/', 'liquidation_address/info/']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD' },
            'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR' },
            'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this179 = this,
                _arguments158 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments158.length > 1 && _arguments158[1] !== undefined ? _arguments158[1] : {};
                return _this179.publicGetOrderBookPair(_this179.extend({
                    'pair': _this179.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;

                return _this179.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this180 = this;

            return Promise.resolve().then(function () {
                return _this180.publicGetTickerPair({
                    'pair': _this180.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this180.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = undefined;
            if ('date' in trade) {
                timestamp = parseInt(trade['date']);
            } else if ('datetime' in trade) {
                // timestamp = this.parse8601 (trade['datetime']);
                timestamp = parseInt(trade['datetime']);
            }
            var side = trade['type'] == 0 ? 'buy' : 'sell';
            var order = undefined;
            if ('order_id' in trade) order = trade['order_id'].toString();
            if ('currency_pair' in trade) {
                if (trade['currency_pair'] in this.markets_by_id) market = this.markets_by_id[trade['currency_pair']];
            }
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': order,
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this181 = this,
                _arguments160 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments160.length > 1 && _arguments160[1] !== undefined ? _arguments160[1] : {};
                market = _this181.market(symbol);
                return _this181.publicGetTransactionsPair(_this181.extend({
                    'pair': market['id'],
                    'time': 'minute'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this181.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                lowercase,
                total,
                free,
                used,
                account,
                _this182 = this,
                _arguments161 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments161.length > 0 && _arguments161[0] !== undefined ? _arguments161[0] : {};
                return _this182.privatePostBalance();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this182.currencies.length; c++) {
                    currency = _this182.currencies[c];
                    lowercase = currency.toLowerCase();
                    total = lowercase + '_balance';
                    free = lowercase + '_available';
                    used = lowercase + '_reserved';
                    account = _this182.account();

                    if (free in balance) {
                        account['free'] = parseFloat(balance[free]);
                    }if (used in balance) {
                        account['used'] = parseFloat(balance[used]);
                    }if (total in balance) {
                        account['total'] = parseFloat(balance[total]);
                    }result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this183 = this,
                _arguments162 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments162.length > 4 && _arguments162[4] !== undefined ? _arguments162[4] : undefined;
                params = _arguments162.length > 5 && _arguments162[5] !== undefined ? _arguments162[5] : {};
                method = 'privatePost' + _this183.capitalize(side);
                order = {
                    'pair': _this183.marketId(symbol),
                    'amount': amount
                };

                if (type == 'market') {
                    method += 'Market';
                } else {
                    order['price'] = price;
                }method += 'Pair';
                return _this183[method](_this183.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this184 = this;

            return _this184.privatePostCancelOrder({ 'id': id });
        },
        parseOrderStatus: function parseOrderStatus(order) {
            if (order['status'] == 'Queue' || order['status'] == 'Open') return 'open';
            if (order['status'] == 'Finished') return 'closed';
            return order['status'];
        },
        fetchOrderStatus: function fetchOrderStatus(id) {
            var symbol,
                response,
                _this185 = this,
                _arguments164 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments164.length > 1 && _arguments164[1] !== undefined ? _arguments164[1] : undefined;
                return _this185.loadMarkets();
            }).then(function () {
                return _this185.privatePostOrderStatus({ 'id': id });
            }).then(function (_resp) {
                response = _resp;

                return _this185.parseOrderStatus(response);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var symbol,
                params,
                market,
                pair,
                request,
                response,
                result,
                _this186 = this,
                _arguments165 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments165.length > 0 && _arguments165[0] !== undefined ? _arguments165[0] : undefined;
                params = _arguments165.length > 1 && _arguments165[1] !== undefined ? _arguments165[1] : {};
                return _this186.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this186.market(symbol);
                }pair = market ? market['id'] : 'all';
                request = _this186.extend({ 'pair': pair }, params);
                return _this186.privatePostOpenOrdersPair(request);
            }).then(function (_resp) {
                response = _resp;
                result = _this186.parseTrades(response, market);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var _this187 = this;

            return Promise.resolve().then(function () {
                throw new NotSupported(_this187.id + ' fetchOrder is not implemented yet');
                return _this187.loadMarkets();
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _this188 = this,
                _arguments167 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments167.length > 1 && _arguments167[1] !== undefined ? _arguments167[1] : 'public';
                method = _arguments167.length > 2 && _arguments167[2] !== undefined ? _arguments167[2] : 'GET';
                params = _arguments167.length > 3 && _arguments167[3] !== undefined ? _arguments167[3] : {};
                headers = _arguments167.length > 4 && _arguments167[4] !== undefined ? _arguments167[4] : undefined;
                body = _arguments167.length > 5 && _arguments167[5] !== undefined ? _arguments167[5] : undefined;
                url = _this188.urls['api'] + '/' + _this188.version + '/' + _this188.implodeParams(path, params);
                query = _this188.omit(params, _this188.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this188.urlencode(query);
                    }
                } else {
                    if (!_this188.uid) {
                        throw new AuthenticationError(_this188.id + ' requires `' + _this188.id + '.uid` property for authentication');
                    }nonce = _this188.nonce().toString();
                    auth = nonce + _this188.uid + _this188.apiKey;
                    signature = _this188.encode(_this188.hmac(_this188.encode(auth), _this188.encode(_this188.secret)));

                    query = _this188.extend({
                        'key': _this188.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query);
                    body = _this188.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this188.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this188.id + ' ' + _this188.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bittrex = {

        'id': 'bittrex',
        'name': 'Bittrex',
        'countries': 'US',
        'version': 'v1.1',
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'hasFetchOrders': true,
        'hasFetchOpenOrders': true,
        'timeframes': {
            '1m': 'oneMin',
            '5m': 'fiveMin',
            '30m': 'thirtyMin',
            '1h': 'hour',
            '1d': 'day'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
            'api': {
                'public': 'https://bittrex.com/api',
                'account': 'https://bittrex.com/api',
                'market': 'https://bittrex.com/api',
                'v2': 'https://bittrex.com/api/v2.0/pub'
            },
            'www': 'https://bittrex.com',
            'doc': ['https://bittrex.com/Home/Api', 'https://www.npmjs.org/package/node.bittrex.api']
        },
        'api': {
            'v2': {
                'get': ['currencies/GetBTCPrice', 'market/GetTicks', 'market/GetLatestTick', 'Markets/GetMarketSummaries', 'market/GetLatestTick']
            },
            'public': {
                'get': ['currencies', 'markethistory', 'markets', 'marketsummaries', 'marketsummary', 'orderbook', 'ticker']
            },
            'account': {
                'get': ['balance', 'balances', 'depositaddress', 'deposithistory', 'order', 'orderhistory', 'withdrawalhistory', 'withdraw']
            },
            'market': {
                'get': ['buylimit', 'buymarket', 'cancel', 'openorders', 'selllimit', 'sellmarket']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this189 = this;

            return Promise.resolve().then(function () {
                return _this189.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];

                    base = _this189.commonCurrencyCode(base);
                    quote = _this189.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                indexed,
                c,
                currency,
                account,
                balance,
                _this190 = this,
                _arguments169 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments169.length > 0 && _arguments169[0] !== undefined ? _arguments169[0] : {};
                return _this190.loadMarkets();
            }).then(function () {
                return _this190.accountGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                indexed = _this190.indexBy(balances, 'Currency');

                for (c = 0; c < _this190.currencies.length; c++) {
                    currency = _this190.currencies[c];
                    account = _this190.account();

                    if (currency in indexed) {
                        balance = indexed[currency];

                        account['free'] = balance['Available'];
                        account['used'] = balance['Balance'] - balance['Available'];
                        account['total'] = balance['Balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                _this191 = this,
                _arguments170 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments170.length > 1 && _arguments170[1] !== undefined ? _arguments170[1] : {};
                return _this191.loadMarkets();
            }).then(function () {
                return _this191.publicGetOrderbook(_this191.extend({
                    'market': _this191.marketId(market),
                    'type': 'both',
                    'depth': 50
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this191.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['TimeStamp']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['Bid']),
                'ask': parseFloat(ticker['Ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['Last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _id$split,
                _id$split2,
                quote,
                base,
                _this192 = this;

            return Promise.resolve().then(function () {
                return _this192.loadMarkets();
            }).then(function () {
                return _this192.publicGetMarketsummaries();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['MarketName'];
                    market = undefined;
                    symbol = id;

                    if (id in _this192.markets_by_id) {
                        market = _this192.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        _id$split = id.split('-');
                        _id$split2 = _slicedToArray(_id$split, 2);
                        quote = _id$split2[0];
                        base = _id$split2[1];

                        base = _this192.commonCurrencyCode(base);
                        quote = _this192.commonCurrencyCode(quote);
                        symbol = base + '/' + quote;
                    }
                    result[symbol] = _this192.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this193 = this;

            return Promise.resolve().then(function () {
                return _this193.loadMarkets();
            }).then(function () {
                market = _this193.market(symbol);
                return _this193.publicGetMarketsummary({
                    'market': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][0];

                return _this193.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['TimeStamp']);
            var side = undefined;
            if (trade['OrderType'] == 'BUY') {
                side = 'buy';
            } else if (trade['OrderType'] == 'SELL') {
                side = 'sell';
            }
            var type = undefined;
            var id = undefined;
            if ('Id' in trade) id = trade['Id'].toString();
            return {
                'id': id,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['Price'],
                'amount': trade['Quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this194 = this,
                _arguments173 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments173.length > 1 && _arguments173[1] !== undefined ? _arguments173[1] : {};
                return _this194.loadMarkets();
            }).then(function () {
                market = _this194.market(symbol);
                return _this194.publicGetMarkethistory(_this194.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this194.parseTrades(response['result'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1d';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var timestamp = this.parse8601(ohlcv['T']);
            return [timestamp, ohlcv['O'], ohlcv['H'], ohlcv['L'], ohlcv['C'], ohlcv['V']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this195 = this,
                _arguments174 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments174.length > 1 && _arguments174[1] !== undefined ? _arguments174[1] : '1m';
                since = _arguments174.length > 2 && _arguments174[2] !== undefined ? _arguments174[2] : undefined;
                limit = _arguments174.length > 3 && _arguments174[3] !== undefined ? _arguments174[3] : undefined;
                params = _arguments174.length > 4 && _arguments174[4] !== undefined ? _arguments174[4] : {};
                return _this195.loadMarkets();
            }).then(function () {
                market = _this195.market(symbol);
                request = {
                    'tickInterval': _this195.timeframes[timeframe],
                    'marketName': market['id']
                };
                return _this195.v2GetMarketGetTicks(_this195.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this195.parseOHLCVs(response['result'], market, timeframe, since, limit);
            });
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                request,
                market,
                response,
                _this196 = this,
                _arguments175 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments175.length > 0 && _arguments175[0] !== undefined ? _arguments175[0] : undefined;
                params = _arguments175.length > 1 && _arguments175[1] !== undefined ? _arguments175[1] : {};
                return _this196.loadMarkets();
            }).then(function () {
                request = {};
                market = undefined;

                if (symbol) {
                    market = _this196.market(symbol);
                    request['market'] = market['id'];
                }
                return _this196.marketGetOpenorders(_this196.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this196.parseOrders(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                result,
                _this197 = this,
                _arguments176 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments176.length > 4 && _arguments176[4] !== undefined ? _arguments176[4] : undefined;
                params = _arguments176.length > 5 && _arguments176[5] !== undefined ? _arguments176[5] : {};
                return _this197.loadMarkets();
            }).then(function () {
                method = 'marketGet' + _this197.capitalize(side) + type;
                order = {
                    'market': _this197.marketId(symbol),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this197[method](_this197.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response,
                    'id': response['result']['uuid']
                };

                return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this198 = this;

            return Promise.resolve().then(function () {
                return _this198.loadMarkets();
            }).then(function () {
                return _this198.marketGetCancel({ 'uuid': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = undefined;
            if ('OrderType' in order) side = order['OrderType'] == 'LIMIT_BUY' ? 'buy' : 'sell';
            if ('Type' in order) side = order['Type'] == 'LIMIT_BUY' ? 'buy' : 'sell';
            var status = 'open';
            if (order['Closed']) {
                status = 'closed';
            } else if (order['CancelInitiated']) {
                status = 'canceled';
            }
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var exchange = order['Exchange'];
                if (exchange in this.markets_by_id) {
                    market = this.markets_by_id[exchange];
                    symbol = market['symbol'];
                }
            }
            var timestamp = undefined;
            if ('Opened' in order) timestamp = this.parse8601(order['Opened']);
            if ('TimeStamp' in order) timestamp = this.parse8601(order['TimeStamp']);
            var amount = order['Quantity'];
            var remaining = order['QuantityRemaining'];
            var filled = amount - remaining;
            var result = {
                'info': order,
                'id': order['OrderUuid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': 'limit',
                'side': side,
                'price': order['Price'],
                'amount': amount,
                'filled': filled,
                'remaining': remaining,
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                _this199 = this;

            return Promise.resolve().then(function () {
                return _this199.loadMarkets();
            }).then(function () {
                return _this199.accountGetOrder({ 'uuid': id });
            }).then(function (_resp) {
                response = _resp;

                return _this199.parseOrder(response['result']);
            });
        },
        fetchOrders: function fetchOrders() {
            var params,
                response,
                _this200 = this,
                _arguments179 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments179.length > 0 && _arguments179[0] !== undefined ? _arguments179[0] : {};
                return _this200.loadMarkets();
            }).then(function () {
                return _this200.accountGetOrderhistory(params);
            }).then(function (_resp) {
                response = _resp;

                return _this200.parseOrders(response['result']);
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this201 = this,
                _arguments180 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments180.length > 3 && _arguments180[3] !== undefined ? _arguments180[3] : {};
                return _this201.loadMarkets();
            }).then(function () {
                return _this201.accountGetWithdraw(_this201.extend({
                    'currency': currency,
                    'quantity': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                signature,
                response,
                _test5,
                _this202 = this,
                _arguments181 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments181.length > 1 && _arguments181[1] !== undefined ? _arguments181[1] : 'public';
                method = _arguments181.length > 2 && _arguments181[2] !== undefined ? _arguments181[2] : 'GET';
                params = _arguments181.length > 3 && _arguments181[3] !== undefined ? _arguments181[3] : {};
                headers = _arguments181.length > 4 && _arguments181[4] !== undefined ? _arguments181[4] : undefined;
                body = _arguments181.length > 5 && _arguments181[5] !== undefined ? _arguments181[5] : undefined;
                url = _this202.urls['api'][api] + '/';

                if (api != 'v2') {
                    url += _this202.version + '/';
                }if (api == 'public') {
                    url += api + '/' + method.toLowerCase() + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this202.urlencode(params);
                    }
                } else {
                    if (api == 'v2') {
                        url += path;
                        if (Object.keys(params).length) {
                            url += '?' + _this202.urlencode(params);
                        }
                    } else {
                        nonce = _this202.nonce();

                        url += api + '/';
                        if (api == 'account' && path != 'withdraw' || path == 'openorders') {
                            url += method.toLowerCase();
                        }url += path + '?' + _this202.urlencode(_this202.extend({
                            'nonce': nonce,
                            'apikey': _this202.apiKey
                        }, params));
                        signature = _this202.hmac(_this202.encode(url), _this202.encode(_this202.secret), 'sha512');

                        headers = { 'apisign': signature };
                    }
                }return _this202.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test5 = 'success' in response;

                if (_test5 && response['success']) {
                    return response;
                } else {
                    if ('message' in response) {
                        if (response['message'] == "INSUFFICIENT_FUNDS") {
                            throw new InsufficientFunds(_this202.id + ' ' + _this202.json(response));
                        }
                    }throw new ExchangeError(_this202.id + ' ' + _this202.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var blinktrade = {

        'id': 'blinktrade',
        'name': 'BlinkTrade',
        'countries': ['US', 'VE', 'VN', 'BR', 'PK', 'CL'],
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990968-75d9c884-6470-11e7-9073-46756c8e7e8c.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://blinktrade.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'api': {
            'public': {
                'get': ['{currency}/ticker', // ?crypto_currency=BTC
                '{currency}/orderbook', // ?crypto_currency=BTC
                '{currency}/trades']
            },
            'private': {
                'post': ['D', // order
                'F', // cancel order
                'U2', // balance
                'U4', // my orders
                'U6', // withdraw
                'U18', // deposit
                'U24', // confirm withdrawal
                'U26', // list withdrawals
                'U30', // list deposits
                'U34', // ledger
                'U70']
            }
        },
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                _this203 = this,
                _arguments182 = arguments;

            params = _arguments182.length > 0 && _arguments182[0] !== undefined ? _arguments182[0] : {};

            return _this203.privatePostU2({
                'BalanceReqID': _this203.nonce()
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this204 = this,
                _arguments183 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments183.length > 1 && _arguments183[1] !== undefined ? _arguments183[1] : {};
                market = _this204.market(symbol);
                return _this204.publicGetCurrencyOrderbook(_this204.extend({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this204.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                lowercaseQuote,
                quoteVolume,
                _this205 = this;

            return Promise.resolve().then(function () {
                market = _this205.market(symbol);
                return _this205.publicGetCurrencyTicker({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this205.milliseconds();
                lowercaseQuote = market['quote'].toLowerCase();
                quoteVolume = 'vol_' + lowercaseQuote;

                return {
                    'timestamp': timestamp,
                    'datetime': _this205.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this206 = this,
                _arguments185 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments185.length > 1 && _arguments185[1] !== undefined ? _arguments185[1] : {};
                market = _this206.market(symbol);
                return _this206.publicGetCurrencyTrades(_this206.extend({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this206.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                indexed,
                execution,
                _this207 = this,
                _arguments186 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments186.length > 4 && _arguments186[4] !== undefined ? _arguments186[4] : undefined;
                params = _arguments186.length > 5 && _arguments186[5] !== undefined ? _arguments186[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this207.id + ' allows limit orders only');
                }market = _this207.market(symbol);
                order = {
                    'ClOrdID': _this207.nonce(),
                    'Symbol': market['id'],
                    'Side': _this207.capitalize(side),
                    'OrdType': '2',
                    'Price': price,
                    'OrderQty': amount,
                    'BrokerID': market['brokerId']
                };
                return _this207.privatePostD(_this207.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                indexed = _this207.indexBy(response['Responses'], 'MsgType');
                execution = indexed['8'];

                return {
                    'info': response,
                    'id': execution['OrderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this208 = this,
                _arguments187 = arguments;

            params = _arguments187.length > 1 && _arguments187[1] !== undefined ? _arguments187[1] : {};

            return _this208.privatePostF(_this208.extend({
                'ClOrdID': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                response,
                _this209 = this,
                _arguments188 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments188.length > 1 && _arguments188[1] !== undefined ? _arguments188[1] : 'public';
                method = _arguments188.length > 2 && _arguments188[2] !== undefined ? _arguments188[2] : 'GET';
                params = _arguments188.length > 3 && _arguments188[3] !== undefined ? _arguments188[3] : {};
                headers = _arguments188.length > 4 && _arguments188[4] !== undefined ? _arguments188[4] : undefined;
                body = _arguments188.length > 5 && _arguments188[5] !== undefined ? _arguments188[5] : undefined;
                url = _this209.urls['api'][api] + '/' + _this209.version + '/' + _this209.implodeParams(path, params);
                query = _this209.omit(params, _this209.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this209.urlencode(query);
                    }
                } else {
                    nonce = _this209.nonce().toString();
                    request = _this209.extend({ 'MsgType': path }, query);

                    body = _this209.json(request);
                    headers = {
                        'APIKey': _this209.apiKey,
                        'Nonce': nonce,
                        'Signature': _this209.hmac(_this209.encode(nonce), _this209.encode(_this209.secret)),
                        'Content-Type': 'application/json'
                    };
                }
                return _this209.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('Status' in response) {
                    if (response['Status'] != 200) {
                        throw new ExchangeError(_this209.id + ' ' + _this209.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bl3p = {

        'id': 'bl3p',
        'name': 'BL3P',
        'countries': ['NL', 'EU'], // Netherlands, EU
        'rateLimit': 1000,
        'version': '1',
        'comment': 'An exchange market by BitonicNL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
            'api': 'https://api.bl3p.eu',
            'www': ['https://bl3p.eu', 'https://bitonic.nl'],
            'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']
        },
        'api': {
            'public': {
                'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']
            },
            'private': {
                'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this210 = this,
                _arguments189 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments189.length > 0 && _arguments189[0] !== undefined ? _arguments189[0] : {};
                return _this210.privatePostGENMKTMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['wallets'];
                result = { 'info': data };

                for (c = 0; c < _this210.currencies.length; c++) {
                    currency = _this210.currencies[c];
                    account = _this210.account();

                    if (currency in balance) {
                        if ('available' in balance[currency]) {
                            account['free'] = parseFloat(balance[currency]['available']['value']);
                        }
                    }
                    if (currency in balance) {
                        if ('balance' in balance[currency]) {
                            account['total'] = parseFloat(balance[currency]['balance']['value']);
                        }
                    }
                    if (account['total']) {
                        if (account['free']) {
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        parseBidAsk: function parseBidAsk(bidask) {
            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            return [bidask['price_int'] / 100000.0, bidask['amount_int'] / 100000000.0];
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this211 = this,
                _arguments190 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments190.length > 1 && _arguments190[1] !== undefined ? _arguments190[1] : {};
                market = _this211.market(symbol);
                return _this211.publicGetMarketOrderbook(_this211.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];

                return _this211.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this212 = this;

            return Promise.resolve().then(function () {
                return _this212.publicGetMarketTicker({
                    'market': _this212.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this212.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']['24h']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            return {
                'id': trade['trade_id'],
                'info': trade,
                'timestamp': trade['date'],
                'datetime': this.iso8601(trade['date']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price_int'] / 100000.0,
                'amount': trade['amount_int'] / 100000000.0
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                result,
                _this213 = this,
                _arguments192 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments192.length > 1 && _arguments192[1] !== undefined ? _arguments192[1] : {};
                market = _this213.market(symbol);
                return _this213.publicGetMarketTrades(_this213.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                result = _this213.parseTrades(response['data']['trades'], market);

                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this214 = this,
                _arguments193 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments193.length > 4 && _arguments193[4] !== undefined ? _arguments193[4] : undefined;
                params = _arguments193.length > 5 && _arguments193[5] !== undefined ? _arguments193[5] : {};
                market = _this214.market(symbol);
                order = {
                    'market': market['id'],
                    'amount_int': amount,
                    'fee_currency': market['quote'],
                    'type': side == 'buy' ? 'bid' : 'ask'
                };

                if (type == 'limit') {
                    order['price_int'] = price;
                }return _this214.privatePostMarketMoneyOrderAdd(_this214.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this215 = this;

            return _this215.privatePostMarketMoneyOrderCancel({ 'order_id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var request = this.implodeParams(path, params);
            var url = this.urls['api'] + '/' + this.version + '/' + request;
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({ 'nonce': nonce }, query));
                var secret = this.base64ToBinary(this.secret);
                var auth = request + "\0" + body;
                var signature = this.hmac(this.encode(auth), secret, 'sha512', 'base64');
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Rest-Key': this.apiKey,
                    'Rest-Sign': signature
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bleutrade = extend(bittrex, {

        'id': 'bleutrade',
        'name': 'Bleutrade',
        'countries': 'BR', // Brazil
        'rateLimit': 1000,
        'version': 'v2',
        'hasFetchTickers': true,
        'hasFetchOHLCV': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg',
            'api': {
                'public': 'https://bleutrade.com/api',
                'account': 'https://bleutrade.com/api',
                'market': 'https://bleutrade.com/api'
            },
            'www': 'https://bleutrade.com',
            'doc': 'https://bleutrade.com/help/API'
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                _this216 = this,
                _arguments195 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments195.length > 1 && _arguments195[1] !== undefined ? _arguments195[1] : {};
                return _this216.loadMarkets();
            }).then(function () {
                return _this216.publicGetOrderbook(_this216.extend({
                    'market': _this216.marketId(market),
                    'type': 'ALL',
                    'depth': 50
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this216.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
            });
        }
    });

    //-----------------------------------------------------------------------------

    var btcchina = {

        'id': 'btcchina',
        'name': 'BTCChina',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',
            'api': {
                'plus': 'https://plus-api.btcchina.com/market',
                'public': 'https://data.btcchina.com/data',
                'private': 'https://api.btcchina.com/api_trade_v1.php'
            },
            'www': 'https://www.btcchina.com',
            'doc': 'https://www.btcchina.com/apidocs'
        },
        'api': {
            'plus': {
                'get': ['orderbook', 'ticker', 'trade']
            },
            'public': {
                'get': ['historydata', 'orderbook', 'ticker', 'trades']
            },
            'private': {
                'post': ['BuyIcebergOrder', 'BuyOrder', 'BuyOrder2', 'BuyStopOrder', 'CancelIcebergOrder', 'CancelOrder', 'CancelStopOrder', 'GetAccountInfo', 'getArchivedOrder', 'getArchivedOrders', 'GetDeposits', 'GetIcebergOrder', 'GetIcebergOrders', 'GetMarketDepth', 'GetMarketDepth2', 'GetOrder', 'GetOrders', 'GetStopOrder', 'GetStopOrders', 'GetTransactions', 'GetWithdrawal', 'GetWithdrawals', 'RequestWithdrawal', 'SellIcebergOrder', 'SellOrder', 'SellOrder2', 'SellStopOrder']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btccny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'api': 'public', 'plus': false },
            'LTC/CNY': { 'id': 'ltccny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'api': 'public', 'plus': false },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'api': 'public', 'plus': false },
            'BCH/CNY': { 'id': 'bcccny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY', 'api': 'plus', 'plus': true },
            'ETH/CNY': { 'id': 'ethcny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY', 'api': 'plus', 'plus': true }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                key,
                market,
                parts,
                id,
                base,
                quote,
                symbol,
                _this217 = this;

            return Promise.resolve().then(function () {
                return _this217.publicGetTicker({
                    'market': 'all'
                });
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    key = keys[p];
                    market = markets[key];
                    parts = key.split('_');
                    id = parts[1];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this218 = this,
                _arguments197 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments197.length > 0 && _arguments197[0] !== undefined ? _arguments197[0] : {};
                return _this218.loadMarkets();
            }).then(function () {
                return _this218.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };


                for (c = 0; c < _this218.currencies.length; c++) {
                    currency = _this218.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this218.account();

                    if (lowercase in balances['balance']) {
                        account['total'] = parseFloat(balances['balance'][lowercase]['amount']);
                    }if (lowercase in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][lowercase]['amount']);
                    }account['free'] = account['total'] - account['used'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createMarketRequest: function createMarketRequest(market) {
            var request = {};
            var field = market['plus'] ? 'symbol' : 'market';
            request[field] = market['id'];
            return request;
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                method,
                request,
                orderbook,
                timestamp,
                result,
                _this219 = this,
                _arguments198 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments198.length > 1 && _arguments198[1] !== undefined ? _arguments198[1] : {};
                return _this219.loadMarkets();
            }).then(function () {
                market = _this219.market(symbol);
                method = market['api'] + 'GetOrderbook';
                request = _this219.createMarketRequest(market);
                return _this219[method](_this219.extend(request, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['date'] * 1000;
                result = _this219.parseOrderBook(orderbook, timestamp);

                result['asks'] = _this219.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['date'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': parseFloat(ticker['vwap']),
                'open': parseFloat(ticker['open']),
                'close': parseFloat(ticker['prev_close']),
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        parseTickerPlus: function parseTickerPlus(ticker, market) {
            var timestamp = ticker['Timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['BidPrice']),
                'ask': parseFloat(ticker['AskPrice']),
                'vwap': undefined,
                'open': parseFloat(ticker['Open']),
                'close': parseFloat(ticker['PrevCls']),
                'first': undefined,
                'last': parseFloat(ticker['Last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['Volume24H']),
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                method,
                request,
                tickers,
                ticker,
                _this220 = this;

            return Promise.resolve().then(function () {
                return _this220.loadMarkets();
            }).then(function () {
                market = _this220.market(symbol);
                method = market['api'] + 'GetTicker';
                request = _this220.createMarketRequest(market);
                return _this220[method](request);
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers['ticker'];

                if (market['plus']) {
                    return _this220.parseTickerPlus(ticker, market);
                } else {
                    return _this220.parseTicker(ticker, market);
                }
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        parseTradePlus: function parseTradePlus(trade, market) {
            var timestamp = this.parse8601(trade['timestamp']);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'].toLowerCase(),
                'price': trade['price'],
                'amount': trade['size']
            };
        },
        parseTradesPlus: function parseTradesPlus(trades) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var result = [];
            for (var i = 0; i < trades.length; i++) {
                result.push(this.parseTradePlus(trades[i], market));
            }
            return result;
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                method,
                request,
                now,
                response,
                _this221 = this,
                _arguments200 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments200.length > 1 && _arguments200[1] !== undefined ? _arguments200[1] : {};
                return _this221.loadMarkets();
            }).then(function () {
                market = _this221.market(symbol);
                method = market['api'] + 'GetTrade';
                request = _this221.createMarketRequest(market);

                if (market['plus']) {
                    now = _this221.milliseconds();

                    request['start_time'] = now - 86400 * 1000;
                    request['end_time'] = now;
                } else {
                    method += 's'; // trades vs trade
                }
                return _this221[method](_this221.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                if (market['plus']) {
                    return _this221.parseTradesPlus(response['trades'], market);
                } else {
                    return _this221.parseTrades(response, market);
                }
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                id,
                response,
                _this222 = this,
                _arguments201 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments201.length > 4 && _arguments201[4] !== undefined ? _arguments201[4] : undefined;
                params = _arguments201.length > 5 && _arguments201[5] !== undefined ? _arguments201[5] : {};
                return _this222.loadMarkets();
            }).then(function () {
                market = _this222.market(symbol);
                method = 'privatePost' + _this222.capitalize(side) + 'Order2';
                order = {};
                id = market['id'].toUpperCase();

                if (type == 'market') {
                    order['params'] = [undefined, amount, id];
                } else {
                    order['params'] = [price, amount, id];
                }
                return _this222[method](_this222.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                market,
                _this223 = this,
                _arguments202 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments202.length > 1 && _arguments202[1] !== undefined ? _arguments202[1] : {};
                return _this223.loadMarkets();
            }).then(function () {
                market = params['market']; // TODO fixme

                return _this223.privatePostCancelOrder(_this223.extend({
                    'params': [id, market]
                }, params));
            });
        },
        nonce: function nonce() {
            return this.microseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api] + '/' + path;
            if (api == 'private') {
                if (!this.apiKey) throw new AuthenticationError(this.id + ' requires `' + this.id + '.apiKey` property for authentication');
                if (!this.secret) throw new AuthenticationError(this.id + ' requires `' + this.id + '.secret` property for authentication');
                var p = [];
                if ('params' in params) p = params['params'];
                var nonce = this.nonce();
                var request = {
                    'method': path,
                    'id': nonce,
                    'params': p
                };
                p = p.join(',');
                body = this.json(request);
                var query = 'tonce=' + nonce + '&accesskey=' + this.apiKey + '&requestmethod=' + method.toLowerCase() + '&id=' + nonce + '&method=' + path + '&params=' + p;
                var signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
                var auth = this.apiKey + ':' + signature;
                headers = {
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + this.stringToBase64(auth),
                    'Json-Rpc-Tonce': nonce
                };
            } else {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcmarkets = {

        'id': 'btcmarkets',
        'name': 'BTC Markets',
        'countries': 'AU', // Australia
        'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg',
            'api': 'https://api.btcmarkets.net',
            'www': 'https://btcmarkets.net/',
            'doc': 'https://github.com/BTCMarkets/API'
        },
        'api': {
            'public': {
                'get': ['market/{id}/tick', 'market/{id}/orderbook', 'market/{id}/trades']
            },
            'private': {
                'get': ['account/balance', 'account/{id}/tradingfee'],
                'post': ['fundtransfer/withdrawCrypto', 'fundtransfer/withdrawEFT', 'order/create', 'order/cancel', 'order/history', 'order/open', 'order/trade/history', 'order/createBatch', // they promise it's coming soon...
                'order/detail']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC/AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC/AUD', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'ETH/AUD': { 'id': 'ETH/AUD', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD' },
            'ETC/AUD': { 'id': 'ETC/AUD', 'symbol': 'ETC/AUD', 'base': 'ETC', 'quote': 'AUD' },
            'XRP/AUD': { 'id': 'XRP/AUD', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD' },
            'BCH/AUD': { 'id': 'BCH/AUD', 'symbol': 'BCH/AUD', 'base': 'BCH', 'quote': 'AUD' },
            'LTC/BTC': { 'id': 'LTC/BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/BTC': { 'id': 'ETH/BTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'ETC/BTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRP/BTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'BCH/BTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                multiplier,
                free,
                used,
                account,
                _this224 = this,
                _arguments203 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments203.length > 0 && _arguments203[0] !== undefined ? _arguments203[0] : {};
                return _this224.loadMarkets();
            }).then(function () {
                return _this224.privateGetAccountBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    multiplier = 100000000;
                    free = parseFloat(balance['balance'] / multiplier);
                    used = parseFloat(balance['pendingFunds'] / multiplier);
                    account = {
                        'free': free,
                        'used': used,
                        'total': _this224.sum(free, used)
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                _this225 = this,
                _arguments204 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments204.length > 1 && _arguments204[1] !== undefined ? _arguments204[1] : {};
                return _this225.loadMarkets();
            }).then(function () {
                market = _this225.market(symbol);
                return _this225.publicGetMarketIdOrderbook(_this225.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;

                return _this225.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bestBid']),
                'ask': parseFloat(ticker['bestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume24h']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this226 = this;

            return Promise.resolve().then(function () {
                return _this226.loadMarkets();
            }).then(function () {
                market = _this226.market(symbol);
                return _this226.publicGetMarketIdTick({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this226.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this227 = this,
                _arguments206 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments206.length > 1 && _arguments206[1] !== undefined ? _arguments206[1] : {};
                return _this227.loadMarkets();
            }).then(function () {
                market = _this227.market(symbol);
                return _this227.publicGetMarketIdTrades(_this227.extend({
                    // 'since': 59868345231,
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this227.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                multiplier,
                orderSide,
                order,
                response,
                _this228 = this,
                _arguments207 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments207.length > 4 && _arguments207[4] !== undefined ? _arguments207[4] : undefined;
                params = _arguments207.length > 5 && _arguments207[5] !== undefined ? _arguments207[5] : {};
                return _this228.loadMarkets();
            }).then(function () {
                market = _this228.market(symbol);
                multiplier = 100000000; // for price and volume
                // does BTC Markets support market orders at all?

                orderSide = side == 'buy' ? 'Bid' : 'Ask';
                order = _this228.ordered({
                    'currency': market['quote'],
                    'instrument': market['base'],
                    'price': price * multiplier,
                    'volume': amount * multiplier,
                    'orderSide': orderSide,
                    'ordertype': _this228.capitalize(type),
                    'clientRequestId': _this228.nonce().toString()
                });
                return _this228.privatePostOrderCreate(_this228.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrders: function cancelOrders(ids) {
            var _this229 = this;

            return Promise.resolve().then(function () {
                return _this229.loadMarkets();
            }).then(function () {
                return _this229.privatePostOrderCancel({ 'order_ids': ids });
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this230 = this;

            return Promise.resolve().then(function () {
                return _this230.loadMarkets();
            }).then(function () {
                return _this230.cancelOrders([id]);
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                uri,
                url,
                query,
                nonce,
                auth,
                secret,
                signature,
                response,
                _test6,
                _this231 = this,
                _arguments210 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments210.length > 1 && _arguments210[1] !== undefined ? _arguments210[1] : 'public';
                method = _arguments210.length > 2 && _arguments210[2] !== undefined ? _arguments210[2] : 'GET';
                params = _arguments210.length > 3 && _arguments210[3] !== undefined ? _arguments210[3] : {};
                headers = _arguments210.length > 4 && _arguments210[4] !== undefined ? _arguments210[4] : undefined;
                body = _arguments210.length > 5 && _arguments210[5] !== undefined ? _arguments210[5] : undefined;
                uri = '/' + _this231.implodeParams(path, params);
                url = _this231.urls['api'] + uri;
                query = _this231.omit(params, _this231.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this231.urlencode(params);
                    }
                } else {
                    nonce = _this231.nonce().toString();
                    auth = uri + "\n" + nonce + "\n";

                    headers = {
                        'Content-Type': 'application/json',
                        'apikey': _this231.apiKey,
                        'timestamp': nonce
                    };
                    if (method == 'POST') {
                        body = _this231.urlencode(query);
                        headers['Content-Length'] = body.length;
                        auth += body;
                    }
                    secret = _this231.base64ToBinary(_this231.secret);
                    signature = _this231.hmac(_this231.encode(auth), secret, 'sha512', 'base64');

                    headers['signature'] = signature;
                }
                return _this231.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test6 = api == 'private';

                if (_test6 && 'success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this231.id + ' ' + _this231.json(response));
                    }
                }
                if (_test6) {
                    return response;
                } else {
                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var btctrader = {

        'id': 'btctrader',
        'name': 'BTCTrader',
        'countries': ['TR', 'GR', 'PH'], // Turkey, Greece, Philippines
        'rateLimit': 1000,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1d': '1d'
        },
        'comment': 'base API for BTCExchange, BTCTurk',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992404-cda1e386-649c-11e7-8dc1-40bbd2897768.jpg',
            'api': 'https://www.btctrader.com/api',
            'www': 'https://www.btctrader.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'api': {
            'public': {
                'get': ['ohlcdata', // ?last=COUNT
                'orderbook', 'ticker', 'trades']
            },
            'private': {
                'get': ['balance', 'openOrders', 'userTransactions'],
                'post': ['buy', 'cancelOrder', 'sell']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                base,
                quote,
                symbol,
                market,
                _this232 = this,
                _arguments211 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments211.length > 0 && _arguments211[0] !== undefined ? _arguments211[0] : {};
                return _this232.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                base = {
                    'free': response['bitcoin_available'],
                    'used': response['bitcoin_reserved'],
                    'total': response['bitcoin_balance']
                };
                quote = {
                    'free': response['money_available'],
                    'used': response['money_reserved'],
                    'total': response['money_balance']
                };
                symbol = _this232.symbols[0];
                market = _this232.markets[symbol];

                result[market['base']] = base;
                result[market['quote']] = quote;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this233 = this,
                _arguments212 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments212.length > 1 && _arguments212[1] !== undefined ? _arguments212[1] : {};
                return _this233.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp'] * 1000);

                return _this233.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this234 = this;

            return Promise.resolve().then(function () {
                return _this234.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp'] * 1000);

                return {
                    'timestamp': timestamp,
                    'datetime': _this234.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                maxCount,
                response,
                _this235 = this,
                _arguments214 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments214.length > 1 && _arguments214[1] !== undefined ? _arguments214[1] : {};
                market = _this235.market(symbol);
                maxCount = 50;
                return _this235.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this235.parseTrades(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1d';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var timestamp = this.parse8601(ohlcv['Date']);
            return [timestamp, ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this236 = this,
                _arguments215 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments215.length > 1 && _arguments215[1] !== undefined ? _arguments215[1] : '1d';
                since = _arguments215.length > 2 && _arguments215[2] !== undefined ? _arguments215[2] : undefined;
                limit = _arguments215.length > 3 && _arguments215[3] !== undefined ? _arguments215[3] : undefined;
                params = _arguments215.length > 4 && _arguments215[4] !== undefined ? _arguments215[4] : {};
                return _this236.loadMarkets();
            }).then(function () {
                market = _this236.market(symbol);
                request = {};

                if (limit) {
                    request['last'] = limit;
                }return _this236.publicGetOhlcdata(_this236.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this236.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this237 = this,
                _arguments216 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments216.length > 4 && _arguments216[4] !== undefined ? _arguments216[4] : undefined;
                params = _arguments216.length > 5 && _arguments216[5] !== undefined ? _arguments216[5] : {};
                method = 'privatePost' + _this237.capitalize(side);
                order = {
                    'Type': side == 'buy' ? 'BuyBtc' : 'SelBtc',
                    'IsMarketOrder': type == 'market' ? 1 : 0
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['Total'] = amount;
                    } else {
                        order['Amount'] = amount;
                    }
                } else {
                    order['Price'] = price;
                    order['Amount'] = amount;
                }
                return _this237[method](_this237.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this238 = this;

            return _this238.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (this.id == 'btctrader') throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');
            var url = this.urls['api'] + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString;
                body = this.urlencode(params);
                var secret = this.base64ToString(this.secret);
                var auth = this.apiKey + nonce;
                headers = {
                    'X-PCK': this.apiKey,
                    'X-Stamp': nonce.toString(),
                    'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcexchange = extend(btctrader, {

        'id': 'btcexchange',
        'name': 'BTCExchange',
        'countries': 'PH', // Philippines
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',
            'api': 'https://www.btcexchange.ph/api',
            'www': 'https://www.btcexchange.ph',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' }
        }
    });

    //-----------------------------------------------------------------------------

    var btctradeua = {

        'id': 'btctradeua',
        'name': 'BTC Trade UA',
        'countries': 'UA', // Ukraine,
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
            'api': 'https://btc-trade.com.ua/api',
            'www': 'https://btc-trade.com.ua',
            'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'
        },
        'api': {
            'public': {
                'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']
            },
            'private': {
                'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']
            }
        },
        'markets': {
            'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH' },
            'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },
            'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },
            'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },
            'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },
            'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },
            'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },
            'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },
            'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        signIn: function signIn() {
            return this.privatePostAuth();
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                accounts,
                b,
                account,
                currency,
                balance,
                _this239 = this,
                _arguments218 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments218.length > 0 && _arguments218[0] !== undefined ? _arguments218[0] : {};
                return _this239.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('accounts' in result) {
                    accounts = response['accounts'];

                    for (b = 0; b < accounts.length; b++) {
                        account = accounts[b];
                        currency = account['currency'];
                        balance = parseFloat(account['balance']);

                        result[currency] = {
                            'free': balance,
                            'used': 0.0,
                            'total': balance
                        };
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                bids,
                asks,
                orderbook,
                _this240 = this,
                _arguments219 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments219.length > 1 && _arguments219[1] !== undefined ? _arguments219[1] : {};
                market = _this240.market(symbol);
                return _this240.publicGetTradesBuySymbol(_this240.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                bids = _resp;
                return _this240.publicGetTradesSellSymbol(_this240.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': [],
                    'asks': []
                };

                if (bids) {
                    if ('list' in bids) {
                        orderbook['bids'] = bids['list'];
                    }
                }
                if (asks) {
                    if ('list' in asks) {
                        orderbook['asks'] = asks['list'];
                    }
                }
                return _this240.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                result,
                tickerLength,
                start,
                t,
                candle,
                last,
                _this241 = this;

            return Promise.resolve().then(function () {
                return _this241.publicGetJapanStatHighSymbol({
                    'symbol': _this241.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['trades'];
                timestamp = _this241.milliseconds();
                result = {
                    'timestamp': timestamp,
                    'datetime': _this241.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
                tickerLength = ticker.length;

                if (tickerLength > 0) {
                    start = Math.max(tickerLength - 48, 0);

                    for (t = start; t < ticker.length; t++) {
                        candle = ticker[t];

                        if (typeof result['open'] == 'undefined') {
                            result['open'] = candle[1];
                        }if (typeof result['high'] == 'undefined' || result['high'] < candle[2]) {
                            result['high'] = candle[2];
                        }if (typeof result['low'] == 'undefined' || result['low'] > candle[3]) {
                            result['low'] = candle[3];
                        }if (typeof result['quoteVolume'] == 'undefined') {
                            result['quoteVolume'] = -candle[5];
                        } else {
                            result['quoteVolume'] -= candle[5];
                        }
                    }
                    last = tickerLength - 1;

                    result['close'] = ticker[last][4];
                    result['quoteVolume'] = -1 * result['quoteVolume'];
                }
                return result;
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.milliseconds(); // until we have a better solution for python
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amnt_base'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this242 = this,
                _arguments221 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments221.length > 1 && _arguments221[1] !== undefined ? _arguments221[1] : {};
                market = _this242.market(symbol);
                return _this242.publicGetDealsSymbol(_this242.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this242.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                _this243 = this,
                _arguments222 = arguments;

            price = _arguments222.length > 4 && _arguments222[4] !== undefined ? _arguments222[4] : undefined;
            params = _arguments222.length > 5 && _arguments222[5] !== undefined ? _arguments222[5] : {};

            if (type == 'market') {
                throw new ExchangeError(_this243.id + ' allows limit orders only');
            }market = _this243.market(symbol);
            method = 'privatePost' + _this243.capitalize(side) + 'Id';
            order = {
                'count': amount,
                'currency1': market['quote'],
                'currency': market['base'],
                'price': price
            };

            return _this243[method](_this243.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this244 = this;

            return _this244.privatePostRemoveOrderId({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += this.implodeParams(path, query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'out_order_id': nonce,
                    'nonce': nonce
                }, query));
                var auth = body + this.secret;
                headers = {
                    'public-key': this.apiKey,
                    'api-sign': this.hash(this.encode(auth), 'sha256'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcturk = extend(btctrader, {

        'id': 'btcturk',
        'name': 'BTCTurk',
        'countries': 'TR', // Turkey
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',
            'api': 'https://www.btcturk.com/api',
            'www': 'https://www.btcturk.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/TRY': { 'id': 'BTC/TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' }
        }
    });

    //-----------------------------------------------------------------------------

    var btcx = {

        'id': 'btcx',
        'name': 'BTCX',
        'countries': ['IS', 'US', 'EU'],
        'rateLimit': 1500, // support in english is very poor, unable to tell rate limits
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',
            'api': 'https://btc-x.is/api',
            'www': 'https://btc-x.is',
            'doc': 'https://btc-x.is/custom/api-document.html'
        },
        'api': {
            'public': {
                'get': ['depth/{id}/{limit}', 'ticker/{id}', 'trade/{id}/{limit}']
            },
            'private': {
                'post': ['balance', 'cancel', 'history', 'order', 'redeem', 'trade', 'withdraw']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this245 = this,
                _arguments224 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments224.length > 0 && _arguments224[0] !== undefined ? _arguments224[0] : {};
                return _this245.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balances[currency],
                        'used': 0.0,
                        'total': balances[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this246 = this,
                _arguments225 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments225.length > 1 && _arguments225[1] !== undefined ? _arguments225[1] : {};
                return _this246.publicGetDepthIdLimit(_this246.extend({
                    'id': _this246.marketId(symbol),
                    'limit': 1000
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this246.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this247 = this;

            return Promise.resolve().then(function () {
                return _this247.publicGetTickerId({
                    'id': _this247.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['time'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this247.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['sell']),
                    'ask': parseFloat(ticker['buy']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            var side = trade['type'] == 'ask' ? 'sell' : 'buy';
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this248 = this,
                _arguments227 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments227.length > 1 && _arguments227[1] !== undefined ? _arguments227[1] : {};
                market = _this248.market(symbol);
                return _this248.publicGetTradeIdLimit(_this248.extend({
                    'id': market['id'],
                    'limit': 1000
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this248.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this249 = this,
                _arguments228 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments228.length > 4 && _arguments228[4] !== undefined ? _arguments228[4] : undefined;
                params = _arguments228.length > 5 && _arguments228[5] !== undefined ? _arguments228[5] : {};
                return _this249.privatePostTrade(_this249.extend({
                    'type': side.toUpperCase(),
                    'market': _this249.marketId(symbol),
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this250 = this;

            return _this250.privatePostCancel({ 'order': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this251 = this,
                _arguments230 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments230.length > 1 && _arguments230[1] !== undefined ? _arguments230[1] : 'public';
                method = _arguments230.length > 2 && _arguments230[2] !== undefined ? _arguments230[2] : 'GET';
                params = _arguments230.length > 3 && _arguments230[3] !== undefined ? _arguments230[3] : {};
                headers = _arguments230.length > 4 && _arguments230[4] !== undefined ? _arguments230[4] : undefined;
                body = _arguments230.length > 5 && _arguments230[5] !== undefined ? _arguments230[5] : undefined;
                url = _this251.urls['api'] + '/' + _this251.version + '/';

                if (api == 'public') {
                    url += _this251.implodeParams(path, params);
                } else {
                    nonce = _this251.nonce();

                    url += api;
                    body = _this251.urlencode(_this251.extend({
                        'Method': path.toUpperCase(),
                        'Nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this251.apiKey,
                        'Signature': _this251.hmac(_this251.encode(body), _this251.encode(_this251.secret), 'sha512')
                    };
                }
                return _this251.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this251.id + ' ' + _this251.json(response['error']));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bter = {
        'id': 'bter',
        'name': 'Bter',
        'countries': ['VG', 'CN'], // British Virgin Islands, China
        'version': '2',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',
            'api': {
                'public': 'https://data.bter.com/api',
                'private': 'https://api.bter.com/api'
            },
            'www': 'https://bter.com',
            'doc': 'https://bter.com/api2'
        },
        'api': {
            'public': {
                'get': ['pairs', 'marketinfo', 'marketlist', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']
            },
            'private': {
                'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this252 = this;

            return Promise.resolve().then(function () {
                return _this252.publicGetMarketlist();
            }).then(function (_resp) {
                response = _resp;
                markets = response['data'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'];
                    base = market['curr_a'];
                    quote = market['curr_b'];

                    base = _this252.commonCurrencyCode(base);
                    quote = _this252.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                code,
                account,
                _this253 = this,
                _arguments232 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments232.length > 0 && _arguments232[0] !== undefined ? _arguments232[0] : {};
                return _this253.loadMarkets();
            }).then(function () {
                return _this253.privatePostBalances();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this253.currencies.length; c++) {
                    currency = _this253.currencies[c];
                    code = _this253.commonCurrencyCode(currency);
                    account = _this253.account();

                    if ('available' in balance) {
                        if (currency in balance['available']) {
                            account['free'] = parseFloat(balance['available'][currency]);
                        }
                    }
                    if ('locked' in balance) {
                        if (currency in balance['locked']) {
                            account['used'] = parseFloat(balance['locked'][currency]);
                        }
                    }
                    account['total'] = _this253.sum(account['free'], account['used']);
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                result,
                _this254 = this,
                _arguments233 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments233.length > 1 && _arguments233[1] !== undefined ? _arguments233[1] : {};
                return _this254.loadMarkets();
            }).then(function () {
                return _this254.publicGetOrderBookId(_this254.extend({
                    'id': _this254.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this254.parseOrderBook(orderbook);

                result['asks'] = _this254.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                _id$split3,
                _id$split4,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                ticker,
                market,
                _this255 = this;

            return Promise.resolve().then(function () {
                return _this255.loadMarkets();
            }).then(function () {
                return _this255.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _id$split3 = id.split('_');
                    _id$split4 = _slicedToArray(_id$split3, 2);
                    baseId = _id$split4[0];
                    quoteId = _id$split4[1];
                    base = baseId.toUpperCase();
                    quote = quoteId.toUpperCase();

                    base = _this255.commonCurrencyCode(base);
                    quote = _this255.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;
                    ticker = tickers[id];
                    market = undefined;

                    if (symbol in _this255.markets) {
                        market = _this255.markets[symbol];
                    }if (id in _this255.markets_by_id) {
                        market = _this255.markets_by_id[id];
                    }result[symbol] = _this255.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this256 = this;

            return Promise.resolve().then(function () {
                return _this256.loadMarkets();
            }).then(function () {
                market = _this256.market(symbol);
                return _this256.publicGetTickerId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this256.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['timestamp']) * 1000;
            return {
                'id': trade['tradeID'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['rate'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this257 = this,
                _arguments236 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments236.length > 1 && _arguments236[1] !== undefined ? _arguments236[1] : {};
                market = _this257.market(symbol);
                return _this257.loadMarkets();
            }).then(function () {
                return _this257.publicGetTradeHistoryId(_this257.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this257.parseTrades(response['data'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this258 = this,
                _arguments237 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments237.length > 4 && _arguments237[4] !== undefined ? _arguments237[4] : undefined;
                params = _arguments237.length > 5 && _arguments237[5] !== undefined ? _arguments237[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this258.id + ' allows limit orders only');
                }return _this258.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this258.capitalize(side);
                order = {
                    'currencyPair': _this258.marketId(symbol),
                    'rate': price,
                    'amount': amount
                };
                return _this258[method](_this258.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderNumber']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this259 = this;

            return Promise.resolve().then(function () {
                return _this259.loadMarkets();
            }).then(function () {
                return _this259.privatePostCancelOrder({ 'orderNumber': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                prefix,
                url,
                query,
                nonce,
                request,
                signature,
                response,
                _this260 = this,
                _arguments239 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments239.length > 1 && _arguments239[1] !== undefined ? _arguments239[1] : 'public';
                method = _arguments239.length > 2 && _arguments239[2] !== undefined ? _arguments239[2] : 'GET';
                params = _arguments239.length > 3 && _arguments239[3] !== undefined ? _arguments239[3] : {};
                headers = _arguments239.length > 4 && _arguments239[4] !== undefined ? _arguments239[4] : undefined;
                body = _arguments239.length > 5 && _arguments239[5] !== undefined ? _arguments239[5] : undefined;
                prefix = api == 'private' ? api + '/' : '';
                url = _this260.urls['api'][api] + _this260.version + '/1/' + prefix + _this260.implodeParams(path, params);
                query = _this260.omit(params, _this260.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this260.urlencode(query);
                    }
                } else {
                    nonce = _this260.nonce();
                    request = { 'nonce': nonce };

                    body = _this260.urlencode(_this260.extend(request, query));
                    signature = _this260.hmac(_this260.encode(body), _this260.encode(_this260.secret), 'sha512');

                    headers = {
                        'Key': _this260.apiKey,
                        'Sign': signature,
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this260.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] != 'true') {
                        throw new ExchangeError(_this260.id + ' ' + _this260.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bxinth = {

        'id': 'bxinth',
        'name': 'BX.in.th',
        'countries': 'TH', // Thailand
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',
            'api': 'https://bx.in.th/api',
            'www': 'https://bx.in.th',
            'doc': 'https://bx.in.th/info/api'
        },
        'api': {
            'public': {
                'get': ['', // ticker
                'options', 'optionbook', 'orderbook', 'pairing', 'trade', 'tradehistory']
            },
            'private': {
                'post': ['balance', 'biller', 'billgroup', 'billpay', 'cancel', 'deposit', 'getorders', 'history', 'option-issue', 'option-bid', 'option-sell', 'option-myissue', 'option-mybid', 'option-myoptions', 'option-exercise', 'option-cancel', 'option-history', 'order', 'withdrawal', 'withdrawal-history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this261 = this;

            return Promise.resolve().then(function () {
                return _this261.publicGetPairing();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['pairing_id'].toString();
                    base = market['primary_currency'];
                    quote = market['secondary_currency'];

                    base = _this261.commonCurrencyCode(base);
                    quote = _this261.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        commonCurrencyCode: function commonCurrencyCode(currency) {
            // why would they use three letters instead of four for currency codes
            if (currency == 'DAS') return 'DASH';
            if (currency == 'DOG') return 'DOGE';
            return currency;
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                currencies,
                c,
                currency,
                code,
                account,
                _this262 = this,
                _arguments241 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments241.length > 0 && _arguments241[0] !== undefined ? _arguments241[0] : {};
                return _this262.loadMarkets();
            }).then(function () {
                return _this262.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balance'];
                result = { 'info': balance };
                currencies = Object.keys(balance);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = _this262.commonCurrencyCode(currency);
                    account = {
                        'free': parseFloat(balance[currency]['available']),
                        'used': 0.0,
                        'total': parseFloat(balance[currency]['total'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this263 = this,
                _arguments242 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments242.length > 1 && _arguments242[1] !== undefined ? _arguments242[1] : {};
                return _this263.loadMarkets();
            }).then(function () {
                return _this263.publicGetOrderbook(_this263.extend({
                    'pairing': _this263.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this263.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['orderbook']['bids']['highbid']),
                'ask': parseFloat(ticker['orderbook']['asks']['highbid']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_price']),
                'change': parseFloat(ticker['change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume_24hours']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                ticker,
                market,
                symbol,
                _this264 = this;

            return Promise.resolve().then(function () {
                return _this264.loadMarkets();
            }).then(function () {
                return _this264.publicGet();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    ticker = tickers[id];
                    market = _this264.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this264.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                id,
                ticker,
                _this265 = this;

            return Promise.resolve().then(function () {
                return _this265.loadMarkets();
            }).then(function () {
                market = _this265.market(symbol);
                return _this265.publicGet({ 'pairing': market['id'] });
            }).then(function (_resp) {
                tickers = _resp;
                id = market['id'].toString();
                ticker = tickers[id];

                return _this265.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['trade_date']);
            return {
                'id': trade['trade_id'],
                'info': trade,
                'order': trade['order_id'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['trade_type'],
                'price': parseFloat(trade['rate']),
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this266 = this,
                _arguments245 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments245.length > 1 && _arguments245[1] !== undefined ? _arguments245[1] : {};
                return _this266.loadMarkets();
            }).then(function () {
                market = _this266.market(symbol);
                return _this266.publicGetTrade(_this266.extend({
                    'pairing': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this266.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this267 = this,
                _arguments246 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments246.length > 4 && _arguments246[4] !== undefined ? _arguments246[4] : undefined;
                params = _arguments246.length > 5 && _arguments246[5] !== undefined ? _arguments246[5] : {};
                return _this267.loadMarkets();
            }).then(function () {
                return _this267.privatePostOrder(_this267.extend({
                    'pairing': _this267.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var pairing,
                _this268 = this;

            return Promise.resolve().then(function () {
                return _this268.loadMarkets();
            }).then(function () {
                pairing = undefined; // TODO fixme

                return _this268.privatePostCancel({
                    'order_id': id,
                    'pairing': pairing
                });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test7,
                _this269 = this,
                _arguments248 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments248.length > 1 && _arguments248[1] !== undefined ? _arguments248[1] : 'public';
                method = _arguments248.length > 2 && _arguments248[2] !== undefined ? _arguments248[2] : 'GET';
                params = _arguments248.length > 3 && _arguments248[3] !== undefined ? _arguments248[3] : {};
                headers = _arguments248.length > 4 && _arguments248[4] !== undefined ? _arguments248[4] : undefined;
                body = _arguments248.length > 5 && _arguments248[5] !== undefined ? _arguments248[5] : undefined;
                url = _this269.urls['api'] + '/';

                if (path) {
                    url += path + '/';
                }if (Object.keys(params).length) {
                    url += '?' + _this269.urlencode(params);
                }if (api == 'private') {
                    nonce = _this269.nonce();
                    auth = _this269.apiKey + nonce.toString() + _this269.secret;
                    signature = _this269.hash(_this269.encode(auth), 'sha256');

                    body = _this269.urlencode(_this269.extend({
                        'key': _this269.apiKey,
                        'nonce': nonce,
                        'signature': signature
                        // twofa: this.twofa,
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this269.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test7 = 'success' in response;

                    if (_test7 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this269.id + ' ' + _this269.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var ccex = {

        'id': 'ccex',
        'name': 'C-CEX',
        'countries': ['DE', 'EU'],
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',
            'api': {
                'tickers': 'https://c-cex.com/t',
                'public': 'https://c-cex.com/t/api_pub.html',
                'private': 'https://c-cex.com/t/api.html'
            },
            'www': 'https://c-cex.com',
            'doc': 'https://c-cex.com/?id=api'
        },
        'api': {
            'tickers': {
                'get': ['coinnames', '{market}', 'pairs', 'prices', 'volume_{coin}']
            },
            'public': {
                'get': ['balancedistribution', 'markethistory', 'markets', 'marketsummaries', 'orderbook']
            },
            'private': {
                'get': ['buylimit', 'cancel', 'getbalance', 'getbalances', 'getopenorders', 'getorder', 'getorderhistory', 'mytrades', 'selllimit']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this270 = this;

            return Promise.resolve().then(function () {
                return _this270.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this271 = this,
                _arguments250 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments250.length > 0 && _arguments250[0] !== undefined ? _arguments250[0] : {};
                return _this271.loadMarkets();
            }).then(function () {
                return _this271.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    account = {
                        'free': balance['Available'],
                        'used': balance['Pending'],
                        'total': balance['Balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this272 = this,
                _arguments251 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments251.length > 1 && _arguments251[1] !== undefined ? _arguments251[1] : {};
                return _this272.loadMarkets();
            }).then(function () {
                return _this272.publicGetOrderbook(_this272.extend({
                    'market': _this272.marketId(symbol),
                    'type': 'both',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this272.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastprice']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': undefined,
                'quoteVolume': this.safeFloat(ticker, 'buysupport'),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                ticker,
                uppercase,
                market,
                symbol,
                _uppercase$split,
                _uppercase$split2,
                base,
                quote,
                _this273 = this;

            return Promise.resolve().then(function () {
                return _this273.loadMarkets();
            }).then(function () {
                return _this273.tickersGetPrices();
            }).then(function (_resp) {
                tickers = _resp;
                result = { 'info': tickers };
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    ticker = tickers[id];
                    uppercase = id.toUpperCase();
                    market = undefined;
                    symbol = undefined;

                    if (uppercase in _this273.markets_by_id) {
                        market = _this273.markets_by_id[uppercase];
                        symbol = market['symbol'];
                    } else {
                        _uppercase$split = uppercase.split('-');
                        _uppercase$split2 = _slicedToArray(_uppercase$split, 2);
                        base = _uppercase$split2[0];
                        quote = _uppercase$split2[1];

                        symbol = base + '/' + quote;
                    }
                    result[symbol] = _this273.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this274 = this;

            return Promise.resolve().then(function () {
                return _this274.loadMarkets();
            }).then(function () {
                market = _this274.market(symbol);
                return _this274.tickersGetMarket({
                    'market': market['id'].toLowerCase()
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this274.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['TimeStamp']);
            return {
                'id': trade['Id'],
                'info': trade,
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['OrderType'].toLowerCase(),
                'price': trade['Price'],
                'amount': trade['Quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this275 = this,
                _arguments254 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments254.length > 1 && _arguments254[1] !== undefined ? _arguments254[1] : {};
                return _this275.loadMarkets();
            }).then(function () {
                market = _this275.market(symbol);
                return _this275.publicGetMarkethistory(_this275.extend({
                    'market': _this275.marketId(market),
                    'type': 'both',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this275.parseTrades(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                response,
                _this276 = this,
                _arguments255 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments255.length > 4 && _arguments255[4] !== undefined ? _arguments255[4] : undefined;
                params = _arguments255.length > 5 && _arguments255[5] !== undefined ? _arguments255[5] : {};
                return _this276.loadMarkets();
            }).then(function () {
                method = 'privateGet' + _this276.capitalize(side) + type;
                return _this276[method](_this276.extend({
                    'market': _this276.marketId(symbol),
                    'quantity': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this277 = this;

            return Promise.resolve().then(function () {
                return _this277.loadMarkets();
            }).then(function () {
                return _this277.privateGetCancel({ 'uuid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                response,
                _test8,
                _this278 = this,
                _arguments257 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments257.length > 1 && _arguments257[1] !== undefined ? _arguments257[1] : 'public';
                method = _arguments257.length > 2 && _arguments257[2] !== undefined ? _arguments257[2] : 'GET';
                params = _arguments257.length > 3 && _arguments257[3] !== undefined ? _arguments257[3] : {};
                headers = _arguments257.length > 4 && _arguments257[4] !== undefined ? _arguments257[4] : undefined;
                body = _arguments257.length > 5 && _arguments257[5] !== undefined ? _arguments257[5] : undefined;
                url = _this278.urls['api'][api];

                if (api == 'private') {
                    nonce = _this278.nonce().toString();
                    query = _this278.keysort(_this278.extend({
                        'a': path,
                        'apikey': _this278.apiKey,
                        'nonce': nonce
                    }, params));

                    url += '?' + _this278.urlencode(query);
                    headers = { 'apisign': _this278.hmac(_this278.encode(url), _this278.encode(_this278.secret), 'sha512') };
                } else {
                    if (api == 'public') {
                        url += '?' + _this278.urlencode(_this278.extend({
                            'a': 'get' + path
                        }, params));
                    } else {
                        url += '/' + _this278.implodeParams(path, params) + '.json';
                    }
                }return _this278.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'tickers') {
                    return response;
                } else {
                    _test8 = 'success' in response;

                    if (_test8 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this278.id + ' ' + _this278.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cex = {

        'id': 'cex',
        'name': 'CEX.IO',
        'countries': ['GB', 'EU', 'CY', 'RU'],
        'rateLimit': 1500,
        'hasFetchTickers': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
            'api': 'https://cex.io/api',
            'www': 'https://cex.io',
            'doc': 'https://cex.io/cex-api'
        },
        'api': {
            'public': {
                'get': ['currency_limits', 'last_price/{pair}', 'last_prices/{currencies}', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}', 'ticker/{pair}', 'tickers/{currencies}', 'trade_history/{pair}'],
                'post': ['convert/{pair}', 'price_stats/{pair}']
            },
            'private': {
                'post': ['active_orders_status/', 'archived_orders/{pair}', 'balance/', 'cancel_order/', 'cancel_orders/{pair}', 'cancel_replace_order/{pair}', 'close_position/{pair}', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}', 'open_orders/', 'open_position/{pair}', 'open_positions/{pair}', 'place_order/{pair}', 'place_order/{pair}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split7,
                _symbol$split8,
                base,
                quote,
                _this279 = this;

            return Promise.resolve().then(function () {
                return _this279.publicGetCurrencyLimits();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['data']['pairs'].length; p++) {
                    market = markets['data']['pairs'][p];
                    id = market['symbol1'] + '/' + market['symbol2'];
                    symbol = id;
                    _symbol$split7 = symbol.split('/');
                    _symbol$split8 = _slicedToArray(_symbol$split7, 2);
                    base = _symbol$split8[0];
                    quote = _symbol$split8[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                account,
                _this280 = this,
                _arguments259 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments259.length > 0 && _arguments259[0] !== undefined ? _arguments259[0] : {};
                return _this280.loadMarkets();
            }).then(function () {
                return _this280.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this280.currencies.length; c++) {
                    currency = _this280.currencies[c];
                    account = {
                        'free': parseFloat(balances[currency]['available']),
                        'used': parseFloat(balances[currency]['orders']),
                        'total': 0.0
                    };

                    account['total'] = _this280.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this281 = this,
                _arguments260 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments260.length > 1 && _arguments260[1] !== undefined ? _arguments260[1] : {};
                return _this281.loadMarkets();
            }).then(function () {
                return _this281.publicGetOrderBookPair(_this281.extend({
                    'pair': _this281.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;

                return _this281.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = undefined;
            var iso8601 = undefined;
            if ('timestamp' in ticker) {
                timestamp = parseInt(ticker['timestamp']) * 1000;
                iso8601 = this.iso8601(timestamp);
            }
            var volume = this.safeFloat(ticker, 'volume');
            var high = this.safeFloat(ticker, 'high');
            var low = this.safeFloat(ticker, 'low');
            var bid = this.safeFloat(ticker, 'bid');
            var ask = this.safeFloat(ticker, 'ask');
            var last = this.safeFloat(ticker, 'last');
            return {
                'timestamp': timestamp,
                'datetime': iso8601,
                'high': high,
                'low': low,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currencies,
                response,
                tickers,
                result,
                t,
                ticker,
                symbol,
                market,
                _this282 = this;

            return Promise.resolve().then(function () {
                return _this282.loadMarkets();
            }).then(function () {
                currencies = _this282.currencies.join('/');
                return _this282.publicGetTickersCurrencies({
                    'currencies': currencies
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['data'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    symbol = ticker['pair'].replace(':', '/');
                    market = _this282.markets[symbol];

                    result[symbol] = _this282.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this283 = this;

            return Promise.resolve().then(function () {
                return _this283.loadMarkets();
            }).then(function () {
                market = _this283.market(symbol);
                return _this283.publicGetTickerPair({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this283.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this284 = this,
                _arguments263 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments263.length > 1 && _arguments263[1] !== undefined ? _arguments263[1] : {};
                return _this284.loadMarkets();
            }).then(function () {
                market = _this284.market(symbol);
                return _this284.publicGetTradeHistoryPair(_this284.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this284.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this285 = this,
                _arguments264 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments264.length > 4 && _arguments264[4] !== undefined ? _arguments264[4] : undefined;
                params = _arguments264.length > 5 && _arguments264[5] !== undefined ? _arguments264[5] : {};
                return _this285.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this285.marketId(symbol),
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['order_type'] = type;
                }return _this285.privatePostPlaceOrderPair(_this285.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this286 = this;

            return Promise.resolve().then(function () {
                return _this286.loadMarkets();
            }).then(function () {
                return _this286.privatePostCancelOrder({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _test9,
                _test10,
                _this287 = this,
                _arguments266 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments266.length > 1 && _arguments266[1] !== undefined ? _arguments266[1] : 'public';
                method = _arguments266.length > 2 && _arguments266[2] !== undefined ? _arguments266[2] : 'GET';
                params = _arguments266.length > 3 && _arguments266[3] !== undefined ? _arguments266[3] : {};
                headers = _arguments266.length > 4 && _arguments266[4] !== undefined ? _arguments266[4] : undefined;
                body = _arguments266.length > 5 && _arguments266[5] !== undefined ? _arguments266[5] : undefined;
                url = _this287.urls['api'] + '/' + _this287.implodeParams(path, params);
                query = _this287.omit(params, _this287.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this287.urlencode(query);
                    }
                } else {
                    if (!_this287.uid) {
                        throw new AuthenticationError(_this287.id + ' requires `' + _this287.id + '.uid` property for authentication');
                    }nonce = _this287.nonce().toString();
                    auth = nonce + _this287.uid + _this287.apiKey;
                    signature = _this287.hmac(_this287.encode(auth), _this287.encode(_this287.secret));

                    body = _this287.urlencode(_this287.extend({
                        'key': _this287.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this287.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test9 = 'e' in response;
                _test10 = _test9 && 'ok' in response;

                if (_test10 && response['ok'] == 'ok') {
                    return response;
                } else {
                    if (_test9) {
                        throw new ExchangeError(_this287.id + ' ' + _this287.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chbtc = {
        'id': 'chbtc',
        'name': 'CHBTC',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',
            'api': {
                'public': 'http://api.chbtc.com/data', // no https for public API
                'private': 'https://trade.chbtc.com/api'
            },
            'www': 'https://trade.chbtc.com/api',
            'doc': 'https://www.chbtc.com/i/developer'
        },
        'api': {
            'public': {
                'get': ['ticker', 'depth', 'trades', 'kline']
            },
            'private': {
                'post': ['order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
            'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },
            // 'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' },
            'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' },
            'HSR/CNY': { 'id': 'hsr_cny', 'symbol': 'HSR/CNY', 'base': 'HSR', 'quote': 'CNY' },
            'QTUM/CNY': { 'id': 'qtum_cny', 'symbol': 'QTUM/CNY', 'base': 'QTUM', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                account,
                _this288 = this,
                _arguments267 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments267.length > 0 && _arguments267[0] !== undefined ? _arguments267[0] : {};
                return _this288.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (c = 0; c < _this288.currencies.length; c++) {
                    currency = _this288.currencies[c];
                    account = _this288.account();

                    if (currency in balances['balance']) {
                        account['free'] = parseFloat(balances['balance'][currency]['amount']);
                    }if (currency in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][currency]['amount']);
                    }account['total'] = _this288.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this289 = this,
                _arguments268 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments268.length > 1 && _arguments268[1] !== undefined ? _arguments268[1] : {};
                market = _this289.market(symbol);
                return _this289.publicGetDepth(_this289.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this289.milliseconds();
                bids = undefined;
                asks = undefined;

                if ('bids' in orderbook) {
                    bids = orderbook['bids'];
                }if ('asks' in orderbook) {
                    asks = orderbook['asks'];
                }result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this289.iso8601(timestamp)
                };

                if (result['bids']) {
                    result['bids'] = _this289.sortBy(result['bids'], 0, true);
                }if (result['asks']) {
                    result['asks'] = _this289.sortBy(result['asks'], 0);
                }return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this290 = this;

            return Promise.resolve().then(function () {
                return _this290.publicGetTicker({
                    'currency': _this290.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = _this290.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this290.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['date'] * 1000;
            var side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this291 = this,
                _arguments270 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments270.length > 1 && _arguments270[1] !== undefined ? _arguments270[1] : {};
                return _this291.loadMarkets();
            }).then(function () {
                market = _this291.market(symbol);
                return _this291.publicGetTrades(_this291.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this291.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                paramString,
                tradeType,
                response,
                _this292 = this,
                _arguments271 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments271.length > 4 && _arguments271[4] !== undefined ? _arguments271[4] : undefined;
                params = _arguments271.length > 5 && _arguments271[5] !== undefined ? _arguments271[5] : {};
                paramString = '&price=' + price.toString();

                paramString += '&amount=' + amount.toString();
                tradeType = side == 'buy' ? '1' : '0';

                paramString += '&tradeType=' + tradeType;
                paramString += '&currency=' + _this292.marketId(symbol);
                return _this292.privatePostOrder(paramString);
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                paramString,
                _this293 = this,
                _arguments272 = arguments;

            params = _arguments272.length > 1 && _arguments272[1] !== undefined ? _arguments272[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this293.privatePostCancelOrder(paramString);
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                paramString,
                _this294 = this,
                _arguments273 = arguments;

            params = _arguments273.length > 1 && _arguments273[1] !== undefined ? _arguments273[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this294.privatePostGetOrder(paramString);
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                paramsLength,
                nonce,
                auth,
                secret,
                signature,
                suffix,
                response,
                _this295 = this,
                _arguments274 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments274.length > 1 && _arguments274[1] !== undefined ? _arguments274[1] : 'public';
                method = _arguments274.length > 2 && _arguments274[2] !== undefined ? _arguments274[2] : 'GET';
                params = _arguments274.length > 3 && _arguments274[3] !== undefined ? _arguments274[3] : {};
                headers = _arguments274.length > 4 && _arguments274[4] !== undefined ? _arguments274[4] : undefined;
                body = _arguments274.length > 5 && _arguments274[5] !== undefined ? _arguments274[5] : undefined;
                url = _this295.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this295.version + '/' + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this295.urlencode(params);
                    }
                } else {
                    paramsLength = params.length; // params should be a string here

                    nonce = _this295.nonce();
                    auth = 'method=' + path;

                    auth += '&accesskey=' + _this295.apiKey;
                    auth += paramsLength ? params : '';
                    secret = _this295.hash(_this295.encode(_this295.secret), 'sha1');
                    signature = _this295.hmac(_this295.encode(auth), _this295.encode(secret), 'md5');
                    suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();

                    url += '/' + path + '?' + auth + '&' + suffix;
                }
                return _this295.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('code' in response) {
                        throw new ExchangeError(_this295.id + ' ' + _this295.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chilebit = extend(blinktrade, {
        'id': 'chilebit',
        'name': 'ChileBit',
        'countries': 'CL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://chilebit.net',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var coincheck = {

        'id': 'coincheck',
        'name': 'coincheck',
        'countries': ['JP', 'ID'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',
            'api': 'https://coincheck.com/api',
            'www': 'https://coincheck.com',
            'doc': 'https://coincheck.com/documents/exchange/api'
        },
        'api': {
            'public': {
                'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']
            },
            'private': {
                'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],
                'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],
                'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']
            }
        },
        'markets': {
            'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }, // the only real pair
            'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },
            'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },
            'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },
            'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },
            'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },
            'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },
            'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },
            'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },
            'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },
            'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },
            'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },
            'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },
            'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                reserved,
                _this296 = this,
                _arguments275 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments275.length > 0 && _arguments275[0] !== undefined ? _arguments275[0] : {};
                return _this296.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this296.currencies.length; c++) {
                    currency = _this296.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this296.account();

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]);
                    }reserved = lowercase + '_reserved';

                    if (reserved in balances) {
                        account['used'] = parseFloat(balances[reserved]);
                    }account['total'] = _this296.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this297 = this,
                _arguments276 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments276.length > 1 && _arguments276[1] !== undefined ? _arguments276[1] : {};
                return _this297.publicGetOrderBooks(params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this297.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this298 = this;

            return Promise.resolve().then(function () {
                return _this298.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this298.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['created_at']);
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['order_type'],
                'price': parseFloat(trade['rate']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this299 = this,
                _arguments278 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments278.length > 1 && _arguments278[1] !== undefined ? _arguments278[1] : {};
                market = _this299.market(symbol);
                return _this299.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this299.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                order_type,
                _prefix,
                response,
                _this300 = this,
                _arguments279 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments279.length > 4 && _arguments279[4] !== undefined ? _arguments279[4] : undefined;
                params = _arguments279.length > 5 && _arguments279[5] !== undefined ? _arguments279[5] : {};
                prefix = '';
                order = {
                    'pair': _this300.marketId(symbol)
                };

                if (type == 'market') {
                    order_type = type + '_' + side;

                    order['order_type'] = order_type;
                    _prefix = side == 'buy' ? order_type + '_' : '';

                    order[_prefix + 'amount'] = amount;
                } else {
                    order['order_type'] = side;
                    order['rate'] = price;
                    order['amount'] = amount;
                }
                return _this300.privatePostExchangeOrders(_this300.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this301 = this;

            return _this301.privateDeleteExchangeOrdersId({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                length,
                auth,
                response,
                _test11,
                _this302 = this,
                _arguments281 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments281.length > 1 && _arguments281[1] !== undefined ? _arguments281[1] : 'public';
                method = _arguments281.length > 2 && _arguments281[2] !== undefined ? _arguments281[2] : 'GET';
                params = _arguments281.length > 3 && _arguments281[3] !== undefined ? _arguments281[3] : {};
                headers = _arguments281.length > 4 && _arguments281[4] !== undefined ? _arguments281[4] : undefined;
                body = _arguments281.length > 5 && _arguments281[5] !== undefined ? _arguments281[5] : undefined;
                url = _this302.urls['api'] + '/' + _this302.implodeParams(path, params);
                query = _this302.omit(params, _this302.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this302.urlencode(query);
                    }
                } else {
                    nonce = _this302.nonce().toString();
                    length = 0;

                    if (Object.keys(query).length) {
                        body = _this302.urlencode(_this302.keysort(query));
                        length = body.length;
                    }
                    auth = nonce + url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'ACCESS-KEY': _this302.apiKey,
                        'ACCESS-NONCE': nonce,
                        'ACCESS-SIGNATURE': _this302.hmac(_this302.encode(auth), _this302.encode(_this302.secret))
                    };
                }
                return _this302.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test11 = 'success' in response;

                    if (_test11 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this302.id + ' ' + _this302.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinfloor = {

        'id': 'coinfloor',
        'name': 'coinfloor',
        'rateLimit': 1000,
        'countries': 'UK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg',
            'api': 'https://webapi.coinfloor.co.uk:8090/bist',
            'www': 'https://www.coinfloor.co.uk',
            'doc': ['https://github.com/coinfloor/api', 'https://www.coinfloor.co.uk/api']
        },
        'api': {
            'public': {
                'get': ['{id}/ticker/', '{id}/order_book/', '{id}/transactions/']
            },
            'private': {
                'post': ['{id}/balance/', '{id}/user_transactions/', '{id}/open_orders/', '{id}/cancel_order/', '{id}/buy/', '{id}/sell/', '{id}/buy_market/', '{id}/sell_market/', '{id}/estimate_sell_market/', '{id}/estimate_buy_market/']
            }
        },
        'markets': {
            'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/USD': { 'id': 'XBT/USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/PLN': { 'id': 'XBT/PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BCH/GBP': { 'id': 'BCH/GBP', 'symbol': 'BCH/GBP', 'base': 'BCH', 'quote': 'GBP' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                symbol,
                _this303 = this,
                _arguments282 = arguments;

            params = _arguments282.length > 0 && _arguments282[0] !== undefined ? _arguments282[0] : {};
            symbol = undefined;

            if ('symbol' in params) {
                symbol = params['symbol'];
            }if ('id' in params) {
                symbol = params['id'];
            }if (!symbol) {
                throw new ExchangeError(_this303.id + ' fetchBalance requires a symbol param');
            }return _this303.privatePostIdBalance({
                'id': _this303.marketId(symbol)
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var orderbook,
                _this304 = this;

            return Promise.resolve().then(function () {
                return _this304.publicGetIdOrderBook({
                    'id': _this304.marketId(symbol)
                });
            }).then(function (_resp) {
                orderbook = _resp;

                return _this304.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            // rewrite to get the timestamp from HTTP headers
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': this.safeFloat(ticker, 'vwap'),
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this305 = this;

            return Promise.resolve().then(function () {
                market = _this305.market(symbol);
                return _this305.publicGetIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this305.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this306 = this,
                _arguments285 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments285.length > 1 && _arguments285[1] !== undefined ? _arguments285[1] : {};
                market = _this306.market(symbol);
                return _this306.publicGetIdTransactions(_this306.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this306.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                method,
                _this307 = this,
                _arguments286 = arguments;

            price = _arguments286.length > 4 && _arguments286[4] !== undefined ? _arguments286[4] : undefined;
            params = _arguments286.length > 5 && _arguments286[5] !== undefined ? _arguments286[5] : {};
            order = { 'id': _this307.marketId(symbol) };
            method = 'privatePostId' + _this307.capitalize(side);

            if (type == 'market') {
                order['quantity'] = amount;
                method += 'Market';
            } else {
                order['price'] = price;
                order['amount'] = amount;
            }
            return _this307[method](_this307.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this308 = this;

            return _this308.privatePostIdCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/
            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({ 'nonce': nonce }, query));
                var auth = this.uid + '/' + this.apiKey + ':' + this.password;
                var signature = this.stringToBase64(auth);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + signature
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coingi = {

        'id': 'coingi',
        'name': 'Coingi',
        'rateLimit': 1000,
        'countries': ['PA', 'BG', 'CN', 'US'], // Panama, Bulgaria, China, US
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',
            'api': 'https://api.coingi.com',
            'www': 'https://coingi.com',
            'doc': 'http://docs.coingi.apiary.io/'
        },
        'api': {
            'current': {
                'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']
            },
            'user': {
                'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']
            }
        },
        'markets': {
            'LTC/BTC': { 'id': 'ltc-btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'PPC/BTC': { 'id': 'ppc-btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'doge-btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'VTC/BTC': { 'id': 'vtc-btc', 'symbol': 'VTC/BTC', 'base': 'VTC', 'quote': 'BTC' },
            'FTC/BTC': { 'id': 'ftc-btc', 'symbol': 'FTC/BTC', 'base': 'FTC', 'quote': 'BTC' },
            'NMC/BTC': { 'id': 'nmc-btc', 'symbol': 'NMC/BTC', 'base': 'NMC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash-btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                currencies,
                c,
                currency,
                balances,
                result,
                b,
                balance,
                _currency3,
                account,
                _this309 = this,
                _arguments288 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments288.length > 0 && _arguments288[0] !== undefined ? _arguments288[0] : {};
                currencies = [];

                for (c = 0; c < _this309.currencies.length; c++) {
                    currency = _this309.currencies[c].toLowerCase();

                    currencies.push(currency);
                }
                return _this309.userPostBalance({
                    'currencies': currencies.join(',')
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    _currency3 = balance['currency']['name'];

                    _currency3 = _currency3.toUpperCase();
                    account = {
                        'free': balance['available'],
                        'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],
                        'total': 0.0
                    };

                    account['total'] = _this309.sum(account['free'], account['used']);
                    result[_currency3] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this310 = this,
                _arguments289 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments289.length > 1 && _arguments289[1] !== undefined ? _arguments289[1] : {};
                market = _this310.market(symbol);
                return _this310.currentGetOrderBookPairAskCountBidCountDepth(_this310.extend({
                    'pair': market['id'],
                    'askCount': 512, // maximum returned number of asks 1-512
                    'bidCount': 512, // maximum returned number of bids 1-512
                    'depth': 32 // maximum number of depth range steps 1-32
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this310.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['high'],
                'low': ticker['low'],
                'bid': ticker['highestBid'],
                'ask': ticker['lowestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': ticker['baseVolume'],
                'quoteVolume': ticker['counterVolume'],
                'info': ticker
            };
            return ticker;
        },
        fetchTickers: function fetchTickers() {
            var symbols,
                response,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this311 = this,
                _arguments290 = arguments;

            return Promise.resolve().then(function () {
                symbols = _arguments290.length > 0 && _arguments290[0] !== undefined ? _arguments290[0] : undefined;
                return _this311.currentGet24hourRollingAggregation();
            }).then(function (_resp) {
                response = _resp;
                result = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    base = ticker['currencyPair']['base'].toUpperCase();
                    quote = ticker['currencyPair']['counter'].toUpperCase();
                    symbol = base + '/' + quote;
                    market = _this311.markets[symbol];

                    result[symbol] = _this311.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var tickers,
                _this312 = this;

            return Promise.resolve().then(function () {
                return _this312.fetchTickers(symbol);
            }).then(function (_resp) {
                tickers = _resp;

                return tickers[symbol];
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined, // type
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this313 = this,
                _arguments292 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments292.length > 1 && _arguments292[1] !== undefined ? _arguments292[1] : {};
                market = _this313.market(symbol);
                return _this313.currentGetTransactionsPairMaxCount(_this313.extend({
                    'pair': market['id'],
                    'maxCount': 128
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this313.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this314 = this,
                _arguments293 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments293.length > 4 && _arguments293[4] !== undefined ? _arguments293[4] : undefined;
                params = _arguments293.length > 5 && _arguments293[5] !== undefined ? _arguments293[5] : {};
                order = {
                    'currencyPair': _this314.marketId(symbol),
                    'volume': amount,
                    'price': price,
                    'orderType': side == 'buy' ? 0 : 1
                };
                return _this314.userPostAddOrder(_this314.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this315 = this;

            return _this315.userPostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                auth,
                response,
                _this316 = this,
                _arguments295 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments295.length > 1 && _arguments295[1] !== undefined ? _arguments295[1] : 'public';
                method = _arguments295.length > 2 && _arguments295[2] !== undefined ? _arguments295[2] : 'GET';
                params = _arguments295.length > 3 && _arguments295[3] !== undefined ? _arguments295[3] : {};
                headers = _arguments295.length > 4 && _arguments295[4] !== undefined ? _arguments295[4] : undefined;
                body = _arguments295.length > 5 && _arguments295[5] !== undefined ? _arguments295[5] : undefined;
                url = _this316.urls['api'] + '/' + api + '/' + _this316.implodeParams(path, params);
                query = _this316.omit(params, _this316.extractParams(path));

                if (api == 'current') {
                    if (Object.keys(query).length) {
                        url += '?' + _this316.urlencode(query);
                    }
                } else {
                    nonce = _this316.nonce();
                    request = _this316.extend({
                        'token': _this316.apiKey,
                        'nonce': nonce
                    }, query);
                    auth = nonce.toString() + '$' + _this316.apiKey;

                    request['signature'] = _this316.hmac(_this316.encode(auth), _this316.encode(_this316.secret));
                    body = _this316.json(request);
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this316.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this316.id + ' ' + _this316.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinmarketcap = {

        'id': 'coinmarketcap',
        'name': 'CoinMarketCap',
        'rateLimit': 10000,
        'version': 'v1',
        'countries': 'US',
        'hasPrivateAPI': false,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',
            'api': 'https://api.coinmarketcap.com',
            'www': 'https://coinmarketcap.com',
            'doc': 'https://coinmarketcap.com/api'
        },
        'api': {
            'public': {
                'get': ['ticker/', 'ticker/{id}/', 'global/']
            }
        },
        'currencies': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD'],

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                _this317 = this,
                _arguments296 = arguments;

            params = _arguments296.length > 1 && _arguments296[1] !== undefined ? _arguments296[1] : {};

            throw new ExchangeError('Fetching order books is not supported by the API of ' + _this317.id);
        },
        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                c,
                base,
                baseId,
                quote,
                quoteId,
                symbol,
                id,
                _this318 = this;

            return Promise.resolve().then(function () {
                return _this318.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];

                    for (c = 0; c < _this318.currencies.length; c++) {
                        base = market['symbol'];
                        baseId = market['id'];
                        quote = _this318.currencies[c];
                        quoteId = quote.toLowerCase();
                        symbol = base + '/' + quote;
                        id = baseId + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'baseId': baseId,
                            'quoteId': quoteId,
                            'info': market
                        });
                    }
                }
                return result;
            });
        },
        fetchGlobal: function fetchGlobal() {
            var currency,
                request,
                _this319 = this,
                _arguments298 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments298.length > 0 && _arguments298[0] !== undefined ? _arguments298[0] : 'USD';
                return _this319.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this319.publicGetGlobal(request);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            if ('last_updated' in ticker) if (ticker['last_updated']) timestamp = parseInt(ticker['last_updated']) * 1000;
            var volume = undefined;
            var volumeKey = '24h_volume_' + market['quoteId'];
            if (ticker[volumeKey]) volume = parseFloat(ticker[volumeKey]);
            var price = 'price_' + market['quoteId'];
            var change = undefined;
            var changeKey = 'percent_change_24h';
            if (ticker[changeKey]) change = parseFloat(ticker[changeKey]);
            var last = undefined;
            if (price in ticker) if (ticker[price]) last = parseFloat(ticker[price]);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': change,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                request,
                response,
                tickers,
                t,
                ticker,
                id,
                market,
                symbol,
                _this320 = this,
                _arguments299 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments299.length > 0 && _arguments299[0] !== undefined ? _arguments299[0] : 'USD';
                return _this320.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this320.publicGetTicker(request);
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    id = ticker['id'] + '/' + currency;
                    market = _this320.markets_by_id[id];
                    symbol = market['symbol'];

                    tickers[symbol] = _this320.parseTicker(ticker, market);
                }
                return tickers;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                request,
                response,
                ticker,
                _this321 = this;

            return Promise.resolve().then(function () {
                return _this321.loadMarkets();
            }).then(function () {
                market = _this321.market(symbol);
                request = {
                    'convert': market['quote'],
                    'id': market['baseId']
                };
                return _this321.publicGetTickerId(request);
            }).then(function (_resp) {
                response = _resp;
                ticker = response[0];

                return _this321.parseTicker(ticker, market);
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinmate = {

        'id': 'coinmate',
        'name': 'CoinMate',
        'countries': ['GB', 'CZ'], // UK, Czech Republic
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',
            'api': 'https://coinmate.io/api',
            'www': 'https://coinmate.io',
            'doc': ['http://docs.coinmate.apiary.io', 'https://coinmate.io/developers']
        },
        'api': {
            'public': {
                'get': ['orderBook', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balances', 'bitcoinWithdrawal', 'bitcoinDepositAddresses', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'openOrders', 'redeemVoucher', 'sellInstant', 'sellLimit', 'transactionHistory', 'unconfirmedBitcoinDeposits']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                account,
                _this322 = this,
                _arguments301 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments301.length > 0 && _arguments301[0] !== undefined ? _arguments301[0] : {};
                return _this322.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (c = 0; c < _this322.currencies.length; c++) {
                    currency = _this322.currencies[c];
                    account = _this322.account();

                    if (currency in balances) {
                        account['free'] = balances[currency]['available'];
                        account['used'] = balances[currency]['reserved'];
                        account['total'] = balances[currency]['balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                _this323 = this,
                _arguments302 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments302.length > 1 && _arguments302[1] !== undefined ? _arguments302[1] : {};
                return _this323.publicGetOrderBook(_this323.extend({
                    'currencyPair': _this323.marketId(symbol),
                    'groupByPriceLimit': 'False'
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = orderbook['timestamp'] * 1000;

                return _this323.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this324 = this;

            return Promise.resolve().then(function () {
                return _this324.publicGetTicker({
                    'currencyPair': _this324.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this324.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['amount']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'id': trade['transactionId'],
                'info': trade,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this325 = this,
                _arguments304 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments304.length > 1 && _arguments304[1] !== undefined ? _arguments304[1] : {};
                market = _this325.market(symbol);
                return _this325.publicGetTransactions(_this325.extend({
                    'currencyPair': market['id'],
                    'minutesIntoHistory': 10
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this325.parseTrades(response['data'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this326 = this,
                _arguments305 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments305.length > 4 && _arguments305[4] !== undefined ? _arguments305[4] : undefined;
                params = _arguments305.length > 5 && _arguments305[5] !== undefined ? _arguments305[5] : {};
                method = 'privatePost' + _this326.capitalize(side);
                order = {
                    'currencyPair': _this326.marketId(symbol)
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['total'] = amount; // amount in fiat
                    } else {
                        order['amount'] = amount;
                    } // amount in fiat
                    method += 'Instant';
                } else {
                    order['amount'] = amount; // amount in crypto
                    order['price'] = price;
                    method += _this326.capitalize(type);
                }
                return _this326[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this327 = this;

            return _this327.privatePostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _this328 = this,
                _arguments307 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments307.length > 1 && _arguments307[1] !== undefined ? _arguments307[1] : 'public';
                method = _arguments307.length > 2 && _arguments307[2] !== undefined ? _arguments307[2] : 'GET';
                params = _arguments307.length > 3 && _arguments307[3] !== undefined ? _arguments307[3] : {};
                headers = _arguments307.length > 4 && _arguments307[4] !== undefined ? _arguments307[4] : undefined;
                body = _arguments307.length > 5 && _arguments307[5] !== undefined ? _arguments307[5] : undefined;
                url = _this328.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this328.urlencode(params);
                    }
                } else {
                    if (!_this328.uid) {
                        throw new AuthenticationError(_this328.id + ' requires `' + _this328.id + '.uid` property for authentication');
                    }nonce = _this328.nonce().toString();
                    auth = nonce + _this328.uid + _this328.apiKey;
                    signature = _this328.hmac(_this328.encode(auth), _this328.encode(_this328.secret));

                    body = _this328.urlencode(_this328.extend({
                        'clientId': _this328.uid,
                        'nonce': nonce,
                        'publicKey': _this328.apiKey,
                        'signature': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this328.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this328.id + ' ' + _this328.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinsecure = {

        'id': 'coinsecure',
        'name': 'Coinsecure',
        'countries': 'IN', // India
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',
            'api': 'https://api.coinsecure.in',
            'www': 'https://coinsecure.in',
            'doc': ['https://api.coinsecure.in', 'https://github.com/coinsecure/plugins']
        },
        'api': {
            'public': {
                'get': ['bitcoin/search/confirmation/{txid}', 'exchange/ask/low', 'exchange/ask/orders', 'exchange/bid/high', 'exchange/bid/orders', 'exchange/lastTrade', 'exchange/max24Hr', 'exchange/min24Hr', 'exchange/ticker', 'exchange/trades']
            },
            'private': {
                'get': ['mfa/authy/call', 'mfa/authy/sms', 'netki/search/{netkiName}', 'user/bank/otp/{number}', 'user/kyc/otp/{number}', 'user/profile/phone/otp/{number}', 'user/wallet/coin/address/{id}', 'user/wallet/coin/deposit/confirmed/all', 'user/wallet/coin/deposit/confirmed/{id}', 'user/wallet/coin/deposit/unconfirmed/all', 'user/wallet/coin/deposit/unconfirmed/{id}', 'user/wallet/coin/wallets', 'user/exchange/bank/fiat/accounts', 'user/exchange/bank/fiat/balance/available', 'user/exchange/bank/fiat/balance/pending', 'user/exchange/bank/fiat/balance/total', 'user/exchange/bank/fiat/deposit/cancelled', 'user/exchange/bank/fiat/deposit/unverified', 'user/exchange/bank/fiat/deposit/verified', 'user/exchange/bank/fiat/withdraw/cancelled', 'user/exchange/bank/fiat/withdraw/completed', 'user/exchange/bank/fiat/withdraw/unverified', 'user/exchange/bank/fiat/withdraw/verified', 'user/exchange/ask/cancelled', 'user/exchange/ask/completed', 'user/exchange/ask/pending', 'user/exchange/bid/cancelled', 'user/exchange/bid/completed', 'user/exchange/bid/pending', 'user/exchange/bank/coin/addresses', 'user/exchange/bank/coin/balance/available', 'user/exchange/bank/coin/balance/pending', 'user/exchange/bank/coin/balance/total', 'user/exchange/bank/coin/deposit/cancelled', 'user/exchange/bank/coin/deposit/unverified', 'user/exchange/bank/coin/deposit/verified', 'user/exchange/bank/coin/withdraw/cancelled', 'user/exchange/bank/coin/withdraw/completed', 'user/exchange/bank/coin/withdraw/unverified', 'user/exchange/bank/coin/withdraw/verified', 'user/exchange/bank/summary', 'user/exchange/coin/fee', 'user/exchange/fiat/fee', 'user/exchange/kycs', 'user/exchange/referral/coin/paid', 'user/exchange/referral/coin/successful', 'user/exchange/referral/fiat/paid', 'user/exchange/referrals', 'user/exchange/trade/summary', 'user/login/token/{token}', 'user/summary', 'user/wallet/summary', 'wallet/coin/withdraw/cancelled', 'wallet/coin/withdraw/completed', 'wallet/coin/withdraw/unverified', 'wallet/coin/withdraw/verified'],
                'post': ['login', 'login/initiate', 'login/password/forgot', 'mfa/authy/initiate', 'mfa/ga/initiate', 'signup', 'user/netki/update', 'user/profile/image/update', 'user/exchange/bank/coin/withdraw/initiate', 'user/exchange/bank/coin/withdraw/newVerifycode', 'user/exchange/bank/fiat/withdraw/initiate', 'user/exchange/bank/fiat/withdraw/newVerifycode', 'user/password/change', 'user/password/reset', 'user/wallet/coin/withdraw/initiate', 'wallet/coin/withdraw/newVerifycode'],
                'put': ['signup/verify/{token}', 'user/exchange/kyc', 'user/exchange/bank/fiat/deposit/new', 'user/exchange/ask/new', 'user/exchange/bid/new', 'user/exchange/instant/buy', 'user/exchange/instant/sell', 'user/exchange/bank/coin/withdraw/verify', 'user/exchange/bank/fiat/account/new', 'user/exchange/bank/fiat/withdraw/verify', 'user/mfa/authy/initiate/enable', 'user/mfa/ga/initiate/enable', 'user/netki/create', 'user/profile/phone/new', 'user/wallet/coin/address/new', 'user/wallet/coin/new', 'user/wallet/coin/withdraw/sendToExchange', 'user/wallet/coin/withdraw/verify'],
                'delete': ['user/gcm/{code}', 'user/logout', 'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}', 'user/exchange/bank/fiat/deposit/cancel/{depositID}', 'user/exchange/ask/cancel/{orderID}', 'user/exchange/bid/cancel/{orderID}', 'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}', 'user/mfa/authy/disable/{code}', 'user/mfa/ga/disable/{code}', 'user/profile/phone/delete', 'user/profile/image/delete/{netkiName}', 'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}']
            }
        },
        'markets': {
            'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                coin,
                fiat,
                result,
                _this329 = this,
                _arguments308 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments308.length > 0 && _arguments308[0] !== undefined ? _arguments308[0] : {};
                return _this329.privateGetUserExchangeBankSummary();
            }).then(function (_resp) {
                response = _resp;
                balance = response['message'];
                coin = {
                    'free': balance['availableCoinBalance'],
                    'used': balance['pendingCoinBalance'],
                    'total': balance['totalCoinBalance']
                };
                fiat = {
                    'free': balance['availableFiatBalance'],
                    'used': balance['pendingFiatBalance'],
                    'total': balance['totalFiatBalance']
                };
                result = {
                    'info': balance,
                    'BTC': coin,
                    'INR': fiat
                };

                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                bids,
                asks,
                orderbook,
                _this330 = this,
                _arguments309 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments309.length > 1 && _arguments309[1] !== undefined ? _arguments309[1] : {};
                return _this330.publicGetExchangeBidOrders(params);
            }).then(function (_resp) {
                bids = _resp;
                return _this330.publicGetExchangeAskOrders(params);
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': bids['message'],
                    'asks': asks['message']
                };

                return _this330.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'rate', 'vol');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this331 = this;

            return Promise.resolve().then(function () {
                return _this331.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['message'];
                timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this331.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['coinvolume']),
                    'quoteVolume': parseFloat(ticker['fiatvolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.publicGetExchangeTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                direction,
                response,
                _this332 = this,
                _arguments311 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments311.length > 4 && _arguments311[4] !== undefined ? _arguments311[4] : undefined;
                params = _arguments311.length > 5 && _arguments311[5] !== undefined ? _arguments311[5] : {};
                method = 'privatePutUserExchange';
                order = {};

                if (type == 'market') {
                    method += 'Instant' + _this332.capitalize(side);
                    if (side == 'buy') {
                        order['maxFiat'] = amount;
                    } else {
                        order['maxVol'] = amount;
                    }
                } else {
                    direction = side == 'buy' ? 'Bid' : 'Ask';

                    method += direction + 'New';
                    order['rate'] = price;
                    order['vol'] = amount;
                }
                return _this332[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['message']['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            throw new ExchangeError(this.id + ' cancelOrder () is not fully implemented yet');
            var method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here
            return this[method]({ 'orderID': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _test12,
                _this333 = this,
                _arguments312 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments312.length > 1 && _arguments312[1] !== undefined ? _arguments312[1] : 'public';
                method = _arguments312.length > 2 && _arguments312[2] !== undefined ? _arguments312[2] : 'GET';
                params = _arguments312.length > 3 && _arguments312[3] !== undefined ? _arguments312[3] : {};
                headers = _arguments312.length > 4 && _arguments312[4] !== undefined ? _arguments312[4] : undefined;
                body = _arguments312.length > 5 && _arguments312[5] !== undefined ? _arguments312[5] : undefined;
                url = _this333.urls['api'] + '/' + _this333.version + '/' + _this333.implodeParams(path, params);
                query = _this333.omit(params, _this333.extractParams(path));

                if (api == 'private') {
                    headers = { 'Authorization': _this333.apiKey };
                    if (Object.keys(query).length) {
                        body = _this333.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this333.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test12 = 'success' in response;

                if (_test12 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this333.id + ' ' + _this333.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinspot = {

        'id': 'coinspot',
        'name': 'CoinSpot',
        'countries': 'AU', // Australia
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
            'api': {
                'public': 'https://www.coinspot.com.au/pubapi',
                'private': 'https://www.coinspot.com.au/api'
            },
            'www': 'https://www.coinspot.com.au',
            'doc': 'https://www.coinspot.com.au/api'
        },
        'api': {
            'public': {
                'get': ['latest']
            },
            'private': {
                'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                balances,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this334 = this,
                _arguments313 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments313.length > 0 && _arguments313[0] !== undefined ? _arguments313[0] : {};
                return _this334.privatePostMyBalances();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('balance' in response) {
                    balances = response['balance'];
                    currencies = Object.keys(balances);

                    for (c = 0; c < currencies.length; c++) {
                        currency = currencies[c];
                        uppercase = currency.toUpperCase();
                        account = {
                            'free': balances[currency],
                            'used': 0.0,
                            'total': balances[currency]
                        };

                        if (uppercase == 'DRK') {
                            uppercase = 'DASH';
                        }result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                result,
                _this335 = this,
                _arguments314 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments314.length > 1 && _arguments314[1] !== undefined ? _arguments314[1] : {};
                market = _this335.market(symbol);
                return _this335.privatePostOrders(_this335.extend({
                    'cointype': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this335.milliseconds();
                result = _this335.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');

                result['bids'] = _this335.sortBy(result['bids'], 0, true);
                result['asks'] = _this335.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                id,
                ticker,
                timestamp,
                _this336 = this;

            return Promise.resolve().then(function () {
                return _this336.publicGetLatest();
            }).then(function (_resp) {
                response = _resp;
                id = _this336.marketId(market);

                id = id.toLowerCase();
                ticker = response['prices'][id];
                timestamp = _this336.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this336.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this337 = this,
                _arguments316 = arguments;

            params = _arguments316.length > 1 && _arguments316[1] !== undefined ? _arguments316[1] : {};

            return _this337.privatePostOrdersHistory(_this337.extend({
                'cointype': _this337.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this338 = this,
                _arguments317 = arguments;

            price = _arguments317.length > 4 && _arguments317[4] !== undefined ? _arguments317[4] : undefined;
            params = _arguments317.length > 5 && _arguments317[5] !== undefined ? _arguments317[5] : {};
            method = 'privatePostMy' + _this338.capitalize(side);

            if (type == 'market') {
                throw new ExchangeError(_this338.id + ' allows limit orders only');
            }order = {
                'cointype': _this338.marketId(market),
                'amount': amount,
                'rate': price
            };

            return _this338[method](_this338.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                method,
                _this339 = this,
                _arguments318 = arguments;

            params = _arguments318.length > 1 && _arguments318[1] !== undefined ? _arguments318[1] : {};

            throw new ExchangeError(_this339.id + ' cancelOrder () is not fully implemented yet');
            method = 'privatePostMyBuy';

            return _this339[method]({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests');
            var url = this.urls['api'][api] + '/' + path;
            if (api == 'private') {
                var nonce = this.nonce();
                body = this.json(this.extend({ 'nonce': nonce }, params));
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length,
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var cryptopia = {

        'id': 'cryptopia',
        'name': 'Cryptopia',
        'rateLimit': 1500,
        'countries': 'NZ', // New Zealand
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg',
            'api': 'https://www.cryptopia.co.nz/api',
            'www': 'https://www.cryptopia.co.nz',
            'doc': ['https://www.cryptopia.co.nz/Forum/Thread/255', 'https://www.cryptopia.co.nz/Forum/Thread/256']
        },
        'api': {
            'public': {
                'get': ['GetCurrencies', 'GetTradePairs', 'GetMarkets', 'GetMarkets/{id}', 'GetMarkets/{hours}', 'GetMarkets/{id}/{hours}', 'GetMarket/{id}', 'GetMarket/{id}/{hours}', 'GetMarketHistory/{id}', 'GetMarketHistory/{id}/{hours}', 'GetMarketOrders/{id}', 'GetMarketOrders/{id}/{count}', 'GetMarketOrderGroups/{ids}/{count}']
            },
            'private': {
                'post': ['CancelTrade', 'GetBalance', 'GetDepositAddress', 'GetOpenOrders', 'GetTradeHistory', 'GetTransactions', 'SubmitTip', 'SubmitTrade', 'SubmitTransfer', 'SubmitWithdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                result,
                markets,
                i,
                market,
                id,
                symbol,
                _symbol$split9,
                _symbol$split10,
                base,
                quote,
                _this340 = this;

            return Promise.resolve().then(function () {
                return _this340.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = [];
                markets = response['Data'];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    id = market['TradePairId'];
                    symbol = market['Label'];
                    _symbol$split9 = symbol.split('/');
                    _symbol$split10 = _slicedToArray(_symbol$split9, 2);
                    base = _symbol$split10[0];
                    quote = _symbol$split10[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                _this341 = this,
                _arguments320 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments320.length > 1 && _arguments320[1] !== undefined ? _arguments320[1] : {};
                return _this341.loadMarkets();
            }).then(function () {
                return _this341.publicGetMarketOrdersId(_this341.extend({
                    'id': _this341.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['Data'];

                return _this341.parseOrderBook(orderbook, undefined, 'Buy', 'Sell', 'Price', 'Volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'info': ticker,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['BidPrice']),
                'ask': parseFloat(ticker['AskPrice']),
                'vwap': undefined,
                'open': parseFloat(ticker['Open']),
                'close': parseFloat(ticker['Close']),
                'first': undefined,
                'last': parseFloat(ticker['LastPrice']),
                'change': parseFloat(ticker['Change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume'])
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this342 = this;

            return Promise.resolve().then(function () {
                return _this342.loadMarkets();
            }).then(function () {
                market = _this342.market(symbol);
                return _this342.publicGetMarketId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['Data'];

                return _this342.parseTicker(ticker, market);
            });
        },
        fetchTickers: function fetchTickers() {
            var response,
                result,
                tickers,
                i,
                ticker,
                id,
                market,
                symbol,
                _this343 = this;

            return Promise.resolve().then(function () {
                return _this343.loadMarkets();
            }).then(function () {
                return _this343.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                tickers = response['Data'];

                for (i = 0; i < tickers.length; i++) {
                    ticker = tickers[i];
                    id = ticker['TradePairId'];
                    market = _this343.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this343.parseTicker(ticker, market);
                }
                return result;
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['Timestamp'] * 1000;
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['Type'].toLowerCase(),
                'price': trade['Price'],
                'amount': trade['Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                trades,
                _this344 = this,
                _arguments323 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments323.length > 1 && _arguments323[1] !== undefined ? _arguments323[1] : {};
                return _this344.loadMarkets();
            }).then(function () {
                market = _this344.market(symbol);
                return _this344.publicGetMarketHistoryIdHours(_this344.extend({
                    'id': market['id'],
                    'hours': 24 // default
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['Data'];

                return _this344.parseTrades(trades, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                i,
                balance,
                currency,
                account,
                _this345 = this,
                _arguments324 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments324.length > 0 && _arguments324[0] !== undefined ? _arguments324[0] : {};
                return _this345.loadMarkets();
            }).then(function () {
                return _this345.privatePostGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['Data'];
                result = { 'info': response };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    currency = balance['Symbol'];
                    account = {
                        'free': balance['Available'],
                        'used': 0.0,
                        'total': balance['Total']
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this346 = this,
                _arguments325 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments325.length > 4 && _arguments325[4] !== undefined ? _arguments325[4] : undefined;
                params = _arguments325.length > 5 && _arguments325[5] !== undefined ? _arguments325[5] : {};
                return _this346.loadMarkets();
            }).then(function () {
                order = {
                    'TradePairId': _this346.marketId(market),
                    'Type': _this346.capitalize(side),
                    'Rate': price,
                    'Amount': amount
                };
                return _this346.privatePostSubmitTrade(_this346.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Data']['OrderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this347 = this;

            return Promise.resolve().then(function () {
                return _this347.loadMarkets();
            }).then(function () {
                return _this347.privatePostCancelTrade({
                    'Type': 'Trade',
                    'OrderId': id
                });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else if ('Market' in order) {
                var id = order['Market'];
                if (id in this.markets_by_id) {
                    market = this.markets_by_id[id];
                    symbol = market['symbol'];
                }
            }
            var timestamp = this.parse8601(order['TimeStamp']);
            var amount = order['Amount'];
            var remaining = order['Remaining'];
            var filled = amount - remaining;
            return {
                'id': order['OrderId'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'status': order['status'],
                'symbol': symbol,
                'type': 'limit',
                'side': order['Type'].toLowerCase(),
                'price': order['Rate'],
                'amount': amount,
                'filled': filled,
                'remaining': remaining
                // 'trades': this.parseTrades (order['trades'], market),
            };
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                response,
                orders,
                result,
                i,
                order,
                _this348 = this,
                _arguments327 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments327.length > 0 && _arguments327[0] !== undefined ? _arguments327[0] : undefined;
                params = _arguments327.length > 1 && _arguments327[1] !== undefined ? _arguments327[1] : {};

                if (!symbol) {
                    throw new ExchangeError(_this348.id + ' fetchOpenOrders requires a symbol param');
                }return _this348.loadMarkets();
            }).then(function () {
                market = _this348.market(symbol);
                return _this348.privatePostGetOpenOrders({
                    // 'Market': market['id'],
                    'TradePairId': market['id'] // Cryptopia identifier (not required if 'Market' supplied)
                    // 'Count': 100, // default = 100
                }, params);
            }).then(function (_resp) {
                response = _resp;
                orders = response['Data'];
                result = [];

                for (i = 0; i < orders.length; i++) {
                    order = orders[i];

                    result.push(_this348.extend(order, { 'status': 'open' }));
                }
                return _this348.parseOrders(result, market);
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this349 = this,
                _arguments328 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments328.length > 3 && _arguments328[3] !== undefined ? _arguments328[3] : {};
                return _this349.loadMarkets();
            }).then(function () {
                return _this349.privatePostSubmitWithdraw(_this349.extend({
                    'Currency': currency,
                    'Amount': amount,
                    'Address': address // Address must exist in you AddressBook in security settings
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Data']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _hash,
                secret,
                uri,
                lowercase,
                payload,
                signature,
                auth,
                response,
                _test13,
                _test14,
                _this350 = this,
                _arguments329 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments329.length > 1 && _arguments329[1] !== undefined ? _arguments329[1] : 'public';
                method = _arguments329.length > 2 && _arguments329[2] !== undefined ? _arguments329[2] : 'GET';
                params = _arguments329.length > 3 && _arguments329[3] !== undefined ? _arguments329[3] : {};
                headers = _arguments329.length > 4 && _arguments329[4] !== undefined ? _arguments329[4] : undefined;
                body = _arguments329.length > 5 && _arguments329[5] !== undefined ? _arguments329[5] : undefined;
                url = _this350.urls['api'] + '/' + _this350.implodeParams(path, params);
                query = _this350.omit(params, _this350.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this350.urlencode(query);
                    }
                } else {
                    nonce = _this350.nonce().toString();

                    body = _this350.json(query);
                    _hash = _this350.hash(_this350.encode(body), 'md5', 'base64');
                    secret = _this350.base64ToBinary(_this350.secret);
                    uri = _this350.encodeURIComponent(url);
                    lowercase = uri.toLowerCase();
                    payload = _this350.apiKey + method + lowercase + nonce + _this350.binaryToString(_hash);
                    signature = _this350.hmac(_this350.encode(payload), secret, 'sha256', 'base64');
                    auth = 'amx ' + _this350.apiKey + ':' + _this350.binaryToString(signature) + ':' + nonce;

                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length,
                        'Authorization': auth
                    };
                }
                return _this350.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test13 = response;
                _test14 = _test13 && 'Success' in response;

                if (_test14 && response['Success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this350.id + ' ' + _this350.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var dsx = {

        'id': 'dsx',
        'name': 'DSX',
        'countries': 'UK',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',
            'api': {
                'mapi': 'https://dsx.uk/mapi', // market data
                'tapi': 'https://dsx.uk/tapi', // trading
                'dwapi': 'https://dsx.uk/dwapi' // deposit/withdraw
            },
            'www': 'https://dsx.uk',
            'doc': ['https://api.dsx.uk', 'https://dsx.uk/api_docs/public', 'https://dsx.uk/api_docs/private', '']
        },
        'api': {
            'mapi': { // market data (public)
                'get': ['barsFromMoment/{id}/{period}/{start}', // empty reply :\
                'depth/{id}', 'info', 'lastBars/{id}/{period}/{amount}', // period is (m, h or d)
                'periodBars/{id}/{period}/{start}/{end}', 'ticker/{id}', 'trades/{id}']
            },
            'tapi': { // trading (private)
                'post': ['getInfo', 'TransHistory', 'TradeHistory', 'OrderHistory', 'ActiveOrders', 'Trade', 'CancelOrder']
            },
            'dwapi': { // deposit / withdraw (private)
                'post': ['getCryptoDepositAddress', 'cryptoWithdraw', 'fiatWithdraw', 'getTransactionStatus', 'getTransactions']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                symbol,
                _this351 = this;

            return Promise.resolve().then(function () {
                return _this351.mapiGetInfo();
            }).then(function (_resp) {
                response = _resp;
                keys = Object.keys(response['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = response['pairs'][id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                account,
                _this352 = this,
                _arguments331 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments331.length > 0 && _arguments331[0] !== undefined ? _arguments331[0] : {};
                return _this352.loadMarkets();
            }).then(function () {
                return _this352.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['total']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': balances['funds'][currency],
                        'used': 0.0,
                        'total': balances['total'][currency]
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this353 = this,
                _arguments332 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments332.length > 1 && _arguments332[1] !== undefined ? _arguments332[1] : {};
                return _this353.loadMarkets();
            }).then(function () {
                market = _this353.market(symbol);
                return _this353.mapiGetDepthId(_this353.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];

                return _this353.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                timestamp,
                _this354 = this;

            return Promise.resolve().then(function () {
                return _this354.loadMarkets();
            }).then(function () {
                market = _this354.market(symbol);
                return _this354.mapiGetTickerId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response[market['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this354.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker['vol_cur']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                _this355 = this,
                _arguments334 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments334.length > 1 && _arguments334[1] !== undefined ? _arguments334[1] : {};
                return _this355.loadMarkets();
            }).then(function () {
                return _this355.mapiGetTradesId(_this355.extend({
                    'id': _this355.marketId(symbol)
                }, params));
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this356 = this,
                _arguments335 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments335.length > 4 && _arguments335[4] !== undefined ? _arguments335[4] : undefined;
                params = _arguments335.length > 5 && _arguments335[5] !== undefined ? _arguments335[5] : {};
                return _this356.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this356.id + ' allows limit orders only');
                }order = {
                    'pair': _this356.marketId(symbol),
                    'type': side,
                    'rate': price,
                    'amount': amount
                };
                return _this356.tapiPostTrade(_this356.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['orderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this357 = this;

            return Promise.resolve().then(function () {
                return _this357.loadMarkets();
            }).then(function () {
                return _this357.tapiPostCancelOrder({ 'orderId': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _method,
                response,
                _test15,
                _this358 = this,
                _arguments337 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments337.length > 1 && _arguments337[1] !== undefined ? _arguments337[1] : 'mapi';
                method = _arguments337.length > 2 && _arguments337[2] !== undefined ? _arguments337[2] : 'GET';
                params = _arguments337.length > 3 && _arguments337[3] !== undefined ? _arguments337[3] : {};
                headers = _arguments337.length > 4 && _arguments337[4] !== undefined ? _arguments337[4] : undefined;
                body = _arguments337.length > 5 && _arguments337[5] !== undefined ? _arguments337[5] : undefined;
                url = _this358.urls['api'][api];

                if (api == 'mapi' || api == 'dwapi') {
                    url += '/' + _this358.implodeParams(path, params);
                }query = _this358.omit(params, _this358.extractParams(path));

                if (api == 'mapi') {
                    if (Object.keys(query).length) {
                        url += '?' + _this358.urlencode(query);
                    }
                } else {
                    nonce = _this358.nonce();
                    _method = path;

                    body = _this358.urlencode(_this358.extend({
                        'method': path,
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this358.apiKey,
                        'Sign': _this358.hmac(_this358.encode(body), _this358.encode(_this358.secret), 'sha512', 'base64')
                    };
                }
                return _this358.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'mapi') {
                    return response;
                } else {
                    _test15 = 'success' in response;

                    if (_test15 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this358.id + ' ' + _this358.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var exmo = {

        'id': 'exmo',
        'name': 'EXMO',
        'countries': ['ES', 'RU'], // Spain, Russia
        'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
            'api': 'https://api.exmo.com',
            'www': 'https://exmo.me',
            'doc': ['https://exmo.me/ru/api_doc', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs']
        },
        'api': {
            'public': {
                'get': ['currency', 'order_book', 'pair_settings', 'ticker', 'trades']
            },
            'private': {
                'post': ['user_info', 'order_create', 'order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'required_amount', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'wallet_history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split11,
                _symbol$split12,
                base,
                quote,
                _this359 = this;

            return Promise.resolve().then(function () {
                return _this359.publicGetPairSettings();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    symbol = id.replace('_', '/');
                    _symbol$split11 = symbol.split('/');
                    _symbol$split12 = _slicedToArray(_symbol$split11, 2);
                    base = _symbol$split12[0];
                    quote = _symbol$split12[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                c,
                currency,
                account,
                _this360 = this,
                _arguments339 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments339.length > 0 && _arguments339[0] !== undefined ? _arguments339[0] : {};
                return _this360.loadMarkets();
            }).then(function () {
                return _this360.privatePostUserInfo();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (c = 0; c < _this360.currencies.length; c++) {
                    currency = _this360.currencies[c];
                    account = _this360.account();

                    if (currency in response['balances']) {
                        account['free'] = parseFloat(response['balances'][currency]);
                    }if (currency in response['reserved']) {
                        account['used'] = parseFloat(response['reserved'][currency]);
                    }account['total'] = _this360.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this361 = this,
                _arguments340 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments340.length > 1 && _arguments340[1] !== undefined ? _arguments340[1] : {};
                return _this361.loadMarkets();
            }).then(function () {
                market = _this361.market(symbol);
                return _this361.publicGetOrderBook(_this361.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];

                return _this361.parseOrderBook(orderbook, undefined, 'bid', 'ask');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy_price']),
                'ask': parseFloat(ticker['sell_price']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['vol_curr']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                response,
                result,
                ids,
                i,
                id,
                market,
                symbol,
                ticker,
                _this362 = this,
                _arguments341 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments341.length > 0 && _arguments341[0] !== undefined ? _arguments341[0] : 'USD';
                return _this362.loadMarkets();
            }).then(function () {
                return _this362.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                ids = Object.keys(response);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this362.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = response[id];

                    result[symbol] = _this362.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                market,
                _this363 = this;

            return Promise.resolve().then(function () {
                return _this363.loadMarkets();
            }).then(function () {
                return _this363.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                market = _this363.market(symbol);

                return _this363.parseTicker(response[market['id']], market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['trade_id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this364 = this,
                _arguments343 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments343.length > 1 && _arguments343[1] !== undefined ? _arguments343[1] : {};
                return _this364.loadMarkets();
            }).then(function () {
                market = _this364.market(symbol);
                return _this364.publicGetTrades(_this364.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this364.parseTrades(response[market['id']], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                response,
                _this365 = this,
                _arguments344 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments344.length > 4 && _arguments344[4] !== undefined ? _arguments344[4] : undefined;
                params = _arguments344.length > 5 && _arguments344[5] !== undefined ? _arguments344[5] : {};
                return _this365.loadMarkets();
            }).then(function () {
                prefix = '';

                if (type == 'market') {
                    prefix = 'market_';
                }order = {
                    'pair': _this365.marketId(symbol),
                    'quantity': amount,
                    'price': price || 0,
                    'type': prefix + side
                };
                return _this365.privatePostOrderCreate(_this365.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this366 = this;

            return Promise.resolve().then(function () {
                return _this366.loadMarkets();
            }).then(function () {
                return _this366.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test16,
                _this367 = this,
                _arguments346 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments346.length > 1 && _arguments346[1] !== undefined ? _arguments346[1] : 'public';
                method = _arguments346.length > 2 && _arguments346[2] !== undefined ? _arguments346[2] : 'GET';
                params = _arguments346.length > 3 && _arguments346[3] !== undefined ? _arguments346[3] : {};
                headers = _arguments346.length > 4 && _arguments346[4] !== undefined ? _arguments346[4] : undefined;
                body = _arguments346.length > 5 && _arguments346[5] !== undefined ? _arguments346[5] : undefined;
                url = _this367.urls['api'] + '/' + _this367.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this367.urlencode(params);
                    }
                } else {
                    nonce = _this367.nonce();

                    body = _this367.urlencode(_this367.extend({ 'nonce': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this367.apiKey,
                        'Sign': _this367.hmac(_this367.encode(body), _this367.encode(_this367.secret), 'sha512')
                    };
                }
                return _this367.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test16 = 'result' in response;

                if (_test16 && response['result']) {
                    return response;
                } else {
                    if (_test16) {
                        throw new ExchangeError(_this367.id + ' ' + _this367.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var flowbtc = {

        'id': 'flowbtc',
        'name': 'flowBTC',
        'countries': 'BR', // Brazil
        'version': 'v1',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',
            'api': 'https://api.flowbtc.com:8400/ajax',
            'www': 'https://trader.flowbtc.com',
            'doc': 'http://www.flowbtc.com.br/api/'
        },
        'api': {
            'public': {
                'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']
            },
            'private': {
                'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this368 = this;

            return Promise.resolve().then(function () {
                return _this368.publicPostGetProductPairs();
            }).then(function (_resp) {
                response = _resp;
                markets = response['productPairs'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['name'];
                    base = market['product1Label'];
                    quote = market['product2Label'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this369 = this,
                _arguments348 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments348.length > 0 && _arguments348[0] !== undefined ? _arguments348[0] : {};
                return _this369.loadMarkets();
            }).then(function () {
                return _this369.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['currencies'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['name'];
                    account = {
                        'free': balance['balance'],
                        'used': balance['hold'],
                        'total': 0.0
                    };

                    account['total'] = _this369.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this370 = this,
                _arguments349 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments349.length > 1 && _arguments349[1] !== undefined ? _arguments349[1] : {};
                return _this370.loadMarkets();
            }).then(function () {
                market = _this370.market(symbol);
                return _this370.publicPostGetOrderBook(_this370.extend({
                    'productPair': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this370.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'px', 'qty');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                _this371 = this;

            return Promise.resolve().then(function () {
                return _this371.loadMarkets();
            }).then(function () {
                market = _this371.market(symbol);
                return _this371.publicPostGetTicker({
                    'productPair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this371.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this371.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume24hr']),
                    'quoteVolume': parseFloat(ticker['volume24hrProduct2']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['unixtime'] * 1000;
            var side = trade['incomingOrderSide'] == 0 ? 'buy' : 'sell';
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['px'],
                'amount': trade['qty']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this372 = this,
                _arguments351 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments351.length > 1 && _arguments351[1] !== undefined ? _arguments351[1] : {};
                return _this372.loadMarkets();
            }).then(function () {
                market = _this372.market(symbol);
                return _this372.publicPostGetTrades(_this372.extend({
                    'ins': market['id'],
                    'startIndex': -1
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this372.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                response,
                _this373 = this,
                _arguments352 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments352.length > 4 && _arguments352[4] !== undefined ? _arguments352[4] : undefined;
                params = _arguments352.length > 5 && _arguments352[5] !== undefined ? _arguments352[5] : {};
                return _this373.loadMarkets();
            }).then(function () {
                orderType = type == 'market' ? 1 : 0;
                order = {
                    'ins': _this373.marketId(symbol),
                    'side': side,
                    'orderType': orderType,
                    'qty': amount,
                    'px': price
                };
                return _this373.privatePostCreateOrder(_this373.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['serverOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this374 = this,
                _arguments353 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments353.length > 1 && _arguments353[1] !== undefined ? _arguments353[1] : {};
                return _this374.loadMarkets();
            }).then(function () {
                if ('ins' in params) {
                    return _this374.privatePostCancelOrder(_this374.extend({
                        'serverOrderId': id
                    }, params));
                } else {
                    throw new ExchangeError(_this374.id + ' requires `ins` symbol parameter for cancelling an order');
                }
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test17,
                _this375 = this,
                _arguments354 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments354.length > 1 && _arguments354[1] !== undefined ? _arguments354[1] : 'public';
                method = _arguments354.length > 2 && _arguments354[2] !== undefined ? _arguments354[2] : 'GET';
                params = _arguments354.length > 3 && _arguments354[3] !== undefined ? _arguments354[3] : {};
                headers = _arguments354.length > 4 && _arguments354[4] !== undefined ? _arguments354[4] : undefined;
                body = _arguments354.length > 5 && _arguments354[5] !== undefined ? _arguments354[5] : undefined;
                url = _this375.urls['api'] + '/' + _this375.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        body = _this375.json(params);
                    }
                } else {
                    if (!_this375.uid) {
                        throw new AuthenticationError(_this375.id + ' requires `' + _this375.id + '.uid` property for authentication');
                    }nonce = _this375.nonce();
                    auth = nonce.toString() + _this375.uid + _this375.apiKey;
                    signature = _this375.hmac(_this375.encode(auth), _this375.encode(_this375.secret));

                    body = _this375.json(_this375.extend({
                        'apiKey': _this375.apiKey,
                        'apiNonce': nonce,
                        'apiSig': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this375.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test17 = 'isAccepted' in response;

                if (_test17 && response['isAccepted']) {
                    return response;
                } else {
                    throw new ExchangeError(_this375.id + ' ' + _this375.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var foxbit = extend(blinktrade, {
        'id': 'foxbit',
        'name': 'FoxBit',
        'countries': 'BR',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://foxbit.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var fyb = {

        'rateLimit': 1500,
        'api': {
            'public': {
                'get': ['ticker', 'tickerdetailed', 'orderbook', 'trades']
            },
            'private': {
                'post': ['test', 'getaccinfo', 'getpendingorders', 'getorderhistory', 'cancelpendingorder', 'placeorder', 'withdraw']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balance,
                btc,
                symbol,
                quote,
                lowercase,
                fiat,
                crypto,
                accounts,
                _this376 = this,
                _arguments355 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments355.length > 0 && _arguments355[0] !== undefined ? _arguments355[0] : {};
                return _this376.privatePostGetaccinfo();
            }).then(function (_resp) {
                balance = _resp;
                btc = parseFloat(balance['btcBal']);
                symbol = _this376.symbols[0];
                quote = _this376.markets[symbol]['quote'];
                lowercase = quote.toLowerCase() + 'Bal';
                fiat = parseFloat(balance[lowercase]);
                crypto = {
                    'free': btc,
                    'used': 0.0,
                    'total': btc
                };
                accounts = { 'BTC': crypto };

                accounts[quote] = {
                    'free': fiat,
                    'used': 0.0,
                    'total': fiat
                };
                accounts['info'] = balance;
                return accounts;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this377 = this,
                _arguments356 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments356.length > 1 && _arguments356[1] !== undefined ? _arguments356[1] : {};
                return _this377.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this377.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                last,
                volume,
                _this378 = this;

            return Promise.resolve().then(function () {
                return _this378.publicGetTickerdetailed();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this378.milliseconds();
                last = undefined;
                volume = undefined;

                if ('last' in ticker) {
                    last = parseFloat(ticker['last']);
                }if ('vol' in ticker) {
                    volume = parseFloat(ticker['vol']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this378.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this379 = this,
                _arguments358 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments358.length > 1 && _arguments358[1] !== undefined ? _arguments358[1] : {};
                market = _this379.market(symbol);
                return _this379.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this379.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this380 = this,
                _arguments359 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments359.length > 4 && _arguments359[4] !== undefined ? _arguments359[4] : undefined;
                params = _arguments359.length > 5 && _arguments359[5] !== undefined ? _arguments359[5] : {};
                return _this380.privatePostPlaceorder(_this380.extend({
                    'qty': amount,
                    'price': price,
                    'type': side[0].toUpperCase()
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['pending_oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this381 = this;

            return _this381.privatePostCancelpendingorder({ 'orderNo': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this382 = this,
                _arguments361 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments361.length > 1 && _arguments361[1] !== undefined ? _arguments361[1] : 'public';
                method = _arguments361.length > 2 && _arguments361[2] !== undefined ? _arguments361[2] : 'GET';
                params = _arguments361.length > 3 && _arguments361[3] !== undefined ? _arguments361[3] : {};
                headers = _arguments361.length > 4 && _arguments361[4] !== undefined ? _arguments361[4] : undefined;
                body = _arguments361.length > 5 && _arguments361[5] !== undefined ? _arguments361[5] : undefined;
                url = _this382.urls['api'] + '/' + path;

                if (api == 'public') {
                    url += '.json';
                } else {
                    nonce = _this382.nonce();

                    body = _this382.urlencode(_this382.extend({ 'timestamp': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this382.apiKey,
                        'sig': _this382.hmac(_this382.encode(body), _this382.encode(_this382.secret), 'sha1')
                    };
                }
                return _this382.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('error' in response) {
                        if (response['error']) {
                            throw new ExchangeError(_this382.id + ' ' + _this382.json(response));
                        }
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var fybse = extend(fyb, {
        'id': 'fybse',
        'name': 'FYB-SE',
        'countries': 'SE', // Sweden
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
            'api': 'https://www.fybse.se/api/SEK',
            'www': 'https://www.fybse.se',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' }
        }
    });

    //-----------------------------------------------------------------------------

    var fybsg = extend(fyb, {
        'id': 'fybsg',
        'name': 'FYB-SG',
        'countries': 'SG', // Singapore
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',
            'api': 'https://www.fybsg.com/api/SGD',
            'www': 'https://www.fybsg.com',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' }
        }
    });

    //-----------------------------------------------------------------------------

    var gatecoin = {

        'id': 'gatecoin',
        'name': 'Gatecoin',
        'rateLimit': 2000,
        'countries': 'HK', // Hong Kong
        'comment': 'a regulated/licensed exchange',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '15m': '15m',
            '1h': '1h',
            '6h': '6h',
            '1d': '24h'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',
            'api': 'https://api.gatecoin.com',
            'www': 'https://gatecoin.com',
            'doc': ['https://gatecoin.com/api', 'https://github.com/Gatecoin/RESTful-API-Implementation', 'https://api.gatecoin.com/swagger-ui/index.html']
        },
        'api': {
            'public': {
                'get': ['Public/ExchangeRate', // Get the exchange rates
                'Public/LiveTicker', // Get live ticker for all currency
                'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency
                'Public/LiveTickers', // Get live ticker for all currency
                'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.
                'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency
                'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency
                'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history
                'Public/Transactions/{CurrencyPair}', // Gets recent transactions
                'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions
                'Reference/BusinessNatureList', // Get the business nature list.
                'Reference/Countries', // Get the country list.
                'Reference/Currencies', // Get the currency list.
                'Reference/CurrencyPairs', // Get the currency pair list.
                'Reference/CurrentStatusList', // Get the current status list.
                'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.
                'Reference/IncomeRangeList', // Get the income range list.
                'Reference/IncomeSourceList', // Get the income source list.
                'Reference/VerificationLevelList', // Get the verif level list.
                'Stream/PublicChannel'],
                'post': ['Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date
                'Ping', // Post a string, then get it back.
                'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails
                'RegisterUser']
            },
            'private': {
                'get': ['Account/CorporateData', // Get corporate account data
                'Account/DocumentAddress', // Check if residence proof uploaded
                'Account/DocumentCorporation', // Check if registered document uploaded
                'Account/DocumentID', // Check if ID document copy uploaded
                'Account/DocumentInformation', // Get Step3 Data
                'Account/Email', // Get user email
                'Account/FeeRate', // Get fee rate of logged in user
                'Account/Level', // Get verif level of logged in user
                'Account/PersonalInformation', // Get Step1 Data
                'Account/Phone', // Get user phone number
                'Account/Profile', // Get trader profile
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Get referral information
                'Account/ReferralCode', // Get the referral code of the logged in user
                'Account/ReferralNames', // Get names of referred traders
                'Account/ReferralReward', // Get referral reward information
                'Account/ReferredCode', // Get referral code
                'Account/ResidentInformation', // Get Step2 Data
                'Account/SecuritySettings', // Get verif details of logged in user
                'Account/User', // Get all user info
                'APIKey/APIKey', // Get API Key for logged in user
                'Auth/ConnectionHistory', // Gets connection history of logged in user
                'Balance/Balances', // Gets the available balance for each currency for the logged in account.
                'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.
                'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user
                'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user
                'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit
                'Bank/Transactions', // Get all account transactions of the logged in user
                'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.
                'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.
                'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.
                'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.
                'Info/ReferenceCurrency', // Get user's reference currency
                'Info/ReferenceLanguage', // Get user's reference language
                'Notification/Messages', // Get from oldest unread + 3 read message to newest messages
                'Trade/Orders', // Gets open orders for the logged in trader.
                'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.
                'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/Trades', // Gets all transactions of logged in user
                'Trade/UserTrades'],
                'post': ['Account/DocumentAddress', // Upload address proof document
                'Account/DocumentCorporation', // Upload registered document document
                'Account/DocumentID', // Upload ID document copy
                'Account/Email/RequestVerify', // Request for verification email
                'Account/Email/Verify', // Verification email
                'Account/GoogleAuth', // Enable google auth
                'Account/Level', // Request verif level of logged in user
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Post a referral email
                'APIKey/APIKey', // Create a new API key for logged in user
                'Auth/ChangePassword', // Change password.
                'Auth/ForgotPassword', // Request reset password
                'Auth/ForgotUserID', // Request user id
                'Auth/Login', // Trader session log in.
                'Auth/Logout', // Logout from the current session.
                'Auth/LogoutOtherSessions', // Logout other sessions.
                'Auth/ResetPassword', // Reset password
                'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account
                'Bank/UserAccounts', // Add an account the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.
                'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.
                'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.
                'Notification/Messages', // Mark all as read
                'Notification/Messages/{ID}', // Mark as read
                'Trade/Orders', // Place an order at the exchange.
                'Trade/StopOrders'],
                'put': ['Account/CorporateData', // Update user company data for corporate account
                'Account/DocumentID', // Update ID document meta data
                'Account/DocumentInformation', // Update Step3 Data
                'Account/Email', // Update user email
                'Account/PersonalInformation', // Update Step1 Data
                'Account/Phone', // Update user phone number
                'Account/Questionnaire', // update the questionnaire
                'Account/ReferredCode', // Update referral code
                'Account/ResidentInformation', // Update Step2 Data
                'Account/SecuritySettings', // Update verif details of logged in user
                'Account/User', // Update all user info
                'Bank/UserAccounts', // Update the label of existing user bank accounnt
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address
                'Info/ReferenceCurrency', // User's reference currency
                'Info/ReferenceLanguage'],
                'delete': ['APIKey/APIKey/{PublicKey}', // Remove an API key
                'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user
                'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.
                'Trade/Orders', // Cancels all existing order
                'Trade/Orders/{OrderID}', // Cancels an existing order
                'Trade/StopOrders', // Cancels all existing stop orders
                'Trade/StopOrders/{ID}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this383 = this;

            return Promise.resolve().then(function () {
                return _this383.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                markets = response['tickers'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currencyPair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this384 = this,
                _arguments363 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments363.length > 0 && _arguments363[0] !== undefined ? _arguments363[0] : {};
                return _this384.loadMarkets();
            }).then(function () {
                return _this384.privateGetBalanceBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': balance['availableBalance'],
                        'used': _this384.sum(balance['pendingIncoming'], balance['pendingOutgoing'], balance['openOrder']),
                        'total': balance['balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this385 = this,
                _arguments364 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments364.length > 1 && _arguments364[1] !== undefined ? _arguments364[1] : {};
                return _this385.loadMarkets();
            }).then(function () {
                market = _this385.market(symbol);
                return _this385.publicGetPublicMarketDepthCurrencyPair(_this385.extend({
                    'CurrencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this385.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = parseInt(ticker['createDateTime']) * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _this386 = this;

            return Promise.resolve().then(function () {
                return _this386.loadMarkets();
            }).then(function () {
                return _this386.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['tickers'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['currencyPair'];
                    market = _this386.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this386.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this387 = this;

            return Promise.resolve().then(function () {
                return _this387.loadMarkets();
            }).then(function () {
                market = _this387.market(symbol);
                return _this387.publicGetPublicLiveTickerCurrencyPair({
                    'CurrencyPair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this387.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = undefined;
            var order = undefined;
            if ('way' in trade) {
                side = trade['way'] == 'bid' ? 'buy' : 'sell';
                var orderId = trade['way'] + 'OrderId';
                order = trade[orderId];
            }
            var timestamp = parseInt(trade['transactionTime']) * 1000;
            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'info': trade,
                'id': trade['transactionId'].toString(),
                'order': order,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this388 = this,
                _arguments367 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments367.length > 1 && _arguments367[1] !== undefined ? _arguments367[1] : {};
                return _this388.loadMarkets();
            }).then(function () {
                market = _this388.market(symbol);
                return _this388.publicGetPublicTransactionsCurrencyPair(_this388.extend({
                    'CurrencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this388.parseTrades(response['transactions'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [parseInt(ohlcv['createDateTime']) * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], undefined, ohlcv['volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this389 = this,
                _arguments368 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments368.length > 1 && _arguments368[1] !== undefined ? _arguments368[1] : '1m';
                since = _arguments368.length > 2 && _arguments368[2] !== undefined ? _arguments368[2] : undefined;
                limit = _arguments368.length > 3 && _arguments368[3] !== undefined ? _arguments368[3] : undefined;
                params = _arguments368.length > 4 && _arguments368[4] !== undefined ? _arguments368[4] : {};
                return _this389.loadMarkets();
            }).then(function () {
                market = _this389.market(symbol);
                request = {
                    'CurrencyPair': market['id'],
                    'Timeframe': _this389.timeframes[timeframe]
                };

                if (limit) {
                    request['Count'] = limit;
                }request = _this389.extend(request, params);
                return _this389.publicGetPublicTickerHistoryCurrencyPairTimeframe(request);
            }).then(function (_resp) {
                response = _resp;

                return _this389.parseOHLCVs(response['tickers'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this390 = this,
                _arguments369 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments369.length > 4 && _arguments369[4] !== undefined ? _arguments369[4] : undefined;
                params = _arguments369.length > 5 && _arguments369[5] !== undefined ? _arguments369[5] : {};
                return _this390.loadMarkets();
            }).then(function () {
                order = {
                    'Code': _this390.marketId(symbol),
                    'Way': side == 'buy' ? 'Bid' : 'Ask',
                    'Amount': amount
                };

                if (type == 'limit') {
                    order['Price'] = price;
                }if (_this390.twofa) {
                    if ('ValidationCode' in params) {
                        order['ValidationCode'] = params['ValidationCode'];
                    } else {
                        throw new AuthenticationError(_this390.id + ' two-factor authentication requires a missing ValidationCode parameter');
                    }
                }
                return _this390.privatePostTradeOrders(_this390.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['clOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this391 = this;

            return Promise.resolve().then(function () {
                return _this391.loadMarkets();
            }).then(function () {
                return _this391.privateDeleteTradeOrdersOrderID({ 'OrderID': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                contentType,
                auth,
                signature,
                response,
                _test18,
                _test19,
                _this392 = this,
                _arguments371 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments371.length > 1 && _arguments371[1] !== undefined ? _arguments371[1] : 'public';
                method = _arguments371.length > 2 && _arguments371[2] !== undefined ? _arguments371[2] : 'GET';
                params = _arguments371.length > 3 && _arguments371[3] !== undefined ? _arguments371[3] : {};
                headers = _arguments371.length > 4 && _arguments371[4] !== undefined ? _arguments371[4] : undefined;
                body = _arguments371.length > 5 && _arguments371[5] !== undefined ? _arguments371[5] : undefined;
                url = _this392.urls['api'] + '/' + _this392.implodeParams(path, params);
                query = _this392.omit(params, _this392.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this392.urlencode(query);
                    }
                } else {
                    nonce = _this392.nonce();
                    contentType = method == 'GET' ? '' : 'application/json';
                    auth = method + url + contentType + nonce.toString();

                    auth = auth.toLowerCase();
                    signature = _this392.hmac(_this392.encode(auth), _this392.encode(_this392.secret), 'sha256', 'base64');

                    headers = {
                        'API_PUBLIC_KEY': _this392.apiKey,
                        'API_REQUEST_SIGNATURE': signature,
                        'API_REQUEST_DATE': nonce
                    };
                    if (method != 'GET') {
                        headers['Content-Type'] = contentType;
                        body = _this392.json(_this392.extend({ 'nonce': nonce }, params));
                    }
                }
                return _this392.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test18 = 'responseStatus' in response;
                _test19 = _test18 && 'message' in response['responseStatus'];

                if (_test19 && response['responseStatus']['message'] == 'OK') {
                    return response;
                } else {
                    throw new ExchangeError(_this392.id + ' ' + _this392.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gdax = {
        'id': 'gdax',
        'name': 'GDAX',
        'countries': 'US',
        'rateLimit': 1000,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': 60,
            '5m': 300,
            '15m': 900,
            '30m': 1800,
            '1h': 3600,
            '2h': 7200,
            '4h': 14400,
            '12h': 43200,
            '1d': 86400,
            '1w': 604800,
            '1M': 2592000,
            '1y': 31536000
        },
        'urls': {
            'test': 'https://api-public.sandbox.gdax.com',
            'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',
            'api': 'https://api.gdax.com',
            'www': 'https://www.gdax.com',
            'doc': 'https://docs.gdax.com'
        },
        'api': {
            'public': {
                'get': ['currencies', 'products', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']
            },
            'private': {
                'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'coinbase-accounts', 'fills', 'funding', 'orders', 'orders/{id}', 'payment-methods', 'position', 'reports/{id}', 'users/self/trailing-volume'],
                'post': ['deposits/coinbase-account', 'deposits/payment-method', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/crypto', 'withdrawals/payment-method'],
                'delete': ['orders', 'orders/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this393 = this;

            return Promise.resolve().then(function () {
                return _this393.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quote_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this394 = this,
                _arguments373 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments373.length > 0 && _arguments373[0] !== undefined ? _arguments373[0] : {};
                return _this394.loadMarkets();
            }).then(function () {
                return _this394.privateGetAccounts();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['hold']),
                        'total': parseFloat(balance['balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this395 = this,
                _arguments374 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments374.length > 1 && _arguments374[1] !== undefined ? _arguments374[1] : {};
                return _this395.loadMarkets();
            }).then(function () {
                return _this395.publicGetProductsIdBook(_this395.extend({
                    'id': _this395.marketId(market),
                    'level': 2 // 1 best bidask, 2 aggregated, 3 full
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this395.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                quote,
                timestamp,
                bid,
                ask,
                _this396 = this;

            return Promise.resolve().then(function () {
                return _this396.loadMarkets();
            }).then(function () {
                market = _this396.market(symbol);
                return _this396.publicGetProductsIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                return _this396.publicGetProductsIdStats({
                    'id': market['id']
                });
            }).then(function (_resp) {
                quote = _resp;
                timestamp = _this396.parse8601(ticker['time']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    bid = parseFloat(ticker['bid']);
                }if ('ask' in ticker) {
                    ask = parseFloat(ticker['ask']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this396.iso8601(timestamp),
                    'high': parseFloat(quote['high']),
                    'low': parseFloat(quote['low']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': parseFloat(quote['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(quote['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(['time']);
            var type = undefined;
            return {
                'id': trade['trade_id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['size'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this397 = this,
                _arguments376 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments376.length > 1 && _arguments376[1] !== undefined ? _arguments376[1] : {};
                return _this397.loadMarkets();
            }).then(function () {
                return _this397.publicGetProductsIdTrades(_this397.extend({
                    'id': _this397.marketId(market) // fixes issue #2
                }, params));
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, ohlcv[3], ohlcv[2], ohlcv[1], ohlcv[4], ohlcv[5]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                _this398 = this,
                _arguments377 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments377.length > 1 && _arguments377[1] !== undefined ? _arguments377[1] : '1m';
                since = _arguments377.length > 2 && _arguments377[2] !== undefined ? _arguments377[2] : undefined;
                limit = _arguments377.length > 3 && _arguments377[3] !== undefined ? _arguments377[3] : undefined;
                params = _arguments377.length > 4 && _arguments377[4] !== undefined ? _arguments377[4] : {};
                return _this398.loadMarkets();
            }).then(function () {
                market = _this398.market(symbol);
                return _this398.publicGetProductsIdCandles(_this398.extend({
                    'id': market['id'],
                    'granularity': _this398.timeframes[timeframe],
                    'start': since,
                    'end': limit
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this398.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        fetchTime: function fetchTime() {
            var response,
                _this399 = this;

            response = _this399.publicGetTime();

            return _this399.parse8601(response['iso']);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                oid,
                order,
                response,
                _this400 = this,
                _arguments379 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments379.length > 4 && _arguments379[4] !== undefined ? _arguments379[4] : undefined;
                params = _arguments379.length > 5 && _arguments379[5] !== undefined ? _arguments379[5] : {};
                return _this400.loadMarkets();
            }).then(function () {
                oid = _this400.nonce().toString();
                order = {
                    'product_id': _this400.marketId(market),
                    'side': side,
                    'size': amount,
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this400.privatePostOrders(_this400.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this401 = this;

            return Promise.resolve().then(function () {
                return _this401.loadMarkets();
            }).then(function () {
                return _this401.privateDeleteOrdersId({ 'id': id });
            });
        },
        getPaymentMethods: function getPaymentMethods() {
            var response,
                _this402 = this;

            return Promise.resolve().then(function () {
                return _this402.privateGetPaymentMethods();
            }).then(function (_resp) {
                response = _resp;

                return response;
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this403 = this,
                _arguments382 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments382.length > 3 && _arguments382[3] !== undefined ? _arguments382[3] : {};

                if ('payment_method_id' in params) {
                    return Promise.resolve().then(function () {
                        return _this403.loadMarkets();
                    }).then(function () {
                        return _this403.privatePostWithdraw(_this403.extend({
                            'currency': currency,
                            'amount': amount
                            // 'address': address, // they don't allow withdrawals to direct addresses
                        }, params));
                    }).then(function (_resp) {
                        response = _resp;

                        return {
                            'info': response,
                            'id': response['result']
                        };
                    });
                } else {
                    throw new ExchangeError(_this403.id + " withdraw requires a 'payment_method_id' parameter");
                }
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                what,
                secret,
                signature,
                response,
                _this406 = this,
                _arguments385 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments385.length > 1 && _arguments385[1] !== undefined ? _arguments385[1] : 'public';
                method = _arguments385.length > 2 && _arguments385[2] !== undefined ? _arguments385[2] : 'GET';
                params = _arguments385.length > 3 && _arguments385[3] !== undefined ? _arguments385[3] : {};
                headers = _arguments385.length > 4 && _arguments385[4] !== undefined ? _arguments385[4] : undefined;
                body = _arguments385.length > 5 && _arguments385[5] !== undefined ? _arguments385[5] : undefined;
                request = '/' + _this406.implodeParams(path, params);
                url = _this406.urls['api'] + request;
                query = _this406.omit(params, _this406.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this406.urlencode(query);
                    }
                } else {
                    if (!_this406.apiKey) {
                        throw new AuthenticationError(_this406.id + ' requires apiKey property for authentication and trading');
                    }if (!_this406.secret) {
                        throw new AuthenticationError(_this406.id + ' requires secret property for authentication and trading');
                    }if (!_this406.password) {
                        throw new AuthenticationError(_this406.id + ' requires password property for authentication and trading');
                    }nonce = _this406.nonce().toString();

                    if (Object.keys(query).length) {
                        body = _this406.json(query);
                    }what = nonce + method + request + (body || '');
                    secret = _this406.base64ToBinary(_this406.secret);
                    signature = _this406.hmac(_this406.encode(what), secret, 'sha256', 'base64');

                    headers = {
                        'CB-ACCESS-KEY': _this406.apiKey,
                        'CB-ACCESS-SIGN': _this406.decode(signature),
                        'CB-ACCESS-TIMESTAMP': nonce,
                        'CB-ACCESS-PASSPHRASE': _this406.password,
                        'Content-Type': 'application/json'
                    };
                }
                return _this406.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this406.id + ' ' + _this406.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gemini = {
        'id': 'gemini',
        'name': 'Gemini',
        'countries': 'US',
        'rateLimit': 1500, // 200 for private API
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
            'api': 'https://api.gemini.com',
            'www': 'https://gemini.com',
            'doc': 'https://docs.gemini.com/rest-api'
        },
        'api': {
            'public': {
                'get': ['symbols', 'pubticker/{symbol}', 'book/{symbol}', 'trades/{symbol}', 'auction/{symbol}', 'auction/{symbol}/history']
            },
            'private': {
                'post': ['order/new', 'order/cancel', 'order/cancel/session', 'order/cancel/all', 'order/status', 'orders', 'mytrades', 'tradevolume', 'balances', 'deposit/{currency}/newAddress', 'withdraw/{currency}', 'heartbeat']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                id,
                market,
                uppercase,
                base,
                quote,
                symbol,
                _this407 = this;

            return Promise.resolve().then(function () {
                return _this407.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    id = markets[p];
                    market = id;
                    uppercase = market.toUpperCase();
                    base = uppercase.slice(0, 3);
                    quote = uppercase.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this408 = this,
                _arguments387 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments387.length > 1 && _arguments387[1] !== undefined ? _arguments387[1] : {};
                return _this408.loadMarkets();
            }).then(function () {
                return _this408.publicGetBookSymbol(_this408.extend({
                    'symbol': _this408.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this408.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this409 = this;

            return Promise.resolve().then(function () {
                return _this409.loadMarkets();
            }).then(function () {
                market = _this409.market(symbol);
                return _this409.publicGetPubtickerSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['volume']['timestamp'];
                baseVolume = market['base'];
                quoteVolume = market['quote'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this409.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume'][baseVolume]),
                    'quoteVolume': parseFloat(ticker['volume'][quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestampms'];
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this410 = this,
                _arguments389 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments389.length > 1 && _arguments389[1] !== undefined ? _arguments389[1] : {};
                return _this410.loadMarkets();
            }).then(function () {
                market = _this410.market(symbol);
                return _this410.publicGetTradesSymbol(_this410.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this410.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this411 = this,
                _arguments390 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments390.length > 0 && _arguments390[0] !== undefined ? _arguments390[0] : {};
                return _this411.loadMarkets();
            }).then(function () {
                return _this411.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': 0.0,
                        'total': parseFloat(balance['amount'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this412 = this,
                _arguments391 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments391.length > 4 && _arguments391[4] !== undefined ? _arguments391[4] : undefined;
                params = _arguments391.length > 5 && _arguments391[5] !== undefined ? _arguments391[5] : {};
                return _this412.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this412.id + ' allows limit orders only');
                }order = {
                    'client_order_id': _this412.nonce(),
                    'symbol': _this412.marketId(symbol),
                    'amount': amount.toString(),
                    'price': price.toString(),
                    'side': side,
                    'type': 'exchange limit' // gemini allows limit orders only
                };
                return _this412.privatePostOrderNew(_this412.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this413 = this;

            return Promise.resolve().then(function () {
                return _this413.loadMarkets();
            }).then(function () {
                return _this413.privatePostCancelOrder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                payload,
                signature,
                response,
                _this414 = this,
                _arguments393 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments393.length > 1 && _arguments393[1] !== undefined ? _arguments393[1] : 'public';
                method = _arguments393.length > 2 && _arguments393[2] !== undefined ? _arguments393[2] : 'GET';
                params = _arguments393.length > 3 && _arguments393[3] !== undefined ? _arguments393[3] : {};
                headers = _arguments393.length > 4 && _arguments393[4] !== undefined ? _arguments393[4] : undefined;
                body = _arguments393.length > 5 && _arguments393[5] !== undefined ? _arguments393[5] : undefined;
                url = '/' + _this414.version + '/' + _this414.implodeParams(path, params);
                query = _this414.omit(params, _this414.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this414.urlencode(query);
                    }
                } else {
                    nonce = _this414.nonce();
                    request = _this414.extend({
                        'request': url,
                        'nonce': nonce
                    }, query);
                    payload = _this414.json(request);

                    payload = _this414.stringToBase64(_this414.encode(payload));
                    signature = _this414.hmac(payload, _this414.encode(_this414.secret), 'sha384');

                    headers = {
                        'Content-Type': 'text/plain',
                        'Content-Length': 0,
                        'X-GEMINI-APIKEY': _this414.apiKey,
                        'X-GEMINI-PAYLOAD': payload,
                        'X-GEMINI-SIGNATURE': signature
                    };
                }
                url = _this414.urls['api'] + url;
                return _this414.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] == 'error') {
                        throw new ExchangeError(_this414.id + ' ' + _this414.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc = {

        'id': 'hitbtc',
        'name': 'HitBTC',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'http://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://hitbtc.com/api', 'http://hitbtc-com.github.io/hitbtc-api', 'http://jsfiddle.net/bmknight/RqbYB']
        },
        'api': {
            'public': {
                'get': ['{symbol}/orderbook', '{symbol}/ticker', '{symbol}/trades', '{symbol}/trades/recent', 'symbols', 'ticker', 'time,']
            },
            'trading': {
                'get': ['balance', 'orders/active', 'orders/recent', 'order', 'trades/by/order', 'trades'],
                'post': ['new_order', 'cancel_order', 'cancel_orders']
            },
            'payment': {
                'get': ['balance', 'address/{currency}', 'transactions', 'transactions/{transaction}'],
                'post': ['transfer_to_trading', 'transfer_to_main', 'address/{currency}', 'payout']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                lot,
                step,
                symbol,
                _this415 = this;

            return Promise.resolve().then(function () {
                return _this415.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['symbols'].length; p++) {
                    market = markets['symbols'][p];
                    id = market['symbol'];
                    base = market['commodity'];
                    quote = market['currency'];
                    lot = parseFloat(market['lot']);
                    step = parseFloat(market['step']);

                    base = _this415.commonCurrencyCode(base);
                    quote = _this415.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'lot': lot,
                        'step': step,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                code,
                currency,
                account,
                _this416 = this,
                _arguments395 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments395.length > 0 && _arguments395[0] !== undefined ? _arguments395[0] : {};
                return _this416.loadMarkets();
            }).then(function () {
                return _this416.tradingGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    code = balance['currency_code'];
                    currency = _this416.commonCurrencyCode(code);
                    account = {
                        'free': parseFloat(balance['cash']),
                        'used': parseFloat(balance['reserved']),
                        'total': 0.0
                    };

                    account['total'] = _this416.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this417 = this,
                _arguments396 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments396.length > 1 && _arguments396[1] !== undefined ? _arguments396[1] : {};
                return _this417.loadMarkets();
            }).then(function () {
                return _this417.publicGetSymbolOrderbook(_this417.extend({
                    'symbol': _this417.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this417.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': parseFloat(ticker['volume_quote']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this418 = this;

            return Promise.resolve().then(function () {
                return _this418.loadMarkets();
            }).then(function () {
                return _this418.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this418.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this418.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this419 = this;

            return Promise.resolve().then(function () {
                return _this419.loadMarkets();
            }).then(function () {
                market = _this419.market(symbol);
                return _this419.publicGetSymbolTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new ExchangeError(_this419.id + ' ' + ticker['message']);
                }return _this419.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return {
                'info': trade,
                'id': trade[0],
                'timestamp': trade[3],
                'datetime': this.iso8601(trade[3]),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade[4],
                'price': parseFloat(trade[1]),
                'amount': parseFloat(trade[2])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this420 = this,
                _arguments399 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments399.length > 1 && _arguments399[1] !== undefined ? _arguments399[1] : {};
                return _this420.loadMarkets();
            }).then(function () {
                market = _this420.market(symbol);
                return _this420.publicGetSymbolTrades(_this420.extend({
                    'symbol': market['id'],
                    // 'from': 0,
                    // 'till': 100,
                    // 'by': 'ts', // or by trade_id
                    // 'sort': 'desc', // or asc
                    // 'start_index': 0,
                    // 'max_results': 1000,
                    // 'format_item': 'object',
                    // 'format_price': 'number',
                    // 'format_amount': 'number',
                    // 'format_tid': 'string',
                    // 'format_timestamp': 'millisecond',
                    // 'format_wrap': false,
                    'side': 'true'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this420.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                quantity,
                wholeLots,
                difference,
                clientOrderId,
                order,
                response,
                _this421 = this,
                _arguments400 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments400.length > 4 && _arguments400[4] !== undefined ? _arguments400[4] : undefined;
                params = _arguments400.length > 5 && _arguments400[5] !== undefined ? _arguments400[5] : {};
                return _this421.loadMarkets();
            }).then(function () {
                market = _this421.market(symbol);
                // check if amount can be evenly divided into lots
                // they want integer quantity in lot units

                quantity = parseFloat(amount) / market['lot'];
                wholeLots = Math.round(quantity);
                difference = quantity - wholeLots;

                if (Math.abs(difference) > market['step']) {
                    throw new ExchangeError(_this421.id + ' order amount should be evenly divisible by lot unit size of ' + market['lot'].toString());
                }clientOrderId = _this421.milliseconds();
                order = {
                    'clientOrderId': clientOrderId.toString(),
                    'symbol': market['id'],
                    'side': side,
                    'quantity': wholeLots.toString(), // quantity in integer lot units
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price.toFixed(10);
                }return _this421.tradingPostNewOrder(_this421.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['ExecutionReport']['clientOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this422 = this,
                _arguments401 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments401.length > 1 && _arguments401[1] !== undefined ? _arguments401[1] : {};
                return _this422.loadMarkets();
            }).then(function () {
                return _this422.tradingPostCancelOrder(_this422.extend({
                    'clientOrderId': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this423 = this,
                _arguments402 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments402.length > 3 && _arguments402[3] !== undefined ? _arguments402[3] : {};
                return _this423.loadMarkets();
            }).then(function () {
                return _this423.paymentPostPayout(_this423.extend({
                    'currency_code': currency,
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['transaction']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this424 = this,
                _arguments403 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments403.length > 1 && _arguments403[1] !== undefined ? _arguments403[1] : 'public';
                method = _arguments403.length > 2 && _arguments403[2] !== undefined ? _arguments403[2] : 'GET';
                params = _arguments403.length > 3 && _arguments403[3] !== undefined ? _arguments403[3] : {};
                headers = _arguments403.length > 4 && _arguments403[4] !== undefined ? _arguments403[4] : undefined;
                body = _arguments403.length > 5 && _arguments403[5] !== undefined ? _arguments403[5] : undefined;
                url = '/' + 'api' + '/' + _this424.version + '/' + api + '/' + _this424.implodeParams(path, params);
                query = _this424.omit(params, _this424.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this424.urlencode(query);
                    }
                } else {
                    nonce = _this424.nonce();

                    query = _this424.extend({ 'nonce': nonce, 'apikey': _this424.apiKey }, query);
                    if (method == 'POST') {
                        if (Object.keys(query).length) {
                            body = _this424.urlencode(query);
                        }
                    }url += '?' + _this424.urlencode(query);
                    auth = url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Signature': _this424.hmac(_this424.encode(auth), _this424.encode(_this424.secret), 'sha512').toLowerCase()
                    };
                }
                url = _this424.urls['api'] + url;
                return _this424.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    if ('ExecutionReport' in response) {
                        if (response['ExecutionReport']['orderRejectReason'] == 'orderExceedsLimit') {
                            throw new InsufficientFunds(_this424.id + ' ' + _this424.json(response));
                        }
                    }
                    throw new ExchangeError(_this424.id + ' ' + _this424.json(response));
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc2 = extend(hitbtc, {

        'id': 'hitbtc2',
        'name': 'HitBTC v2',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '2',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'https://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://api.hitbtc.com/api/2/explore', 'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md']
        },
        'api': {
            'public': {
                'get': ['symbol', // Available Currency Symbols
                'symbol/{symbol}', // Get symbol info
                'currency', // Available Currencies
                'currency/{currency}', // Get currency info
                'ticker', // Ticker list for all symbols
                'ticker/{symbol}', // Ticker for symbol
                'trades/{symbol}', // Trades
                'orderbook/{symbol}']
            },
            'private': {
                'get': ['order', // List your current open orders
                'order/{clientOrderId}', // Get a single order by clientOrderId
                'trading/balance', // Get trading balance
                'trading/fee/{symbol}', // Get trading fee rate
                'history/trades', // Get historical trades
                'history/order', // Get historical orders
                'history/order/{id}/trades', // Get historical trades by specified order
                'account/balance', // Get main acccount balance
                'account/transactions', // Get account transactions
                'account/transactions/{id}', // Get account transaction by id
                'account/crypto/address/{currency}'],
                'post': ['order', // Create new order
                'account/crypto/withdraw', // Withdraw crypro
                'account/crypto/address/{currency}', // Create new deposit crypro address
                'account/transfer'],
                'put': ['order/{clientOrderId}', // Create new order
                'account/crypto/withdraw/{id}'],
                'delete': ['order', // Cancel all open orders
                'order/{clientOrderId}', // Cancel order
                'account/crypto/withdraw/{id}'],
                'patch': ['order/{clientOrderId}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                i,
                market,
                id,
                base,
                quote,
                lot,
                step,
                symbol,
                _this425 = this;

            return Promise.resolve().then(function () {
                return _this425.publicGetSymbol();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    id = market['id'];
                    base = market['baseCurrency'];
                    quote = market['quoteCurrency'];
                    lot = market['quantityIncrement'];
                    step = market['tickSize'];

                    base = _this425.commonCurrencyCode(base);
                    quote = _this425.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'lot': lot,
                        'step': step,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                code,
                currency,
                account,
                _this426 = this;

            return Promise.resolve().then(function () {
                return _this426.loadMarkets();
            }).then(function () {
                return _this426.privateGetTradingBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    code = balance['currency'];
                    currency = _this426.commonCurrencyCode(code);
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['reserved']),
                        'total': 0.0
                    };

                    account['total'] = _this426.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this427 = this,
                _arguments406 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments406.length > 1 && _arguments406[1] !== undefined ? _arguments406[1] : {};
                return _this427.loadMarkets();
            }).then(function () {
                return _this427.publicGetOrderbookSymbol(_this427.extend({
                    'symbol': _this427.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this427.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'size');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['timestamp']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': this.safeFloat(ticker, 'high'),
                'low': this.safeFloat(ticker, 'low'),
                'bid': this.safeFloat(ticker, 'bid'),
                'ask': this.safeFloat(ticker, 'ask'),
                'vwap': undefined,
                'open': this.safeFloat(ticker, 'open'),
                'close': this.safeFloat(ticker, 'close'),
                'first': undefined,
                'last': this.safeFloat(ticker, 'last'),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': this.safeFloat(ticker, 'volume'),
                'quoteVolume': this.safeFloat(ticker, 'quoteVolume'),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                i,
                ticker,
                id,
                market,
                symbol,
                _this428 = this;

            return Promise.resolve().then(function () {
                return _this428.loadMarkets();
            }).then(function () {
                return _this428.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};

                for (i = 0; i < tickers.length; i++) {
                    ticker = tickers[i];
                    id = ticker['symbol'];
                    market = _this428.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this428.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this429 = this;

            return Promise.resolve().then(function () {
                return _this429.loadMarkets();
            }).then(function () {
                market = _this429.market(symbol);
                return _this429.publicGetTickerSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new ExchangeError(_this429.id + ' ' + ticker['message']);
                }return _this429.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['timestamp']);
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['quantity'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this430 = this,
                _arguments409 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments409.length > 1 && _arguments409[1] !== undefined ? _arguments409[1] : {};
                return _this430.loadMarkets();
            }).then(function () {
                market = _this430.market(symbol);
                return _this430.publicGetTradesSymbol(_this430.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this430.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                clientOrderId,
                order,
                response,
                _this431 = this,
                _arguments410 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments410.length > 4 && _arguments410[4] !== undefined ? _arguments410[4] : undefined;
                params = _arguments410.length > 5 && _arguments410[5] !== undefined ? _arguments410[5] : {};
                return _this431.loadMarkets();
            }).then(function () {
                market = _this431.market(symbol);
                clientOrderId = _this431.milliseconds();

                amount = parseFloat(amount);
                order = {
                    'clientOrderId': clientOrderId.toString(),
                    'symbol': market['id'],
                    'side': side,
                    'quantity': amount.toString(),
                    'type': type
                };

                if (type == 'limit') {
                    price = parseFloat(price);
                    order['price'] = price.toFixed(10);
                }
                return _this431.privatePostOrder(_this431.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['clientOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this432 = this,
                _arguments411 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments411.length > 1 && _arguments411[1] !== undefined ? _arguments411[1] : {};
                return _this432.loadMarkets();
            }).then(function () {
                return _this432.privateDeleteOrderClientOrderId(_this432.extend({
                    'clientOrderId': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this433 = this,
                _arguments412 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments412.length > 3 && _arguments412[3] !== undefined ? _arguments412[3] : {};
                return _this433.loadMarkets();
            }).then(function () {
                amount = parseFloat(amount);
                return _this433.privatePostAccountCryptoWithdraw(_this433.extend({
                    'currency': currency,
                    'amount': amount.toString(),
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                payload,
                auth,
                response,
                _this434 = this,
                _arguments413 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments413.length > 1 && _arguments413[1] !== undefined ? _arguments413[1] : 'public';
                method = _arguments413.length > 2 && _arguments413[2] !== undefined ? _arguments413[2] : 'GET';
                params = _arguments413.length > 3 && _arguments413[3] !== undefined ? _arguments413[3] : {};
                headers = _arguments413.length > 4 && _arguments413[4] !== undefined ? _arguments413[4] : undefined;
                body = _arguments413.length > 5 && _arguments413[5] !== undefined ? _arguments413[5] : undefined;
                url = '/api' + '/' + _this434.version + '/';
                query = _this434.omit(params, _this434.extractParams(path));

                if (api == 'public') {
                    url += api + '/' + _this434.implodeParams(path, params);
                    if (Object.keys(query).length) {
                        url += '?' + _this434.urlencode(query);
                    }
                } else {
                    url += _this434.implodeParams(path, params) + '?' + _this434.urlencode(query);
                    if (method != 'GET') {
                        if (Object.keys(query).length) {
                            body = _this434.json(query);
                        }
                    }payload = _this434.encode(_this434.apiKey + ':' + _this434.secret);
                    auth = _this434.stringToBase64(payload);

                    headers = {
                        'Authorization': "Basic " + _this434.decode(auth),
                        'Content-Type': 'application/json'
                    };
                }
                url = _this434.urls['api'] + url;
                return _this434.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this434.id + ' ' + _this434.json(response));
                }return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var huobi1 = {

        'id': 'huobi1',
        'name': 'Huobi v1',
        'countries': 'CN',
        'rateLimit': 2000,
        'version': 'v1',
        'hasFetchOHLCV': true,
        'accounts': undefined,
        'accountsById': undefined,
        'timeframes': {
            '1m': '1min',
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '60min',
            '1d': '1day',
            '1w': '1week',
            '1M': '1mon',
            '1y': '1year'
        },
        'api': {
            'market': {
                'get': ['history/kline', // 获取K线数据
                'detail/merged', // 获取聚合行情(Ticker)
                'depth', // 获取 Market Depth 数据
                'trade', // 获取 Trade Detail 数据
                'history/trade', // 批量获取最近的交易记录
                'detail']
            },
            'public': {
                'get': ['common/symbols', // 查询系统支持的所有交易对
                'common/currencys', // 查询系统支持的所有币种
                'common/timestamp']
            },
            'private': {
                'get': ['account/accounts', // 查询当前用户的所有账户(即account-id)
                'account/accounts/{id}/balance', // 查询指定账户的余额
                'order/orders/{id}', // 查询某个订单详情
                'order/orders/{id}/matchresults', // 查询某个订单的成交明细
                'order/orders', // 查询当前委托、历史委托
                'order/matchresults', // 查询当前成交、历史成交
                'dw/withdraw-virtual/addresses'],
                'post': ['order/orders/place', // 创建并执行一个新订单 (一步下单， 推荐使用)
                'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）
                'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）
                'order/orders/{id}/submitcancel', // 申请撤销一个订单请求
                'order/orders/batchcancel', // 批量撤销订单
                'dw/balance/transfer', // 资产划转
                'dw/withdraw-virtual/create', // 申请提现虚拟币
                'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现
                'dw/withdraw-virtual/{id}/cancel']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                numMarkets,
                result,
                i,
                market,
                baseId,
                quoteId,
                base,
                quote,
                id,
                symbol,
                _this435 = this;

            return Promise.resolve().then(function () {
                return _this435.publicGetCommonSymbols();
            }).then(function (_resp) {
                response = _resp;
                markets = response['data'];
                numMarkets = markets.length;

                if (numMarkets < 1) {
                    throw new ExchangeError(_this435.id + ' publicGetCommonSymbols returned empty response: ' + _this435.json(response));
                }result = [];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    baseId = market['base-currency'];
                    quoteId = market['quote-currency'];
                    base = baseId.toUpperCase();
                    quote = quoteId.toUpperCase();
                    id = baseId + quoteId;

                    base = _this435.commonCurrencyCode(base);
                    quote = _this435.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var last = undefined;
            if ('last' in ticker) last = ticker['last'];
            return {
                'timestamp': ticker['ts'],
                'datetime': this.iso8601(ticker['ts']),
                'high': ticker['high'],
                'low': ticker['low'],
                'bid': ticker['bid'][0],
                'ask': ticker['ask'][0],
                'vwap': undefined,
                'open': ticker['open'],
                'close': ticker['close'],
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['amount']),
                'quoteVolume': ticker['vol'],
                'info': ticker
            };
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                _this436 = this,
                _arguments415 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments415.length > 1 && _arguments415[1] !== undefined ? _arguments415[1] : {};
                return _this436.loadMarkets();
            }).then(function () {
                market = _this436.market(symbol);
                return _this436.marketGetDepth(_this436.extend({
                    'symbol': market['id'],
                    'type': 'step0'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this436.parseOrderBook(response['tick'], response['tick']['ts']);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this437 = this;

            return Promise.resolve().then(function () {
                return _this437.loadMarkets();
            }).then(function () {
                market = _this437.market(symbol);
                return _this437.marketGetDetailMerged({ 'symbol': market['id'] });
            }).then(function (_resp) {
                response = _resp;

                return _this437.parseTicker(response['tick'], market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['ts'];
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['direction'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        parseTradesData: function parseTradesData(data, market) {
            var result = [];
            for (var i = 0; i < data.length; i++) {
                var trades = this.parseTrades(data[i]['data'], market);
                for (var k = 0; k < trades.length; k++) {
                    result.push(trades[k]);
                }
            }
            return result;
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this438 = this,
                _arguments417 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments417.length > 1 && _arguments417[1] !== undefined ? _arguments417[1] : {};
                return _this438.loadMarkets();
            }).then(function () {
                market = _this438.market(symbol);
                return _this438.marketGetHistoryTrade(_this438.extend({
                    'symbol': market['id'],
                    'size': 2000
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this438.parseTradesData(response['data'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv['id'] * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['vol']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                _this439 = this,
                _arguments418 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments418.length > 1 && _arguments418[1] !== undefined ? _arguments418[1] : '1m';
                since = _arguments418.length > 2 && _arguments418[2] !== undefined ? _arguments418[2] : undefined;
                limit = _arguments418.length > 3 && _arguments418[3] !== undefined ? _arguments418[3] : undefined;
                params = _arguments418.length > 4 && _arguments418[4] !== undefined ? _arguments418[4] : {};
                return _this439.loadMarkets();
            }).then(function () {
                market = _this439.market(symbol);
                return _this439.marketGetHistoryKline(_this439.extend({
                    'symbol': market['id'],
                    'period': _this439.timeframes[timeframe],
                    'size': 2000 // max = 2000
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this439.parseOHLCVs(response['data'], market, timeframe, since, limit);
            });
        },
        loadAccounts: function loadAccounts() {
            var reload,
                _this440 = this,
                _arguments419 = arguments;

            return Promise.resolve().then(function () {
                reload = _arguments419.length > 0 && _arguments419[0] !== undefined ? _arguments419[0] : false;

                if (reload) {
                    return Promise.resolve().then(function () {
                        return _this440.fetchAccounts();
                    }).then(function (_resp) {
                        _this440.accounts = _resp;
                    });
                } else {
                    if (_this440.accounts) {
                        return _this440.accounts;
                    } else {
                        return Promise.resolve().then(function () {
                            return _this440.fetchAccounts();
                        }).then(function (_resp) {
                            _this440.accounts = _resp;
                            _this440.accountsById = _this440.indexBy(_this440.accounts, 'id');
                        });
                    }
                }
            }).then(function () {
                return _this440.accounts;
            });
        },
        fetchAccounts: function fetchAccounts() {
            var response,
                _this446 = this;

            return Promise.resolve().then(function () {
                return _this446.loadMarkets();
            }).then(function () {
                return _this446.privateGetAccountAccounts();
            }).then(function (_resp) {
                response = _resp;

                return response['data'];
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                i,
                balance,
                uppercase,
                currency,
                account,
                _this447 = this,
                _arguments426 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments426.length > 0 && _arguments426[0] !== undefined ? _arguments426[0] : {};
                return _this447.loadMarkets();
            }).then(function () {
                return _this447.loadAccounts();
            }).then(function () {
                return _this447.privateGetAccountAccountsIdBalance(_this447.extend({
                    'id': _this447.accounts[0]['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                balances = response['data']['list'];
                result = { 'info': response };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    uppercase = balance['currency'].toUpperCase();
                    currency = _this447.commonCurrencyCode(uppercase);
                    account = _this447.account();

                    account['free'] = parseFloat(balance['balance']);
                    account['total'] = _this447.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this448 = this,
                _arguments427 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments427.length > 4 && _arguments427[4] !== undefined ? _arguments427[4] : undefined;
                params = _arguments427.length > 5 && _arguments427[5] !== undefined ? _arguments427[5] : {};
                return _this448.loadMarkets();
            }).then(function () {
                return _this448.loadAccounts();
            }).then(function () {
                market = _this448.market(symbol);
                order = {
                    'account-id': _this448.accounts[0]['id'],
                    'amount': amount.toFixed(10),
                    'symbol': market['id'],
                    'type': side + '-' + type
                };

                if (type == 'limit') {
                    order['price'] = price.toFixed(10);
                }return _this448.privatePostOrderOrdersPlace(_this448.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this449 = this;

            return _this449.privatePostOrderOrdersIdSubmitcancel({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                timestamp,
                request,
                auth,
                payload,
                signature,
                response,
                _this450 = this,
                _arguments429 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments429.length > 1 && _arguments429[1] !== undefined ? _arguments429[1] : 'public';
                method = _arguments429.length > 2 && _arguments429[2] !== undefined ? _arguments429[2] : 'GET';
                params = _arguments429.length > 3 && _arguments429[3] !== undefined ? _arguments429[3] : {};
                headers = _arguments429.length > 4 && _arguments429[4] !== undefined ? _arguments429[4] : undefined;
                body = _arguments429.length > 5 && _arguments429[5] !== undefined ? _arguments429[5] : undefined;
                url = '/';

                if (api == 'market') {
                    url += api;
                } else {
                    url += _this450.version;
                }url += '/' + _this450.implodeParams(path, params);
                query = _this450.omit(params, _this450.extractParams(path));

                if (api == 'private') {
                    timestamp = _this450.YmdHMS(_this450.milliseconds(), 'T');
                    request = _this450.keysort(_this450.extend({
                        'SignatureMethod': 'HmacSHA256',
                        'SignatureVersion': '2',
                        'AccessKeyId': _this450.apiKey,
                        'Timestamp': timestamp
                    }, query));
                    auth = _this450.urlencode(request);
                    payload = [method, _this450.hostname, url, auth].join("\n");
                    signature = _this450.hmac(_this450.encode(payload), _this450.encode(_this450.secret), 'sha256', 'base64');

                    auth += '&' + _this450.urlencode({ 'Signature': signature });
                    if (method == 'GET') {
                        url += '?' + auth;
                    } else {
                        body = _this450.json(query);
                        headers = {
                            'Content-Type': 'application/json',
                            'Content-Length': body.length
                        };
                    }
                } else {
                    if (Object.keys(params).length) {
                        url += '?' + _this450.urlencode(params);
                    }
                }
                url = _this450.urls['api'] + url;
                return _this450.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this450.id + ' ' + _this450.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var huobicny = extend(huobi1, {

        'id': 'huobicny',
        'name': 'Huobi CNY',
        'hostname': 'be.huobi.com',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'https://be.huobi.com',
            'www': 'https://www.huobi.com',
            'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference'
        }
        // 'markets': {
        //     'ETH/CNY': { 'id': 'ethcny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
        //     'ETC/CNY': { 'id': 'etccny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
        //     'BCH/CNY': { 'id': 'bcccny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' },
        // },
    });

    //-----------------------------------------------------------------------------

    var huobipro = extend(huobi1, {

        'id': 'huobipro',
        'name': 'Huobi Pro',
        'hostname': 'api.huobi.pro',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'https://api.huobi.pro',
            'www': 'https://www.huobi.pro',
            'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference'
        }
        // 'markets': {
        //     'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
        //     'ETC/BTC': { 'id': 'etccny', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
        //     'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
        //     'BCH/BTC': { 'id': 'bcccny', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
        // },
    });

    //-----------------------------------------------------------------------------

    var huobi = {

        'id': 'huobi',
        'name': 'Huobi',
        'countries': 'CN',
        'rateLimit': 2000,
        'version': 'v3',
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '001',
            '5m': '005',
            '15m': '015',
            '30m': '030',
            '1h': '060',
            '1d': '100',
            '1w': '200',
            '1M': '300',
            '1y': '400'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'http://api.huobi.com',
            'www': 'https://www.huobi.com',
            'doc': 'https://github.com/huobiapi/API_Docs_en/wiki'
        },
        'api': {
            'staticmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'usdmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'trade': {
                'post': ['get_account_info', 'get_orders', 'order_info', 'buy', 'sell', 'buy_market', 'sell_market', 'cancel_order', 'get_new_deal_orders', 'get_order_id_by_trade_id', 'withdraw_coin', 'cancel_withdraw_coin', 'get_withdraw_coin_result', 'transfer', 'loan', 'repayment', 'get_loan_available', 'get_loans']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },
            'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 }
            // 'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket',    'coinType': 1 },
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                available,
                frozen,
                loan,
                _this451 = this,
                _arguments430 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments430.length > 0 && _arguments430[0] !== undefined ? _arguments430[0] : {};
                return _this451.tradePostGetAccountInfo();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this451.currencies.length; c++) {
                    currency = _this451.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this451.account();
                    available = 'available_' + lowercase + '_display';
                    frozen = 'frozen_' + lowercase + '_display';
                    loan = 'loan_' + lowercase + '_display';

                    if (available in balances) {
                        account['free'] = parseFloat(balances[available]);
                    }if (frozen in balances) {
                        account['used'] = parseFloat(balances[frozen]);
                    }if (loan in balances) {
                        account['used'] = _this451.sum(account['used'], parseFloat(balances[loan]));
                    }account['total'] = _this451.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                method,
                orderbook,
                _this452 = this,
                _arguments431 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments431.length > 1 && _arguments431[1] !== undefined ? _arguments431[1] : {};
                market = _this452.market(symbol);
                method = market['type'] + 'GetDepthId';
                return _this452[method](_this452.extend({ 'id': market['id'] }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this452.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                method,
                response,
                ticker,
                timestamp,
                _this453 = this;

            return Promise.resolve().then(function () {
                market = _this453.market(symbol);
                method = market['type'] + 'GetTickerId';
                return _this453[method]({ 'id': market['id'] });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['time']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this453.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['ts'];
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['direction'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                method,
                response,
                _this454 = this,
                _arguments433 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments433.length > 1 && _arguments433[1] !== undefined ? _arguments433[1] : {};
                market = _this454.market(symbol);
                method = market['type'] + 'GetDetailId';
                return _this454[method](_this454.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this454.parseTrades(response['trades'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            // not implemented yet
            return [ohlcv[0], ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[6]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                method,
                ohlcvs,
                _this455 = this,
                _arguments434 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments434.length > 1 && _arguments434[1] !== undefined ? _arguments434[1] : '1m';
                since = _arguments434.length > 2 && _arguments434[2] !== undefined ? _arguments434[2] : undefined;
                limit = _arguments434.length > 3 && _arguments434[3] !== undefined ? _arguments434[3] : undefined;
                params = _arguments434.length > 4 && _arguments434[4] !== undefined ? _arguments434[4] : {};
                market = _this455.market(symbol);
                method = market['type'] + 'GetIdKlinePeriod';
                return _this455[method](_this455.extend({
                    'id': market['id'],
                    'period': _this455.timeframes[timeframe]
                }, params));
            }).then(function (_resp) {
                ohlcvs = _resp;

                return ohlcvs;
                // return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                response,
                _this456 = this,
                _arguments435 = arguments;

            price = _arguments435.length > 4 && _arguments435[4] !== undefined ? _arguments435[4] : undefined;
            params = _arguments435.length > 5 && _arguments435[5] !== undefined ? _arguments435[5] : {};
            market = _this456.market(symbol);
            method = 'tradePost' + _this456.capitalize(side);
            order = {
                'coin_type': market['coinType'],
                'amount': amount,
                'market': market['quote'].toLowerCase()
            };

            if (type == 'limit') {
                order['price'] = price;
            } else {
                method += _this456.capitalize(type);
            }response = _this456[method](_this456.extend(order, params));

            return {
                'info': response,
                'id': response['id']
            };
        },
        cancelOrder: function cancelOrder(id) {
            var _this457 = this;

            return _this457.tradePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                _query2,
                response,
                _this458 = this,
                _arguments437 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments437.length > 1 && _arguments437[1] !== undefined ? _arguments437[1] : 'trade';
                method = _arguments437.length > 2 && _arguments437[2] !== undefined ? _arguments437[2] : 'GET';
                params = _arguments437.length > 3 && _arguments437[3] !== undefined ? _arguments437[3] : {};
                headers = _arguments437.length > 4 && _arguments437[4] !== undefined ? _arguments437[4] : undefined;
                body = _arguments437.length > 5 && _arguments437[5] !== undefined ? _arguments437[5] : undefined;
                url = _this458.urls['api'];

                if (api == 'trade') {
                    url += '/api' + _this458.version;
                    query = _this458.keysort(_this458.extend({
                        'method': path,
                        'access_key': _this458.apiKey,
                        'created': _this458.nonce()
                    }, params));
                    queryString = _this458.urlencode(_this458.omit(query, 'market'));
                    // secret key must be appended to the query before signing

                    queryString += '&secret_key=' + _this458.secret;
                    query['sign'] = _this458.hash(_this458.encode(queryString));
                    body = _this458.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                } else {
                    url += '/' + api + '/' + _this458.implodeParams(path, params) + '_json.js';
                    _query2 = _this458.omit(params, _this458.extractParams(path));

                    if (Object.keys(_query2).length) {
                        url += '?' + _this458.urlencode(_query2);
                    }
                }
                return _this458.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this458.id + ' ' + _this458.json(response));
                    }
                }if ('code' in response) {
                    throw new ExchangeError(_this458.id + ' ' + _this458.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var independentreserve = {

        'id': 'independentreserve',
        'name': 'Independent Reserve',
        'countries': ['AU', 'NZ'], // Australia, New Zealand
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/30521662-cf3f477c-9bcb-11e7-89bc-d1ac85012eda.jpg',
            'api': {
                'public': 'https://api.independentreserve.com/Public',
                'private': 'https://api.independentreserve.com/Private'
            },
            'www': 'https://www.independentreserve.com',
            'doc': 'https://www.independentreserve.com/API'
        },
        'api': {
            'public': {
                'get': ['GetValidPrimaryCurrencyCodes', 'GetValidSecondaryCurrencyCodes', 'GetValidLimitOrderTypes', 'GetValidMarketOrderTypes', 'GetValidOrderTypes', 'GetValidTransactionTypes', 'GetMarketSummary', 'GetOrderBook', 'GetTradeHistorySummary', 'GetRecentTrades', 'GetFxRates']
            },
            'private': {
                'post': ['PlaceLimitOrder', 'PlaceMarketOrder', 'CancelOrder', 'GetOpenOrders', 'GetClosedOrders', 'GetClosedFilledOrders', 'GetOrderDetails', 'GetAccounts', 'GetTransactions', 'GetDigitalCurrencyDepositAddress', 'GetDigitalCurrencyDepositAddresses', 'SynchDigitalCurrencyDepositAddressWithBlockchain', 'WithdrawDigitalCurrency', 'RequestFiatWithdrawal', 'GetTrades']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var baseCurrencies,
                quoteCurrencies,
                result,
                i,
                baseId,
                baseIdUppercase,
                base,
                j,
                quoteId,
                quoteIdUppercase,
                quote,
                id,
                symbol,
                _this459 = this;

            return Promise.resolve().then(function () {
                return _this459.publicGetValidPrimaryCurrencyCodes();
            }).then(function (_resp) {
                baseCurrencies = _resp;
                return _this459.publicGetValidSecondaryCurrencyCodes();
            }).then(function (_resp) {
                quoteCurrencies = _resp;
                result = [];

                for (i = 0; i < baseCurrencies.length; i++) {
                    baseId = baseCurrencies[i];
                    baseIdUppercase = baseId.toUpperCase();
                    base = _this459.commonCurrencyCode(baseIdUppercase);

                    for (j = 0; j < quoteCurrencies.length; j++) {
                        quoteId = quoteCurrencies[j];
                        quoteIdUppercase = quoteId.toUpperCase();
                        quote = _this459.commonCurrencyCode(quoteIdUppercase);
                        id = baseId + '/' + quoteId;
                        symbol = base + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'baseId': baseId,
                            'quoteId': quoteId,
                            'info': id
                        });
                    }
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                i,
                balance,
                currencyCode,
                uppercase,
                currency,
                account,
                _this460 = this,
                _arguments439 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments439.length > 0 && _arguments439[0] !== undefined ? _arguments439[0] : {};
                return _this460.loadMarkets();
            }).then(function () {
                return _this460.privatePostGetAccounts();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    currencyCode = balance['CurrencyCode'];
                    uppercase = currencyCode.toUpperCase();
                    currency = _this460.commonCurrencyCode(uppercase);
                    account = _this460.account();

                    account['free'] = balance['AvailableBalance'];
                    account['total'] = balance['TotalBalance'];
                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                timestamp,
                _this461 = this,
                _arguments440 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments440.length > 1 && _arguments440[1] !== undefined ? _arguments440[1] : {};
                return _this461.loadMarkets();
            }).then(function () {
                market = _this461.market(symbol);
                return _this461.publicGetOrderBook(_this461.extend({
                    'primaryCurrencyCode': market['baseId'],
                    'secondaryCurrencyCode': market['quoteId']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this461.parse8601(response['CreatedTimestampUtc']);

                return _this461.parseOrderBook(response, timestamp, 'BuyOrders', 'SellOrders', 'Price', 'Volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['CreatedTimestampUtc']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['DayHighestPrice'],
                'low': ticker['DayLowestPrice'],
                'bid': ticker['CurrentHighestBidPrice'],
                'ask': ticker['CurrentLowestOfferPrice'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': ticker['LastPrice'],
                'change': undefined,
                'percentage': undefined,
                'average': ticker['DayAvgPrice'],
                'baseVolume': ticker['DayVolumeXbt'],
                'quoteVolume': ticker['DayVolumeXbtInSecondaryCurrrency'],
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this462 = this;

            return Promise.resolve().then(function () {
                return _this462.loadMarkets();
            }).then(function () {
                market = _this462.market(symbol);
                return _this462.publicGetMarketSummary({
                    'primaryCurrencyCode': market['baseId'],
                    'secondaryCurrencyCode': market['quoteId']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this462.parseTicker(response, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['TradeTimestampUtc']);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': trade['SecondaryCurrencyTradePrice'],
                'amount': trade['PrimaryCurrencyAmount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this463 = this,
                _arguments442 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments442.length > 1 && _arguments442[1] !== undefined ? _arguments442[1] : {};
                return _this463.loadMarkets();
            }).then(function () {
                market = _this463.market(symbol);
                return _this463.publicGetRecentTrades(_this463.extend({
                    'primaryCurrencyCode': market['baseId'],
                    'secondaryCurrencyCode': market['quoteId'],
                    'numberOfRecentTradesToRetrieve': 50 // max = 50
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this463.parseTrades(response['Trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                capitalizedOrderType,
                method,
                orderType,
                order,
                response,
                _this464 = this,
                _arguments443 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments443.length > 4 && _arguments443[4] !== undefined ? _arguments443[4] : undefined;
                params = _arguments443.length > 5 && _arguments443[5] !== undefined ? _arguments443[5] : {};
                return _this464.loadMarkets();
            }).then(function () {
                market = _this464.market(symbol);
                capitalizedOrderType = _this464.capitalize(type);
                method = 'Place' + capitalizedOrderType + 'Order';
                orderType = capitalizedOrderType;

                orderType += side == 'sell' ? 'Offer' : 'Bid';
                order = _this464.ordered({
                    'primaryCurrencyCode': market['baseId'],
                    'secondaryCurrencyCode': market['quoteId'],
                    'orderType': orderType
                });

                if (type == 'limit') {
                    order['price'] = price;
                }order['volume'] = amount;
                return _this464[method](_this464.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['OrderGuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this465 = this;

            return Promise.resolve().then(function () {
                return _this465.loadMarkets();
            }).then(function () {
                return _this465.privatePostCancelOrder({ 'orderGuid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                keysorted,
                keys,
                i,
                key,
                message,
                signature,
                query,
                response,
                _this466 = this,
                _arguments445 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments445.length > 1 && _arguments445[1] !== undefined ? _arguments445[1] : 'public';
                method = _arguments445.length > 2 && _arguments445[2] !== undefined ? _arguments445[2] : 'GET';
                params = _arguments445.length > 3 && _arguments445[3] !== undefined ? _arguments445[3] : {};
                headers = _arguments445.length > 4 && _arguments445[4] !== undefined ? _arguments445[4] : undefined;
                body = _arguments445.length > 5 && _arguments445[5] !== undefined ? _arguments445[5] : undefined;
                url = _this466.urls['api'][api] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this466.urlencode(params);
                    }
                } else {
                    nonce = _this466.nonce();
                    auth = [url, 'apiKey=' + _this466.apiKey, 'nonce=' + nonce.toString()];
                    keysorted = _this466.keysort(params);
                    keys = Object.keys(params);

                    for (i = 0; i < keys.length; i++) {
                        key = keys[i];

                        auth.push(key + '=' + params[key]);
                    }
                    message = auth.join(',');
                    signature = _this466.hmac(_this466.encode(message), _this466.encode(_this466.secret));
                    query = _this466.keysort(_this466.extend({
                        'apiKey': _this466.apiKey,
                        'nonce': nonce,
                        'signature': signature
                    }, params));

                    body = _this466.json(query);
                    headers = { 'Content-Type': 'application/json' };
                }
                return _this466.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                // todo error handling

                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var itbit = {

        'id': 'itbit',
        'name': 'itBit',
        'countries': 'US',
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
            'api': 'https://api.itbit.com',
            'www': 'https://www.itbit.com',
            'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']
        },
        'api': {
            'public': {
                'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']
            },
            'private': {
                'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders/{id}'],
                'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],
                'delete': ['wallets/{walletId}/orders/{id}']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this467 = this,
                _arguments446 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments446.length > 1 && _arguments446[1] !== undefined ? _arguments446[1] : {};
                return _this467.publicGetMarketsSymbolOrderBook(_this467.extend({
                    'symbol': _this467.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this467.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this468 = this;

            return Promise.resolve().then(function () {
                return _this468.publicGetMarketsSymbolTicker({
                    'symbol': _this468.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this468.parse8601(ticker['serverTimeUTC']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this468.iso8601(timestamp),
                    'high': parseFloat(ticker['high24h']),
                    'low': parseFloat(ticker['low24h']),
                    'bid': _this468.safeFloat(ticker, 'bid'),
                    'ask': _this468.safeFloat(ticker, 'ask'),
                    'vwap': parseFloat(ticker['vwap24h']),
                    'open': parseFloat(ticker['openToday']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume24h']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['timestamp']);
            var id = trade['matchNumber'].toString();
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': id,
                'order': id,
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this469 = this,
                _arguments448 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments448.length > 1 && _arguments448[1] !== undefined ? _arguments448[1] : {};
                market = _this469.market(symbol);
                return _this469.publicGetMarketsSymbolTrades(_this469.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this469.parseTrades(response['recentTrades'], market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this470 = this,
                _arguments449 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments449.length > 0 && _arguments449[0] !== undefined ? _arguments449[0] : {};
                return _this470.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['availableBalance']),
                        'used': 0.0,
                        'total': parseFloat(balance['totalBalance'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchWallets: function fetchWallets() {
            return this.privateGetWallets();
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                walletIdInParams,
                market,
                order,
                response,
                _this471 = this,
                _arguments450 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments450.length > 4 && _arguments450[4] !== undefined ? _arguments450[4] : undefined;
                params = _arguments450.length > 5 && _arguments450[5] !== undefined ? _arguments450[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this471.id + ' allows limit orders only');
                }walletIdInParams = 'walletId' in params;

                if (!walletIdInParams) {
                    throw new ExchangeError(_this471.id + ' createOrder requires a walletId parameter');
                }amount = amount.toString();
                price = price.toString();
                market = _this471.market(symbol);
                order = {
                    'side': side,
                    'type': type,
                    'currency': market['base'],
                    'amount': amount,
                    'display': amount,
                    'price': price,
                    'instrument': market['id']
                };
                return _this471.privatePostTradeAdd(_this471.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var walletIdInParams = 'walletId' in params;
            if (!walletIdInParams) throw new ExchangeError(this.id + ' cancelOrder requires a walletId parameter');
            return this.privateDeleteWalletsWalletIdOrdersId(this.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                timestamp,
                auth,
                message,
                _hash2,
                binhash,
                signature,
                response,
                _this472 = this,
                _arguments451 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments451.length > 1 && _arguments451[1] !== undefined ? _arguments451[1] : 'public';
                method = _arguments451.length > 2 && _arguments451[2] !== undefined ? _arguments451[2] : 'GET';
                params = _arguments451.length > 3 && _arguments451[3] !== undefined ? _arguments451[3] : {};
                headers = _arguments451.length > 4 && _arguments451[4] !== undefined ? _arguments451[4] : undefined;
                body = _arguments451.length > 5 && _arguments451[5] !== undefined ? _arguments451[5] : undefined;
                url = _this472.urls['api'] + '/' + _this472.version + '/' + _this472.implodeParams(path, params);
                query = _this472.omit(params, _this472.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this472.urlencode(query);
                    }
                } else {
                    if (Object.keys(query).length) {
                        body = _this472.json(query);
                    } else {
                        body = '';
                    }nonce = _this472.nonce().toString();
                    timestamp = nonce;
                    auth = [method, url, body, nonce, timestamp];
                    message = nonce + _this472.json(auth);
                    _hash2 = _this472.hash(_this472.encode(message), 'sha256', 'binary');
                    binhash = _this472.binaryConcat(url, _hash2);
                    signature = _this472.hmac(binhash, _this472.encode(_this472.secret), 'sha512', 'base64');

                    headers = {
                        'Authorization': self.apiKey + ':' + signature,
                        'Content-Type': 'application/json',
                        'X-Auth-Timestamp': timestamp,
                        'X-Auth-Nonce': nonce
                    };
                }
                return _this472.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    throw new ExchangeError(_this472.id + ' ' + _this472.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var jubi = {

        'id': 'jubi',
        'name': 'jubi.com',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',
            'api': 'https://www.jubi.com/api',
            'www': 'https://www.jubi.com',
            'doc': 'https://www.jubi.com/help/api.html'
        },
        'api': {
            'public': {
                'get': ['depth', 'orders', 'ticker', 'allticker']
            },
            'private': {
                'post': ['balance', 'trade_add', 'trade_cancel', 'trade_list', 'trade_view', 'wallet']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                base,
                quote,
                symbol,
                _this473 = this;

            return Promise.resolve().then(function () {
                return _this473.publicGetAllticker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    base = id.toUpperCase();
                    quote = 'CNY';
                    symbol = base + '/' + quote;

                    base = _this473.commonCurrencyCode(base);
                    quote = _this473.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': id
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                free,
                used,
                _this474 = this,
                _arguments453 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments453.length > 0 && _arguments453[0] !== undefined ? _arguments453[0] : {};
                return _this474.loadMarkets();
            }).then(function () {
                return _this474.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this474.currencies.length; c++) {
                    currency = _this474.currencies[c];
                    lowercase = currency.toLowerCase();

                    if (lowercase == 'dash') {
                        lowercase = 'drk';
                    }account = _this474.account();
                    free = lowercase + '_balance';
                    used = lowercase + '_lock';

                    if (free in balances) {
                        account['free'] = parseFloat(balances[free]);
                    }if (used in balances) {
                        account['used'] = parseFloat(balances[used]);
                    }account['total'] = _this474.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                result,
                _this475 = this,
                _arguments454 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments454.length > 1 && _arguments454[1] !== undefined ? _arguments454[1] : {};
                return _this475.loadMarkets();
            }).then(function () {
                return _this475.publicGetDepth(_this475.extend({
                    'coin': _this475.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this475.parseOrderBook(orderbook);

                result['asks'] = _this475.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this476 = this;

            return Promise.resolve().then(function () {
                return _this476.loadMarkets();
            }).then(function () {
                return _this476.publicGetAllticker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this476.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this476.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this477 = this;

            return Promise.resolve().then(function () {
                return _this477.loadMarkets();
            }).then(function () {
                market = _this477.market(symbol);
                return _this477.publicGetTicker({
                    'coin': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this477.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'],
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this478 = this,
                _arguments457 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments457.length > 1 && _arguments457[1] !== undefined ? _arguments457[1] : {};
                return _this478.loadMarkets();
            }).then(function () {
                market = _this478.market(symbol);
                return _this478.publicGetOrders(_this478.extend({
                    'coin': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this478.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this479 = this,
                _arguments458 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments458.length > 4 && _arguments458[4] !== undefined ? _arguments458[4] : undefined;
                params = _arguments458.length > 5 && _arguments458[5] !== undefined ? _arguments458[5] : {};
                return _this479.loadMarkets();
            }).then(function () {
                return _this479.privatePostTradeAdd(_this479.extend({
                    'amount': amount,
                    'price': price,
                    'type': side,
                    'coin': _this479.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this480 = this,
                _arguments459 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments459.length > 1 && _arguments459[1] !== undefined ? _arguments459[1] : {};
                return _this480.loadMarkets();
            }).then(function () {
                return _this480.privatePostTradeCancel(_this480.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                request,
                secret,
                response,
                _this481 = this,
                _arguments460 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments460.length > 1 && _arguments460[1] !== undefined ? _arguments460[1] : 'public';
                method = _arguments460.length > 2 && _arguments460[2] !== undefined ? _arguments460[2] : 'GET';
                params = _arguments460.length > 3 && _arguments460[3] !== undefined ? _arguments460[3] : {};
                headers = _arguments460.length > 4 && _arguments460[4] !== undefined ? _arguments460[4] : undefined;
                body = _arguments460.length > 5 && _arguments460[5] !== undefined ? _arguments460[5] : undefined;
                url = _this481.urls['api'] + '/' + _this481.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this481.urlencode(params);
                    }
                } else {
                    nonce = _this481.nonce().toString();
                    query = _this481.extend({
                        'key': _this481.apiKey,
                        'nonce': nonce
                    }, params);
                    request = _this481.urlencode(query);
                    secret = _this481.hash(_this481.encode(_this481.secret));

                    query['signature'] = _this481.hmac(_this481.encode(request), _this481.encode(secret));
                    body = _this481.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this481.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this481.id + ' ' + _this481.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // kraken is also owner of ex. Coinsetter / CaVirtEx / Clevercoin

    var kraken = {

        'id': 'kraken',
        'name': 'Kraken',
        'countries': 'US',
        'version': '0',
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'marketsByAltname': {},
        'timeframes': {
            '1m': '1',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '4h': '240',
            '1d': '1440',
            '1w': '10080',
            '2w': '21600'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',
            'api': 'https://api.kraken.com',
            'www': 'https://www.kraken.com',
            'doc': ['https://www.kraken.com/en-us/help/api', 'https://github.com/nothingisdead/npm-kraken-api']
        },
        'api': {
            'public': {
                'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']
            },
            'private': {
                'post': ['AddOrder', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                darkpool,
                symbol,
                _this482 = this;

            return Promise.resolve().then(function () {
                return _this482.publicGetAssetPairs();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['result'][id];
                    base = market['base'];
                    quote = market['quote'];

                    if (base[0] == 'X' || base[0] == 'Z') {
                        base = base.slice(1);
                    }if (quote[0] == 'X' || quote[0] == 'Z') {
                        quote = quote.slice(1);
                    }base = _this482.commonCurrencyCode(base);
                    quote = _this482.commonCurrencyCode(quote);
                    darkpool = id.indexOf('.d') >= 0;
                    symbol = darkpool ? market['altname'] : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'darkpool': darkpool,
                        'info': market,
                        'altname': market['altname']
                    });
                }
                _this482.marketsByAltname = _this482.indexBy(result, 'altname');
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                darkpool,
                market,
                response,
                orderbook,
                _this483 = this,
                _arguments462 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments462.length > 1 && _arguments462[1] !== undefined ? _arguments462[1] : {};
                return _this483.loadMarkets();
            }).then(function () {
                darkpool = symbol.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this483.id + ' does not provide an order book for darkpool symbol ' + symbol);
                }market = _this483.market(symbol);
                return _this483.publicGetDepth(_this483.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][market['id']];

                return _this483.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['h'][1]),
                'low': parseFloat(ticker['l'][1]),
                'bid': parseFloat(ticker['b'][0]),
                'ask': parseFloat(ticker['a'][0]),
                'vwap': parseFloat(ticker['p'][1]),
                'open': parseFloat(ticker['o']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['c'][0]),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['v'][1]),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var pairs,
                s,
                symbol,
                market,
                filter,
                response,
                tickers,
                ids,
                result,
                i,
                id,
                _market,
                _symbol2,
                ticker,
                _this484 = this;

            return Promise.resolve().then(function () {
                return _this484.loadMarkets();
            }).then(function () {
                pairs = [];

                for (s = 0; s < _this484.symbols.length; s++) {
                    symbol = _this484.symbols[s];
                    market = _this484.markets[symbol];

                    if (!market['darkpool']) {
                        pairs.push(market['id']);
                    }
                }
                filter = pairs.join(',');
                return _this484.publicGetTicker({
                    'pair': filter
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _market = _this484.markets_by_id[id];
                    _symbol2 = _market['symbol'];
                    ticker = tickers[id];

                    result[_symbol2] = _this484.parseTicker(ticker, _market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var darkpool,
                market,
                response,
                ticker,
                _this485 = this;

            return Promise.resolve().then(function () {
                return _this485.loadMarkets();
            }).then(function () {
                darkpool = symbol.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this485.id + ' does not provide a ticker for darkpool symbol ' + symbol);
                }market = _this485.market(symbol);
                return _this485.publicGetTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][market['id']];

                return _this485.parseTicker(ticker, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[6])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                ohlcvs,
                _this486 = this,
                _arguments465 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments465.length > 1 && _arguments465[1] !== undefined ? _arguments465[1] : '1m';
                since = _arguments465.length > 2 && _arguments465[2] !== undefined ? _arguments465[2] : undefined;
                limit = _arguments465.length > 3 && _arguments465[3] !== undefined ? _arguments465[3] : undefined;
                params = _arguments465.length > 4 && _arguments465[4] !== undefined ? _arguments465[4] : {};
                return _this486.loadMarkets();
            }).then(function () {
                market = _this486.market(symbol);
                return _this486.publicGetOHLC(_this486.extend({
                    'pair': market['id'],
                    'interval': _this486.timeframes[timeframe],
                    'since': since
                }, params));
            }).then(function (_resp) {
                response = _resp;
                ohlcvs = response['result'][market['id']];

                return _this486.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade[2] * 1000);
            var side = trade[3] == 's' ? 'sell' : 'buy';
            var type = trade[4] == 'l' ? 'limit' : 'market';
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': type,
                'side': side,
                'price': parseFloat(trade[0]),
                'amount': parseFloat(trade[1])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                id,
                response,
                trades,
                _this487 = this,
                _arguments466 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments466.length > 1 && _arguments466[1] !== undefined ? _arguments466[1] : {};
                return _this487.loadMarkets();
            }).then(function () {
                market = _this487.market(symbol);
                id = market['id'];
                return _this487.publicGetTrades(_this487.extend({
                    'pair': id
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['result'][id];

                return _this487.parseTrades(trades, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                code,
                balance,
                account,
                _this488 = this,
                _arguments467 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments467.length > 0 && _arguments467[0] !== undefined ? _arguments467[0] : {};
                return _this488.loadMarkets();
            }).then(function () {
                return _this488.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = currency;
                    // X-ISO4217-A3 standard currency codes

                    if (code[0] == 'X') {
                        code = code.slice(1);
                    } else {
                        if (code[0] == 'Z') {
                            code = code.slice(1);
                        }
                    }code = _this488.commonCurrencyCode(code);
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    result[code] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                length,
                id,
                _this489 = this,
                _arguments468 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments468.length > 4 && _arguments468[4] !== undefined ? _arguments468[4] : undefined;
                params = _arguments468.length > 5 && _arguments468[5] !== undefined ? _arguments468[5] : {};
                return _this489.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this489.marketId(symbol),
                    'type': side,
                    'ordertype': type,
                    'volume': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this489.privatePostAddOrder(_this489.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                length = response['result']['txid'].length;
                id = length > 1 ? response['result']['txid'] : response['result']['txid'][0];

                return {
                    'info': response,
                    'id': id
                };
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var description = order['descr'];
            var side = description['type'];
            var type = description['ordertype'];
            var symbol = undefined;
            if (!market) {
                var pair = description['pair'];
                if (pair in this.marketsByAltname) {
                    market = this.marketsByAltname[pair];
                } else if (pair in this.markets_by_id) {
                    market = this.markets_by_id[pair];
                }
            }
            if (market) symbol = market['symbol'];
            var timestamp = parseInt(order['opentm'] * 1000);
            var amount = parseFloat(order['vol']);
            var filled = parseFloat(order['vol_exec']);
            var remaining = amount - filled;
            return {
                'id': order['id'],
                'info': order,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'status': order['status'],
                'symbol': symbol,
                'type': type,
                'side': side,
                'price': parseFloat(order['price']),
                'amount': amount,
                'filled': filled,
                'remaining': remaining
                // 'trades': this.parseTrades (order['trades'], market),
            };
        },
        parseOrders: function parseOrders(orders) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var result = [];
            var ids = Object.keys(orders);
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var order = this.extend({ 'id': id }, orders[id]);
                result.push(this.parseOrder(order, market));
            }
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                response,
                orders,
                order,
                _this490 = this,
                _arguments469 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments469.length > 1 && _arguments469[1] !== undefined ? _arguments469[1] : {};
                return _this490.loadMarkets();
            }).then(function () {
                return _this490.privatePostQueryOrders(_this490.extend({
                    'trades': true, // whether or not to include trades in output (optional, default false)
                    'txid': id // comma delimited list of transaction ids to query info about (20 maximum)
                    // 'userref': 'optional', // restrict results to given user reference id (optional)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orders = response['result'];
                order = _this490.parseOrder(orders[id]);

                return _this490.extend({ 'info': response }, order);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this491 = this;

            return Promise.resolve().then(function () {
                return _this491.loadMarkets();
            }).then(function () {
                return _this491.privatePostCancelOrder({ 'txid': id });
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this492 = this,
                _arguments471 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments471.length > 3 && _arguments471[3] !== undefined ? _arguments471[3] : {};

                if ('key' in params) {
                    return Promise.resolve().then(function () {
                        return _this492.loadMarkets();
                    }).then(function () {
                        return _this492.privatePostWithdraw(_this492.extend({
                            'asset': currency,
                            'amount': amount
                            // 'address': address, // they don't allow withdrawals to direct addresses
                        }, params));
                    }).then(function (_resp) {
                        response = _resp;

                        return {
                            'info': response,
                            'id': response['result']
                        };
                    });
                } else {
                    throw new ExchangeError(_this492.id + " withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)");
                }
            }).then(function () {});
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                response,
                _this495 = this,
                _arguments474 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments474.length > 0 && _arguments474[0] !== undefined ? _arguments474[0] : undefined;
                params = _arguments474.length > 1 && _arguments474[1] !== undefined ? _arguments474[1] : {};
                return _this495.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this495.marketId(symbol);
                }return _this495.privatePostOpenOrders(params);
            }).then(function (_resp) {
                response = _resp;

                return _this495.parseOrders(response['result']['open'], market);
            });
        },
        fetchClosedOrders: function fetchClosedOrders() {
            var symbol,
                params,
                market,
                response,
                _this496 = this,
                _arguments475 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments475.length > 0 && _arguments475[0] !== undefined ? _arguments475[0] : undefined;
                params = _arguments475.length > 1 && _arguments475[1] !== undefined ? _arguments475[1] : {};
                return _this496.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this496.marketId(symbol);
                }return _this496.privatePostClosedOrders(params);
            }).then(function (_resp) {
                response = _resp;

                return _this496.parseOrders(response['result']['closed'], market);
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                _hash3,
                binary,
                binhash,
                secret,
                signature,
                response,
                numErrors,
                _this497 = this,
                _arguments476 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments476.length > 1 && _arguments476[1] !== undefined ? _arguments476[1] : 'public';
                method = _arguments476.length > 2 && _arguments476[2] !== undefined ? _arguments476[2] : 'GET';
                params = _arguments476.length > 3 && _arguments476[3] !== undefined ? _arguments476[3] : {};
                headers = _arguments476.length > 4 && _arguments476[4] !== undefined ? _arguments476[4] : undefined;
                body = _arguments476.length > 5 && _arguments476[5] !== undefined ? _arguments476[5] : undefined;
                url = '/' + _this497.version + '/' + api + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this497.urlencode(params);
                    }
                } else {
                    nonce = _this497.nonce().toString();

                    body = _this497.urlencode(_this497.extend({ 'nonce': nonce }, params));
                    auth = _this497.encode(nonce + body);
                    _hash3 = _this497.hash(auth, 'sha256', 'binary');
                    binary = _this497.stringToBinary(_this497.encode(url));
                    binhash = _this497.binaryConcat(binary, _hash3);
                    secret = _this497.base64ToBinary(_this497.secret);
                    signature = _this497.hmac(binhash, secret, 'sha512', 'base64');

                    headers = {
                        'API-Key': _this497.apiKey,
                        'API-Sign': _this497.decode(signature),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                url = _this497.urls['api'] + url;
                return _this497.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    numErrors = response['error'].length;

                    if (numErrors) {
                        throw new ExchangeError(_this497.id + ' ' + _this497.json(response));
                    }
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var lakebtc = {

        'id': 'lakebtc',
        'name': 'LakeBTC',
        'countries': 'US',
        'version': 'api_v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',
            'api': 'https://api.lakebtc.com',
            'www': 'https://www.lakebtc.com',
            'doc': ['https://www.lakebtc.com/s/api_v2', 'https://www.lakebtc.com/s/api']
        },
        'api': {
            'public': {
                'get': ['bcorderbook', 'bctrades', 'ticker']
            },
            'private': {
                'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                k,
                id,
                market,
                base,
                quote,
                symbol,
                _this498 = this;

            return Promise.resolve().then(function () {
                return _this498.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    market = markets[id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this499 = this,
                _arguments478 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments478.length > 0 && _arguments478[0] !== undefined ? _arguments478[0] : {};
                return _this499.loadMarkets();
            }).then(function () {
                return _this499.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this500 = this,
                _arguments479 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments479.length > 1 && _arguments479[1] !== undefined ? _arguments479[1] : {};
                return _this500.loadMarkets();
            }).then(function () {
                return _this500.publicGetBcorderbook(_this500.extend({
                    'symbol': _this500.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this500.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                timestamp,
                _this501 = this;

            return Promise.resolve().then(function () {
                return _this501.loadMarkets();
            }).then(function () {
                market = _this501.market(symbol);
                return _this501.publicGetTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];
                timestamp = _this501.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this501.iso8601(timestamp),
                    'high': _this501.safeFloat(ticker, 'high'),
                    'low': _this501.safeFloat(ticker, 'low'),
                    'bid': _this501.safeFloat(ticker, 'bid'),
                    'ask': _this501.safeFloat(ticker, 'ask'),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': _this501.safeFloat(ticker, 'last'),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': _this501.safeFloat(ticker, 'volume'),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this502 = this,
                _arguments481 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments481.length > 1 && _arguments481[1] !== undefined ? _arguments481[1] : {};
                return _this502.loadMarkets();
            }).then(function () {
                market = _this502.market(symbol);
                return _this502.publicGetBctrades(_this502.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this502.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                marketId,
                order,
                response,
                _this503 = this,
                _arguments482 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments482.length > 4 && _arguments482[4] !== undefined ? _arguments482[4] : undefined;
                params = _arguments482.length > 5 && _arguments482[5] !== undefined ? _arguments482[5] : {};
                return _this503.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this503.id + ' allows limit orders only');
                }method = 'privatePost' + _this503.capitalize(side) + 'Order';
                marketId = _this503.marketId(market);
                order = {
                    'params': [price, amount, marketId]
                };
                return _this503[method](_this503.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this504 = this;

            return Promise.resolve().then(function () {
                return _this504.loadMarkets();
            }).then(function () {
                return _this504.privatePostCancelOrder({ 'params': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                signature,
                response,
                _this505 = this,
                _arguments484 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments484.length > 1 && _arguments484[1] !== undefined ? _arguments484[1] : 'public';
                method = _arguments484.length > 2 && _arguments484[2] !== undefined ? _arguments484[2] : 'GET';
                params = _arguments484.length > 3 && _arguments484[3] !== undefined ? _arguments484[3] : {};
                headers = _arguments484.length > 4 && _arguments484[4] !== undefined ? _arguments484[4] : undefined;
                body = _arguments484.length > 5 && _arguments484[5] !== undefined ? _arguments484[5] : undefined;
                url = _this505.urls['api'] + '/' + _this505.version;

                if (api == 'public') {
                    url += '/' + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this505.urlencode(params);
                    }
                } else {
                    nonce = _this505.nonce();

                    if (Object.keys(params).length) {
                        params = params.join(',');
                    } else {
                        params = '';
                    }query = _this505.urlencode({
                        'tonce': nonce,
                        'accesskey': _this505.apiKey,
                        'requestmethod': method.toLowerCase(),
                        'id': nonce,
                        'method': path,
                        'params': params
                    });

                    body = _this505.json({
                        'method': path,
                        'params': params,
                        'id': nonce
                    });
                    signature = _this505.hmac(_this505.encode(query), _this505.secret, 'sha1', 'base64');

                    headers = {
                        'Json-Rpc-Tonce': nonce,
                        'Authorization': "Basic " + _this505.apiKey + ':' + signature,
                        'Content-Length': body.length,
                        'Content-Type': 'application/json'
                    };
                }
                return _this505.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this505.id + ' ' + _this505.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var livecoin = {

        'id': 'livecoin',
        'name': 'LiveCoin',
        'countries': ['US', 'UK', 'RU'],
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',
            'api': 'https://api.livecoin.net',
            'www': 'https://www.livecoin.net',
            'doc': 'https://www.livecoin.net/api?lang=en'
        },
        'api': {
            'public': {
                'get': ['exchange/all/order_book', 'exchange/last_trades', 'exchange/maxbid_minask', 'exchange/order_book', 'exchange/restrictions', 'exchange/ticker', // omit params to get all tickers at once
                'info/coinInfo']
            },
            'private': {
                'get': ['exchange/client_orders', 'exchange/order', 'exchange/trades', 'exchange/commission', 'exchange/commissionCommonInfo', 'payment/balances', 'payment/balance', 'payment/get/address', 'payment/history/size', 'payment/history/transactions'],
                'post': ['exchange/buylimit', 'exchange/buymarket', 'exchange/cancellimit', 'exchange/selllimit', 'exchange/sellmarket', 'payment/out/capitalist', 'payment/out/card', 'payment/out/coin', 'payment/out/okpay', 'payment/out/payeer', 'payment/out/perfectmoney', 'payment/voucher/amount', 'payment/voucher/make', 'payment/voucher/redeem']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split13,
                _symbol$split14,
                base,
                quote,
                _this506 = this;

            return Promise.resolve().then(function () {
                return _this506.publicGetExchangeTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    symbol = id;
                    _symbol$split13 = symbol.split('/');
                    _symbol$split14 = _slicedToArray(_symbol$split13, 2);
                    base = _symbol$split14[0];
                    quote = _symbol$split14[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this507 = this,
                _arguments486 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments486.length > 0 && _arguments486[0] !== undefined ? _arguments486[0] : {};
                return _this507.loadMarkets();
            }).then(function () {
                return _this507.privateGetPaymentBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < _this507.currencies.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = undefined;

                    if (currency in result) {
                        account = result[currency];
                    } else {
                        account = _this507.account();
                    }if (balance['type'] == 'total') {
                        account['total'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'available') {
                        account['free'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'trade') {
                        account['used'] = parseFloat(balance['value']);
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this508 = this,
                _arguments487 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments487.length > 1 && _arguments487[1] !== undefined ? _arguments487[1] : {};
                return _this508.loadMarkets();
            }).then(function () {
                return _this508.publicGetExchangeOrderBook(_this508.extend({
                    'currencyPair': _this508.marketId(symbol),
                    'groupByPrice': 'false',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];

                return _this508.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['best_bid']),
                'ask': parseFloat(ticker['best_ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this509 = this;

            return Promise.resolve().then(function () {
                return _this509.loadMarkets();
            }).then(function () {
                return _this509.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this509.indexBy(response, 'symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this509.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this509.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this510 = this;

            return Promise.resolve().then(function () {
                return _this510.loadMarkets();
            }).then(function () {
                market = _this510.market(symbol);
                return _this510.publicGetExchangeTicker({
                    'currencyPair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this510.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['time'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['id'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['type'].toLowerCase(),
                'price': trade['price'],
                'amount': trade['quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this511 = this,
                _arguments490 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments490.length > 1 && _arguments490[1] !== undefined ? _arguments490[1] : {};
                return _this511.loadMarkets();
            }).then(function () {
                market = _this511.market(symbol);
                return _this511.publicGetExchangeLastTrades(_this511.extend({
                    'currencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this511.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this512 = this,
                _arguments491 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments491.length > 4 && _arguments491[4] !== undefined ? _arguments491[4] : undefined;
                params = _arguments491.length > 5 && _arguments491[5] !== undefined ? _arguments491[5] : {};
                return _this512.loadMarkets();
            }).then(function () {
                method = 'privatePostExchange' + _this512.capitalize(side) + type;
                order = {
                    'currencyPair': _this512.marketId(symbol),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this512[method](_this512.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this513 = this,
                _arguments492 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments492.length > 1 && _arguments492[1] !== undefined ? _arguments492[1] : {};
                return _this513.loadMarkets();
            }).then(function () {
                return _this513.privatePostExchangeCancellimit(_this513.extend({
                    'orderId': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                signature,
                response,
                _this514 = this,
                _arguments493 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments493.length > 1 && _arguments493[1] !== undefined ? _arguments493[1] : 'public';
                method = _arguments493.length > 2 && _arguments493[2] !== undefined ? _arguments493[2] : 'GET';
                params = _arguments493.length > 3 && _arguments493[3] !== undefined ? _arguments493[3] : {};
                headers = _arguments493.length > 4 && _arguments493[4] !== undefined ? _arguments493[4] : undefined;
                body = _arguments493.length > 5 && _arguments493[5] !== undefined ? _arguments493[5] : undefined;
                url = _this514.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this514.urlencode(params);
                    }
                } else {
                    query = _this514.urlencode(_this514.keysort(params));

                    if (method == 'GET') {
                        if (query) {
                            url += '?' + query;
                        } else {
                            if (query) {
                                body = query;
                            }
                        }
                    }signature = _this514.hmac(_this514.encode(query), _this514.encode(_this514.secret), 'sha256');

                    headers = {
                        'Api-Key': _this514.apiKey,
                        'Sign': signature.toUpperCase(),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this514.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this514.id + ' ' + _this514.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var liqui = {
        'id': 'liqui',
        'name': 'Liqui',
        'countries': 'UA',
        'rateLimit': 1000,
        'version': '3',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',
            'api': {
                'public': 'https://api.liqui.io/api',
                'private': 'https://api.liqui.io/tapi'
            },
            'www': 'https://liqui.io',
            'doc': 'https://liqui.io/api'
        },
        'api': {
            'public': {
                'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split5,
                _id$split6,
                base,
                quote,
                symbol,
                _this515 = this;

            return Promise.resolve().then(function () {
                return _this515.publicGetInfo();
            }).then(function (_resp) {
                response = _resp;
                markets = response['pairs'];
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split5 = id.split('_');
                    _id$split6 = _slicedToArray(_id$split5, 2);
                    base = _id$split6[0];
                    quote = _id$split6[1];

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    if (base == 'DSH') {
                        base = 'DASH';
                    }base = _this515.commonCurrencyCode(base);
                    quote = _this515.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                funds,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this516 = this,
                _arguments495 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments495.length > 0 && _arguments495[0] !== undefined ? _arguments495[0] : {};
                return _this516.loadMarkets();
            }).then(function () {
                return _this516.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                funds = balances['funds'];
                currencies = Object.keys(funds);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    // they misspell DASH as dsh :/

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = {
                        'free': funds[currency],
                        'used': 0.0,
                        'total': funds[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                result,
                _this517 = this,
                _arguments496 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments496.length > 1 && _arguments496[1] !== undefined ? _arguments496[1] : {};
                return _this517.loadMarkets();
            }).then(function () {
                market = _this517.market(symbol);
                return _this517.publicGetDepthPair(_this517.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                if (market['id'] in response) {
                    orderbook = response[market['id']];
                    result = _this517.parseOrderBook(orderbook);

                    result['bids'] = _this517.sortBy(result['bids'], 0, true);
                    result['asks'] = _this517.sortBy(result['asks'], 0);
                    return result;
                } else {
                    throw new ExchangeError(_this517.id + ' ' + market['symbol'] + ' order book is empty or not available');
                }
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': this.safeFloat(ticker, 'high'),
                'low': this.safeFloat(ticker, 'low'),
                'bid': this.safeFloat(ticker, 'buy'),
                'ask': this.safeFloat(ticker, 'sell'),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': this.safeFloat(ticker, 'last'),
                'change': undefined,
                'percentage': undefined,
                'average': this.safeFloat(ticker, 'avg'),
                'baseVolume': this.safeFloat(ticker, 'vol_cur'),
                'quoteVolume': this.safeFloat(ticker, 'vol'),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var symbols,
                ids,
                tickers,
                result,
                keys,
                k,
                id,
                ticker,
                market,
                symbol,
                _this518 = this,
                _arguments497 = arguments;

            return Promise.resolve().then(function () {
                symbols = _arguments497.length > 0 && _arguments497[0] !== undefined ? _arguments497[0] : undefined;
                return _this518.loadMarkets();
            }).then(function () {
                ids = symbols ? _this518.marketIds(symbols) : _this518.ids;
                return _this518.publicGetTickerPair({
                    'pair': ids.join('-')
                });
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                keys = Object.keys(tickers);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    ticker = tickers[id];
                    market = _this518.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this518.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                id,
                tickers,
                _this519 = this;

            return Promise.resolve().then(function () {
                return _this519.loadMarkets();
            }).then(function () {
                market = _this519.market(symbol);
                id = market['id'];
                return _this519.fetchTickers([id]);
            }).then(function (_resp) {
                tickers = _resp;

                return tickers[symbol];
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'ask' ? 'sell' : 'buy';
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                id,
                response,
                _this520 = this,
                _arguments499 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments499.length > 1 && _arguments499[1] !== undefined ? _arguments499[1] : {};
                return _this520.loadMarkets();
            }).then(function () {
                market = _this520.market(symbol);
                id = market['id'];
                return _this520.publicGetTradesPair(_this520.extend({
                    'pair': id
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this520.parseTrades(response[id], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this521 = this,
                _arguments500 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments500.length > 4 && _arguments500[4] !== undefined ? _arguments500[4] : undefined;
                params = _arguments500.length > 5 && _arguments500[5] !== undefined ? _arguments500[5] : {};
                return _this521.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this521.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                };
                return _this521.privatePostTrade(_this521.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this522 = this;

            return Promise.resolve().then(function () {
                return _this522.loadMarkets();
            }).then(function () {
                return _this522.privatePostCancelOrder({ 'order_id': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var statusCode = order['status'];
            var status = undefined;
            if (statusCode == 0) {
                status = 'open';
            } else if (statusCode == 2 || statusCode == 3) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var timestamp = order['timestamp_created'] * 1000;
            var market = this.markets_by_id[order['pair']];
            var result = {
                'info': order,
                'id': order['id'],
                'symbol': market['symbol'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'type': 'limit',
                'side': order['type'],
                'price': order['rate'],
                'amount': order['start_amount'],
                'remaining': order['amount'],
                'status': status
            };
            return result;
        },
        parseOrders: function parseOrders(orders) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var ids = Object.keys(orders);
            var result = [];
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var order = orders[id];
                var extended = this.extend(order, { 'id': id });
                result.push(this.parseOrder(extended, market));
            }
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                order,
                _this523 = this;

            return Promise.resolve().then(function () {
                return _this523.loadMarkets();
            }).then(function () {
                return _this523.privatePostOrderInfo({ 'order_id': id });
            }).then(function (_resp) {
                response = _resp;
                order = response['return'][id];

                return _this523.parseOrder(_this523.extend({ 'id': id }, order));
            });
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                request,
                response,
                _this524 = this,
                _arguments503 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments503.length > 0 && _arguments503[0] !== undefined ? _arguments503[0] : undefined;
                params = _arguments503.length > 1 && _arguments503[1] !== undefined ? _arguments503[1] : {};

                if (!symbol) {
                    throw new ExchangeError(_this524.id + ' requires a symbol');
                }return _this524.loadMarkets();
            }).then(function () {
                market = _this524.market(symbol);
                request = {
                    'pair': market['id']
                };
                return _this524.privatePostActiveOrders(_this524.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this524.parseOrders(response['return'], market);
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this525 = this,
                _arguments504 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments504.length > 3 && _arguments504[3] !== undefined ? _arguments504[3] : {};
                return _this525.loadMarkets();
            }).then(function () {
                return _this525.privatePostWithdrawCoin(_this525.extend({
                    'coinName': currency,
                    'amount': parseFloat(amount),
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['tId']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                signature,
                response,
                _this526 = this,
                _arguments505 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments505.length > 1 && _arguments505[1] !== undefined ? _arguments505[1] : 'public';
                method = _arguments505.length > 2 && _arguments505[2] !== undefined ? _arguments505[2] : 'GET';
                params = _arguments505.length > 3 && _arguments505[3] !== undefined ? _arguments505[3] : {};
                headers = _arguments505.length > 4 && _arguments505[4] !== undefined ? _arguments505[4] : undefined;
                body = _arguments505.length > 5 && _arguments505[5] !== undefined ? _arguments505[5] : undefined;
                url = _this526.urls['api'][api];
                query = _this526.omit(params, _this526.extractParams(path));

                if (api == 'public') {
                    url += '/' + _this526.version + '/' + _this526.implodeParams(path, params);
                    if (Object.keys(query).length) {
                        url += '?' + _this526.urlencode(query);
                    }
                } else {
                    nonce = _this526.nonce();

                    body = _this526.urlencode(_this526.extend({
                        'nonce': nonce,
                        'method': path
                    }, query));
                    signature = _this526.hmac(_this526.encode(body), _this526.encode(_this526.secret), 'sha512');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString(),
                        'Key': _this526.apiKey,
                        'Sign': signature
                    };
                }
                return _this526.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this526.id + ' ' + _this526.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var luno = {

        'id': 'luno',
        'name': 'luno',
        'countries': ['GB', 'SG', 'ZA'],
        'rateLimit': 3000,
        'version': '1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
            'api': 'https://api.mybitx.com/api',
            'www': 'https://www.luno.com',
            'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']
        },
        'api': {
            'public': {
                'get': ['orderbook', 'ticker', 'tickers', 'trades']
            },
            'private': {
                'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}'],
                'post': ['accounts', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],
                'put': ['quotes/{id}'],
                'delete': ['quotes/{id}', 'withdrawals/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this527 = this;

            return Promise.resolve().then(function () {
                return _this527.publicGetTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['pair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = _this527.commonCurrencyCode(base);
                    quote = _this527.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                reserved,
                unconfirmed,
                account,
                _this528 = this,
                _arguments507 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments507.length > 0 && _arguments507[0] !== undefined ? _arguments507[0] : {};
                return _this528.loadMarkets();
            }).then(function () {
                return _this528.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = _this528.commonCurrencyCode(balance['asset']);
                    reserved = parseFloat(balance['reserved']);
                    unconfirmed = parseFloat(balance['unconfirmed']);
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': _this528.sum(reserved, unconfirmed),
                        'total': 0.0
                    };

                    account['total'] = _this528.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this529 = this,
                _arguments508 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments508.length > 1 && _arguments508[1] !== undefined ? _arguments508[1] : {};
                return _this529.loadMarkets();
            }).then(function () {
                return _this529.publicGetOrderbook(_this529.extend({
                    'pair': _this529.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];

                return _this529.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['rolling_24_hour_volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this530 = this;

            return Promise.resolve().then(function () {
                return _this530.loadMarkets();
            }).then(function () {
                return _this530.publicGetTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this530.indexBy(response['tickers'], 'pair');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this530.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this530.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this531 = this;

            return Promise.resolve().then(function () {
                return _this531.loadMarkets();
            }).then(function () {
                market = _this531.market(symbol);
                return _this531.publicGetTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this531.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var side = trade['is_buy'] ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': undefined,
                'order': undefined,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['volume'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this532 = this,
                _arguments511 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments511.length > 1 && _arguments511[1] !== undefined ? _arguments511[1] : {};
                return _this532.loadMarkets();
            }).then(function () {
                market = _this532.market(symbol);
                return _this532.publicGetTrades(_this532.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this532.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this533 = this,
                _arguments512 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments512.length > 4 && _arguments512[4] !== undefined ? _arguments512[4] : undefined;
                params = _arguments512.length > 5 && _arguments512[5] !== undefined ? _arguments512[5] : {};
                return _this533.loadMarkets();
            }).then(function () {
                method = 'privatePost';
                order = { 'pair': _this533.marketId(market) };

                if (type == 'market') {
                    method += 'Marketorder';
                    order['type'] = side.toUpperCase();
                    if (side == 'buy') {
                        order['counter_volume'] = amount;
                    } else {
                        order['base_volume'] = amount;
                    }
                } else {
                    method += 'Order';
                    order['volume'] = amount;
                    order['price'] = price;
                    if (side == 'buy') {
                        order['type'] = 'BID';
                    } else {
                        order['type'] = 'ASK';
                    }
                }
                return _this533[method](_this533.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this534 = this;

            return Promise.resolve().then(function () {
                return _this534.loadMarkets();
            }).then(function () {
                return _this534.privatePostStoporder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                auth,
                response,
                _this535 = this,
                _arguments514 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments514.length > 1 && _arguments514[1] !== undefined ? _arguments514[1] : 'public';
                method = _arguments514.length > 2 && _arguments514[2] !== undefined ? _arguments514[2] : 'GET';
                params = _arguments514.length > 3 && _arguments514[3] !== undefined ? _arguments514[3] : {};
                headers = _arguments514.length > 4 && _arguments514[4] !== undefined ? _arguments514[4] : undefined;
                body = _arguments514.length > 5 && _arguments514[5] !== undefined ? _arguments514[5] : undefined;
                url = _this535.urls['api'] + '/' + _this535.version + '/' + _this535.implodeParams(path, params);
                query = _this535.omit(params, _this535.extractParams(path));

                if (Object.keys(query).length) {
                    url += '?' + _this535.urlencode(query);
                }if (api == 'private') {
                    auth = _this535.encode(_this535.apiKey + ':' + _this535.secret);

                    auth = _this535.stringToBase64(auth);
                    headers = { 'Authorization': 'Basic ' + _this535.decode(auth) };
                }
                return _this535.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this535.id + ' ' + _this535.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var mercado = {

        'id': 'mercado',
        'name': 'Mercado Bitcoin',
        'countries': 'BR', // Brazil
        'rateLimit': 1000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
            'api': {
                'public': 'https://www.mercadobitcoin.net/api',
                'private': 'https://www.mercadobitcoin.net/tapi'
            },
            'www': 'https://www.mercadobitcoin.com.br',
            'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']
        },
        'api': {
            'public': {
                'get': [// last slash critical
                'orderbook/', 'orderbook_litecoin/', 'ticker/', 'ticker_litecoin/', 'trades/', 'trades_litecoin/', 'v2/ticker/', 'v2/ticker_litecoin/']
            },
            'private': {
                'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'withdraw_coin']
            }
        },
        'markets': {
            'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': '' },
            'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                method,
                orderbook,
                _this536 = this,
                _arguments515 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments515.length > 1 && _arguments515[1] !== undefined ? _arguments515[1] : {};
                market = _this536.market(symbol);
                method = 'publicGetOrderbook' + _this536.capitalize(market['suffix']);
                return _this536[method](params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this536.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                method,
                response,
                ticker,
                timestamp,
                _this537 = this;

            return Promise.resolve().then(function () {
                market = _this537.market(symbol);
                method = 'publicGetV2Ticker' + _this537.capitalize(market['suffix']);
                return _this537[method]();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(ticker['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this537.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                method,
                response,
                _this538 = this,
                _arguments517 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments517.length > 1 && _arguments517[1] !== undefined ? _arguments517[1] : {};
                market = _this538.market(symbol);
                method = 'publicGetTrades' + _this538.capitalize(market['suffix']);
                return _this538[method](params);
            }).then(function (_resp) {
                response = _resp;

                return _this538.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this539 = this,
                _arguments518 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments518.length > 0 && _arguments518[0] !== undefined ? _arguments518[0] : {};
                return _this539.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (c = 0; c < _this539.currencies.length; c++) {
                    currency = _this539.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this539.account();

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]['available']);
                        account['total'] = parseFloat(balances[lowercase]['total']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this540 = this,
                _arguments519 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments519.length > 4 && _arguments519[4] !== undefined ? _arguments519[4] : undefined;
                params = _arguments519.length > 5 && _arguments519[5] !== undefined ? _arguments519[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this540.id + ' allows limit orders only');
                }method = 'privatePostPlace' + _this540.capitalize(side) + 'Order';
                order = {
                    'coin_pair': _this540.marketId(symbol),
                    'quantity': amount,
                    'limit_price': price
                };
                return _this540[method](_this540.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['response_data']['order']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this541 = this,
                _arguments520 = arguments;

            params = _arguments520.length > 1 && _arguments520[1] !== undefined ? _arguments520[1] : {};

            return _this541.privatePostCancelOrder(_this541.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                response,
                _this542 = this,
                _arguments521 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments521.length > 1 && _arguments521[1] !== undefined ? _arguments521[1] : 'public';
                method = _arguments521.length > 2 && _arguments521[2] !== undefined ? _arguments521[2] : 'GET';
                params = _arguments521.length > 3 && _arguments521[3] !== undefined ? _arguments521[3] : {};
                headers = _arguments521.length > 4 && _arguments521[4] !== undefined ? _arguments521[4] : undefined;
                body = _arguments521.length > 5 && _arguments521[5] !== undefined ? _arguments521[5] : undefined;
                url = _this542.urls['api'][api] + '/';

                if (api == 'public') {
                    url += path;
                } else {
                    url += _this542.version + '/';
                    nonce = _this542.nonce();

                    body = _this542.urlencode(_this542.extend({
                        'tapi_method': path,
                        'tapi_nonce': nonce
                    }, params));
                    auth = '/tapi/' + _this542.version + '/' + '?' + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'TAPI-ID': _this542.apiKey,
                        'TAPI-MAC': _this542.hmac(_this542.encode(auth), _this542.secret, 'sha512')
                    };
                }
                return _this542.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error_message' in response) {
                    throw new ExchangeError(_this542.id + ' ' + _this542.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var mixcoins = {

        'id': 'mixcoins',
        'name': 'MixCoins',
        'countries': ['GB', 'HK'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/30237212-ed29303c-9535-11e7-8af8-fcd381cfa20c.jpg',
            'api': 'https://mixcoins.com/api',
            'www': 'https://mixcoins.com',
            'doc': 'https://mixcoins.com/help/api/'
        },
        'api': {
            'public': {
                'get': ['ticker', 'trades', 'depth']
            },
            'private': {
                'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'BCH/USD': { 'id': 'bcc_usd', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD' },
            'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                lowercase,
                account,
                _this543 = this,
                _arguments522 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments522.length > 0 && _arguments522[0] !== undefined ? _arguments522[0] : {};
                return _this543.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['result']['wallet'];
                result = { 'info': balance };

                for (c = 0; c < _this543.currencies.length; c++) {
                    currency = _this543.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this543.account();

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]['avail']);
                        account['used'] = parseFloat(balance[lowercase]['lock']);
                        account['total'] = _this543.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this544 = this,
                _arguments523 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments523.length > 1 && _arguments523[1] !== undefined ? _arguments523[1] : {};
                return _this544.publicGetDepth(_this544.extend({
                    'market': _this544.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this544.parseOrderBook(response['result']);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this545 = this;

            return Promise.resolve().then(function () {
                return _this545.publicGetTicker({
                    'market': _this545.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'];
                timestamp = _this545.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this545.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this546 = this,
                _arguments525 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments525.length > 1 && _arguments525[1] !== undefined ? _arguments525[1] : {};
                market = _this546.market(symbol);
                return _this546.publicGetTrades(_this546.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this546.parseTrades(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this547 = this,
                _arguments526 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments526.length > 4 && _arguments526[4] !== undefined ? _arguments526[4] : undefined;
                params = _arguments526.length > 5 && _arguments526[5] !== undefined ? _arguments526[5] : {};
                order = {
                    'market': _this547.marketId(symbol),
                    'op': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['order_type'] = 1;
                    order['price'] = price;
                } else {
                    order['order_type'] = 0;
                }
                return _this547.privatePostTrade(_this547.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this548 = this;

            return _this548.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test20,
                _this549 = this,
                _arguments528 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments528.length > 1 && _arguments528[1] !== undefined ? _arguments528[1] : 'public';
                method = _arguments528.length > 2 && _arguments528[2] !== undefined ? _arguments528[2] : 'GET';
                params = _arguments528.length > 3 && _arguments528[3] !== undefined ? _arguments528[3] : {};
                headers = _arguments528.length > 4 && _arguments528[4] !== undefined ? _arguments528[4] : undefined;
                body = _arguments528.length > 5 && _arguments528[5] !== undefined ? _arguments528[5] : undefined;
                url = _this549.urls['api'] + '/' + _this549.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this549.urlencode(params);
                    }
                } else {
                    nonce = _this549.nonce();

                    body = _this549.urlencode(_this549.extend({
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this549.apiKey,
                        'Sign': _this549.hmac(_this549.encode(body), _this549.secret, 'sha512')
                    };
                }
                return _this549.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test20 = 'status' in response;

                if (_test20 && response['status'] == 200) {
                    return response;
                } else {
                    throw new ExchangeError(_this549.id + ' ' + _this549.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var nova = {

        'id': 'nova',
        'name': 'Novaexchange',
        'countries': 'TZ', // Tanzania
        'rateLimit': 2000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/30518571-78ca0bca-9b8a-11e7-8840-64b83a4a94b2.jpg',
            'api': 'https://novaexchange.com/remote',
            'www': 'https://novaexchange.com',
            'doc': 'https://novaexchange.com/remote/faq'
        },
        'api': {
            'public': {
                'get': ['markets/', 'markets/{basecurrency}', 'market/info/{pair}/', 'market/orderhistory/{pair}/', 'market/openorders/{pair}/buy/', 'market/openorders/{pair}/sell/', 'market/openorders/{pair}/both/', 'market/openorders/{pair}/{ordertype}/']
            },
            'private': {
                'post': ['getbalances/', 'getbalance/{currency}/', 'getdeposits/', 'getwithdrawals/', 'getnewdepositaddress/{currency}/', 'getdepositaddress/{currency}/', 'myopenorders/', 'myopenorders_market/{pair}/', 'cancelorder/{orderid}/', 'withdraw/{currency}/', 'trade/{pair}/', 'tradehistory/', 'getdeposithistory/', 'getwithdrawalhistory/', 'walletstatus/', 'walletstatus/{currency}/']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                i,
                market,
                id,
                _id$split7,
                _id$split8,
                quote,
                base,
                symbol,
                _this550 = this;

            return Promise.resolve().then(function () {
                return _this550.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                markets = response['markets'];
                result = [];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];

                    if (!market['disabled']) {
                        id = market['marketname'];
                        _id$split7 = id.split('_');
                        _id$split8 = _slicedToArray(_id$split7, 2);
                        quote = _id$split8[0];
                        base = _id$split8[1];
                        symbol = base + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'info': market
                        });
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this551 = this,
                _arguments530 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments530.length > 1 && _arguments530[1] !== undefined ? _arguments530[1] : {};
                return _this551.loadMarkets();
            }).then(function () {
                return _this551.publicGetMarketOpenordersPairBoth(_this551.extend({
                    'pair': _this551.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this551.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this552 = this;

            return Promise.resolve().then(function () {
                return _this552.loadMarkets();
            }).then(function () {
                return _this552.publicGetMarketInfoPair({
                    'pair': _this552.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['markets'][0];
                timestamp = _this552.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this552.iso8601(timestamp),
                    'high': parseFloat(ticker['high24h']),
                    'low': parseFloat(ticker['low24h']),
                    'bid': _this552.safeFloat(ticker, 'bid'),
                    'ask': _this552.safeFloat(ticker, 'ask'),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['change24h']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume24h']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['unix_t_datestamp'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': undefined,
                'order': undefined,
                'type': undefined,
                'side': trade['tradetype'].toLowerCase(),
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this553 = this,
                _arguments532 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments532.length > 1 && _arguments532[1] !== undefined ? _arguments532[1] : {};
                return _this553.loadMarkets();
            }).then(function () {
                market = _this553.market(symbol);
                return _this553.publicGetMarketOrderhistoryPair(_this553.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this553.parseTrades(response['items'], market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                lockbox,
                trades,
                account,
                _this554 = this,
                _arguments533 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments533.length > 0 && _arguments533[0] !== undefined ? _arguments533[0] : {};
                return _this554.loadMarkets();
            }).then(function () {
                return _this554.privatePostGetbalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    lockbox = parseFloat(balance['amount_lockbox']);
                    trades = parseFloat(balance['amount_trades']);
                    account = {
                        'free': parseFloat(balance['amount']),
                        'used': _this554.sum(lockbox, trades),
                        'total': parseFloat(balance['amount_total'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this555 = this,
                _arguments534 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments534.length > 4 && _arguments534[4] !== undefined ? _arguments534[4] : undefined;
                params = _arguments534.length > 5 && _arguments534[5] !== undefined ? _arguments534[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this555.id + ' allows limit orders only');
                }return _this555.loadMarkets();
            }).then(function () {
                amount = amount.toString();
                price = price.toString();
                market = _this555.market(symbol);
                order = {
                    'tradetype': side.toUpperCase(),
                    'tradeamount': amount,
                    'tradeprice': price,
                    'tradebase': 1,
                    'pair': market['id']
                };
                return _this555.privatePostTradePair(_this555.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': undefined
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this556 = this,
                _arguments535 = arguments;

            params = _arguments535.length > 1 && _arguments535[1] !== undefined ? _arguments535[1] : {};

            return _this556.privatePostCancelorder(_this556.extend({
                'orderid': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                signature,
                response,
                _this557 = this,
                _arguments536 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments536.length > 1 && _arguments536[1] !== undefined ? _arguments536[1] : 'public';
                method = _arguments536.length > 2 && _arguments536[2] !== undefined ? _arguments536[2] : 'GET';
                params = _arguments536.length > 3 && _arguments536[3] !== undefined ? _arguments536[3] : {};
                headers = _arguments536.length > 4 && _arguments536[4] !== undefined ? _arguments536[4] : undefined;
                body = _arguments536.length > 5 && _arguments536[5] !== undefined ? _arguments536[5] : undefined;
                url = _this557.urls['api'] + '/' + _this557.version + '/';

                if (api == 'private') {
                    url += api + '/';
                }url += _this557.implodeParams(path, params);
                query = _this557.omit(params, _this557.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this557.urlencode(query);
                    }
                } else {
                    nonce = _this557.nonce().toString();

                    url += '?' + _this557.urlencode({ 'nonce': nonce });
                    signature = _this557.hmac(_this557.encode(url), _this557.encode(_this557.secret), 'sha512', 'base64');

                    body = _this557.urlencode(_this557.extend({
                        'apikey': _this557.apiKey,
                        'signature': signature
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this557.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] != 'success') {
                        throw new ExchangeError(_this557.id + ' ' + _this557.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // OKCoin
    // China
    // https://www.okcoin.com/
    // https://www.okcoin.com/rest_getStarted.html
    // https://github.com/OKCoin/websocket
    // https://www.npmjs.com/package/okcoin.com
    // https://www.okcoin.cn
    // https://www.okcoin.cn/rest_getStarted.html

    var okcoin = {

        'version': 'v1',
        'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1min',
            '3m': '3min',
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '1hour',
            '2h': '2hour',
            '4h': '4hour',
            '6h': '6hour',
            '12h': '12hour',
            '1d': '1day',
            '3d': '3day',
            '1w': '1week'
        },
        'api': {
            'public': {
                'get': ['depth', 'exchange_rate', 'future_depth', 'future_estimated_price', 'future_hold_amount', 'future_index', 'future_kline', 'future_price_limit', 'future_ticker', 'future_trades', 'kline', 'otcs', 'ticker', 'trades']
            },
            'private': {
                'post': ['account_records', 'batch_trade', 'borrow_money', 'borrow_order_info', 'borrows_info', 'cancel_borrow', 'cancel_order', 'cancel_otc_order', 'cancel_withdraw', 'future_batch_trade', 'future_cancel', 'future_devolve', 'future_explosive', 'future_order_info', 'future_orders_info', 'future_position', 'future_position_4fix', 'future_trade', 'future_trades_history', 'future_userinfo', 'future_userinfo_4fix', 'lend_depth', 'order_fee', 'order_history', 'order_info', 'orders_info', 'otc_order_history', 'otc_order_info', 'repayment', 'submit_otc_order', 'trade', 'trade_history', 'trade_otc_order', 'withdraw', 'withdraw_info', 'unrepayments_info', 'userinfo']
            }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                _this558 = this,
                _arguments537 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments537.length > 1 && _arguments537[1] !== undefined ? _arguments537[1] : {};
                return _this558.publicGetDepth(_this558.extend({
                    'symbol': _this558.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this558.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': _this558.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this558.iso8601(timestamp)
                };
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['vol']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                timestamp,
                ticker,
                _this559 = this;

            return Promise.resolve().then(function () {
                market = _this559.market(symbol);
                return _this559.publicGetTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                timestamp = parseInt(response['date']) * 1000;
                ticker = _this559.extend(response['ticker'], { 'timestamp': timestamp });

                return _this559.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var symbol = undefined;
            if (market) symbol = market['symbol'];
            return {
                'info': trade,
                'timestamp': trade['date_ms'],
                'datetime': this.iso8601(trade['date_ms']),
                'symbol': symbol,
                'id': trade['tid'],
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this560 = this,
                _arguments539 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments539.length > 1 && _arguments539[1] !== undefined ? _arguments539[1] : {};
                market = _this560.market(symbol);
                return _this560.publicGetTrades(_this560.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this560.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this561 = this,
                _arguments540 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments540.length > 1 && _arguments540[1] !== undefined ? _arguments540[1] : '1m';
                since = _arguments540.length > 2 && _arguments540[2] !== undefined ? _arguments540[2] : undefined;
                limit = _arguments540.length > 3 && _arguments540[3] !== undefined ? _arguments540[3] : 1440;
                params = _arguments540.length > 4 && _arguments540[4] !== undefined ? _arguments540[4] : {};
                market = _this561.market(symbol);
                request = {
                    'symbol': market['id'],
                    'type': _this561.timeframes[timeframe]
                };

                if (limit) {
                    request['size'] = parseInt(limit);
                }if (since) {
                    request['since'] = since;
                } else {
                    request['since'] = _this561.milliseconds() - 86400000; // last 24 hours
                }
                return _this561.publicGetKline(_this561.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this561.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this562 = this,
                _arguments541 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments541.length > 0 && _arguments541[0] !== undefined ? _arguments541[0] : {};
                return _this562.privatePostUserinfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['info']['funds'];
                result = { 'info': response };

                for (c = 0; c < _this562.currencies.length; c++) {
                    currency = _this562.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this562.account();

                    if (lowercase in balances['free']) {
                        account['free'] = parseFloat(balances['free'][lowercase]);
                    }if (lowercase in balances['freezed']) {
                        account['used'] = parseFloat(balances['freezed'][lowercase]);
                    }account['total'] = _this562.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this563 = this,
                _arguments542 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments542.length > 4 && _arguments542[4] !== undefined ? _arguments542[4] : undefined;
                params = _arguments542.length > 5 && _arguments542[5] !== undefined ? _arguments542[5] : {};
                order = {
                    'symbol': _this563.marketId(market),
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                    order['amount'] = amount;
                } else {
                    if (side == 'buy') {
                        order['price'] = params;
                    } else {
                        order['amount'] = amount;
                    }
                    order['type'] += '_market';
                }
                return _this563.privatePostTrade(_this563.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this564 = this,
                _arguments543 = arguments;

            params = _arguments543.length > 1 && _arguments543[1] !== undefined ? _arguments543[1] : {};

            return _this564.privatePostCancelOrder(_this564.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                response,
                _this565 = this,
                _arguments544 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments544.length > 1 && _arguments544[1] !== undefined ? _arguments544[1] : 'public';
                method = _arguments544.length > 2 && _arguments544[2] !== undefined ? _arguments544[2] : 'GET';
                params = _arguments544.length > 3 && _arguments544[3] !== undefined ? _arguments544[3] : {};
                headers = _arguments544.length > 4 && _arguments544[4] !== undefined ? _arguments544[4] : undefined;
                body = _arguments544.length > 5 && _arguments544[5] !== undefined ? _arguments544[5] : undefined;
                url = '/' + 'api' + '/' + _this565.version + '/' + path + '.do';

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this565.urlencode(params);
                    }
                } else {
                    query = _this565.keysort(_this565.extend({
                        'api_key': _this565.apiKey
                    }, params));
                    // secret key must be at the end of query

                    queryString = _this565.urlencode(query) + '&secret_key=' + _this565.secret;

                    query['sign'] = _this565.hash(_this565.encode(queryString)).toUpperCase();
                    body = _this565.urlencode(query);
                    headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
                }
                url = _this565.urls['api'] + url;
                return _this565.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this565.id + ' ' + _this565.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var okcoincny = extend(okcoin, {
        'id': 'okcoincny',
        'name': 'OKCoin CNY',
        'countries': 'CN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',
            'api': 'https://www.okcoin.cn',
            'www': 'https://www.okcoin.cn',
            'doc': 'https://www.okcoin.cn/rest_getStarted.html'
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
            'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' }
        }
    });

    //-----------------------------------------------------------------------------

    var okcoinusd = extend(okcoin, {
        'id': 'okcoinusd',
        'name': 'OKCoin USD',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
            'api': 'https://www.okcoin.com',
            'www': 'https://www.okcoin.com',
            'doc': ['https://www.okcoin.com/rest_getStarted.html', 'https://www.npmjs.com/package/okcoin.com']
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETC/USD': { 'id': 'etc_usd', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' }
        }
    });

    //-----------------------------------------------------------------------------

    var okex = extend(okcoin, {
        'id': 'okex',
        'name': 'OKEX',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29562593-9038a9bc-8742-11e7-91cc-8201f845bfc1.jpg',
            'api': 'https://www.okex.com',
            'www': 'https://www.okex.com',
            'doc': 'https://www.okex.com/rest_getStarted.html'
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' }
            // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            // 'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this566 = this,
                _arguments545 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments545.length > 1 && _arguments545[1] !== undefined ? _arguments545[1] : {};
                return _this566.publicGetFutureDepth(_this566.extend({
                    'symbol': _this566.marketId(symbol),
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this566.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': _this566.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this566.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var params,
                market,
                response,
                timestamp,
                ticker,
                _this567 = this,
                _arguments546 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments546.length > 1 && _arguments546[1] !== undefined ? _arguments546[1] : {};
                market = _this567.market(symbol);
                return _this567.publicGetFutureTicker(_this567.extend({
                    'symbol': market['id'],
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = parseInt(response['date']) * 1000;
                ticker = _this567.extend(response['ticker'], { 'timestamp': timestamp });

                return _this567.parseTicker(ticker, market);
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this568 = this,
                _arguments547 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments547.length > 1 && _arguments547[1] !== undefined ? _arguments547[1] : {};
                market = _this568.market(symbol);
                return _this568.publicGetFutureTrades(_this568.extend({
                    'symbol': market['id'],
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this568.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this569 = this,
                _arguments548 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments548.length > 1 && _arguments548[1] !== undefined ? _arguments548[1] : '1m';
                since = _arguments548.length > 2 && _arguments548[2] !== undefined ? _arguments548[2] : undefined;
                limit = _arguments548.length > 3 && _arguments548[3] !== undefined ? _arguments548[3] : undefined;
                params = _arguments548.length > 4 && _arguments548[4] !== undefined ? _arguments548[4] : {};
                market = _this569.market(symbol);
                request = {
                    'symbol': market['id'],
                    'contract_type': 'this_week', // next_week, quarter
                    'type': _this569.timeframes[timeframe],
                    'since': since
                };

                if (limit) {
                    request['size'] = parseInt(limit);
                }if (since) {
                    request['since'] = since;
                } else {
                    request['since'] = _this569.milliseconds() - 86400000; // last 24 hours
                }
                return _this569.publicGetFutureKline(_this569.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this569.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                response,
                _this570 = this,
                _arguments549 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments549.length > 4 && _arguments549[4] !== undefined ? _arguments549[4] : undefined;
                params = _arguments549.length > 5 && _arguments549[5] !== undefined ? _arguments549[5] : {};
                orderType = side == 'buy' ? '1' : '2';
                order = {
                    'symbol': _this570.marketId(symbol),
                    'type': orderType,
                    'contract_type': 'this_week', // next_week, quarter
                    'match_price': 0, // match best counter party price? 0 or 1, ignores price if 1
                    'lever_rate': 10, // leverage rate value: 10 or 20 (10 by default)
                    'price': price,
                    'amount': amount
                };
                return _this570.privatePostFutureTrade(_this570.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this571 = this,
                _arguments550 = arguments;

            params = _arguments550.length > 1 && _arguments550[1] !== undefined ? _arguments550[1] : {};

            return _this571.privatePostFutureCancel(_this571.extend({
                'order_id': id
            }, params));
        }
    });

    //-----------------------------------------------------------------------------

    var paymium = {

        'id': 'paymium',
        'name': 'Paymium',
        'countries': ['FR', 'EU'],
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
            'api': 'https://paymium.com/api',
            'www': 'https://www.paymium.com',
            'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers']
        },
        'api': {
            'public': {
                'get': ['countries', 'data/{id}/ticker', 'data/{id}/trades', 'data/{id}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']
            },
            'private': {
                'get': ['merchant/get_payment/{UUID}', 'user', 'user/addresses', 'user/addresses/{btc_address}', 'user/orders', 'user/orders/{UUID}', 'user/price_alerts'],
                'post': ['user/orders', 'user/addresses', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],
                'delete': ['user/orders/{UUID}/cancel', 'user/price_alerts/{id}']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                balance,
                locked,
                _this572 = this,
                _arguments551 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments551.length > 0 && _arguments551[0] !== undefined ? _arguments551[0] : {};
                return _this572.privateGetUser();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this572.currencies.length; c++) {
                    currency = _this572.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this572.account();
                    balance = 'balance_' + lowercase;
                    locked = 'locked_' + lowercase;

                    if (balance in balances) {
                        account['free'] = balances[balance];
                    }if (locked in balances) {
                        account['used'] = balances[locked];
                    }account['total'] = _this572.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                result,
                _this573 = this,
                _arguments552 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments552.length > 1 && _arguments552[1] !== undefined ? _arguments552[1] : {};
                return _this573.publicGetDataIdDepth(_this573.extend({
                    'id': _this573.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this573.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');

                result['bids'] = _this573.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this574 = this;

            return Promise.resolve().then(function () {
                return _this574.publicGetDataIdTicker({
                    'id': _this574.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['at'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this574.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['price']),
                    'change': undefined,
                    'percentage': parseFloat(ticker['variation']),
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['created_at_int']) * 1000;
            var volume = 'traded_' + market['base'].toLowerCase();
            return {
                'info': trade,
                'id': trade['uuid'],
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade[volume]
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this575 = this,
                _arguments554 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments554.length > 1 && _arguments554[1] !== undefined ? _arguments554[1] : {};
                market = _this575.market(symbol);
                return _this575.publicGetDataIdTrades(_this575.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this575.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this576 = this,
                _arguments555 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments555.length > 4 && _arguments555[4] !== undefined ? _arguments555[4] : undefined;
                params = _arguments555.length > 5 && _arguments555[5] !== undefined ? _arguments555[5] : {};
                order = {
                    'type': _this576.capitalize(type) + 'Order',
                    'currency': _this576.marketId(market),
                    'direction': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['price'] = price;
                }return _this576.privatePostUserOrders(_this576.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this577 = this,
                _arguments556 = arguments;

            params = _arguments556.length > 1 && _arguments556[1] !== undefined ? _arguments556[1] : {};

            return _this577.privatePostCancelOrder(_this577.extend({
                'orderNumber': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this578 = this,
                _arguments557 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments557.length > 1 && _arguments557[1] !== undefined ? _arguments557[1] : 'public';
                method = _arguments557.length > 2 && _arguments557[2] !== undefined ? _arguments557[2] : 'GET';
                params = _arguments557.length > 3 && _arguments557[3] !== undefined ? _arguments557[3] : {};
                headers = _arguments557.length > 4 && _arguments557[4] !== undefined ? _arguments557[4] : undefined;
                body = _arguments557.length > 5 && _arguments557[5] !== undefined ? _arguments557[5] : undefined;
                url = _this578.urls['api'] + '/' + _this578.version + '/' + _this578.implodeParams(path, params);
                query = _this578.omit(params, _this578.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this578.urlencode(query);
                    }
                } else {
                    body = _this578.json(params);
                    nonce = _this578.nonce().toString();
                    auth = nonce + url + body;

                    headers = {
                        'Api-Key': _this578.apiKey,
                        'Api-Signature': _this578.hmac(_this578.encode(auth), _this578.secret),
                        'Api-Nonce': nonce,
                        'Content-Type': 'application/json'
                    };
                }
                return _this578.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this578.id + ' ' + _this578.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var poloniex = {

        'id': 'poloniex',
        'name': 'Poloniex',
        'countries': 'US',
        'rateLimit': 500, // 6 calls per second
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
            'api': {
                'public': 'https://poloniex.com/public',
                'private': 'https://poloniex.com/tradingApi'
            },
            'www': 'https://poloniex.com',
            'doc': ['https://poloniex.com/support/api/', 'http://pastebin.com/dMX7mZE0']
        },
        'api': {
            'public': {
                'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']
            },
            'private': {
                'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split9,
                _id$split10,
                quote,
                base,
                symbol,
                _this579 = this;

            return Promise.resolve().then(function () {
                return _this579.publicGetReturnTicker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split9 = id.split('_');
                    _id$split10 = _slicedToArray(_id$split9, 2);
                    quote = _id$split10[0];
                    base = _id$split10[1];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this580 = this,
                _arguments559 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments559.length > 0 && _arguments559[0] !== undefined ? _arguments559[0] : {};
                return _this580.loadMarkets();
            }).then(function () {
                return _this580.privatePostReturnCompleteBalances({
                    'account': 'all'
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances[currency];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['onOrders']),
                        'total': 0.0
                    };

                    account['total'] = _this580.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this581 = this,
                _arguments560 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments560.length > 1 && _arguments560[1] !== undefined ? _arguments560[1] : {};
                return _this581.loadMarkets();
            }).then(function () {
                return _this581.publicGetReturnOrderBook(_this581.extend({
                    'currencyPair': _this581.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this581.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this582 = this;

            return Promise.resolve().then(function () {
                return _this582.loadMarkets();
            }).then(function () {
                return _this582.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this582.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this582.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                _this583 = this;

            return Promise.resolve().then(function () {
                return _this583.loadMarkets();
            }).then(function () {
                market = _this583.market(symbol);
                return _this583.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];

                return _this583.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['date']);
            var id = undefined;
            var order = undefined;
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else if ('currencyPair' in trade) {
                var marketId = trade['currencyPair'];
                symbol = this.markets_by_id[marketId]['symbol'];
            }
            if ('tradeID' in trade) id = trade['tradeID'];
            if ('orderNumber' in trade) order = trade['orderNumber'];
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'id': id,
                'order': order,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['rate']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                trades,
                _this584 = this,
                _arguments563 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments563.length > 1 && _arguments563[1] !== undefined ? _arguments563[1] : {};
                return _this584.loadMarkets();
            }).then(function () {
                market = _this584.market(symbol);
                return _this584.publicGetReturnTradeHistory(_this584.extend({
                    'currencyPair': market['id'],
                    'end': _this584.seconds() // last 50000 trades by default
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this584.parseTrades(trades, market);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var symbol,
                params,
                market,
                pair,
                request,
                response,
                result,
                ids,
                i,
                id,
                _market2,
                _symbol3,
                _this585 = this,
                _arguments564 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments564.length > 0 && _arguments564[0] !== undefined ? _arguments564[0] : undefined;
                params = _arguments564.length > 1 && _arguments564[1] !== undefined ? _arguments564[1] : {};
                return _this585.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this585.market(symbol);
                }pair = market ? market['id'] : 'all';
                request = _this585.extend({
                    'currencyPair': pair,
                    'end': _this585.seconds() // last 50000 trades by default
                }, params);
                return _this585.privatePostReturnTradeHistory(request);
            }).then(function (_resp) {
                response = _resp;
                result = undefined;

                if (market) {
                    result = _this585.parseTrades(response, market);
                } else {
                    result = { 'info': response };
                    ids = Object.keys(response);

                    for (i = 0; i < ids.length; i++) {
                        id = ids[i];
                        _market2 = _this585.markets_by_id[id];
                        _symbol3 = _market2['symbol'];

                        result[_symbol3] = _this585.parseTrades(response[id], _market2);
                    }
                }
                return result;
            });
        },
        parseOrder: function parseOrder(order, market) {
            var trades = undefined;
            if ('resultingTrades' in order) trades = this.parseTrades(order['resultingTrades'], market);
            return {
                'info': order,
                'id': order['orderNumber'],
                'timestamp': order['timestamp'],
                'datetime': this.iso8601(order['timestamp']),
                'status': order['status'],
                'symbol': market['symbol'],
                'type': order['type'],
                'side': order['side'],
                'price': parseFloat(order['price']),
                'amount': parseFloat(order['amount']),
                'trades': trades
            };
        },
        parseOpenOrders: function parseOpenOrders(orders, market) {
            var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

            for (var i = 0; i < orders.length; i++) {
                var order = orders[i];
                var timestamp = this.parse8601(order['date']);
                var extended = this.extend(order, {
                    'timestamp': timestamp,
                    'status': 'open',
                    'type': 'limit',
                    'side': order['type'],
                    'price': order['rate']
                });
                result.push(this.parseOrder(extended, market));
            }
            return result;
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                pair,
                response,
                ids,
                result,
                i,
                id,
                orders,
                _market3,
                _symbol4,
                _this586 = this,
                _arguments565 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments565.length > 0 && _arguments565[0] !== undefined ? _arguments565[0] : undefined;
                params = _arguments565.length > 1 && _arguments565[1] !== undefined ? _arguments565[1] : {};
                return _this586.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this586.market(symbol);
                }pair = market ? market['id'] : 'all';
                return _this586.privatePostReturnOpenOrders(_this586.extend({
                    'currencyPair': pair
                }));
            }).then(function (_resp) {
                response = _resp;

                if (market) {
                    return _this586.parseOpenOrders(response, market);
                } else {
                    ids = Object.keys(response);
                    result = [];

                    for (i = 0; i < ids.length; i++) {
                        id = ids[i];
                        orders = response[id];
                        _market3 = _this586.markets_by_id[id];
                        _symbol4 = _market3['symbol'];

                        _this586.parseOpenOrders(orders, _market3, result);
                    }
                    return result;
                }
            });
        },
        fetchOrderStatus: function fetchOrderStatus(id) {
            var market,
                orders,
                indexed,
                _this587 = this,
                _arguments566 = arguments;

            return Promise.resolve().then(function () {
                market = _arguments566.length > 1 && _arguments566[1] !== undefined ? _arguments566[1] : undefined;
                return _this587.loadMarkets();
            }).then(function () {
                return _this587.fetchOpenOrders(market);
            }).then(function (_resp) {
                orders = _resp;
                indexed = _this587.indexBy(orders, 'id');

                return id in indexed ? 'open' : 'closed';
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                market,
                response,
                timestamp,
                order,
                id,
                _this588 = this,
                _arguments567 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments567.length > 4 && _arguments567[4] !== undefined ? _arguments567[4] : undefined;
                params = _arguments567.length > 5 && _arguments567[5] !== undefined ? _arguments567[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this588.id + ' allows limit orders only');
                }return _this588.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this588.capitalize(side);
                market = _this588.market(symbol);
                return _this588[method](_this588.extend({
                    'currencyPair': market['id'],
                    'rate': price,
                    'amount': amount
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this588.milliseconds();
                order = _this588.parseOrder(_this588.extend({
                    'timestamp': timestamp,
                    'status': 'open',
                    'type': type,
                    'side': side,
                    'price': parseFloat(price),
                    'amount': parseFloat(amount)
                }, response), market);
                id = order['id'];

                _this588.orders[id] = order;
                return _this588.extend({ 'info': response }, order);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var orders,
                index,
                _this589 = this;

            return Promise.resolve().then(function () {
                return _this589.loadMarkets();
            }).then(function () {
                return _this589.fetchOpenOrders();
            }).then(function (_resp) {
                orders = _resp;
                index = _this589.indexBy(orders, 'id');

                if (id in index) {
                    _this589.orders[id] = index[id];
                    return index[id];
                } else {
                    if (id in _this589.orders) {
                        _this589.orders[id]['status'] = 'closed';
                        return _this589.orders[id];
                    } else {
                        throw new ExchangeError(_this589.id + ' order ' + id + ' not found');
                    }
                }
            });
        },
        fetchOrderTrades: function fetchOrderTrades(id) {
            var params,
                trades,
                _this590 = this,
                _arguments569 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments569.length > 1 && _arguments569[1] !== undefined ? _arguments569[1] : {};
                return _this590.loadMarkets();
            }).then(function () {
                return _this590.privatePostReturnOrderTrades(_this590.extend({
                    'orderNumber': id
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this590.parseTrades(trades);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this591 = this,
                _arguments570 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments570.length > 1 && _arguments570[1] !== undefined ? _arguments570[1] : {};
                return _this591.loadMarkets();
            }).then(function () {
                return _this591.privatePostCancelOrder(_this591.extend({
                    'orderNumber': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                result,
                _this592 = this,
                _arguments571 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments571.length > 3 && _arguments571[3] !== undefined ? _arguments571[3] : {};
                return _this592.loadMarkets();
            }).then(function () {
                return _this592.privatePostWithdraw(_this592.extend({
                    'currency': currency,
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['response']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                error,
                failed,
                _this593 = this,
                _arguments572 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments572.length > 1 && _arguments572[1] !== undefined ? _arguments572[1] : 'public';
                method = _arguments572.length > 2 && _arguments572[2] !== undefined ? _arguments572[2] : 'GET';
                params = _arguments572.length > 3 && _arguments572[3] !== undefined ? _arguments572[3] : {};
                headers = _arguments572.length > 4 && _arguments572[4] !== undefined ? _arguments572[4] : undefined;
                body = _arguments572.length > 5 && _arguments572[5] !== undefined ? _arguments572[5] : undefined;
                url = _this593.urls['api'][api];
                query = _this593.extend({ 'command': path }, params);

                if (api == 'public') {
                    url += '?' + _this593.urlencode(query);
                } else {
                    query['nonce'] = _this593.nonce();
                    body = _this593.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this593.apiKey,
                        'Sign': _this593.hmac(_this593.encode(body), _this593.encode(_this593.secret), 'sha512')
                    };
                }
                return _this593.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    error = _this593.id + ' ' + _this593.json(response);
                    failed = response['error'].indexOf('Not enough') >= 0;

                    if (failed) {
                        throw new InsufficientFunds(error);
                    }throw new ExchangeError(error);
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quadrigacx = {

        'id': 'quadrigacx',
        'name': 'QuadrigaCX',
        'countries': 'CA',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',
            'api': 'https://api.quadrigacx.com',
            'www': 'https://www.quadrigacx.com',
            'doc': 'https://www.quadrigacx.com/api_info'
        },
        'api': {
            'public': {
                'get': ['order_book', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balance', 'bitcoin_deposit_address', 'bitcoin_withdrawal', 'buy', 'cancel_order', 'ether_deposit_address', 'ether_withdrawal', 'lookup_order', 'open_orders', 'sell', 'user_transactions']
            }
        },
        'markets': {
            'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this594 = this,
                _arguments573 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments573.length > 0 && _arguments573[0] !== undefined ? _arguments573[0] : {};
                return _this594.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this594.currencies.length; c++) {
                    currency = _this594.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': parseFloat(balances[lowercase + '_available']),
                        'used': parseFloat(balances[lowercase + '_reserved']),
                        'total': parseFloat(balances[lowercase + '_balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this595 = this,
                _arguments574 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments574.length > 1 && _arguments574[1] !== undefined ? _arguments574[1] : {};
                return _this595.publicGetOrderBook(_this595.extend({
                    'book': _this595.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;

                return _this595.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this596 = this;

            return Promise.resolve().then(function () {
                return _this596.publicGetTicker({
                    'book': _this596.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this596.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this597 = this,
                _arguments576 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments576.length > 1 && _arguments576[1] !== undefined ? _arguments576[1] : {};
                market = _this597.market(symbol);
                return _this597.publicGetTransactions(_this597.extend({
                    'book': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this597.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this598 = this,
                _arguments577 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments577.length > 4 && _arguments577[4] !== undefined ? _arguments577[4] : undefined;
                params = _arguments577.length > 5 && _arguments577[5] !== undefined ? _arguments577[5] : {};
                method = 'privatePost' + _this598.capitalize(side);
                order = {
                    'amount': amount,
                    'book': _this598.marketId(symbol)
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this598[method](_this598.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this599 = this,
                _arguments578 = arguments;

            params = _arguments578.length > 1 && _arguments578[1] !== undefined ? _arguments578[1] : {};

            return _this599.privatePostCancelOrder(_this599.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                request,
                signature,
                query,
                response,
                _this600 = this,
                _arguments579 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments579.length > 1 && _arguments579[1] !== undefined ? _arguments579[1] : 'public';
                method = _arguments579.length > 2 && _arguments579[2] !== undefined ? _arguments579[2] : 'GET';
                params = _arguments579.length > 3 && _arguments579[3] !== undefined ? _arguments579[3] : {};
                headers = _arguments579.length > 4 && _arguments579[4] !== undefined ? _arguments579[4] : undefined;
                body = _arguments579.length > 5 && _arguments579[5] !== undefined ? _arguments579[5] : undefined;
                url = _this600.urls['api'] + '/' + _this600.version + '/' + path;

                if (api == 'public') {
                    url += '?' + _this600.urlencode(params);
                } else {
                    if (!_this600.uid) {
                        throw new AuthenticationError(_this600.id + ' requires `' + _this600.id + '.uid` property for authentication');
                    }nonce = _this600.nonce();
                    request = [nonce.toString(), _this600.uid, _this600.apiKey].join('');
                    signature = _this600.hmac(_this600.encode(request), _this600.encode(_this600.secret));
                    query = _this600.extend({
                        'key': _this600.apiKey,
                        'nonce': nonce,
                        'signature': signature
                    }, params);

                    body = _this600.json(query);
                    headers = {
                        'Content-Type': 'application/json'
                    };
                }
                return _this600.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this600.id + ' ' + _this600.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quoine = {

        'id': 'quoine',
        'name': 'QUOINE',
        'countries': ['JP', 'SG', 'VN'],
        'version': '2',
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',
            'api': 'https://api.quoine.com',
            'www': 'https://www.quoine.com',
            'doc': 'https://developers.quoine.com'
        },
        'api': {
            'public': {
                'get': ['products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}']
            },
            'private': {
                'get': ['accounts/balance', 'crypto_accounts', 'executions/me', 'fiat_accounts', 'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', 'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}'],
                'post': ['fiat_accounts', 'loan_bids', 'orders'],
                'put': ['loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', 'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this601 = this;

            return Promise.resolve().then(function () {
                return _this601.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quoted_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this602 = this,
                _arguments581 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments581.length > 0 && _arguments581[0] !== undefined ? _arguments581[0] : {};
                return _this602.loadMarkets();
            }).then(function () {
                return _this602.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = parseFloat(balance['balance']);
                    account = {
                        'free': total,
                        'used': 0.0,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this603 = this,
                _arguments582 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments582.length > 1 && _arguments582[1] !== undefined ? _arguments582[1] : {};
                return _this603.loadMarkets();
            }).then(function () {
                return _this603.publicGetProductsIdPriceLevels(_this603.extend({
                    'id': _this603.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this603.parseOrderBook(orderbook, undefined, 'buy_price_levels', 'sell_price_levels');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            var last = undefined;
            if ('last_traded_price' in ticker) {
                if (ticker['last_traded_price']) {
                    var length = ticker['last_traded_price'].length;
                    if (length > 0) last = parseFloat(ticker['last_traded_price']);
                }
            }
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high_market_ask']),
                'low': parseFloat(ticker['low_market_bid']),
                'bid': parseFloat(ticker['market_bid']),
                'ask': parseFloat(ticker['market_ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_24h']),
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this604 = this;

            return Promise.resolve().then(function () {
                return _this604.loadMarkets();
            }).then(function () {
                return _this604.publicGetProducts();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    base = ticker['base_currency'];
                    quote = ticker['quoted_currency'];
                    symbol = base + '/' + quote;
                    market = _this604.markets[symbol];

                    result[symbol] = _this604.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this605 = this;

            return Promise.resolve().then(function () {
                return _this605.loadMarkets();
            }).then(function () {
                market = _this605.market(symbol);
                return _this605.publicGetProductsId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this605.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['created_at'] * 1000;
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['taker_side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['quantity'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this606 = this,
                _arguments585 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments585.length > 1 && _arguments585[1] !== undefined ? _arguments585[1] : {};
                return _this606.loadMarkets();
            }).then(function () {
                market = _this606.market(symbol);
                return _this606.publicGetExecutions(_this606.extend({
                    'product_id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this606.parseTrades(response['models'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this607 = this,
                _arguments586 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments586.length > 4 && _arguments586[4] !== undefined ? _arguments586[4] : undefined;
                params = _arguments586.length > 5 && _arguments586[5] !== undefined ? _arguments586[5] : {};
                return _this607.loadMarkets();
            }).then(function () {
                order = {
                    'order_type': type,
                    'product_id': _this607.marketId(symbol),
                    'side': side,
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this607.privatePostOrders(_this607.extend({
                    'order': order
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this608 = this,
                _arguments587 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments587.length > 1 && _arguments587[1] !== undefined ? _arguments587[1] : {};
                return _this608.loadMarkets();
            }).then(function () {
                return _this608.privatePutOrdersIdCancel(_this608.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                response,
                _this609 = this,
                _arguments588 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments588.length > 1 && _arguments588[1] !== undefined ? _arguments588[1] : 'public';
                method = _arguments588.length > 2 && _arguments588[2] !== undefined ? _arguments588[2] : 'GET';
                params = _arguments588.length > 3 && _arguments588[3] !== undefined ? _arguments588[3] : {};
                headers = _arguments588.length > 4 && _arguments588[4] !== undefined ? _arguments588[4] : undefined;
                body = _arguments588.length > 5 && _arguments588[5] !== undefined ? _arguments588[5] : undefined;
                url = '/' + _this609.implodeParams(path, params);
                query = _this609.omit(params, _this609.extractParams(path));

                headers = {
                    'X-Quoine-API-Version': _this609.version,
                    'Content-Type': 'application/json'
                };
                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this609.urlencode(query);
                    }
                } else {
                    nonce = _this609.nonce();
                    request = {
                        'path': url,
                        'nonce': nonce,
                        'token_id': _this609.apiKey,
                        'iat': Math.floor(nonce / 1000) // issued at
                    };

                    if (Object.keys(query).length) {
                        body = _this609.json(query);
                    }headers['X-Quoine-Auth'] = _this609.jwt(request, _this609.secret);
                }
                return _this609.fetch(_this609.urls['api'] + url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this609.id + ' ' + _this609.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var southxchange = {

        'id': 'southxchange',
        'name': 'SouthXchange',
        'countries': 'AR', // Argentina
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',
            'api': 'https://www.southxchange.com/api',
            'www': 'https://www.southxchange.com',
            'doc': 'https://www.southxchange.com/Home/Api'
        },
        'api': {
            'public': {
                'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']
            },
            'private': {
                'post': ['cancelMarketOrders', 'cancelOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'placeOrder', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                base,
                quote,
                symbol,
                id,
                _this610 = this;

            return Promise.resolve().then(function () {
                return _this610.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    base = market[0];
                    quote = market[1];
                    symbol = base + '/' + quote;
                    id = symbol;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this611 = this,
                _arguments590 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments590.length > 0 && _arguments590[0] !== undefined ? _arguments590[0] : {};
                return _this611.loadMarkets();
            }).then(function () {
                return _this611.privatePostListBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.uppercase;
                    free = parseFloat(balance['Available']);
                    used = parseFloat(balance['Unconfirmed']);
                    total = _this611.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this612 = this,
                _arguments591 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments591.length > 1 && _arguments591[1] !== undefined ? _arguments591[1] : {};
                return _this612.loadMarkets();
            }).then(function () {
                return _this612.publicGetBookSymbol(_this612.extend({
                    'symbol': _this612.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this612.parseOrderBook(orderbook, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': this.safeFloat(ticker, 'Bid'),
                'ask': this.safeFloat(ticker, 'Ask'),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': this.safeFloat(ticker, 'Last'),
                'change': this.safeFloat(ticker, 'Variation24Hr'),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': this.safeFloat(ticker, 'Volume24Hr'),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this613 = this;

            return Promise.resolve().then(function () {
                return _this613.loadMarkets();
            }).then(function () {
                return _this613.publicGetPrices();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this613.indexBy(response, 'Market');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this613.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this613.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this614 = this;

            return Promise.resolve().then(function () {
                return _this614.loadMarkets();
            }).then(function () {
                market = _this614.market(symbol);
                return _this614.publicGetPriceSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this614.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['At'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': undefined,
                'order': undefined,
                'type': undefined,
                'side': trade['Type'],
                'price': trade['Price'],
                'amount': trade['Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this615 = this,
                _arguments594 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments594.length > 1 && _arguments594[1] !== undefined ? _arguments594[1] : {};
                return _this615.loadMarkets();
            }).then(function () {
                market = _this615.market(symbol);
                return _this615.publicGetTradesSymbol(_this615.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this615.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this616 = this,
                _arguments595 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments595.length > 4 && _arguments595[4] !== undefined ? _arguments595[4] : undefined;
                params = _arguments595.length > 5 && _arguments595[5] !== undefined ? _arguments595[5] : {};
                return _this616.loadMarkets();
            }).then(function () {
                market = _this616.market(symbol);
                order = {
                    'listingCurrency': market['base'],
                    'referenceCurrency': market['quote'],
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limitPrice'] = price;
                }return _this616.privatePostPlaceOrder(_this616.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response.toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this617 = this,
                _arguments596 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments596.length > 1 && _arguments596[1] !== undefined ? _arguments596[1] : {};
                return _this617.loadMarkets();
            }).then(function () {
                return _this617.privatePostCancelOrder(_this617.extend({
                    'orderCode': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                response,
                _this618 = this,
                _arguments597 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments597.length > 1 && _arguments597[1] !== undefined ? _arguments597[1] : 'public';
                method = _arguments597.length > 2 && _arguments597[2] !== undefined ? _arguments597[2] : 'GET';
                params = _arguments597.length > 3 && _arguments597[3] !== undefined ? _arguments597[3] : {};
                headers = _arguments597.length > 4 && _arguments597[4] !== undefined ? _arguments597[4] : undefined;
                body = _arguments597.length > 5 && _arguments597[5] !== undefined ? _arguments597[5] : undefined;
                url = _this618.urls['api'] + '/' + _this618.implodeParams(path, params);
                query = _this618.omit(params, _this618.extractParams(path));

                if (api == 'private') {
                    nonce = _this618.nonce();

                    query = _this618.extend({
                        'key': _this618.apiKey,
                        'nonce': nonce
                    }, query);
                    body = _this618.json(query);
                    headers = {
                        'Content-Type': 'application/json',
                        'Hash': _this618.hmac(_this618.encode(body), _this618.encode(_this618.secret), 'sha512')
                    };
                }
                return _this618.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                // if (!response)
                //     throw new ExchangeError (this.id + ' ' + this.json (response));

                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var surbitcoin = extend(blinktrade, {
        'id': 'surbitcoin',
        'name': 'SurBitcoin',
        'countries': 'VE',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://surbitcoin.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' }
        }
    });

    //-----------------------------------------------------------------------------

    var therock = {

        'id': 'therock',
        'name': 'TheRockTrading',
        'countries': 'MT',
        'rateLimit': 1000,
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
            'api': 'https://api.therocktrading.com',
            'www': 'https://therocktrading.com',
            'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']
        },
        'api': {
            'public': {
                'get': ['funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']
            },
            'private': {
                'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],
                'post': ['atms/withdraw', 'funds/{fund_id}/orders'],
                'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this619 = this;

            return Promise.resolve().then(function () {
                return _this619.publicGetFundsTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['fund_id'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                free,
                total,
                used,
                account,
                _this620 = this,
                _arguments599 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments599.length > 0 && _arguments599[0] !== undefined ? _arguments599[0] : {};
                return _this620.loadMarkets();
            }).then(function () {
                return _this620.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    free = balance['trading_balance'];
                    total = balance['balance'];
                    used = total - free;
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this621 = this,
                _arguments600 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments600.length > 1 && _arguments600[1] !== undefined ? _arguments600[1] : {};
                return _this621.loadMarkets();
            }).then(function () {
                return _this621.publicGetFundsIdOrderbook(_this621.extend({
                    'id': _this621.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this621.parse8601(orderbook['date']);

                return _this621.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['date']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': parseFloat(ticker['close']),
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_traded']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this622 = this;

            return Promise.resolve().then(function () {
                return _this622.loadMarkets();
            }).then(function () {
                return _this622.publicGetFundsTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this622.indexBy(response['tickers'], 'fund_id');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this622.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this622.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this623 = this;

            return Promise.resolve().then(function () {
                return _this623.loadMarkets();
            }).then(function () {
                market = _this623.market(symbol);
                return _this623.publicGetFundsIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this623.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (!market) market = this.markets_by_id[trade['fund_id']];
            var timestamp = this.parse8601(trade['date']);
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this624 = this,
                _arguments603 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments603.length > 1 && _arguments603[1] !== undefined ? _arguments603[1] : {};
                return _this624.loadMarkets();
            }).then(function () {
                market = _this624.market(symbol);
                return _this624.publicGetFundsIdTrades(_this624.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this624.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this625 = this,
                _arguments604 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments604.length > 4 && _arguments604[4] !== undefined ? _arguments604[4] : undefined;
                params = _arguments604.length > 5 && _arguments604[5] !== undefined ? _arguments604[5] : {};
                return _this625.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this625.id + ' allows limit orders only');
                }return _this625.privatePostFundsFundIdOrders(_this625.extend({
                    'fund_id': _this625.marketId(symbol),
                    'side': side,
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this626 = this,
                _arguments605 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments605.length > 1 && _arguments605[1] !== undefined ? _arguments605[1] : {};
                return _this626.loadMarkets();
            }).then(function () {
                return _this626.privateDeleteFundsFundIdOrdersId(_this626.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this627 = this,
                _arguments606 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments606.length > 1 && _arguments606[1] !== undefined ? _arguments606[1] : 'public';
                method = _arguments606.length > 2 && _arguments606[2] !== undefined ? _arguments606[2] : 'GET';
                params = _arguments606.length > 3 && _arguments606[3] !== undefined ? _arguments606[3] : {};
                headers = _arguments606.length > 4 && _arguments606[4] !== undefined ? _arguments606[4] : undefined;
                body = _arguments606.length > 5 && _arguments606[5] !== undefined ? _arguments606[5] : undefined;
                url = _this627.urls['api'] + '/' + _this627.version + '/' + _this627.implodeParams(path, params);
                query = _this627.omit(params, _this627.extractParams(path));

                if (api == 'private') {
                    nonce = _this627.nonce().toString();
                    auth = nonce + url;

                    headers = {
                        'X-TRT-KEY': _this627.apiKey,
                        'X-TRT-NONCE': nonce,
                        'X-TRT-SIGN': _this627.hmac(_this627.encode(auth), _this627.encode(_this627.secret), 'sha512')
                    };
                    if (Object.keys(query).length) {
                        body = _this627.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this627.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this627.id + ' ' + _this627.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var urdubit = extend(blinktrade, {
        'id': 'urdubit',
        'name': 'UrduBit',
        'countries': 'PK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://urdubit.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var vaultoro = {

        'id': 'vaultoro',
        'name': 'Vaultoro',
        'countries': 'CH',
        'rateLimit': 1000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',
            'api': 'https://api.vaultoro.com',
            'www': 'https://www.vaultoro.com',
            'doc': 'https://api.vaultoro.com'
        },
        'api': {
            'public': {
                'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']
            },
            'private': {
                'get': ['balance', 'mytrades', 'orders'],
                'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var result,
                markets,
                market,
                base,
                quote,
                symbol,
                baseId,
                quoteId,
                id,
                _this628 = this;

            return Promise.resolve().then(function () {
                result = [];
                return _this628.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                market = markets['data'];
                base = market['BaseCurrency'];
                quote = market['MarketCurrency'];
                symbol = base + '/' + quote;
                baseId = base;
                quoteId = quote;
                id = market['MarketName'];

                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'info': market
                });
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this629 = this,
                _arguments608 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments608.length > 0 && _arguments608[0] !== undefined ? _arguments608[0] : {};
                return _this629.loadMarkets();
            }).then(function () {
                return _this629.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    uppercase = currency.toUpperCase();
                    free = balance['cash'];
                    used = balance['reserved'];
                    total = _this629.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                result,
                _this630 = this,
                _arguments609 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments609.length > 1 && _arguments609[1] !== undefined ? _arguments609[1] : {};
                return _this630.loadMarkets();
            }).then(function () {
                return _this630.publicGetOrderbook(params);
            }).then(function (_resp) {
                response = _resp;
                orderbook = {
                    'bids': response['data'][0]['b'],
                    'asks': response['data'][1]['s']
                };
                result = _this630.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');

                result['bids'] = _this630.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var quote,
                bidsLength,
                bid,
                ask,
                response,
                ticker,
                timestamp,
                _this631 = this;

            return Promise.resolve().then(function () {
                return _this631.loadMarkets();
            }).then(function () {
                return _this631.publicGetBidandask();
            }).then(function (_resp) {
                quote = _resp;
                bidsLength = quote['bids'].length;
                bid = quote['bids'][bidsLength - 1];
                ask = quote['asks'][0];
                return _this631.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = _this631.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this631.iso8601(timestamp),
                    'high': parseFloat(ticker['24hHigh']),
                    'low': parseFloat(ticker['24hLow']),
                    'bid': bid[0],
                    'ask': ask[0],
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['LastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['24hVolume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['Time']);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': trade['Gold_Price'],
                'amount': trade['Gold_Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this632 = this,
                _arguments611 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments611.length > 1 && _arguments611[1] !== undefined ? _arguments611[1] : {};
                return _this632.loadMarkets();
            }).then(function () {
                market = _this632.market(symbol);
                return _this632.publicGetTransactionsDay(params);
            }).then(function (_resp) {
                response = _resp;

                return _this632.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                response,
                _this633 = this,
                _arguments612 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments612.length > 4 && _arguments612[4] !== undefined ? _arguments612[4] : undefined;
                params = _arguments612.length > 5 && _arguments612[5] !== undefined ? _arguments612[5] : {};
                return _this633.loadMarkets();
            }).then(function () {
                market = _this633.market(symbol);
                method = 'privatePost' + _this633.capitalize(side) + 'SymbolType';
                return _this633[method](_this633.extend({
                    'symbol': market['quoteId'].toLowerCase(),
                    'type': type,
                    'gld': amount,
                    'price': price || 1
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data']['Order_ID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this634 = this,
                _arguments613 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments613.length > 1 && _arguments613[1] !== undefined ? _arguments613[1] : {};
                return _this634.loadMarkets();
            }).then(function () {
                return _this634.privatePostCancelId(_this634.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/';
            if (api == 'public') {
                url += path;
            } else {
                var nonce = this.nonce();
                url += this.version + '/' + this.implodeParams(path, params);
                var query = this.extend({
                    'nonce': nonce,
                    'apikey': this.apiKey
                }, this.omit(params, this.extractParams(path)));
                url += '?' + this.urlencode(query);
                headers = {
                    'Content-Type': 'application/json',
                    'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var vbtc = extend(blinktrade, {
        'id': 'vbtc',
        'name': 'VBTC',
        'countries': 'VN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://vbtc.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' }
        }
    });

    //-----------------------------------------------------------------------------

    var virwox = {

        'id': 'virwox',
        'name': 'VirWoX',
        'countries': ['AT', 'EU'],
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',
            'api': {
                'public': 'http://api.virwox.com/api/json.php',
                'private': 'https://www.virwox.com/api/trading.php'
            },
            'www': 'https://www.virwox.com',
            'doc': 'https://www.virwox.com/developers.php'
        },
        'api': {
            'public': {
                'get': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics'],
                'post': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics']
            },
            'private': {
                'get': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder'],
                'post': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                _this635 = this;

            return Promise.resolve().then(function () {
                return _this635.publicGetInstruments();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets['result'][keys[p]];
                    id = market['instrumentID'];
                    symbol = market['symbol'];
                    base = market['longCurrency'];
                    quote = market['shortCurrency'];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this636 = this,
                _arguments615 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments615.length > 0 && _arguments615[0] !== undefined ? _arguments615[0] : {};
                return _this636.loadMarkets();
            }).then(function () {
                return _this636.privatePostGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result']['accountList'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = balance['balance'];
                    account = {
                        'free': total,
                        'used': 0.0,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchBestPrices: function fetchBestPrices(symbol) {
            var _this637 = this;

            return Promise.resolve().then(function () {
                return _this637.loadMarkets();
            }).then(function () {
                return _this637.publicPostGetBestPrices({
                    'symbols': [symbol]
                });
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this638 = this,
                _arguments617 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments617.length > 1 && _arguments617[1] !== undefined ? _arguments617[1] : {};
                return _this638.loadMarkets();
            }).then(function () {
                return _this638.publicPostGetMarketDepth(_this638.extend({
                    'symbols': [symbol],
                    'buyDepth': 100,
                    'sellDepth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][0];

                return _this638.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'price', 'volume');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var end,
                start,
                response,
                tickers,
                keys,
                length,
                lastKey,
                ticker,
                timestamp,
                _this639 = this;

            return Promise.resolve().then(function () {
                return _this639.loadMarkets();
            }).then(function () {
                end = _this639.milliseconds();
                start = end - 86400000;
                return _this639.publicGetTradedPriceVolume({
                    'instrument': symbol,
                    'endDate': _this639.YmdHMS(end),
                    'startDate': _this639.YmdHMS(start),
                    'HLOC': 1
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result']['priceVolumeList'];
                keys = Object.keys(tickers);
                length = keys.length;
                lastKey = keys[length - 1];
                ticker = tickers[lastKey];
                timestamp = _this639.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this639.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['longVolume']),
                    'quoteVolume': parseFloat(ticker['shortVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this640 = this,
                _arguments619 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments619.length > 1 && _arguments619[1] !== undefined ? _arguments619[1] : {};
                return _this640.loadMarkets();
            }).then(function () {
                return _this640.publicGetRawTradeData(_this640.extend({
                    'instrument': market,
                    'timespan': 3600
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this641 = this,
                _arguments620 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments620.length > 4 && _arguments620[4] !== undefined ? _arguments620[4] : undefined;
                params = _arguments620.length > 5 && _arguments620[5] !== undefined ? _arguments620[5] : {};
                return _this641.loadMarkets();
            }).then(function () {
                order = {
                    'instrument': _this641.symbol(market),
                    'orderType': side.toUpperCase(),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this641.privatePostPlaceOrder(_this641.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this642 = this,
                _arguments621 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments621.length > 1 && _arguments621[1] !== undefined ? _arguments621[1] : {};
                return _this642.loadMarkets();
            }).then(function () {
                return _this642.privatePostCancelOrder(_this642.extend({
                    'orderID': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                auth,
                nonce,
                response,
                _this643 = this,
                _arguments622 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments622.length > 1 && _arguments622[1] !== undefined ? _arguments622[1] : 'public';
                method = _arguments622.length > 2 && _arguments622[2] !== undefined ? _arguments622[2] : 'GET';
                params = _arguments622.length > 3 && _arguments622[3] !== undefined ? _arguments622[3] : {};
                headers = _arguments622.length > 4 && _arguments622[4] !== undefined ? _arguments622[4] : undefined;
                body = _arguments622.length > 5 && _arguments622[5] !== undefined ? _arguments622[5] : undefined;
                url = _this643.urls['api'][api];
                auth = {};

                if (api == 'private') {
                    auth['key'] = _this643.apiKey;
                    auth['user'] = _this643.login;
                    auth['pass'] = _this643.password;
                }
                nonce = _this643.nonce();

                if (method == 'GET') {
                    url += '?' + _this643.urlencode(_this643.extend({
                        'method': path,
                        'id': nonce
                    }, auth, params));
                } else {
                    headers = { 'Content-Type': 'application/json' };
                    body = _this643.json({
                        'method': path,
                        'params': _this643.extend(auth, params),
                        'id': nonce
                    });
                }
                return _this643.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this643.id + ' ' + _this643.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var xbtce = {

        'id': 'xbtce',
        'name': 'xBTCe',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': 'v1',
        'hasPublicAPI': false,
        'hasFetchTickers': true,
        'hasFetchOHLCV': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',
            'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',
            'www': 'https://www.xbtce.com',
            'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']
        },
        'api': {
            'public': {
                'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']
            },
            'private': {
                'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],
                'post': ['trade', 'tradehistory'],
                'put': ['trade'],
                'delete': ['trade']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this644 = this;

            return Promise.resolve().then(function () {
                return _this644.privateGetSymbol();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['Symbol'];
                    base = market['MarginCurrency'];
                    quote = market['ProfitCurrency'];

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    symbol = market['IsTradeAllowed'] ? symbol : id;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                total,
                account,
                _this645 = this,
                _arguments624 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments624.length > 0 && _arguments624[0] !== undefined ? _arguments624[0] : {};
                return _this645.loadMarkets();
            }).then(function () {
                return _this645.privateGetAsset();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.toUpperCase();
                    // xbtce names DASH incorrectly as DSH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }total = balance['balance'];
                    account = {
                        'free': balance['FreeAmount'],
                        'used': balance['LockedAmount'],
                        'total': balance['Amount']
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                _this646 = this,
                _arguments625 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments625.length > 1 && _arguments625[1] !== undefined ? _arguments625[1] : {};
                return _this646.loadMarkets();
            }).then(function () {
                market = _this646.market(symbol);
                return _this646.privateGetLevel2Filter(_this646.extend({
                    'filter': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                orderbook = orderbook[0];
                timestamp = orderbook['Timestamp'];

                return _this646.parseOrderBook(orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = 0;
            var last = undefined;
            if ('LastBuyTimestamp' in ticker) if (timestamp < ticker['LastBuyTimestamp']) {
                timestamp = ticker['LastBuyTimestamp'];
                last = ticker['LastBuyPrice'];
            }
            if ('LastSellTimestamp' in ticker) if (timestamp < ticker['LastSellTimestamp']) {
                timestamp = ticker['LastSellTimestamp'];
                last = ticker['LastSellPrice'];
            }
            if (!timestamp) timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['DailyBestBuyPrice'],
                'low': ticker['DailyBestSellPrice'],
                'bid': ticker['BestBid'],
                'ask': ticker['BestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': ticker['DailyTradedTotalVolume'],
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                ticker,
                _this647 = this;

            return Promise.resolve().then(function () {
                return _this647.loadMarkets();
            }).then(function () {
                return _this647.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;

                tickers = _this647.indexBy(tickers, 'Symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = undefined;

                    if (id in _this647.markets_by_id) {
                        market = _this647.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        if (base == 'DSH') {
                            base = 'DASH';
                        }if (quote == 'DSH') {
                            quote = 'DASH';
                        }symbol = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this647.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                length,
                ticker,
                _this648 = this;

            return Promise.resolve().then(function () {
                return _this648.loadMarkets();
            }).then(function () {
                market = _this648.market(symbol);
                return _this648.publicGetTickerFilter({
                    'filter': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                length = tickers.length;

                if (length < 1) {
                    throw new ExchangeError(_this648.id + ' fetchTicker returned empty response, xBTCe public API error');
                }tickers = _this648.indexBy(tickers, 'Symbol');
                ticker = tickers[market['id']];

                return _this648.parseTicker(ticker, market);
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                _this649 = this,
                _arguments628 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments628.length > 1 && _arguments628[1] !== undefined ? _arguments628[1] : {};
                return _this649.loadMarkets();
            }).then(function () {
                // no method for trades?
                return _this649.privateGetTrade(params);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv['Timestamp'], ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                minutes,
                periodicity,
                market,
                response,
                _this650 = this,
                _arguments629 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments629.length > 1 && _arguments629[1] !== undefined ? _arguments629[1] : '1m';
                since = _arguments629.length > 2 && _arguments629[2] !== undefined ? _arguments629[2] : undefined;
                limit = _arguments629.length > 3 && _arguments629[3] !== undefined ? _arguments629[3] : undefined;
                params = _arguments629.length > 4 && _arguments629[4] !== undefined ? _arguments629[4] : {};

                throw new NotSupported(_this650.id + ' fetchOHLCV is disabled by the exchange');
                minutes = parseInt(timeframe / 60); // 1 minute by default

                periodicity = minutes.toString();
                return _this650.loadMarkets();
            }).then(function () {
                market = _this650.market(symbol);

                if (!since) {
                    since = _this650.seconds() - 86400 * 7;
                } // last day by defulat
                if (!limit) {
                    limit = 1000;
                } // default
                return _this650.privateGetQuotehistorySymbolPeriodicityBarsBid(_this650.extend({
                    'symbol': market['id'],
                    'periodicity': '5m', // periodicity,
                    'timestamp': since,
                    'count': limit
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this650.parseOHLCVs(response['Bars'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this651 = this,
                _arguments630 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments630.length > 4 && _arguments630[4] !== undefined ? _arguments630[4] : undefined;
                params = _arguments630.length > 5 && _arguments630[5] !== undefined ? _arguments630[5] : {};
                return _this651.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this651.id + ' allows limit orders only');
                }return _this651.tapiPostTrade(_this651.extend({
                    'pair': _this651.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this652 = this,
                _arguments631 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments631.length > 1 && _arguments631[1] !== undefined ? _arguments631[1] : {};
                return _this652.loadMarkets();
            }).then(function () {
                return _this652.privateDeleteTrade(_this652.extend({
                    'Type': 'Cancel',
                    'Id': id
                }, params));
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');
            if (!this.uid) throw new AuthenticationError(this.id + ' requires uid property for authentication and trading');
            var url = this.urls['api'] + '/' + this.version;
            if (api == 'public') url += '/' + api;
            url += '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                headers = { 'Accept-Encoding': 'gzip, deflate' };
                var nonce = this.nonce().toString();
                if (method == 'POST') {
                    if (Object.keys(query).length) {
                        headers['Content-Type'] = 'application/json';
                        body = this.json(query);
                    } else url += '?' + this.urlencode(query);
                }
                var auth = nonce + this.uid + this.apiKey + method + url;
                if (body) auth += body;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
                var credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + this.binaryToString(signature);
                headers['Authorization'] = 'HMAC ' + credentials;
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var yobit = {

        'id': 'yobit',
        'name': 'YoBit',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
            'api': 'https://yobit.net',
            'www': 'https://www.yobit.net',
            'doc': 'https://www.yobit.net/en/api/'
        },
        'api': {
            'api': {
                'get': ['depth/{pairs}', 'info', 'ticker/{pairs}', 'trades/{pairs}']
            },
            'tapi': {
                'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split15,
                _symbol$split16,
                base,
                quote,
                _this653 = this;

            return Promise.resolve().then(function () {
                return _this653.apiGetInfo();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['pairs'][id];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split15 = symbol.split('/');
                    _symbol$split16 = _slicedToArray(_symbol$split15, 2);
                    base = _symbol$split16[0];
                    quote = _symbol$split16[1];

                    base = _this653.commonCurrencyCode(base);
                    quote = _this653.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this654 = this,
                _arguments633 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments633.length > 0 && _arguments633[0] !== undefined ? _arguments633[0] : {};
                return _this654.loadMarkets();
            }).then(function () {
                return _this654.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this654.currencies.length; c++) {
                    currency = _this654.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this654.account();

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                timestamp,
                bids,
                asks,
                _this655 = this,
                _arguments634 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments634.length > 1 && _arguments634[1] !== undefined ? _arguments634[1] : {};
                return _this655.loadMarkets();
            }).then(function () {
                market = _this655.market(symbol);
                return _this655.apiGetDepthPairs(_this655.extend({
                    'pairs': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];
                timestamp = _this655.milliseconds();
                bids = 'bids' in orderbook ? orderbook['bids'] : [];
                asks = 'asks' in orderbook ? orderbook['asks'] : [];

                return {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this655.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                timestamp,
                _this656 = this;

            return Promise.resolve().then(function () {
                return _this656.loadMarkets();
            }).then(function () {
                market = _this656.market(symbol);
                return _this656.apiGetTickerPairs({
                    'pairs': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this656.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol_cur']),
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this657 = this,
                _arguments636 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments636.length > 1 && _arguments636[1] !== undefined ? _arguments636[1] : {};
                return _this657.loadMarkets();
            }).then(function () {
                market = _this657.market(symbol);
                return _this657.apiGetTradesPairs(_this657.extend({
                    'pairs': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this657.parseTrades(response[market['id']], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                rate,
                response,
                _this658 = this,
                _arguments637 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments637.length > 4 && _arguments637[4] !== undefined ? _arguments637[4] : undefined;
                params = _arguments637.length > 5 && _arguments637[5] !== undefined ? _arguments637[5] : {};
                return _this658.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this658.id + ' allows limit orders only');
                }rate = price.toString();
                return _this658.tapiPostTrade(_this658.extend({
                    'pair': _this658.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price.toFixed(8)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this659 = this,
                _arguments638 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments638.length > 1 && _arguments638[1] !== undefined ? _arguments638[1] : {};
                return _this659.loadMarkets();
            }).then(function () {
                return _this659.tapiPostCancelOrder(_this659.extend({
                    'order_id': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                result,
                _this660 = this,
                _arguments639 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments639.length > 3 && _arguments639[3] !== undefined ? _arguments639[3] : {};
                return _this660.loadMarkets();
            }).then(function () {
                return _this660.tapiPostWithdrawCoinsToAddress(_this660.extend({
                    'coinName': currency,
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': undefined
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _query3,
                response,
                _this661 = this,
                _arguments640 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments640.length > 1 && _arguments640[1] !== undefined ? _arguments640[1] : 'api';
                method = _arguments640.length > 2 && _arguments640[2] !== undefined ? _arguments640[2] : 'GET';
                params = _arguments640.length > 3 && _arguments640[3] !== undefined ? _arguments640[3] : {};
                headers = _arguments640.length > 4 && _arguments640[4] !== undefined ? _arguments640[4] : undefined;
                body = _arguments640.length > 5 && _arguments640[5] !== undefined ? _arguments640[5] : undefined;
                url = _this661.urls['api'] + '/' + api;

                if (api == 'api') {
                    url += '/' + _this661.version + '/' + _this661.implodeParams(path, params);
                    query = _this661.omit(params, _this661.extractParams(path));

                    if (Object.keys(query).length) {
                        url += '?' + _this661.urlencode(query);
                    }
                } else {
                    nonce = _this661.nonce();
                    _query3 = _this661.extend({ 'method': path, 'nonce': nonce }, params);

                    body = _this661.urlencode(_query3);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this661.apiKey,
                        'sign': _this661.hmac(_this661.encode(body), _this661.encode(_this661.secret), 'sha512')
                    };
                }
                return _this661.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this661.id + ' ' + _this661.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var yunbi = extend(acx, {

        'id': 'yunbi',
        'name': 'YUNBI',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v2',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '12h': '720',
            '1d': '1440',
            '3d': '4320',
            '1w': '10080'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',
            'api': 'https://yunbi.com',
            'www': 'https://yunbi.com',
            'doc': ['https://yunbi.com/documents/api/guide', 'https://yunbi.com/swagger/']
        },
        'api': {
            'public': {
                'get': ['tickers', 'tickers/{market}', 'markets', 'order_book', 'k', 'depth', 'trades', 'k_with_pending_trades', 'timestamp', 'addresses/{address}', 'partners/orders/{id}/trades']
            },
            'private': {
                'get': ['deposits', 'members/me', 'deposit', 'deposit_address', 'order', 'orders', 'trades/my'],
                'post': ['order/delete', 'orders', 'orders/multi', 'orders/clear']
            }
        }
    });

    //-----------------------------------------------------------------------------

    var zaif = {

        'id': 'zaif',
        'name': 'Zaif',
        'countries': 'JP',
        'rateLimit': 2000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
            'api': 'https://api.zaif.jp',
            'www': 'https://zaif.jp',
            'doc': ['http://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif']
        },
        'api': {
            'public': {
                'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']
            },
            'ecapi': {
                'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split17,
                _symbol$split18,
                base,
                quote,
                _this662 = this;

            return Promise.resolve().then(function () {
                return _this662.publicGetCurrencyPairsAll();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currency_pair'];
                    symbol = market['name'];
                    _symbol$split17 = symbol.split('/');
                    _symbol$split18 = _slicedToArray(_symbol$split17, 2);
                    base = _symbol$split18[0];
                    quote = _symbol$split18[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                uppercase,
                account,
                _this663 = this,
                _arguments642 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments642.length > 0 && _arguments642[0] !== undefined ? _arguments642[0] : {};
                return _this663.loadMarkets();
            }).then(function () {
                return _this663.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['funds']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances['funds'][currency];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    if ('deposit' in balances) {
                        if (currency in balances['deposit']) {
                            account['total'] = balances['deposit'][currency];
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this664 = this,
                _arguments643 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments643.length > 1 && _arguments643[1] !== undefined ? _arguments643[1] : {};
                return _this664.loadMarkets();
            }).then(function () {
                return _this664.publicGetDepthPair(_this664.extend({
                    'pair': _this664.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this664.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this665 = this;

            return Promise.resolve().then(function () {
                return _this665.loadMarkets();
            }).then(function () {
                return _this665.publicGetTickerPair({
                    'pair': _this665.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this665.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this665.iso8601(timestamp),
                    'high': ticker['high'],
                    'low': ticker['low'],
                    'bid': ticker['bid'],
                    'ask': ticker['ask'],
                    'vwap': ticker['vwap'],
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'],
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': ticker['volume'],
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
            var timestamp = trade['date'] * 1000;
            var id = undefined;
            if ('id' in trade) {
                id = trade['id'];
            } else if ('tid' in trade) {
                id = trade['tid'];
            }
            if (!market) market = this.markets_by_id[trade['currency_pair']];
            return {
                'id': id.toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this666 = this,
                _arguments645 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments645.length > 1 && _arguments645[1] !== undefined ? _arguments645[1] : {};
                return _this666.loadMarkets();
            }).then(function () {
                market = _this666.market(symbol);
                return _this666.publicGetTradesPair(_this666.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this666.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this667 = this,
                _arguments646 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments646.length > 4 && _arguments646[4] !== undefined ? _arguments646[4] : undefined;
                params = _arguments646.length > 5 && _arguments646[5] !== undefined ? _arguments646[5] : {};
                return _this667.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this667.id + ' allows limit orders only');
                }return _this667.privatePostTrade(_this667.extend({
                    'currency_pair': _this667.marketId(symbol),
                    'action': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this668 = this,
                _arguments647 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments647.length > 1 && _arguments647[1] !== undefined ? _arguments647[1] : {};
                return _this668.loadMarkets();
            }).then(function () {
                return _this668.privatePostCancelOrder(_this668.extend({
                    'order_id': id
                }, params));
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = order['action'] == 'bid' ? 'buy' : 'sell';
            var timestamp = parseInt(order['timestamp']) * 1000;
            if (!market) market = this.markets_by_id[order['currency_pair']];
            return {
                'id': order['id'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'status': 'open',
                'symbol': market['symbol'],
                'type': 'limit',
                'side': side,
                'price': order['price'],
                'amount': order['amount'],
                'trades': undefined
            };
        },
        parseOrders: function parseOrders(orders) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var ids = Object.keys(orders);
            var result = [];
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var order = orders[id];
                var extended = this.extend(order, { 'id': id });
                result.push(this.parseOrder(extended, market));
            }
            return result;
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                request,
                response,
                _this669 = this,
                _arguments648 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments648.length > 0 && _arguments648[0] !== undefined ? _arguments648[0] : undefined;
                params = _arguments648.length > 1 && _arguments648[1] !== undefined ? _arguments648[1] : {};
                return _this669.loadMarkets();
            }).then(function () {
                market = undefined;
                // let request = {
                //     'is_token': false,
                //     'is_token_both': false,
                // };

                request = {};

                if (symbol) {
                    market = _this669.market(symbol);
                    request['currency_pair'] = market['id'];
                }
                return _this669.privatePostActiveOrders(_this669.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this669.parseOrders(response['return'], market);
            });
        },
        fetchClosedOrders: function fetchClosedOrders() {
            var symbol,
                params,
                market,
                request,
                response,
                _this670 = this,
                _arguments649 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments649.length > 0 && _arguments649[0] !== undefined ? _arguments649[0] : undefined;
                params = _arguments649.length > 1 && _arguments649[1] !== undefined ? _arguments649[1] : {};
                return _this670.loadMarkets();
            }).then(function () {
                market = undefined;
                // let request = {
                //     'from': 0,
                //     'count': 1000,
                //     'from_id': 0,
                //     'end_id': 1000,
                //     'order': 'DESC',
                //     'since': 1503821051,
                //     'end': 1503821051,
                //     'is_token': false,
                // };

                request = {};

                if (symbol) {
                    market = _this670.market(symbol);
                    request['currency_pair'] = market['id'];
                }
                return _this670.privatePostTradeHistory(_this670.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this670.parseOrders(response['return'], market);
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                result,
                _this671 = this,
                _arguments650 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments650.length > 3 && _arguments650[3] !== undefined ? _arguments650[3] : {};
                return _this671.loadMarkets();
            }).then(function () {
                if (currency == 'JPY') {
                    throw new ExchangeError(_this671.id + ' does not allow ' + currency + ' withdrawals');
                }return _this671.privatePostWithdraw(_this671.extend({
                    'currency': currency,
                    'amount': amount,
                    'address': address
                    // 'message': 'Hi!', // XEM only
                    // 'opt_fee': 0.003, // BTC and MONA only
                }, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['return']['txid'],
                    'fee': result['return']['fee']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this672 = this,
                _arguments651 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments651.length > 1 && _arguments651[1] !== undefined ? _arguments651[1] : 'api';
                method = _arguments651.length > 2 && _arguments651[2] !== undefined ? _arguments651[2] : 'GET';
                params = _arguments651.length > 3 && _arguments651[3] !== undefined ? _arguments651[3] : {};
                headers = _arguments651.length > 4 && _arguments651[4] !== undefined ? _arguments651[4] : undefined;
                body = _arguments651.length > 5 && _arguments651[5] !== undefined ? _arguments651[5] : undefined;
                url = _this672.urls['api'] + '/';

                if (api == 'public') {
                    url += 'api/' + _this672.version + '/' + _this672.implodeParams(path, params);
                } else {
                    url += api == 'ecapi' ? 'ecapi' : 'tapi';
                    nonce = _this672.nonce();

                    body = _this672.urlencode(_this672.extend({
                        'method': path,
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this672.apiKey,
                        'Sign': _this672.hmac(_this672.encode(body), _this672.encode(_this672.secret), 'sha512')
                    };
                }
                return _this672.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this672.id + ' ' + response['error']);
                }if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this672.id + ' ' + _this672.json(response));
                    }
                }return response;
            });
        }
    };

    //=============================================================================

    var exchanges = {

        '_1broker': _1broker,
        '_1btcxe': _1btcxe,
        'acx': acx,
        'anxpro': anxpro,
        'binance': binance,
        'bit2c': bit2c,
        'bitbay': bitbay,
        'bitcoincoid': bitcoincoid,
        'bitfinex': bitfinex,
        'bitfinex2': bitfinex2,
        'bitflyer': bitflyer,
        'bitlish': bitlish,
        'bitmarket': bitmarket,
        'bitmex': bitmex,
        'bitso': bitso,
        'bitstamp1': bitstamp1,
        'bitstamp': bitstamp,
        'bittrex': bittrex,
        'bl3p': bl3p,
        'bleutrade': bleutrade,
        'btcchina': btcchina,
        'btcexchange': btcexchange,
        'btcmarkets': btcmarkets,
        'btctradeua': btctradeua,
        'btcturk': btcturk,
        'btcx': btcx,
        'bter': bter,
        'bxinth': bxinth,
        'ccex': ccex,
        'cex': cex,
        'chbtc': chbtc,
        'chilebit': chilebit,
        'coincheck': coincheck,
        'coinfloor': coinfloor,
        'coingi': coingi,
        'coinmarketcap': coinmarketcap,
        'coinmate': coinmate,
        'coinsecure': coinsecure,
        'coinspot': coinspot,
        'cryptopia': cryptopia,
        'dsx': dsx,
        'exmo': exmo,
        'flowbtc': flowbtc,
        'foxbit': foxbit,
        'fybse': fybse,
        'fybsg': fybsg,
        'gatecoin': gatecoin,
        'gdax': gdax,
        'gemini': gemini,
        'hitbtc': hitbtc,
        'hitbtc2': hitbtc2,
        'huobi': huobi,
        'huobicny': huobicny,
        'huobipro': huobipro,
        'independentreserve': independentreserve,
        'itbit': itbit,
        'jubi': jubi,
        'kraken': kraken,
        'lakebtc': lakebtc,
        'livecoin': livecoin,
        'liqui': liqui,
        'luno': luno,
        'mercado': mercado,
        'mixcoins': mixcoins,
        'nova': nova,
        'okcoincny': okcoincny,
        'okcoinusd': okcoinusd,
        'okex': okex,
        'paymium': paymium,
        'poloniex': poloniex,
        'quadrigacx': quadrigacx,
        'quoine': quoine,
        'southxchange': southxchange,
        'surbitcoin': surbitcoin,
        'therock': therock,
        'urdubit': urdubit,
        'vaultoro': vaultoro,
        'vbtc': vbtc,
        'virwox': virwox,
        'xbtce': xbtce,
        'yobit': yobit,
        'yunbi': yunbi,
        'zaif': zaif
    };

    var defineAllExchanges = function defineAllExchanges(exchanges) {
        var result = {};

        var _loop3 = function _loop3(id) {
            result[id] = function (params) {
                return new Exchange(extend(exchanges[id], params));
            };
        };

        for (var id in exchanges) {
            _loop3(id);
        }result.exchanges = Object.keys(exchanges);
        return result;
    };

    //-----------------------------------------------------------------------------

    var ccxt = Object.assign(defineAllExchanges(exchanges), {

        version: version,

        // exceptions

        CCXTError: CCXTError,
        ExchangeError: ExchangeError,
        NotSupported: NotSupported,
        AuthenticationError: AuthenticationError,
        InsufficientFunds: InsufficientFunds,
        NetworkError: NetworkError,
        DDoSProtection: DDoSProtection,
        RequestTimeout: RequestTimeout,
        ExchangeNotAvailable: ExchangeNotAvailable,

        // common utility functions

        sleep: sleep,
        timeout: timeout,
        capitalize: capitalize,
        keysort: keysort,
        extend: extend,
        omit: omit,
        indexBy: indexBy,
        sortBy: sortBy,
        flatten: flatten,
        unique: unique,
        pluck: pluck,
        urlencode: urlencode,
        sum: sum,
        decimal: decimal,
        safeFloat: safeFloat,

        // underscore aliases

        index_by: indexBy,
        sort_by: sortBy,

        // crypto functions

        binaryConcat: binaryConcat,
        stringToBinary: stringToBinary,
        binaryToString: binaryToString,
        stringToBase64: stringToBase64,
        utf16ToBase64: utf16ToBase64,
        base64ToBinary: base64ToBinary,
        base64ToString: base64ToString,
        urlencodeBase64: urlencodeBase64,
        hash: hash,
        hmac: hmac,
        jwt: jwt

    });

    //-----------------------------------------------------------------------------

    if (isCommonJS) {

        module.exports = ccxt;
    } else {

        window.ccxt = ccxt;
    }

    //-----------------------------------------------------------------------------
})(); // end of namespace

//# sourceMappingURL=data:application/json;charset=utf-8;base64,