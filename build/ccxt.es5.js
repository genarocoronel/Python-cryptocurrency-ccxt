"use strict";

/*

MIT License

Copyright (c) 2017 Igor Kroitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {

    //-----------------------------------------------------------------------------
    // dependencies

    var CryptoJS = require('crypto-js'),
        qs = require('qs'); // querystring
    // , ws       = require ('ws') // websocket

    //-----------------------------------------------------------------------------
    // this is updated by vss.js when building

    var version = '1.6.63';

    //-----------------------------------------------------------------------------
    // platform detection

    var isNode = typeof window === 'undefined',
        isCommonJS = typeof module !== 'undefined' && typeof require !== 'undefined';

    //-----------------------------------------------------------------------------

    var CCXTError = function (_Error) {
        _inherits(CCXTError, _Error);

        function CCXTError(message) {
            _classCallCheck(this, CCXTError);

            // a workaround to make `instanceof CCXTError` work in ES5
            var _this = _possibleConstructorReturn(this, (CCXTError.__proto__ || Object.getPrototypeOf(CCXTError)).call(this, message));

            _this.constructor = CCXTError;
            _this.__proto__ = CCXTError.prototype;
            _this.message = message;
            return _this;
        }

        return CCXTError;
    }(Error);

    var ExchangeError = function (_CCXTError) {
        _inherits(ExchangeError, _CCXTError);

        function ExchangeError(message) {
            _classCallCheck(this, ExchangeError);

            var _this2 = _possibleConstructorReturn(this, (ExchangeError.__proto__ || Object.getPrototypeOf(ExchangeError)).call(this, message));

            _this2.constructor = ExchangeError;
            _this2.__proto__ = ExchangeError.prototype;
            _this2.message = message;
            return _this2;
        }

        return ExchangeError;
    }(CCXTError);

    var NotSupported = function (_ExchangeError) {
        _inherits(NotSupported, _ExchangeError);

        function NotSupported(message) {
            _classCallCheck(this, NotSupported);

            var _this3 = _possibleConstructorReturn(this, (NotSupported.__proto__ || Object.getPrototypeOf(NotSupported)).call(this, message));

            _this3.constructor = NotSupported;
            _this3.__proto__ = NotSupported.prototype;
            _this3.message = message;
            return _this3;
        }

        return NotSupported;
    }(ExchangeError);

    var AuthenticationError = function (_ExchangeError2) {
        _inherits(AuthenticationError, _ExchangeError2);

        function AuthenticationError(message) {
            _classCallCheck(this, AuthenticationError);

            var _this4 = _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call(this, message));

            _this4.constructor = AuthenticationError;
            _this4.__proto__ = AuthenticationError.prototype;
            _this4.message = message;
            return _this4;
        }

        return AuthenticationError;
    }(ExchangeError);

    var InsufficientFunds = function (_ExchangeError3) {
        _inherits(InsufficientFunds, _ExchangeError3);

        function InsufficientFunds(message) {
            _classCallCheck(this, InsufficientFunds);

            var _this5 = _possibleConstructorReturn(this, (InsufficientFunds.__proto__ || Object.getPrototypeOf(InsufficientFunds)).call(this, message));

            _this5.constructor = InsufficientFunds;
            _this5.__proto__ = InsufficientFunds.prototype;
            _this5.message = message;
            return _this5;
        }

        return InsufficientFunds;
    }(ExchangeError);

    var NetworkError = function (_CCXTError2) {
        _inherits(NetworkError, _CCXTError2);

        function NetworkError(message) {
            _classCallCheck(this, NetworkError);

            var _this6 = _possibleConstructorReturn(this, (NetworkError.__proto__ || Object.getPrototypeOf(NetworkError)).call(this, message));

            _this6.constructor = NetworkError;
            _this6.__proto__ = NetworkError.prototype;
            _this6.message = message;
            return _this6;
        }

        return NetworkError;
    }(CCXTError);

    var DDoSProtection = function (_NetworkError) {
        _inherits(DDoSProtection, _NetworkError);

        function DDoSProtection(message) {
            _classCallCheck(this, DDoSProtection);

            var _this7 = _possibleConstructorReturn(this, (DDoSProtection.__proto__ || Object.getPrototypeOf(DDoSProtection)).call(this, message));

            _this7.constructor = DDoSProtection;
            _this7.__proto__ = DDoSProtection.prototype;
            _this7.message = message;
            return _this7;
        }

        return DDoSProtection;
    }(NetworkError);

    var RequestTimeout = function (_NetworkError2) {
        _inherits(RequestTimeout, _NetworkError2);

        function RequestTimeout(message) {
            _classCallCheck(this, RequestTimeout);

            var _this8 = _possibleConstructorReturn(this, (RequestTimeout.__proto__ || Object.getPrototypeOf(RequestTimeout)).call(this, message));

            _this8.constructor = RequestTimeout;
            _this8.__proto__ = RequestTimeout.prototype;
            _this8.message = message;
            return _this8;
        }

        return RequestTimeout;
    }(NetworkError);

    var ExchangeNotAvailable = function (_NetworkError3) {
        _inherits(ExchangeNotAvailable, _NetworkError3);

        function ExchangeNotAvailable(message) {
            _classCallCheck(this, ExchangeNotAvailable);

            var _this9 = _possibleConstructorReturn(this, (ExchangeNotAvailable.__proto__ || Object.getPrototypeOf(ExchangeNotAvailable)).call(this, message));

            _this9.constructor = ExchangeNotAvailable;
            _this9.__proto__ = ExchangeNotAvailable.prototype;
            _this9.message = message;
            return _this9;
        }

        return ExchangeNotAvailable;
    }(NetworkError);

    //-----------------------------------------------------------------------------
    // utility helpers

    var sleep = function sleep(ms) {
        return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
        });
    };

    var decimal = function decimal(float) {
        return parseFloat(float).toString();
    };

    var timeout = function timeout(ms, promise) {
        return Promise.race([promise, sleep(ms).then(function () {
            throw new RequestTimeout('request timed out');
        })]);
    };

    var capitalize = function capitalize(string) {
        return string.length ? string.charAt(0).toUpperCase() + string.slice(1) : string;
    };

    var keysort = function keysort(object) {
        var result = {};
        Object.keys(object).sort().forEach(function (key) {
            return result[key] = object[key];
        });
        return result;
    };

    var extend = function extend() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var result = {};

        var _loop = function _loop(i) {
            if (_typeof(args[i]) === 'object') Object.keys(args[i]).forEach(function (key) {
                return result[key] = args[i][key];
            });
        };

        for (var i = 0; i < args.length; i++) {
            _loop(i);
        }return result;
    };

    var omit = function omit(object) {
        var result = extend(object);
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'string') delete result[arguments[i]];else if (Array.isArray(arguments[i])) for (var k = 0; k < arguments[i].length; k++) {
                delete result[arguments[i][k]];
            }
        }return result;
    };

    var indexBy = function indexBy(array, key) {
        var result = {};
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            if (typeof element[key] != 'undefined') {
                result[element[key]] = element;
            }
        }
        return result;
    };

    var sortBy = function sortBy(array, key) {
        var descending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        descending = descending ? -1 : 1;
        return array.sort(function (a, b) {
            return a[key] < b[key] ? -descending : a[key] > b[key] ? descending : 0;
        });
    };

    var flatten = function flatten(array) {
        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        for (var i = 0, length = array.length; i < length; i++) {
            var value = array[i];
            if (Array.isArray(value)) {
                flatten(value, result);
            } else {
                result.push(value);
            }
        }
        return result;
    };

    var unique = function unique(array) {
        return array.filter(function (value, index, self) {
            return self.indexOf(value) == index;
        });
    };

    var pluck = function pluck(array, key) {
        return array.filter(function (element) {
            return typeof element[key] != 'undefined';
        }).map(function (element) {
            return element[key];
        });
    };

    var urlencode = function urlencode(object) {
        return qs.stringify(object);
    };

    var sum = function sum() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var result = args.filter(function (arg) {
            return typeof arg != 'undefined';
        });
        return result.length > 0 ? result.reduce(function (sum, value) {
            return sum + value;
        }, 0) : undefined;
    };

    var ordered = function ordered(x) {
        return x;
    }; // a stub to keep assoc keys in order, in JS it does nothing, it's mostly for Python

    //-----------------------------------------------------------------------------
    // a cross-platform Fetch API

    var nodeFetch = isNode && module.require('node-fetch') // using module.require to prevent Webpack / React Native from trying to include it
    ,
        windowFetch = typeof window !== 'undefined' && window.fetch // native Fetch API (in newer browsers)
    ,
        xhrFetch = function xhrFetch(url, options) {
        var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return (// a quick ad-hoc polyfill (for older browsers)
            new Promise(function (resolve, reject) {

                if (verbose) console.log(url, options);

                var xhr = new XMLHttpRequest();
                var method = options.method || 'GET';

                xhr.open(method, url, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) resolve(xhr.responseText);else {
                            // [403, 404, ...].indexOf (xhr.status) >= 0
                            throw new Error(method, url, xhr.status, xhr.responseText);
                        }
                    }
                };

                if (typeof options.headers != 'undefined') for (var header in options.headers) {
                    xhr.setRequestHeader(header, options.headers[header]);
                }xhr.send(options.body);
            })
        );
    };

    var fetch = nodeFetch || windowFetch || xhrFetch;

    //-----------------------------------------------------------------------------
    // string ←→ binary ←→ base64 conversion routines

    var stringToBinary = function stringToBinary(str) {
        var arr = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return CryptoJS.lib.WordArray.create(arr);
    };

    var stringToBase64 = function stringToBase64(string) {
        return CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64);
    },
        utf16ToBase64 = function utf16ToBase64(string) {
        return CryptoJS.enc.Utf16.parse(string).toString(CryptoJS.enc.Base64);
    },
        base64ToBinary = function base64ToBinary(string) {
        return CryptoJS.enc.Base64.parse(string);
    },
        base64ToString = function base64ToString(string) {
        return CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8);
    },
        binaryToString = function binaryToString(string) {
        return string;
    };

    var binaryConcat = function binaryConcat() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return args.reduce(function (a, b) {
            return a.concat(b);
        });
    };

    // url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
    var urlencodeBase64 = function urlencodeBase64(base64string) {
        return base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
    };

    //-----------------------------------------------------------------------------
    // cryptography

    var hash = function hash(request) {
        var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'md5';
        var digest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hex';

        var result = CryptoJS[hash.toUpperCase()](request);
        return digest == 'binary' ? result : result.toString(CryptoJS.enc[capitalize(digest)]);
    };

    var hmac = function hmac(request, secret) {
        var hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sha256';
        var digest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';

        var encoding = digest == 'binary' ? 'Latin1' : capitalize(digest);
        return CryptoJS['Hmac' + hash.toUpperCase()](request, secret).toString(CryptoJS.enc[capitalize(encoding)]);
    };

    //-----------------------------------------------------------------------------
    // a JSON Web Token authentication method

    var jwt = function jwt(request, secret) {
        var alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HS256';
        var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'sha256';

        var encodedHeader = urlencodeBase64(stringToBase64(JSON.stringify({ 'alg': alg, 'typ': 'JWT' }))),
            encodedData = urlencodeBase64(stringToBase64(JSON.stringify(request))),
            token = [encodedHeader, encodedData].join('.'),
            signature = urlencodeBase64(utf16ToBase64(hmac(token, secret, hash, 'utf16')));
        return [token, signature].join('.');
    };

    //-----------------------------------------------------------------------------
    // const WebSocket = require('ws')
    // const ws = new WebSocket (this.urls['websocket'])
    // ws.on ('open', function open () {
    //     console.log ('connected')
    //     // ws.send (Date.now ())
    // })
    // ws.on ('close', function close () {
    //     console.log ('disconnected')
    // });
    // ws.on ('message', function incoming (data) {
    //     // console.log (`Roundtrip time: ${Date.now() - data} ms`);
    //     setTimeout (function timeout () {
    //         ws.send (Date.now ())
    //     }, 500)
    // })
    //-----------------------------------------------------------------------------

    //-----------------------------------------------------------------------------
    // the base class

    var Exchange = function Exchange(config) {
        var _this19 = this;

        this.hash = hash;
        this.hmac = hmac;
        this.jwt = jwt; // JSON Web Token
        this.binaryConcat = binaryConcat;
        this.stringToBinary = stringToBinary;
        this.stringToBase64 = stringToBase64;
        this.base64ToBinary = base64ToBinary;
        this.base64ToString = base64ToString;
        this.binaryToString = binaryToString;
        this.utf16ToBase64 = utf16ToBase64;
        this.urlencode = urlencode;
        this.encodeURIComponent = encodeURIComponent;
        this.omit = omit;
        this.pluck = pluck;
        this.unique = unique;
        this.extend = extend;
        this.flatten = flatten;
        this.indexBy = indexBy;
        this.sortBy = sortBy;
        this.keysort = keysort;
        this.decimal = decimal;
        this.capitalize = capitalize;
        this.json = JSON.stringify;
        this.sum = sum;
        this.ordered = ordered;

        this.encode = function (string) {
            return string;
        };
        this.decode = function (string) {
            return string;
        };

        if (isNode) this.nodeVersion = process.version.match(/\d+\.\d+.\d+/)[0];

        this.init = function () {
            this.orders = {};
            this.trades = {};
            if (this.api) this.defineRESTAPI(this.api, 'request');
            if (this.markets) this.setMarkets(this.markets);
        };

        this.defineRESTAPI = function (api, methodName) {
            var _this10 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            Object.keys(api).forEach(function (type) {
                Object.keys(api[type]).forEach(function (httpMethod) {
                    var urls = api[type][httpMethod];

                    var _loop2 = function _loop2(i) {
                        var url = urls[i].trim();
                        var splitPath = url.split(/[^a-zA-Z0-9]/);

                        var uppercaseMethod = httpMethod.toUpperCase();
                        var lowercaseMethod = httpMethod.toLowerCase();
                        var camelcaseMethod = capitalize(lowercaseMethod);
                        var camelcaseSuffix = splitPath.map(capitalize).join('');
                        var underscoreSuffix = splitPath.map(function (x) {
                            return x.trim().toLowerCase();
                        }).filter(function (x) {
                            return x.length > 0;
                        }).join('_');

                        if (camelcaseSuffix.indexOf(camelcaseMethod) === 0) camelcaseSuffix = camelcaseSuffix.slice(camelcaseMethod.length);

                        if (underscoreSuffix.indexOf(lowercaseMethod) === 0) underscoreSuffix = underscoreSuffix.slice(lowercaseMethod.length);

                        var camelcase = type + camelcaseMethod + capitalize(camelcaseSuffix);
                        var underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix;

                        if ('suffixes' in options) {
                            if ('camelcase' in options['suffixes']) camelcase += options['suffixes']['camelcase'];
                            if ('underscore' in options.suffixes) underscore += options['suffixes']['underscore'];
                        }

                        if ('underscore_suffix' in options) underscore += options.underscoreSuffix;
                        if ('camelcase_suffix' in options) camelcase += options.camelcaseSuffix;

                        var partial = function partial(params) {
                            return _this10[methodName](url, type, uppercaseMethod, params);
                        };

                        _this10[camelcase] = partial;
                        _this10[underscore] = partial;
                    };

                    for (var i = 0; i < urls.length; i++) {
                        _loop2(i);
                    }
                });
            });
        },

        // this.initializeStreamingAPI = function () {
        //     this.ws = new WebSocket (this.urls['websocket'])
        //     ws.on ('open', function open () {
        //         console.log ('connected')
        //         // ws.send (Date.now ())
        //     })
        //     ws.on ('close', function close () {
        //         console.log ('disconnected')
        //     })
        //     ws.on ('message', function incoming (data) {
        //         // console.log (`Roundtrip time: ${Date.now() - data} ms`);
        //         setTimeout (function timeout () {
        //             ws.send (Date.now ())
        //         }, 500)
        //     })
        // },

        this.fetch = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

            var _this11 = this;

            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            if (isNode && this.userAgent) if (typeof this.userAgent == 'string') headers = extend({ 'User-Agent': this.userAgent }, headers);else if (_typeof(this.userAgent) == 'object' && 'User-Agent' in this.userAgent) headers = extend(this.userAgent, headers);

            if (this.proxy.length) headers = extend({ 'Origin': '*' }, headers);

            var options = { 'method': method, 'headers': headers, 'body': body };

            url = this.proxy + url;

            if (this.verbose) console.log(this.id, method, url, "\nRequest:\n", options);

            return timeout(this.timeout, fetch(url, options).catch(function (e) {
                if (isNode) {
                    throw new ExchangeNotAvailable([_this11.id, method, url, e.type, e.message].join(' '));
                }
                throw e; // rethrow all unknown errors
            }).then(function (response) {

                if (typeof response == 'string') return response;

                return response.text().then(function (text) {
                    if (_this11.verbose) console.log(_this11.id, method, url, text ? "\nResponse:\n" + text : '');
                    if (response.status >= 200 && response.status <= 300) return text;
                    var error = undefined;
                    var details = text;
                    if ([429].indexOf(response.status) >= 0) {
                        error = DDoSProtection;
                    } else if ([404, 409, 422, 500, 501, 502, 520, 521, 522, 525].indexOf(response.status) >= 0) {
                        error = ExchangeNotAvailable;
                    } else if ([400, 403, 405, 503].indexOf(response.status) >= 0) {
                        var ddosProtection = text.match(/cloudflare|incapsula/i);
                        if (ddosProtection) {
                            error = DDoSProtection;
                        } else {
                            error = ExchangeNotAvailable;
                            details = text + ' (possible reasons: ' + ['invalid API keys', 'bad or old nonce', 'exchange is down or offline', 'on maintenance', 'DDoS protection', 'rate-limiting'].join(', ') + ')';
                        }
                    } else if ([408, 504].indexOf(response.status) >= 0) {
                        error = RequestTimeout;
                    } else if ([401, 511].indexOf(response.status) >= 0) {
                        error = AuthenticationError;
                    } else {
                        error = ExchangeError;
                    }
                    throw new error([_this11.id, method, url, response.status, response.statusText, details].join(' '));
                });
            }).then(function (response) {
                return _this11.handleResponse(url, method, headers, response);
            }));
        };

        this.handleResponse = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            try {

                if (typeof body != 'string' || body.length < 2) throw new ExchangeError([this.id, method, url, 'returned empty response'].join(' '));
                return JSON.parse(body);
            } catch (e) {

                var maintenance = body.match(/offline|busy|retry|wait|unavailable|maintain|maintenance|maintenancing/i);
                var ddosProtection = body.match(/cloudflare|incapsula|overload/i);

                if (e instanceof SyntaxError) {

                    var error = ExchangeNotAvailable;
                    var details = 'not accessible from this location at the moment';
                    if (maintenance) details = 'offline, on maintenance or unreachable from this location at the moment';
                    if (ddosProtection) error = DDoSProtection;
                    throw new error([this.id, method, url, details].join(' '));
                }

                if (this.verbose) console.log(this.id, method, url, 'error', e, "response body:\n'" + body + "'");

                throw e;
            }
        };

        this.setMarkets = function (markets) {
            var values = _objectValues(markets);
            this.markets = indexBy(values, 'symbol');
            this.marketsById = indexBy(markets, 'id');
            this.markets_by_id = this.marketsById;
            this.symbols = Object.keys(this.markets).sort();
            this.ids = Object.keys(this.markets_by_id).sort();
            var base = this.pluck(values.filter(function (market) {
                return 'base' in market;
            }), 'base');
            var quote = this.pluck(values.filter(function (market) {
                return 'quote' in market;
            }), 'quote');
            this.currencies = this.unique(base.concat(quote));
            return this.markets;
        };

        this.loadMarkets = function () {
            var _this12 = this;

            var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!reload && this.markets) {
                if (!this.marketsById) {
                    return new Promise(function (resolve, reject) {
                        return resolve(_this12.setMarkets(_this12.markets));
                    });
                }
                return new Promise(function (resolve, reject) {
                    return resolve(_this12.markets);
                });
            }
            return this.fetchMarkets().then(function (markets) {
                return _this12.setMarkets(markets);
            });
        };

        this.fetchTickers = function () {
            var symbols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

            throw new NotSupported(this.id + ' API does not allow to fetch all tickers at once with a single call to fetch_tickers () for now');
        };

        this.fetchMarkets = function () {
            var _this13 = this;

            return new Promise(function (resolve, reject) {
                return resolve(_this13.markets);
            });
        };

        this.fetchOrderStatus = function (id) {
            var market,
                order,
                _arguments2 = arguments;
            return Promise.resolve().then(function () {
                market = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : undefined;
                return fetchOrder(id);
            }).then(function (_resp) {
                order = _resp;

                return order['status'];
            });
        };

        this.account = function () {
            return {
                'free': 0.0,
                'used': 0.0,
                'total': 0.0
            };
        };

        this.commonCurrencyCode = function (currency) {
            if (!this.substituteCommonCurrencyCodes) return currency;
            if (currency == 'XBT') return 'BTC';
            if (currency == 'BCC') return 'BCH';
            if (currency == 'DRK') return 'DASH';
            return currency;
        };

        this.market = function (symbol) {
            return typeof symbol === 'string' && typeof this.markets != 'undefined' && typeof this.markets[symbol] != 'undefined' ? this.markets[symbol] : symbol;
        };

        this.market_id = this.marketId = function (symbol) {
            return this.market(symbol).id || symbol;
        };

        this.market_ids = this.marketIds = function (symbols) {
            var _this14 = this;

            return symbols.map(function (symbol) {
                return _this14.marketId(symbol);
            });
        };

        this.symbol = function (symbol) {
            return this.market(symbol).symbol || symbol;
        };

        this.extract_params = this.extractParams = function (string) {
            var re = /{([a-zA-Z0-9_]+?)}/g;
            var matches = [];
            var match = void 0;
            while (match = re.exec(string)) {
                matches.push(match[1]);
            }return matches;
        };

        this.implode_params = this.implodeParams = function (string, params) {
            for (var property in params) {
                string = string.replace('{' + property + '}', params[property]);
            }return string;
        };

        this.url = function (path) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var result = this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) result += '?' + this.urlencode(query);
            return result;
        };

        this.parseBidAsk = function (bidask) {
            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

            var price = parseFloat(bidask[priceKey]);
            var amount = parseFloat(bidask[amountKey]);
            return [price, amount];
        };

        this.parseBidAsks = function (bidasks) {
            var _this15 = this;

            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

            return _objectValues(bidasks).map(function (bidask) {
                return _this15.parseBidAsk(bidask, priceKey, amountKey);
            });
        };

        this.parseOrderBook = function (orderbook) {
            var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var bidsKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'bids';
            var asksKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'asks';
            var priceKey = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
            var amountKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

            timestamp = timestamp || this.milliseconds();
            return {
                'bids': this.parseBidAsks(orderbook[bidsKey], priceKey, amountKey),
                'asks': this.parseBidAsks(orderbook[asksKey], priceKey, amountKey),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp)
            };
        }, this.parseTrades = function (trades) {
            var _this16 = this;

            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return _objectValues(trades).map(function (trade) {
                return _this16.parseTrade(trade, market);
            });
        };

        this.parseOrders = function (orders) {
            var _this17 = this;

            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return _objectValues(orders).map(function (order) {
                return _this17.parseOrder(order, market);
            });
        };

        this.parseOHLCV = function (ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return ohlcv;
        };

        this.parseOHLCVs = function (ohlcvs) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';

            var _this18 = this;

            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return _objectValues(ohlcvs).map(function (ohlcv) {
                return _this18.parseOHLCV(ohlcv, market, timeframe, since, limit);
            });
        };

        this.createLimitBuyOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'buy', amount, price, params);
        };

        this.createLimitSellOrder = function (market, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(market, 'limit', 'sell', amount, price, params);
        };

        this.createMarketBuyOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'buy', amount, undefined, params);
        };

        this.createMarketSellOrder = function (market, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(market, 'market', 'sell', amount, undefined, params);
        };

        this.iso8601 = function (timestamp) {
            return new Date(timestamp).toISOString();
        };
        this.parse8601 = Date.parse;
        this.seconds = function () {
            return Math.floor(_this19.milliseconds() / 1000);
        };
        this.microseconds = function () {
            return Math.floor(_this19.milliseconds() * 1000);
        };
        this.milliseconds = Date.now;
        this.nonce = this.seconds;
        this.id = undefined;
        this.rateLimit = 2000; // milliseconds = seconds * 1000
        this.timeout = 10000; // milliseconds = seconds * 1000
        this.verbose = false;
        this.userAgent = false;
        this.twofa = false; // two-factor authentication
        this.substituteCommonCurrencyCodes = true;
        this.timeframes = undefined;
        this.hasFetchTickers = false;
        this.hasFetchOHLCV = false;
        this.hasDeposit = false;
        this.hasWithdraw = false;

        this.yyyymmddhhmmss = function (timestamp) {
            var date = new Date(timestamp);
            var yyyy = date.getUTCFullYear();
            var MM = date.getUTCMonth();
            var dd = date.getUTCDay();
            var hh = date.getUTCHours();
            var mm = date.getUTCMinutes();
            var ss = date.getUTCSeconds();
            MM = MM < 10 ? '0' + MM : MM;
            dd = dd < 10 ? '0' + dd : dd;
            hh = hh < 10 ? '0' + hh : hh;
            mm = mm < 10 ? '0' + mm : mm;
            ss = ss < 10 ? '0' + ss : ss;
            return yyyy + '-' + MM + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;
        };

        if (isNode) this.userAgent = {
            'User-Agent': 'ccxt/' + version + ' (+https://github.com/kroitor/ccxt)' + ' Node.js/' + this.nodeVersion + ' (JavaScript)'

            // prepended to URL, like https://proxy.com/https://exchange.com/api...
        };this.proxy = '';

        for (var property in config) {
            this[property] = config[property];
        }this.account = this.account;
        this.fetch_balance = this.fetchBalance;
        this.fetch_order_book = this.fetchOrderBook;
        this.fetch_tickers = this.fetchTickers;
        this.fetch_ticker = this.fetchTicker;
        this.fetch_trades = this.fetchTrades;
        this.fetch_order = this.fetchOrder;
        this.fetch_order_status = this.fetchOrderStatus;
        this.fetch_markets = this.fetchMarkets;
        this.load_markets = this.loadMarkets;
        this.set_markets = this.setMarkets;
        this.parse_bidask = this.parseBidAsk;
        this.parse_bidasks = this.parseBidAsks;
        this.parse_order_book = this.parseOrderBook;
        this.parse_trades = this.parseTrades;
        this.parse_orders = this.parseOrders;
        this.parse_ohlcv = this.parseOHLCV;
        this.parse_ohlcvs = this.parseOHLCVs;
        this.create_limit_buy_order = this.createLimitBuyOrder;
        this.create_limit_sell_order = this.createLimitBuyOrder;
        this.create_market_buy_order = this.createLimitBuyOrder;
        this.create_market_sell_order = this.createLimitBuyOrder;
        this.create_order = this.createOrder;

        this.init();
    };

    //=============================================================================

    var _1broker = {

        'id': '_1broker',
        'name': '1Broker',
        'countries': 'US',
        'rateLimit': 1500,
        'version': 'v2',
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '60',
            '15m': '900',
            '1h': '3600',
            '1d': '86400'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',
            'api': 'https://1broker.com/api',
            'www': 'https://1broker.com',
            'doc': 'https://1broker.com/?c=en/content/api-documentation'
        },
        'api': {
            'private': {
                'get': ['market/bars', 'market/categories', 'market/details', 'market/list', 'market/quotes', 'market/ticks', 'order/cancel', 'order/create', 'order/open', 'position/close', 'position/close_cancel', 'position/edit', 'position/history', 'position/open', 'position/shared/get', 'social/profile_statistics', 'social/profile_trades', 'user/bitcoin_deposit_address', 'user/details', 'user/overview', 'user/quota_status', 'user/transaction_log']
            }
        },

        fetchCategories: function fetchCategories() {
            var categories,
                _this22 = this;

            return Promise.resolve().then(function () {
                return _this22.privateGetMarketCategories();
            }).then(function (_resp) {
                categories = _resp;

                return categories['response'];
            });
        },
        fetchMarkets: function fetchMarkets() {
            function _recursive() {
                if (c < categories.length) {
                    return Promise.resolve().then(function () {
                        category = categories[c];
                        return this_.privateGetMarketList({
                            'category': category.toLowerCase()
                        });
                    }).then(function (_resp) {
                        markets = _resp;

                        for (p = 0; p < markets['response'].length; p++) {
                            market = markets['response'][p];
                            id = market['symbol'];
                            symbol = undefined;
                            base = undefined;
                            quote = undefined;

                            if (category == 'FOREX' || category == 'CRYPTO') {
                                symbol = market['name'];
                                parts = symbol.split('/');

                                base = parts[0];
                                quote = parts[1];
                            } else {
                                base = id;
                                quote = 'USD';
                                symbol = base + '/' + quote;
                            }
                            base = this_.commonCurrencyCode(base);
                            quote = this_.commonCurrencyCode(quote);
                            result.push({
                                'id': id,
                                'symbol': symbol,
                                'base': base,
                                'quote': quote,
                                'info': market
                            });
                        }
                        c++;
                        return _recursive();
                    });
                }
            }

            var this_,
                categories,
                result,
                c,
                category,
                markets,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                parts,
                _this23 = this;

            return Promise.resolve().then(function () {
                this_ = _this23; // workaround for Babel bug (not passing `this` to _recursive() call)

                return _this23.fetchCategories();
            }).then(function (_resp) {
                categories = _resp;
                result = [];
                c = 0;
                return _recursive();
            }).then(function () {
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                response,
                result,
                c,
                currency,
                total,
                _this27 = this,
                _arguments8 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments8.length > 0 && _arguments8[0] !== undefined ? _arguments8[0] : {};
                return _this27.loadMarkets();
            }).then(function () {
                return _this27.privateGetUserOverview();
            }).then(function (_resp) {
                balance = _resp;
                response = balance['response'];
                result = {
                    'info': response
                };

                for (c = 0; c < _this27.currencies.length; c++) {
                    currency = _this27.currencies[c];

                    result[currency] = _this27.account();
                }
                total = parseFloat(response['balance']);

                result['BTC']['free'] = total;
                result['BTC']['total'] = total;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                bidPrice,
                askPrice,
                bid,
                ask,
                _this28 = this,
                _arguments9 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments9.length > 1 && _arguments9[1] !== undefined ? _arguments9[1] : {};
                return _this28.loadMarkets();
            }).then(function () {
                return _this28.privateGetMarketQuotes(_this28.extend({
                    'symbols': _this28.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['response'][0];
                timestamp = _this28.parse8601(orderbook['updated']);
                bidPrice = parseFloat(orderbook['bid']);
                askPrice = parseFloat(orderbook['ask']);
                bid = [bidPrice, undefined];
                ask = [askPrice, undefined];

                return {
                    'timestamp': timestamp,
                    'datetime': _this28.iso8601(timestamp),
                    'bids': [bid],
                    'asks': [ask]
                };
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var _this29 = this;

            throw new ExchangeError(_this29.id + ' fetchTrades () method not implemented yet');
        },
        fetchTicker: function fetchTicker(symbol) {
            var result,
                orderbook,
                ticker,
                timestamp,
                _this30 = this;

            return Promise.resolve().then(function () {
                return _this30.loadMarkets();
            }).then(function () {
                return _this30.privateGetMarketBars({
                    'symbol': _this30.marketId(symbol),
                    'resolution': 60,
                    'limit': 1
                });
            }).then(function (_resp) {
                result = _resp;
                return _this30.fetchOrderBook(symbol);
            }).then(function (_resp) {
                orderbook = _resp;
                ticker = result['response'][0];
                timestamp = _this30.parse8601(ticker['date']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this30.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': orderbook['bids'][0][0],
                    'ask': orderbook['asks'][0][0],
                    'vwap': undefined,
                    'open': parseFloat(ticker['o']),
                    'close': parseFloat(ticker['c']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [this.parse8601(ohlcv['date']), parseFloat(ohlcv['o']), parseFloat(ohlcv['h']), parseFloat(ohlcv['l']), parseFloat(ohlcv['c']), undefined];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                result,
                _this31 = this,
                _arguments12 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments12.length > 1 && _arguments12[1] !== undefined ? _arguments12[1] : '1m';
                since = _arguments12.length > 2 && _arguments12[2] !== undefined ? _arguments12[2] : undefined;
                limit = _arguments12.length > 3 && _arguments12[3] !== undefined ? _arguments12[3] : undefined;
                params = _arguments12.length > 4 && _arguments12[4] !== undefined ? _arguments12[4] : {};
                return _this31.loadMarkets();
            }).then(function () {
                market = _this31.market(symbol);
                request = {
                    'symbol': market['id'],
                    'resolution': _this31.timeframes[timeframe]
                };

                if (since) {
                    request['date_start'] = _this31.iso8601(since);
                } // they also support date_end
                if (limit) {
                    request['limit'] = limit;
                }return _this31.privateGetMarketBars(_this31.extend(request, params));
            }).then(function (_resp) {
                result = _resp;

                return _this31.parseOHLCVs(result['response'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this32 = this,
                _arguments13 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments13.length > 4 && _arguments13[4] !== undefined ? _arguments13[4] : undefined;
                params = _arguments13.length > 5 && _arguments13[5] !== undefined ? _arguments13[5] : {};
                return _this32.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this32.marketId(symbol),
                    'margin': amount,
                    'direction': side == 'sell' ? 'short' : 'long',
                    'leverage': 1,
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['type'] += '_market';
                }return _this32.privateGetOrderCreate(_this32.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['response']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this33 = this;

            return Promise.resolve().then(function () {
                return _this33.loadMarkets();
            }).then(function () {
                return _this33.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _this34 = this,
                _arguments15 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments15.length > 1 && _arguments15[1] !== undefined ? _arguments15[1] : 'public';
                method = _arguments15.length > 2 && _arguments15[2] !== undefined ? _arguments15[2] : 'GET';
                params = _arguments15.length > 3 && _arguments15[3] !== undefined ? _arguments15[3] : {};
                headers = _arguments15.length > 4 && _arguments15[4] !== undefined ? _arguments15[4] : undefined;
                body = _arguments15.length > 5 && _arguments15[5] !== undefined ? _arguments15[5] : undefined;

                if (!_this34.apiKey) {
                    throw new AuthenticationError(_this34.id + ' requires apiKey for all requests');
                }url = _this34.urls['api'] + '/' + _this34.version + '/' + path + '.php';
                query = _this34.extend({ 'token': _this34.apiKey }, params);

                url += '?' + _this34.urlencode(query);
                return _this34.fetch(url, method);
            }).then(function (_resp) {
                response = _resp;

                if ('warning' in response) {
                    if (response['warning']) {
                        throw new ExchangeError(_this34.id + ' Warning: ' + response['warning_message']);
                    }
                }if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this34.id + ' Error: ' + response['error_code'] + response['error_message']);
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cryptocapital = {

        'id': 'cryptocapital',
        'name': 'Crypto Capital',
        'comment': 'Crypto Capital API',
        'countries': 'PA', // Panama
        'hasFetchOHLCV': true,
        'hasWithdraw': true,
        'timeframes': {
            '1d': '1year'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993158-7a13f140-64ac-11e7-89cc-a3b441f0b0f8.jpg',
            'www': 'https://cryptocapital.co',
            'doc': 'https://github.com/cryptocap'
        },
        'api': {
            'public': {
                'get': ['stats', 'historical-prices', 'order-book', 'transactions']
            },
            'private': {
                'post': ['balances-and-info', 'open-orders', 'user-transactions', 'btc-deposit-address/get', 'btc-deposit-address/new', 'deposits/get', 'withdrawals/get', 'orders/new', 'orders/edit', 'orders/cancel', 'orders/status', 'withdrawals/new']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                account,
                _this35 = this,
                _arguments16 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments16.length > 0 && _arguments16[0] !== undefined ? _arguments16[0] : {};
                return _this35.privatePostBalancesAndInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances-and-info'];
                result = { 'info': balance };

                for (c = 0; c < _this35.currencies.length; c++) {
                    currency = _this35.currencies[c];
                    account = _this35.account();

                    if (currency in balance['available']) {
                        account['free'] = parseFloat(balance['available'][currency]);
                    }if (currency in balance['on_hold']) {
                        account['used'] = parseFloat(balance['on_hold'][currency]);
                    }account['total'] = _this35.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                timestamp,
                orderbook,
                _this36 = this,
                _arguments17 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments17.length > 1 && _arguments17[1] !== undefined ? _arguments17[1] : {};
                return _this36.publicGetOrderBook(_this36.extend({
                    'currency': _this36.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this36.milliseconds();
                orderbook = response['order-book'];

                return _this36.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'order_amount');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this37 = this;

            return Promise.resolve().then(function () {
                return _this37.publicGetStats({
                    'currency': _this37.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['stats'];
                timestamp = _this37.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this37.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['daily_change']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['total_btc_traded'])
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1d';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [this.parse8601(ohlcv['date'] + ' 00:00:00'), undefined, undefined, undefined, parseFloat(ohlcv['price']), undefined];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                ohlcvs,
                _this38 = this,
                _arguments19 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments19.length > 1 && _arguments19[1] !== undefined ? _arguments19[1] : '1d';
                since = _arguments19.length > 2 && _arguments19[2] !== undefined ? _arguments19[2] : undefined;
                limit = _arguments19.length > 3 && _arguments19[3] !== undefined ? _arguments19[3] : undefined;
                params = _arguments19.length > 4 && _arguments19[4] !== undefined ? _arguments19[4] : {};
                market = _this38.market(symbol);
                return _this38.publicGetHistoricalPrices(_this38.extend({
                    'currency': market['id'],
                    'timeframe': _this38.timeframes[timeframe]
                }, params));
            }).then(function (_resp) {
                response = _resp;
                ohlcvs = _this38.omit(response['historical-prices'], 'request_currency');

                return _this38.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['timestamp']) * 1000;
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['maker_type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                trades,
                _this39 = this,
                _arguments20 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments20.length > 1 && _arguments20[1] !== undefined ? _arguments20[1] : {};
                market = _this39.market(symbol);
                return _this39.publicGetTransactions(_this39.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = _this39.omit(response['transactions'], 'request_currency');

                return _this39.parseTrades(trades, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this40 = this,
                _arguments21 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments21.length > 4 && _arguments21[4] !== undefined ? _arguments21[4] : undefined;
                params = _arguments21.length > 5 && _arguments21[5] !== undefined ? _arguments21[5] : {};
                order = {
                    'side': side,
                    'type': type,
                    'currency': _this40.marketId(symbol),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limit_price'] = price;
                }return _this40.privatePostOrdersNew(_this40.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this41 = this;

            return _this41.privatePostOrdersCancel({ 'id': id });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this42 = this,
                _arguments23 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments23.length > 3 && _arguments23[3] !== undefined ? _arguments23[3] : {};
                return _this42.loadMarkets();
            }).then(function () {
                return _this42.privatePostWithdrawalsNew(_this42.extend({
                    'currency': currency,
                    'amount': parseFloat(amount),
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                request,
                response,
                errors,
                e,
                error,
                _this43 = this,
                _arguments24 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments24.length > 1 && _arguments24[1] !== undefined ? _arguments24[1] : 'public';
                method = _arguments24.length > 2 && _arguments24[2] !== undefined ? _arguments24[2] : 'GET';
                params = _arguments24.length > 3 && _arguments24[3] !== undefined ? _arguments24[3] : {};
                headers = _arguments24.length > 4 && _arguments24[4] !== undefined ? _arguments24[4] : undefined;
                body = _arguments24.length > 5 && _arguments24[5] !== undefined ? _arguments24[5] : undefined;

                if (_this43.id == 'cryptocapital') {
                    throw new ExchangeError(_this43.id + ' is an abstract base API for _1btcxe');
                }url = _this43.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this43.urlencode(params);
                    }
                } else {
                    query = _this43.extend({
                        'api_key': _this43.apiKey,
                        'nonce': _this43.nonce()
                    }, params);
                    request = _this43.json(query);

                    query['signature'] = _this43.hmac(_this43.encode(request), _this43.encode(_this43.secret));
                    body = _this43.json(query);
                    headers = { 'Content-Type': 'application/json' };
                }
                return _this43.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    errors = [];

                    for (e = 0; e < response['errors'].length; e++) {
                        error = response['errors'][e];

                        errors.push(error['code'] + ': ' + error['message']);
                    }
                    errors = errors.join(' ');
                    throw new ExchangeError(_this43.id + ' ' + errors);
                }
                return _this43.fetch(url, method, headers, body);
            });
        }
    };

    //-----------------------------------------------------------------------------

    var _1btcxe = extend(cryptocapital, {

        'id': '_1btcxe',
        'name': '1BTCXE',
        'countries': 'PA', // Panama
        'comment': 'Crypto Capital API',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',
            'api': 'https://1btcxe.com/api',
            'www': 'https://1btcxe.com',
            'doc': 'https://1btcxe.com/api-docs.php'
        },
        'markets': {
            'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },
            'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },
            'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },
            'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },
            'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },
            'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },
            'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },
            'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },
            'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },
            'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },
            'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },
            'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },
            'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },
            'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },
            'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },
            'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' }
        }
    });

    //-----------------------------------------------------------------------------

    var anxpro = {

        'id': 'anxpro',
        'name': 'ANXPro',
        'countries': ['JP', 'SG', 'HK', 'NZ'],
        'version': '2',
        'rateLimit': 1500,
        'hasWithdraw': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',
            'api': 'https://anxpro.com/api',
            'www': 'https://anxpro.com',
            'doc': ['http://docs.anxv2.apiary.io', 'https://anxpro.com/pages/api']
        },
        'api': {
            'public': {
                'get': ['{currency_pair}/money/ticker', '{currency_pair}/money/depth/full', '{currency_pair}/money/trade/fetch']
            },
            'private': {
                'post': ['{currency_pair}/money/order/add', '{currency_pair}/money/order/cancel', '{currency_pair}/money/order/quote', '{currency_pair}/money/order/result', '{currency_pair}/money/orders', 'money/{currency}/address', 'money/{currency}/send_simple', 'money/info', 'money/trade/list', 'money/wallet/history']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                currencies,
                result,
                c,
                currency,
                account,
                wallet,
                _this44 = this,
                _arguments25 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments25.length > 0 && _arguments25[0] !== undefined ? _arguments25[0] : {};
                return _this44.privatePostMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['data'];
                currencies = Object.keys(balance['Wallets']);
                result = { 'info': balance };

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = _this44.account();

                    if (currency in balance['Wallets']) {
                        wallet = balance['Wallets'][currency];

                        account['free'] = parseFloat(wallet['Available_Balance']['value']);
                        account['total'] = parseFloat(wallet['Balance']['value']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                t,
                timestamp,
                _this45 = this,
                _arguments26 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments26.length > 1 && _arguments26[1] !== undefined ? _arguments26[1] : {};
                return _this45.publicGetCurrencyPairMoneyDepthFull(_this45.extend({
                    'currency_pair': _this45.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                t = parseInt(orderbook['dataUpdateTime']);
                timestamp = parseInt(t / 1000);

                return _this45.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                t,
                timestamp,
                bid,
                ask,
                _this46 = this;

            return Promise.resolve().then(function () {
                return _this46.publicGetCurrencyPairMoneyTicker({
                    'currency_pair': _this46.marketId(market)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                t = parseInt(ticker['dataUpdateTime']);
                timestamp = parseInt(t / 1000);
                bid = undefined;
                ask = undefined;

                if (ticker['buy']['value']) {
                    bid = parseFloat(ticker['buy']['value']);
                }if (ticker['sell']['value']) {
                    ask = parseFloat(ticker['sell']['value']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this46.iso8601(timestamp),
                    'high': parseFloat(ticker['high']['value']),
                    'low': parseFloat(ticker['low']['value']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': parseFloat(ticker['vwap']['value']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']['value']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']['value']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']['value'])
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                error,
                _this47 = this,
                _arguments28 = arguments;

            params = _arguments28.length > 1 && _arguments28[1] !== undefined ? _arguments28[1] : {};
            error = _this47.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled';

            throw new ExchangeError(error);
            return _this47.publicGetCurrencyPairMoneyTradeFetch(_this47.extend({
                'currency_pair': _this47.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this48 = this,
                _arguments29 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments29.length > 4 && _arguments29[4] !== undefined ? _arguments29[4] : undefined;
                params = _arguments29.length > 5 && _arguments29[5] !== undefined ? _arguments29[5] : {};
                order = {
                    'currency_pair': _this48.marketId(market),
                    'amount_int': parseInt(amount * 100000000), // 10^8
                    'type': side
                };

                if (type == 'limit') {
                    order['price_int'] = parseInt(price * 100000);
                } // 10^5
                return _this48.privatePostCurrencyPairOrderAdd(_this48.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['data']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this49 = this;

            return _this49.privatePostCurrencyPairOrderCancel({ 'oid': id });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this50 = this,
                _arguments31 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments31.length > 3 && _arguments31[3] !== undefined ? _arguments31[3] : {};
                return _this50.loadMarkets();
            }).then(function () {
                return _this50.privatePostMoneyCurrencySendSimple(_this50.extend({
                    'currency': currency,
                    'amount_int': parseInt(amount * 100000000), // 10^8
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                secret,
                auth,
                response,
                _test,
                _this51 = this,
                _arguments32 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments32.length > 1 && _arguments32[1] !== undefined ? _arguments32[1] : 'public';
                method = _arguments32.length > 2 && _arguments32[2] !== undefined ? _arguments32[2] : 'GET';
                params = _arguments32.length > 3 && _arguments32[3] !== undefined ? _arguments32[3] : {};
                headers = _arguments32.length > 4 && _arguments32[4] !== undefined ? _arguments32[4] : undefined;
                body = _arguments32.length > 5 && _arguments32[5] !== undefined ? _arguments32[5] : undefined;
                request = _this51.implodeParams(path, params);
                query = _this51.omit(params, _this51.extractParams(path));
                url = _this51.urls['api'] + '/' + _this51.version + '/' + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this51.urlencode(query);
                    }
                } else {
                    nonce = _this51.nonce();

                    body = _this51.urlencode(_this51.extend({ 'nonce': nonce }, query));
                    secret = _this51.base64ToBinary(_this51.secret);
                    auth = request + "\0" + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Rest-Key': _this51.apiKey,
                        'Rest-Sign': _this51.hmac(_this51.encode(auth), secret, 'sha512', 'base64')
                    };
                }
                return _this51.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test = 'result' in response;

                if (_test && response['result'] == 'success') {
                    return response;
                } else {
                    throw new ExchangeError(_this51.id + ' ' + _this51.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var binance = {

        'id': 'binance',
        'name': 'Binance',
        'countries': 'CN', // China
        'rateLimit': 1000,
        'version': 'v1',
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '3m': '3m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '2h': '2h',
            '4h': '4h',
            '6h': '6h',
            '8h': '8h',
            '12h': '12h',
            '1d': '1d',
            '3d': '3d',
            '1w': '1w',
            '1M': '1M'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',
            'api': 'https://www.binance.com/api',
            'www': 'https://www.binance.com',
            'doc': 'https://www.binance.com/restapipub.html'
        },
        'api': {
            'public': {
                'get': ['ping', 'time', 'depth', 'aggTrades', 'klines', 'ticker/24hr']
            },
            'private': {
                'get': ['order', 'openOrders', 'allOrders', 'account', 'myTrades'],
                'post': ['order', 'order/test', 'userDataStream'],
                'put': ['userDataStream'],
                'delete': ['order', 'userDataStream']
            }
        },
        'markets': {
            'BNB/BTC': { 'id': 'BNBBTC', 'symbol': 'BNB/BTC', 'base': 'BNB', 'quote': 'BTC' },
            'NEO/BTC': { 'id': 'NEOBTC', 'symbol': 'NEO/BTC', 'base': 'NEO', 'quote': 'BTC' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'HSR/BTC': { 'id': 'HSRBTC', 'symbol': 'HSR/BTC', 'base': 'HSR', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'GAS/BTC': { 'id': 'GASBTC', 'symbol': 'GAS/BTC', 'base': 'GAS', 'quote': 'BTC' },
            'HCC/BTC': { 'id': 'HCCBTC', 'symbol': 'HCC/BTC', 'base': 'HCC', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'BCCBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
            'BNB/ETH': { 'id': 'BNBETH', 'symbol': 'BNB/ETH', 'base': 'BNB', 'quote': 'ETH' },
            'DNT/ETH': { 'id': 'DNTETH', 'symbol': 'DNT/ETH', 'base': 'DNT', 'quote': 'ETH' },
            'OAX/ETH': { 'id': 'OAXETH', 'symbol': 'OAX/ETH', 'base': 'OAX', 'quote': 'ETH' },
            'MCO/ETH': { 'id': 'MCOETH', 'symbol': 'MCO/ETH', 'base': 'MCO', 'quote': 'ETH' },
            'BTM/ETH': { 'id': 'BTMETH', 'symbol': 'BTM/ETH', 'base': 'BTM', 'quote': 'ETH' },
            'SNT/ETH': { 'id': 'SNTETH', 'symbol': 'SNT/ETH', 'base': 'SNT', 'quote': 'ETH' },
            'EOS/ETH': { 'id': 'EOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },
            'BNT/ETH': { 'id': 'BNTETH', 'symbol': 'BNT/ETH', 'base': 'BNT', 'quote': 'ETH' },
            'ICN/ETH': { 'id': 'ICNETH', 'symbol': 'ICN/ETH', 'base': 'ICN', 'quote': 'ETH' },
            'BTC/USDT': { 'id': 'BTCUSDT', 'symbol': 'BTC/USDT', 'base': 'BTC', 'quote': 'USDT' },
            'ETH/USDT': { 'id': 'ETHUSDT', 'symbol': 'ETH/USDT', 'base': 'ETH', 'quote': 'USDT' },
            'QTUM/ETH': { 'id': 'QTUMETH', 'symbol': 'QTUM/ETH', 'base': 'QTUM', 'quote': 'ETH' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                balances,
                i,
                balance,
                asset,
                currency,
                account,
                _this52 = this,
                _arguments33 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments33.length > 0 && _arguments33[0] !== undefined ? _arguments33[0] : {};
                return _this52.privateGetAccount();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                balances = response['balances'];

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    asset = balance['asset'];
                    currency = _this52.commonCurrencyCode(asset);
                    account = {
                        'free': parseFloat(balance['free']),
                        'used': parseFloat(balance['locked']),
                        'total': 0.0
                    };

                    account['total'] = _this52.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this53 = this,
                _arguments34 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments34.length > 1 && _arguments34[1] !== undefined ? _arguments34[1] : {};
                market = _this53.market(symbol);
                return _this53.publicGetDepth(_this53.extend({
                    'symbol': market['id'],
                    'limit': 100 // default = maximum = 100
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this53.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['closeTime'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['highPrice']),
                'low': parseFloat(ticker['lowPrice']),
                'bid': parseFloat(ticker['bidPrice']),
                'ask': parseFloat(ticker['askPrice']),
                'vwap': parseFloat(ticker['weightedAvgPrice']),
                'open': parseFloat(ticker['openPrice']),
                'close': parseFloat(ticker['prevClosePrice']),
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': parseFloat(ticker['priceChangePercent']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this54 = this;

            return Promise.resolve().then(function () {
                market = _this54.market(symbol);
                return _this54.publicGetTicker24hr({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this54.parseTicker(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0], parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[5])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this55 = this,
                _arguments36 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments36.length > 1 && _arguments36[1] !== undefined ? _arguments36[1] : '1m';
                since = _arguments36.length > 2 && _arguments36[2] !== undefined ? _arguments36[2] : undefined;
                limit = _arguments36.length > 3 && _arguments36[3] !== undefined ? _arguments36[3] : undefined;
                params = _arguments36.length > 4 && _arguments36[4] !== undefined ? _arguments36[4] : {};
                market = _this55.market(symbol);
                request = {
                    'symbol': market['id'],
                    'interval': _this55.timeframes[timeframe]
                };

                request['limit'] = limit ? limit : 500; // default == max == 500
                if (since) {
                    request['startTime'] = since;
                }return _this55.publicGetKlines(_this55.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this55.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestampField = 'T' in trade ? 'T' : 'time';
            var timestamp = trade[timestampField];
            var priceField = 'p' in trade ? 'p' : 'price';
            var price = parseFloat(trade[priceField]);
            var amountField = 'q' in trade ? 'q' : 'qty';
            var amount = parseFloat(trade[amountField]);
            var idField = 'a' in trade ? 'a' : 'id';
            var id = trade[idField].toString();
            var side = undefined;
            if ('m' in trade) {
                side = 'sell';
                if (trade['m']) side = 'buy';
            } else {
                var isBuyer = trade['isBuyer'];
                var isMaker = trade['isMaker'];
                if (isBuyer) {
                    side = isMaker ? 'sell' : 'buy';
                } else {
                    side = isMaker ? 'buy' : 'sell';
                }
            }
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': id,
                'type': undefined,
                'side': side,
                'price': price,
                'amount': amount
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this56 = this,
                _arguments37 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments37.length > 1 && _arguments37[1] !== undefined ? _arguments37[1] : {};
                market = _this56.market(symbol);
                return _this56.publicGetAggTrades(_this56.extend({
                    'symbol': market['id'],
                    // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
                    // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
                    // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
                    'limit': 500 // default = maximum = 500
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this56.parseTrades(response, market);
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            // {
            //   "symbol": "LTCBTC",
            //   "orderId": 1,
            //   "clientOrderId": "myOrder1",
            //   "price": "0.1",
            //   "origQty": "1.0",
            //   "executedQty": "0.0",
            //   "status": "NEW",
            //   "timeInForce": "GTC",
            //   "type": "LIMIT",
            //   "side": "BUY",
            //   "stopPrice": "0.0",
            //   "icebergQty": "0.0",
            //   "time": 1499827319559
            // }
            throw new NotSupported(this.id + ' parseOrder is not implemented yet');
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this57 = this,
                _arguments38 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments38.length > 4 && _arguments38[4] !== undefined ? _arguments38[4] : undefined;
                params = _arguments38.length > 5 && _arguments38[5] !== undefined ? _arguments38[5] : {};
                order = {
                    'symbol': _this57.marketId(symbol),
                    'quantity': '%f'.sprintf(amount),
                    'price': '%f'.sprintf(price),
                    'type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'timeInForce': 'GTC' // Good To Cancel
                    // 'timeInForce': 'IOC', // Immediate Or Cancel
                };
                return _this57.privatePostOrder(_this57.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderId'].toString()
                };
            });
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                symbol,
                market,
                response,
                _this58 = this,
                _arguments39 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments39.length > 1 && _arguments39[1] !== undefined ? _arguments39[1] : {};
                symbol = 'symbol' in params;

                if (!symbol) {
                    throw new ExchangeError(_this58.id + ' fetchOrder requires a symbol param');
                }market = _this58.market(symbol);
                return _this58.privateGetOrder(_this58.extend(params, {
                    'symbol': market['id'],
                    'orderId': id.toString()
                }));
            }).then(function (_resp) {
                response = _resp;

                return _this58.parseOrder(response, market);
            });
        },
        fetchOrders: function fetchOrders() {
            var _this59 = this;

            // symbol  STRING  YES
            // orderId LONG    NO
            // limit   INT NO  Default 500; max 500.
            // recvWindow  LONG    NO
            // timestamp   LONG    YES
            // If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
            throw new NotSupported(_this59.id + ' fetchOrders not implemented yet');
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                response,
                _this60 = this,
                _arguments41 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments41.length > 0 && _arguments41[0] !== undefined ? _arguments41[0] : undefined;
                params = _arguments41.length > 1 && _arguments41[1] !== undefined ? _arguments41[1] : {};

                if (!symbol) {
                    throw new ExchangeError(_this60.id + ' fetchOpenOrders requires a symbol param');
                }market = _this60.market(symbol);
                return _this60.privateGetOpenOrders({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this60.parseOrders(response, market);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this61 = this,
                _arguments42 = arguments;

            params = _arguments42.length > 1 && _arguments42[1] !== undefined ? _arguments42[1] : {};

            return _this61.privatePostOrderCancel(_this61.extend({
                'orderId': parseInt(id)
                // 'origClientOrderId': id,
            }, params));
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                auth,
                signature,
                response,
                _this62 = this,
                _arguments43 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments43.length > 1 && _arguments43[1] !== undefined ? _arguments43[1] : 'public';
                method = _arguments43.length > 2 && _arguments43[2] !== undefined ? _arguments43[2] : 'GET';
                params = _arguments43.length > 3 && _arguments43[3] !== undefined ? _arguments43[3] : {};
                headers = _arguments43.length > 4 && _arguments43[4] !== undefined ? _arguments43[4] : undefined;
                body = _arguments43.length > 5 && _arguments43[5] !== undefined ? _arguments43[5] : undefined;
                url = _this62.urls['api'] + '/' + _this62.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this62.urlencode(params);
                    }
                } else {
                    nonce = _this62.nonce();
                    query = _this62.urlencode(_this62.extend({ 'timestamp': nonce }, params));
                    auth = _this62.secret + '|' + query;
                    signature = _this62.hash(_this62.encode(auth), 'sha256');

                    query += '&' + 'signature=' + signature;
                    headers = {
                        'X-MBX-APIKEY': _this62.apiKey
                    };
                    if (method == 'GET') {
                        url += '?' + query;
                    } else {
                        body = query;
                        headers['Content-Type'] = 'application/x-www-form-urlencoded';
                    }
                }
                return _this62.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    if (response['code'] < 0) {
                        throw new ExchangeError(_this62.id + ' ' + _this62.json(response));
                    }
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bit2c = {

        'id': 'bit2c',
        'name': 'Bit2C',
        'countries': 'IL', // Israel
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
            'api': 'https://www.bit2c.co.il',
            'www': 'https://www.bit2c.co.il',
            'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']
        },
        'api': {
            'public': {
                'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades']
            },
            'private': {
                'post': ['Account/Balance', 'Account/Balance/v2', 'Merchant/CreateCheckout', 'Order/AccountHistory', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/MyOrders', 'Payment/GetMyId', 'Payment/Send']
            }
        },
        'markets': {
            'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },
            'LTC/BTC': { 'id': 'LtcBtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                account,
                available,
                _this63 = this,
                _arguments44 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments44.length > 0 && _arguments44[0] !== undefined ? _arguments44[0] : {};
                return _this63.privatePostAccountBalanceV2();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this63.currencies.length; c++) {
                    currency = _this63.currencies[c];
                    account = _this63.account();

                    if (currency in balance) {
                        available = 'AVAILABLE_' + currency;

                        account['free'] = balance[available];
                        account['total'] = balance[currency];
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this64 = this,
                _arguments45 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments45.length > 1 && _arguments45[1] !== undefined ? _arguments45[1] : {};
                return _this64.publicGetExchangesPairOrderbook(_this64.extend({
                    'pair': _this64.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this64.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this65 = this;

            return Promise.resolve().then(function () {
                return _this65.publicGetExchangesPairTicker({
                    'pair': _this65.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this65.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this65.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ll']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['av']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['a'])
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = parseInt(trade['date']) * 1000;
            var symbol = undefined;
            if (market) symbol = market['symbol'];
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this66 = this,
                _arguments47 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments47.length > 1 && _arguments47[1] !== undefined ? _arguments47[1] : {};
                market = _this66.market(symbol);
                return _this66.publicGetExchangesPairTrades(_this66.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this66.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                result,
                _this67 = this,
                _arguments48 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments48.length > 4 && _arguments48[4] !== undefined ? _arguments48[4] : undefined;
                params = _arguments48.length > 5 && _arguments48[5] !== undefined ? _arguments48[5] : {};
                method = 'privatePostOrderAddOrder';
                order = {
                    'Amount': amount,
                    'Pair': _this67.marketId(symbol)
                };

                if (type == 'market') {
                    method += 'MarketPrice' + _this67.capitalize(side);
                } else {
                    order['Price'] = price;
                    order['Total'] = amount * price;
                    order['IsBid'] = side == 'buy';
                }
                return _this67[method](_this67.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['NewOrder']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this68 = this;

            return _this68.privatePostOrderCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            if (api == 'public') {
                url += '.json';
            } else {
                var nonce = this.nonce();
                var query = this.extend({ 'nonce': nonce }, params);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbay = {

        'id': 'bitbay',
        'name': 'BitBay',
        'countries': ['PL', 'EU'], // Poland
        'rateLimit': 1000,
        'hasWithdraw': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
            'www': 'https://bitbay.net',
            'api': {
                'public': 'https://bitbay.net/API/Public',
                'private': 'https://bitbay.net/API/Trading/tradingApi.php'
            },
            'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API']
        },
        'api': {
            'public': {
                'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD' },
            'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR' },
            'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN' },
            'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                account,
                _this69 = this,
                _arguments50 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments50.length > 0 && _arguments50[0] !== undefined ? _arguments50[0] : {};
                return _this69.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances'];
                result = { 'info': balance };

                for (c = 0; c < _this69.currencies.length; c++) {
                    currency = _this69.currencies[c];
                    account = _this69.account();

                    if (currency in balance) {
                        account['free'] = parseFloat(balance[currency]['available']);
                        account['used'] = parseFloat(balance[currency]['locked']);
                        account['total'] = _this69.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this70 = this,
                _arguments51 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments51.length > 1 && _arguments51[1] !== undefined ? _arguments51[1] : {};
                return _this70.publicGetIdOrderbook(_this70.extend({
                    'id': _this70.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this70.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this71 = this;

            return Promise.resolve().then(function () {
                return _this71.publicGetIdTicker({
                    'id': _this71.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this71.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this71.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this72 = this,
                _arguments53 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments53.length > 1 && _arguments53[1] !== undefined ? _arguments53[1] : {};
                market = _this72.market(symbol);
                return _this72.publicGetIdTrades(_this72.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this72.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                _this73 = this,
                _arguments54 = arguments;

            price = _arguments54.length > 4 && _arguments54[4] !== undefined ? _arguments54[4] : undefined;
            params = _arguments54.length > 5 && _arguments54[5] !== undefined ? _arguments54[5] : {};
            market = _this73.market(symbol);

            return _this73.privatePostTrade(_this73.extend({
                'type': side,
                'currency': market['base'],
                'amount': amount,
                'payment_currency': market['quote'],
                'rate': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this74 = this;

            return _this74.privatePostCancel({ 'id': id });
        },
        isFiatCurrency: function isFiatCurrency(currency) {
            if (currency == 'USD') return true;
            if (currency == 'EUR') return true;
            if (currency == 'PLN') return true;
            return false;
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                method,
                request,
                response,
                _this75 = this,
                _arguments56 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments56.length > 3 && _arguments56[3] !== undefined ? _arguments56[3] : {};
                return _this75.loadMarkets();
            }).then(function () {
                method = undefined;
                request = {
                    'currency': currency,
                    'quantity': amount
                };

                if (_this75.isFiatCurrency(currency)) {
                    method = 'privatePostWithdraw';
                    request['address'] = address;
                } else {
                    method = 'privatePostTransfer';
                    // request['account'] = params['account']; // they demand an account number
                    // request['express'] = params['express']; // whatever it means, they don't explain
                    // request['bic'] = 'Bank Identifier Code (BIC)';
                }
                return _this75[method](_this75.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': undefined
                };
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path, params) + '.json';
            } else {
                body = this.urlencode(this.extend({
                    'method': path,
                    'moment': this.nonce()
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbays = {

        'id': 'bitbays',
        'name': 'BitBays',
        'countries': ['CN', 'GB', 'HK', 'AU', 'CA'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27808599-983687d2-6051-11e7-8d95-80dfcbe5cbb4.jpg',
            'api': 'https://bitbays.com/api',
            'www': 'https://bitbays.com',
            'doc': 'https://bitbays.com/help/api/'
        },
        'api': {
            'public': {
                'get': ['ticker', 'trades', 'depth']
            },
            'private': {
                'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'ODS/BTC': { 'id': 'ods_btc', 'symbol': 'ODS/BTC', 'base': 'ODS', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'LSK/CNY': { 'id': 'lsk_cny', 'symbol': 'LSK/CNY', 'base': 'LSK', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                c,
                currency,
                lowercase,
                account,
                _this76 = this,
                _arguments57 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments57.length > 0 && _arguments57[0] !== undefined ? _arguments57[0] : {};
                return _this76.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['result']['wallet'];
                result = { 'info': balance };

                for (c = 0; c < _this76.currencies.length; c++) {
                    currency = _this76.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this76.account();

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]['avail']);
                        account['used'] = parseFloat(balance[lowercase]['lock']);
                        account['total'] = _this76.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this77 = this,
                _arguments58 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments58.length > 1 && _arguments58[1] !== undefined ? _arguments58[1] : {};
                return _this77.publicGetDepth(_this77.extend({
                    'market': _this77.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this77.parseOrderBook(response['result']);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this78 = this;

            return Promise.resolve().then(function () {
                return _this78.publicGetTicker({
                    'market': _this78.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'];
                timestamp = _this78.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this78.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this79 = this,
                _arguments60 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments60.length > 1 && _arguments60[1] !== undefined ? _arguments60[1] : {};
                market = _this79.market(symbol);
                return _this79.publicGetTrades(_this79.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this79.parseTrades(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this80 = this,
                _arguments61 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments61.length > 4 && _arguments61[4] !== undefined ? _arguments61[4] : undefined;
                params = _arguments61.length > 5 && _arguments61[5] !== undefined ? _arguments61[5] : {};
                order = {
                    'market': _this80.marketId(symbol),
                    'op': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['order_type'] = 1;
                    order['price'] = price;
                } else {
                    order['order_type'] = 0;
                }
                return _this80.privatePostTrade(_this80.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this81 = this;

            return _this81.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test2,
                _this82 = this,
                _arguments63 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments63.length > 1 && _arguments63[1] !== undefined ? _arguments63[1] : 'public';
                method = _arguments63.length > 2 && _arguments63[2] !== undefined ? _arguments63[2] : 'GET';
                params = _arguments63.length > 3 && _arguments63[3] !== undefined ? _arguments63[3] : {};
                headers = _arguments63.length > 4 && _arguments63[4] !== undefined ? _arguments63[4] : undefined;
                body = _arguments63.length > 5 && _arguments63[5] !== undefined ? _arguments63[5] : undefined;
                url = _this82.urls['api'] + '/' + _this82.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this82.urlencode(params);
                    }
                } else {
                    nonce = _this82.nonce();

                    body = _this82.urlencode(_this82.extend({
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this82.apiKey,
                        'Sign': _this82.hmac(_this82.encode(body), _this82.secret, 'sha512')
                    };
                }
                return _this82.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test2 = 'status' in response;

                if (_test2 && response['status'] == 200) {
                    return response;
                } else {
                    throw new ExchangeError(_this82.id + ' ' + _this82.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitcoincoid = {

        'id': 'bitcoincoid',
        'name': 'Bitcoin.co.id',
        'countries': 'ID', // Indonesia
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',
            'api': {
                'public': 'https://vip.bitcoin.co.id/api',
                'private': 'https://vip.bitcoin.co.id/tapi'
            },
            'www': 'https://www.bitcoin.co.id',
            'doc': ['https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf', 'https://vip.bitcoin.co.id/trade_api']
        },
        'api': {
            'public': {
                'get': ['{pair}/ticker', '{pair}/trades', '{pair}/depth']
            },
            'private': {
                'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'openOrders', 'cancelOrder']
            }
        },
        'markets': {
            'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },
            'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },
            'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },
            'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },
            'STR/BTC': { 'id': 'str_btc', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },
            'NEM/BTC': { 'id': 'nem_btc', 'symbol': 'NEM/BTC', 'base': 'NEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                frozen,
                result,
                c,
                currency,
                lowercase,
                account,
                _this83 = this,
                _arguments64 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments64.length > 0 && _arguments64[0] !== undefined ? _arguments64[0] : {};
                return _this83.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['return']['balance'];
                frozen = response['return']['balance_hold'];
                result = { 'info': balance };

                for (c = 0; c < _this83.currencies.length; c++) {
                    currency = _this83.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this83.account();

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]);
                    }
                    if (lowercase in frozen) {
                        account['used'] = parseFloat(frozen[lowercase]);
                    }
                    account['total'] = _this83.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this84 = this,
                _arguments65 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments65.length > 1 && _arguments65[1] !== undefined ? _arguments65[1] : {};
                return _this84.publicGetPairDepth(_this84.extend({
                    'pair': _this84.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this84.parseOrderBook(orderbook, undefined, 'buy', 'sell');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this85 = this;

            return Promise.resolve().then(function () {
                market = _this85.market(symbol);
                return _this85.publicGetPairTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseFloat(ticker['server_time']) * 1000;
                baseVolume = 'vol_' + market['baseId'].toLowerCase();
                quoteVolume = 'vol_' + market['quoteId'].toLowerCase();

                return {
                    'timestamp': timestamp,
                    'datetime': _this85.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker[baseVolume]),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this86 = this,
                _arguments67 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments67.length > 1 && _arguments67[1] !== undefined ? _arguments67[1] : {};
                market = _this86.market(symbol);
                return _this86.publicGetPairTrades(_this86.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this86.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                base,
                result,
                _this87 = this,
                _arguments68 = arguments;

            price = _arguments68.length > 4 && _arguments68[4] !== undefined ? _arguments68[4] : undefined;
            params = _arguments68.length > 5 && _arguments68[5] !== undefined ? _arguments68[5] : {};
            market = _this87.market(symbol);
            order = {
                'pair': market['id'],
                'type': side,
                'price': price
            };
            base = market['base'].toLowerCase();

            order[base] = amount;
            result = _this87.privatePostTrade(_this87.extend(order, params));

            return {
                'info': result,
                'id': result['return']['order_id'].toString()
            };
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this88 = this,
                _arguments69 = arguments;

            params = _arguments69.length > 1 && _arguments69[1] !== undefined ? _arguments69[1] : {};

            return _this88.privatePostCancelOrder(_this88.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                response,
                _this89 = this,
                _arguments70 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments70.length > 1 && _arguments70[1] !== undefined ? _arguments70[1] : 'public';
                method = _arguments70.length > 2 && _arguments70[2] !== undefined ? _arguments70[2] : 'GET';
                params = _arguments70.length > 3 && _arguments70[3] !== undefined ? _arguments70[3] : {};
                headers = _arguments70.length > 4 && _arguments70[4] !== undefined ? _arguments70[4] : undefined;
                body = _arguments70.length > 5 && _arguments70[5] !== undefined ? _arguments70[5] : undefined;
                url = _this89.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this89.implodeParams(path, params);
                } else {
                    body = _this89.urlencode(_this89.extend({
                        'method': path,
                        'nonce': _this89.nonce()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this89.apiKey,
                        'Sign': _this89.hmac(_this89.encode(body), _this89.encode(_this89.secret), 'sha512')
                    };
                }
                return _this89.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this89.id + ' ' + response['error']);
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex = {

        'id': 'bitfinex',
        'name': 'Bitfinex',
        'countries': 'US',
        'version': 'v1',
        'rateLimit': 1500,
        'hasFetchTickers': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v1/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['book/{symbol}',
                // 'candles/{symbol}',
                'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'today', 'trades/{symbol}']
            },
            'private': {
                'post': ['account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'mytrades_funding', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'offers/hist', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'orders/hist', 'position/claim', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                _this90 = this;

            return Promise.resolve().then(function () {
                return _this90.publicGetSymbolsDetails();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'].toUpperCase();
                    baseId = id.slice(0, 3);
                    quoteId = id.slice(3, 6);
                    base = baseId;
                    quote = quoteId;
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                i,
                balance,
                currency,
                uppercase,
                account,
                _this91 = this;

            return Promise.resolve().then(function () {
                return _this91.loadMarkets();
            }).then(function () {
                return _this91.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];

                    if (balance['type'] == 'exchange') {
                        currency = balance['currency'];
                        uppercase = currency.toUpperCase();
                        // issue #4 Bitfinex names dash as dsh

                        if (uppercase == 'DSH') {
                            uppercase = 'DASH';
                        }account = _this91.account();

                        account['free'] = parseFloat(balance['available']);
                        account['total'] = parseFloat(balance['amount']);
                        account['used'] = account['total'] - account['free'];
                        result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this92 = this,
                _arguments73 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments73.length > 1 && _arguments73[1] !== undefined ? _arguments73[1] : {};
                return _this92.loadMarkets();
            }).then(function () {
                return _this92.publicGetBookSymbol(_this92.extend({
                    'symbol': _this92.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this92.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this93 = this;

            return Promise.resolve().then(function () {
                return _this93.loadMarkets();
            }).then(function () {
                return _this93.publicGetPubtickerSymbol({
                    'symbol': _this93.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseFloat(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this93.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['mid']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestamp'] * 1000;
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this94 = this,
                _arguments75 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments75.length > 1 && _arguments75[1] !== undefined ? _arguments75[1] : {};
                return _this94.loadMarkets();
            }).then(function () {
                market = _this94.market(symbol);
                return _this94.publicGetTradesSymbol(_this94.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this94.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                result,
                _this95 = this,
                _arguments76 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments76.length > 4 && _arguments76[4] !== undefined ? _arguments76[4] : undefined;
                params = _arguments76.length > 5 && _arguments76[5] !== undefined ? _arguments76[5] : {};
                return _this95.loadMarkets();
            }).then(function () {
                orderType = type;

                if (type == 'limit' || type == 'market') {
                    orderType = 'exchange ' + type;
                }order = {
                    'symbol': _this95.marketId(symbol),
                    'amount': amount.toString(),
                    'side': side,
                    'type': orderType,
                    'ocoorder': false,
                    'buy_price_oco': 0,
                    'sell_price_oco': 0
                };

                if (type == 'market') {
                    order['price'] = _this95.nonce().toString();
                } else {
                    order['price'] = price.toString();
                }
                return _this95.privatePostOrderNew(_this95.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this96 = this;

            return Promise.resolve().then(function () {
                return _this96.loadMarkets();
            }).then(function () {
                return _this96.privatePostOrderCancel({ 'order_id': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = order['side'];
            var open = order['is_live'];
            var canceled = order['is_cancelled'];
            var status = undefined;
            if (open) {
                status = 'open';
            } else if (canceled) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var _exchange = order['symbol'].toUpperCase();
                if (_exchange in this.markets_by_id) {
                    market = this.markets_by_id[_exchange];
                    symbol = market['symbol'];
                }
            }
            var orderType = order['type'];
            var exchange = orderType.indexOf('exchange ') >= 0;
            if (exchange) {
                var _order$type$split = order['type'].split(' '),
                    _order$type$split2 = _slicedToArray(_order$type$split, 2),
                    prefix = _order$type$split2[0],
                    _orderType = _order$type$split2[1];
            }
            var timestamp = order['timestamp'] * 1000;
            var result = {
                'info': order,
                'id': order['id'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': orderType,
                'side': side,
                'price': parseFloat(order['price']),
                'amount': parseFloat(order['original_amount']),
                'remaining': parseFloat(order['remaining_amount']),
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                response,
                _this97 = this,
                _arguments78 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments78.length > 1 && _arguments78[1] !== undefined ? _arguments78[1] : {};
                return _this97.loadMarkets();
            }).then(function () {
                return _this97.privatePostOrderStatus(_this97.extend({
                    'order_id': parseInt(id)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this97.parseOrder(response);
            });
        },
        getCurrencyName: function getCurrencyName(currency) {
            if (currency == 'BTC') {
                return 'bitcoin';
            } else if (currency == 'LTC') {
                return 'litecoin';
            } else if (currency == 'ETH') {
                return 'ethereum';
            } else if (currency == 'ETC') {
                return 'ethereumc';
            } else if (currency == 'OMNI') {
                return 'mastercoin'; // ???
            } else if (currency == 'ZEC') {
                return 'zcash';
            } else if (currency == 'XMR') {
                return 'monero';
            } else if (currency == 'USD') {
                return 'wire';
            } else if (currency == 'DASH') {
                return 'dash';
            } else if (currency == 'XRP') {
                return 'ripple';
            } else if (currency == 'EOS') {
                return 'eos';
            }
            throw new NotSupported(this.id + ' ' + currency + ' not supported for withdrawal');
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                name,
                response,
                _this98 = this,
                _arguments79 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments79.length > 3 && _arguments79[3] !== undefined ? _arguments79[3] : {};
                return _this98.loadMarkets();
            }).then(function () {
                name = _this98.getCurrencyName(currency);
                return _this98.privatePostWithdraw(_this98.extend({
                    'withdraw_type': name,
                    'walletselected': 'exchange',
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['withdrawal_id']
                };
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                payload,
                secret,
                signature,
                response,
                _this99 = this,
                _arguments80 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments80.length > 1 && _arguments80[1] !== undefined ? _arguments80[1] : 'public';
                method = _arguments80.length > 2 && _arguments80[2] !== undefined ? _arguments80[2] : 'GET';
                params = _arguments80.length > 3 && _arguments80[3] !== undefined ? _arguments80[3] : {};
                headers = _arguments80.length > 4 && _arguments80[4] !== undefined ? _arguments80[4] : undefined;
                body = _arguments80.length > 5 && _arguments80[5] !== undefined ? _arguments80[5] : undefined;
                request = '/' + _this99.version + '/' + _this99.implodeParams(path, params);
                query = _this99.omit(params, _this99.extractParams(path));
                url = _this99.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this99.urlencode(query);
                    }
                } else {
                    nonce = _this99.nonce();

                    query = _this99.extend({
                        'nonce': nonce.toString(),
                        'request': request
                    }, query);
                    query = _this99.json(query);
                    query = _this99.encode(query);
                    payload = _this99.stringToBase64(query);
                    secret = _this99.encode(_this99.secret);
                    signature = _this99.hmac(payload, secret, 'sha384');

                    headers = {
                        'X-BFX-APIKEY': _this99.apiKey,
                        'X-BFX-PAYLOAD': _this99.decode(payload),
                        'X-BFX-SIGNATURE': signature
                    };
                }
                return _this99.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    if (response['message'].indexOf('not enough exchange balance') >= 0) {
                        throw new InsufficientFunds(_this99.id + ' ' + _this99.json(response));
                    }throw new ExchangeError(_this99.id + ' ' + _this99.json(response));
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex2 = extend(bitfinex, {

        'id': 'bitfinex2',
        'name': 'Bitfinex v2',
        'countries': 'US',
        'version': 'v2',
        'hasFetchTickers': false, // true but at least one pair is required
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '5m': '5m',
            '15m': '15m',
            '30m': '30m',
            '1h': '1h',
            '3h': '3h',
            '6h': '6h',
            '12h': '12h',
            '1d': '1D',
            '1w': '7D',
            '2w': '14D',
            '1M': '1M'
        },
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v2/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['platform/status', 'tickers', // replies with an empty list :\
                'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'symbols_details', 'stats1/{key}:{size}:{symbol}/{side}/{section}', 'stats1/{key}:{size}:{symbol}/long/last', 'stats1/{key}:{size}:{symbol}/long/hist', 'stats1/{key}:{size}:{symbol}/short/last', 'stats1/{key}:{size}:{symbol}/short/hist', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist'],
                'post': ['calc/trade/avg']
            },
            'private': {
                'post': ['auth/r/wallets', 'auth/r/orders/{symbol}', 'auth/r/orders/{symbol}/new', 'auth/r/orders/{symbol}/hist', 'auth/r/order/{symbol}:{id}/trades', 'auth/r/trades/{symbol}/hist', 'auth/r/funding/offers/{symbol}', 'auth/r/funding/offers/{symbol}/hist', 'auth/r/funding/loans/{symbol}', 'auth/r/funding/loans/{symbol}/hist', 'auth/r/funding/credits/{symbol}', 'auth/r/funding/credits/{symbol}/hist', 'auth/r/funding/trades/{symbol}/hist', 'auth/r/info/margin/{key}', 'auth/r/info/funding/{key}', 'auth/r/movements/{currency}/hist', 'auth/r/stats/perf:{timeframe}/hist', 'auth/r/alerts', 'auth/w/alert/set', 'auth/w/alert/{type}:{symbol}:{price}/del', 'auth/calc/order/avail']
            }
        },
        'markets': {
            'BCC/BTC': { 'id': 'tBCCBTC', 'symbol': 'BCC/BTC', 'base': 'BCC', 'quote': 'BTC' },
            'BCC/USD': { 'id': 'tBCCUSD', 'symbol': 'BCC/USD', 'base': 'BCC', 'quote': 'USD' },
            'BCH/BTC': { 'id': 'tBCHBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
            'BCH/ETH': { 'id': 'tBCHETH', 'symbol': 'BCH/ETH', 'base': 'BCH', 'quote': 'ETH' },
            'BCH/USD': { 'id': 'tBCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD' },
            'BCU/BTC': { 'id': 'tBCUBTC', 'symbol': 'BCU/BTC', 'base': 'BCU', 'quote': 'BTC' },
            'BCU/USD': { 'id': 'tBCUUSD', 'symbol': 'BCU/USD', 'base': 'BCU', 'quote': 'USD' },
            'BTC/USD': { 'id': 'tBTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'DASH/BTC': { 'id': 'tDSHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },
            'DASH/USD': { 'id': 'tDSHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD' },
            'EOS/BTC': { 'id': 'tEOSBTC', 'symbol': 'EOS/BTC', 'base': 'EOS', 'quote': 'BTC' },
            'EOS/ETH': { 'id': 'tEOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },
            'EOS/USD': { 'id': 'tEOSUSD', 'symbol': 'EOS/USD', 'base': 'EOS', 'quote': 'USD' },
            'ETC/BTC': { 'id': 'tETCBTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'ETC/USD': { 'id': 'tETCUSD', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'tETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'tETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'IOT/BTC': { 'id': 'tIOTBTC', 'symbol': 'IOT/BTC', 'base': 'IOT', 'quote': 'BTC' },
            'IOT/ETH': { 'id': 'tIOTETH', 'symbol': 'IOT/ETH', 'base': 'IOT', 'quote': 'ETH' },
            'IOT/USD': { 'id': 'tIOTUSD', 'symbol': 'IOT/USD', 'base': 'IOT', 'quote': 'USD' },
            'LTC/BTC': { 'id': 'tLTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'tLTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'OMG/BTC': { 'id': 'tOMGBTC', 'symbol': 'OMG/BTC', 'base': 'OMG', 'quote': 'BTC' },
            'OMG/ETH': { 'id': 'tOMGETH', 'symbol': 'OMG/ETH', 'base': 'OMG', 'quote': 'ETH' },
            'OMG/USD': { 'id': 'tOMGUSD', 'symbol': 'OMG/USD', 'base': 'OMG', 'quote': 'USD' },
            'RRT/BTC': { 'id': 'tRRTBTC', 'symbol': 'RRT/BTC', 'base': 'RRT', 'quote': 'BTC' },
            'RRT/USD': { 'id': 'tRRTUSD', 'symbol': 'RRT/USD', 'base': 'RRT', 'quote': 'USD' },
            'SAN/BTC': { 'id': 'tSANBTC', 'symbol': 'SAN/BTC', 'base': 'SAN', 'quote': 'BTC' },
            'SAN/ETH': { 'id': 'tSANETH', 'symbol': 'SAN/ETH', 'base': 'SAN', 'quote': 'ETH' },
            'SAN/USD': { 'id': 'tSANUSD', 'symbol': 'SAN/USD', 'base': 'SAN', 'quote': 'USD' },
            'XMR/BTC': { 'id': 'tXMRBTC', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'XMR/USD': { 'id': 'tXMRUSD', 'symbol': 'XMR/USD', 'base': 'XMR', 'quote': 'USD' },
            'XRP/BTC': { 'id': 'tXRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'XRP/USD': { 'id': 'tXRPUSD', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'ZEC/BTC': { 'id': 'tZECBTC', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'ZEC/USD': { 'id': 'tZECUSD', 'symbol': 'ZEC/USD', 'base': 'ZEC', 'quote': 'USD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                b,
                balance,
                _balance,
                type,
                currency,
                total,
                interest,
                available,
                uppercase,
                account,
                _this100 = this,
                _arguments81 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments81.length > 0 && _arguments81[0] !== undefined ? _arguments81[0] : {};
                return _this100.privatePostAuthRWallets();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    _balance = _slicedToArray(balance, 5);
                    type = _balance[0];
                    currency = _balance[1];
                    total = _balance[2];
                    interest = _balance[3];
                    available = _balance[4];

                    if (currency[0] == 't') {
                        currency = currency.slice(1);
                    }uppercase = currency.toUpperCase();
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = _this100.account();

                    account['free'] = available;
                    account['total'] = total;
                    if (account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                result,
                i,
                order,
                _order,
                _timestamp,
                price,
                amount,
                side,
                _this101 = this,
                _arguments82 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments82.length > 1 && _arguments82[1] !== undefined ? _arguments82[1] : {};
                return _this101.publicGetBookSymbolPrecision(_this101.extend({
                    'symbol': _this101.marketId(symbol),
                    'precision': 'R0'
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this101.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this101.iso8601(timestamp)
                };

                for (i = 0; i < orderbook.length; i++) {
                    order = orderbook[i];
                    _order = _slicedToArray(order, 3);
                    _timestamp = _order[0];
                    price = _order[1];
                    amount = _order[2];
                    side = amount > 0 ? 'bids' : 'asks';

                    amount = Math.abs(amount);
                    result[side].push([price, amount, _timestamp]);
                }
                result['bids'] = _this101.sortBy(result['bids'], 0, true);
                result['asks'] = _this101.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _ticker,
                bid,
                bidSize,
                ask,
                askSize,
                change,
                percentage,
                last,
                volume,
                high,
                low,
                _this102 = this;

            return Promise.resolve().then(function () {
                return _this102.publicGetTickerSymbol({
                    'symbol': _this102.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this102.milliseconds();
                _ticker = _slicedToArray(ticker, 10);
                bid = _ticker[0];
                bidSize = _ticker[1];
                ask = _ticker[2];
                askSize = _ticker[3];
                change = _ticker[4];
                percentage = _ticker[5];
                last = _ticker[6];
                volume = _ticker[7];
                high = _ticker[8];
                low = _ticker[9];

                return {
                    'timestamp': timestamp,
                    'datetime': _this102.iso8601(timestamp),
                    'high': high,
                    'low': low,
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': change,
                    'percentage': percentage,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var _trade = _slicedToArray(trade, 4),
                id = _trade[0],
                timestamp = _trade[1],
                amount = _trade[2],
                price = _trade[3];

            var side = amount < 0 ? 'sell' : 'buy';
            return {
                'id': id.toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': price,
                'amount': amount
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this103 = this,
                _arguments84 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments84.length > 1 && _arguments84[1] !== undefined ? _arguments84[1] : {};
                market = _this103.market(symbol);
                return _this103.publicGetTradesSymbolHist(_this103.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this103.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this104 = this,
                _arguments85 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments85.length > 1 && _arguments85[1] !== undefined ? _arguments85[1] : '1m';
                since = _arguments85.length > 2 && _arguments85[2] !== undefined ? _arguments85[2] : undefined;
                limit = _arguments85.length > 3 && _arguments85[3] !== undefined ? _arguments85[3] : undefined;
                params = _arguments85.length > 4 && _arguments85[4] !== undefined ? _arguments85[4] : {};
                market = _this104.market(symbol);
                request = {
                    'symbol': market['id'],
                    'timeframe': _this104.timeframes[timeframe]
                };

                if (limit) {
                    request['limit'] = limit;
                }if (since) {
                    request['start'] = since;
                }request = _this104.extend(request, params);
                return _this104.publicGetCandlesTradeTimeframeSymbolHist(request);
            }).then(function (_resp) {
                response = _resp;

                return _this104.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                _this105 = this,
                _arguments86 = arguments;

            price = _arguments86.length > 4 && _arguments86[4] !== undefined ? _arguments86[4] : undefined;
            params = _arguments86.length > 5 && _arguments86[5] !== undefined ? _arguments86[5] : {};
            market = _this105.market(symbol);

            throw new NotSupported(_this105.id + ' createOrder not implemented yet');
        },
        cancelOrder: function cancelOrder(id) {
            var _this106 = this;

            throw new NotSupported(_this106.id + ' cancelOrder not implemented yet');
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                _this107 = this,
                _arguments88 = arguments;

            params = _arguments88.length > 1 && _arguments88[1] !== undefined ? _arguments88[1] : {};

            throw new NotSupported(_this107.id + ' fetchOrder not implemented yet');
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                _this108 = this,
                _arguments89 = arguments;

            params = _arguments89.length > 3 && _arguments89[3] !== undefined ? _arguments89[3] : {};

            throw new NotSupported(_this108.id + ' withdraw not implemented yet');
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                auth,
                signature,
                response,
                _this109 = this,
                _arguments90 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments90.length > 1 && _arguments90[1] !== undefined ? _arguments90[1] : 'public';
                method = _arguments90.length > 2 && _arguments90[2] !== undefined ? _arguments90[2] : 'GET';
                params = _arguments90.length > 3 && _arguments90[3] !== undefined ? _arguments90[3] : {};
                headers = _arguments90.length > 4 && _arguments90[4] !== undefined ? _arguments90[4] : undefined;
                body = _arguments90.length > 5 && _arguments90[5] !== undefined ? _arguments90[5] : undefined;
                request = _this109.version + '/' + _this109.implodeParams(path, params);
                query = _this109.omit(params, _this109.extractParams(path));
                url = _this109.urls['api'] + '/' + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this109.urlencode(query);
                    }
                } else {
                    nonce = _this109.nonce().toString();

                    body = _this109.json(query);
                    auth = '/api' + '/' + request + nonce + body;
                    signature = _this109.hmac(_this109.encode(auth), _this109.encode(_this109.secret), 'sha384');

                    headers = {
                        'bfx-nonce': nonce,
                        'bfx-apikey': _this109.apiKey,
                        'bfx-signature': signature,
                        'Content-Type': 'application/json'
                    };
                }
                return _this109.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    if (response['message'].indexOf('not enough exchange balance') >= 0) {
                        throw new InsufficientFunds(_this109.id + ' ' + _this109.json(response));
                    }throw new ExchangeError(_this109.id + ' ' + _this109.json(response));
                }
                return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var bitflyer = {

        'id': 'bitflyer',
        'name': 'bitFlyer',
        'countries': 'JP',
        'version': 'v1',
        'rateLimit': 500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
            'api': 'https://api.bitflyer.jp',
            'www': 'https://bitflyer.jp',
            'doc': 'https://bitflyer.jp/API'
        },
        'api': {
            'public': {
                'get': ['getmarkets', // or 'markets'
                'getboard', // or 'board'
                'getticker', // or 'ticker'
                'getexecutions', // or 'executions'
                'gethealth', 'getchats']
            },
            'private': {
                'get': ['getpermissions', 'getbalance', 'getcollateral', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],
                'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                currencies,
                base,
                quote,
                symbol,
                numCurrencies,
                _this110 = this;

            return Promise.resolve().then(function () {
                return _this110.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['product_code'];
                    currencies = id.split('_');
                    base = undefined;
                    quote = undefined;
                    symbol = id;
                    numCurrencies = currencies.length;

                    if (numCurrencies == 2) {
                        base = currencies[0];
                        quote = currencies[1];
                        symbol = base + '/' + quote;
                    }
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                b,
                account,
                currency,
                result,
                c,
                _currency,
                _account,
                _this111 = this,
                _arguments92 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments92.length > 0 && _arguments92[0] !== undefined ? _arguments92[0] : {};
                return _this111.loadMarkets();
            }).then(function () {
                return _this111.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];
                    currency = account['currency_code'];

                    balances[currency] = account;
                }
                result = { 'info': response };

                for (c = 0; c < _this111.currencies.length; c++) {
                    _currency = _this111.currencies[c];
                    _account = _this111.account();

                    if (_currency in balances) {
                        _account['total'] = balances[_currency]['amount'];
                        _account['free'] = balances[_currency]['available'];
                        _account['used'] = _account['total'] - _account['free'];
                    }
                    result[_currency] = _account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this112 = this,
                _arguments93 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments93.length > 1 && _arguments93[1] !== undefined ? _arguments93[1] : {};
                return _this112.loadMarkets();
            }).then(function () {
                return _this112.publicGetBoard(_this112.extend({
                    'product_code': _this112.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this112.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'size');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this113 = this;

            return Promise.resolve().then(function () {
                return _this113.loadMarkets();
            }).then(function () {
                return _this113.publicGetTicker({
                    'product_code': _this113.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this113.parse8601(ticker['timestamp']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this113.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['best_bid']),
                    'ask': parseFloat(ticker['best_ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ltp']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_by_product']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['side'].toLowerCase();
            var order = side + '_child_order_acceptance_id';
            var timestamp = this.parse8601(trade['exec_date']);
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': trade[order],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['size']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this114 = this,
                _arguments95 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments95.length > 1 && _arguments95[1] !== undefined ? _arguments95[1] : {};
                return _this114.loadMarkets();
            }).then(function () {
                market = _this114.market(symbol);
                return _this114.publicGetExecutions(_this114.extend({
                    'product_code': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this114.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this115 = this,
                _arguments96 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments96.length > 4 && _arguments96[4] !== undefined ? _arguments96[4] : undefined;
                params = _arguments96.length > 5 && _arguments96[5] !== undefined ? _arguments96[5] : {};
                return _this115.loadMarkets();
            }).then(function () {
                order = {
                    'product_code': _this115.marketId(symbol),
                    'child_order_type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'price': price,
                    'size': amount
                };
                return _this115.privatePostSendchildorder(_this115.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['child_order_acceptance_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this116 = this,
                _arguments97 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments97.length > 1 && _arguments97[1] !== undefined ? _arguments97[1] : {};
                return _this116.loadMarkets();
            }).then(function () {
                return _this116.privatePostCancelchildorder(_this116.extend({
                    'parent_order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                nonce,
                auth,
                _this117 = this,
                _arguments98 = arguments;

            api = _arguments98.length > 1 && _arguments98[1] !== undefined ? _arguments98[1] : 'public';
            method = _arguments98.length > 2 && _arguments98[2] !== undefined ? _arguments98[2] : 'GET';
            params = _arguments98.length > 3 && _arguments98[3] !== undefined ? _arguments98[3] : {};
            headers = _arguments98.length > 4 && _arguments98[4] !== undefined ? _arguments98[4] : undefined;
            body = _arguments98.length > 5 && _arguments98[5] !== undefined ? _arguments98[5] : undefined;
            request = '/' + _this117.version + '/';

            if (api == 'private') {
                request += 'me/';
            }request += path;
            url = _this117.urls['api'] + request;

            if (api == 'public') {
                if (Object.keys(params).length) {
                    url += '?' + _this117.urlencode(params);
                }
            } else {
                nonce = _this117.nonce().toString();

                body = _this117.json(params);
                auth = [nonce, method, request, body].join('');

                headers = {
                    'ACCESS-KEY': _this117.apiKey,
                    'ACCESS-TIMESTAMP': nonce,
                    'ACCESS-SIGN': _this117.hmac(_this117.encode(auth), _this117.secret),
                    'Content-Type': 'application/json'
                };
            }
            return _this117.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitlish = {

        'id': 'bitlish',
        'name': 'bitlish',
        'countries': ['GB', 'EU', 'RU'],
        'rateLimit': 1500,
        'version': 'v1',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',
            'api': 'https://bitlish.com/api',
            'www': 'https://bitlish.com',
            'doc': 'https://bitlish.com/api'
        },
        'api': {
            'public': {
                'get': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history'],
                'post': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history']
            },
            'private': {
                'post': ['accounts_operations', 'balance', 'cancel_trade', 'cancel_trades_by_ids', 'cancel_all_trades', 'create_bcode', 'create_template_wallet', 'create_trade', 'deposit', 'list_accounts_operations_from_ts', 'list_active_trades', 'list_bcodes', 'list_my_matches_from_ts', 'list_my_trades', 'list_my_trads_from_ts', 'list_payment_methods', 'list_payments', 'redeem_code', 'resign', 'signin', 'signout', 'trade_details', 'trade_options', 'withdraw', 'withdraw_by_id']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                market,
                id,
                symbol,
                _symbol$split,
                _symbol$split2,
                base,
                quote,
                _this118 = this;

            return Promise.resolve().then(function () {
                return _this118.publicGetPairs();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split = symbol.split('/');
                    _symbol$split2 = _slicedToArray(_symbol$split, 2);
                    base = _symbol$split2[0];
                    quote = _symbol$split2[1];
                    // issue #4 bitlish names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['max']),
                'low': parseFloat(ticker['min']),
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': parseFloat(ticker['first']),
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this119 = this;

            return Promise.resolve().then(function () {
                return _this119.loadMarkets();
            }).then(function () {
                return _this119.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this119.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this119.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                _this120 = this;

            return Promise.resolve().then(function () {
                return _this120.loadMarkets();
            }).then(function () {
                market = _this120.market(symbol);
                return _this120.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];

                return _this120.parseTicker(ticker, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                now,
                start,
                interval,
                _this121 = this,
                _arguments102 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments102.length > 1 && _arguments102[1] !== undefined ? _arguments102[1] : '1m';
                since = _arguments102.length > 2 && _arguments102[2] !== undefined ? _arguments102[2] : undefined;
                limit = _arguments102.length > 3 && _arguments102[3] !== undefined ? _arguments102[3] : undefined;
                params = _arguments102.length > 4 && _arguments102[4] !== undefined ? _arguments102[4] : {};
                return _this121.loadMarkets();
            }).then(function () {
                market = _this121.market(symbol);
                now = _this121.seconds();
                start = now - 86400 * 30; // last 30 days

                interval = [start.toString(), undefined];

                return _this121.publicPostOhlcv(_this121.extend({
                    'time_range': interval
                }, params));
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this122 = this,
                _arguments103 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments103.length > 1 && _arguments103[1] !== undefined ? _arguments103[1] : {};
                return _this122.loadMarkets();
            }).then(function () {
                return _this122.publicGetTradesDepth(_this122.extend({
                    'pair_id': _this122.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(parseInt(orderbook['last']) / 1000);

                return _this122.parseOrderBook(orderbook, timestamp, 'bid', 'ask', 'price', 'volume');
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['dir'] == 'bid' ? 'buy' : 'sell';
            var symbol = undefined;
            var timestamp = parseInt(trade['created'] / 1000);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this123 = this,
                _arguments104 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments104.length > 1 && _arguments104[1] !== undefined ? _arguments104[1] : {};
                return _this123.loadMarkets();
            }).then(function () {
                market = _this123.market(symbol);
                return _this123.publicGetTradesHistory(_this123.extend({
                    'pair_id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this123.parseTrades(response['list'], market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                currencies,
                balance,
                c,
                currency,
                account,
                _c,
                _currency2,
                _account2,
                _this124 = this,
                _arguments105 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments105.length > 0 && _arguments105[0] !== undefined ? _arguments105[0] : {};
                return _this124.loadMarkets();
            }).then(function () {
                return _this124.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                currencies = Object.keys(response);
                balance = {};

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = response[currency];

                    currency = currency.toUpperCase();
                    // issue #4 bitlish names Dash as DSH, instead of DASH
                    if (currency == 'DSH') {
                        currency = 'DASH';
                    }balance[currency] = account;
                }
                for (_c = 0; _c < _this124.currencies.length; _c++) {
                    _currency2 = _this124.currencies[_c];
                    _account2 = _this124.account();

                    if (_currency2 in balance) {
                        _account2['free'] = parseFloat(balance[_currency2]['funds']);
                        _account2['used'] = parseFloat(balance[_currency2]['holded']);
                        _account2['total'] = _this124.sum(_account2['free'], _account2['used']);
                    }
                    result[_currency2] = _account2;
                }
                return result;
            });
        },
        signIn: function signIn() {
            return this.privatePostSignin({
                'login': this.login,
                'passwd': this.password
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                result,
                _this125 = this,
                _arguments106 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments106.length > 4 && _arguments106[4] !== undefined ? _arguments106[4] : undefined;
                params = _arguments106.length > 5 && _arguments106[5] !== undefined ? _arguments106[5] : {};
                return _this125.loadMarkets();
            }).then(function () {
                order = {
                    'pair_id': _this125.marketId(symbol),
                    'dir': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this125.privatePostCreateTrade(_this125.extend(order, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this126 = this;

            return Promise.resolve().then(function () {
                return _this126.loadMarkets();
            }).then(function () {
                return _this126.privatePostCancelTrade({ 'id': id });
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (api == 'public') {
                if (method == 'GET') {
                    if (Object.keys(params).length) url += '?' + this.urlencode(params);
                } else {
                    body = this.json(params);
                    headers = { 'Content-Type': 'application/json' };
                }
            } else {
                body = this.json(this.extend({ 'token': this.apiKey }, params));
                headers = { 'Content-Type': 'application/json' };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmarket = {

        'id': 'bitmarket',
        'name': 'BitMarket',
        'countries': ['PL', 'EU'],
        'rateLimit': 1500,
        'hasFetchOHLCV': true,
        'timeframes': {
            '90m': '90m',
            '6h': '6h',
            '1d': '1d',
            '1w': '7d',
            '1M': '1m',
            '3M': '3m',
            '6M': '6m',
            '1y': '1y'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',
            'api': {
                'public': 'https://www.bitmarket.net',
                'private': 'https://www.bitmarket.pl/api2/' // last slash is critical
            },
            'www': ['https://www.bitmarket.pl', 'https://www.bitmarket.net'],
            'doc': ['https://www.bitmarket.net/docs.php?file=api_public.html', 'https://www.bitmarket.net/docs.php?file=api_private.html', 'https://github.com/bitmarket-net/api']
        },
        'api': {
            'public': {
                'get': ['json/{market}/ticker', 'json/{market}/orderbook', 'json/{market}/trades', 'json/ctransfer', 'graphs/{market}/90m', 'graphs/{market}/6h', 'graphs/{market}/1d', 'graphs/{market}/7d', 'graphs/{market}/1m', 'graphs/{market}/3m', 'graphs/{market}/6m', 'graphs/{market}/1y']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orders', 'trades', 'history', 'withdrawals', 'tradingdesk', 'tradingdeskStatus', 'tradingdeskConfirm', 'cryptotradingdesk', 'cryptotradingdeskStatus', 'cryptotradingdeskConfirm', 'withdraw', 'withdrawFiat', 'withdrawPLNPP', 'withdrawFiatFast', 'deposit', 'transfer', 'transfers', 'marginList', 'marginOpen', 'marginClose', 'marginCancel', 'marginModify', 'marginBalanceAdd', 'marginBalanceRemove', 'swapList', 'swapOpen', 'swapClose']
            }
        },
        'markets': {
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' },
            'PlnX/BTC': { 'id': 'PlnxBTC', 'symbol': 'PlnX/BTC', 'base': 'PlnX', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this127 = this,
                _arguments108 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments108.length > 0 && _arguments108[0] !== undefined ? _arguments108[0] : {};
                return _this127.loadMarkets();
            }).then(function () {
                return _this127.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['balances'];
                result = { 'info': data };

                for (c = 0; c < _this127.currencies.length; c++) {
                    currency = _this127.currencies[c];
                    account = _this127.account();

                    if (currency in balance['available']) {
                        account['free'] = balance['available'][currency];
                    }if (currency in balance['blocked']) {
                        account['used'] = balance['blocked'][currency];
                    }account['total'] = _this127.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this128 = this,
                _arguments109 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments109.length > 1 && _arguments109[1] !== undefined ? _arguments109[1] : {};
                return _this128.publicGetJsonMarketOrderbook(_this128.extend({
                    'market': _this128.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this128.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this128.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this129 = this;

            return Promise.resolve().then(function () {
                return _this129.publicGetJsonMarketTicker({
                    'market': _this129.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this129.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this129.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this130 = this,
                _arguments111 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments111.length > 1 && _arguments111[1] !== undefined ? _arguments111[1] : {};
                market = _this130.market(symbol);
                return _this130.publicGetJsonMarketTrades(_this130.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this130.parseTrades(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '90m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv['time'] * 1000, parseFloat(ohlcv['open']), parseFloat(ohlcv['high']), parseFloat(ohlcv['low']), parseFloat(ohlcv['close']), parseFloat(ohlcv['vol'])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                method,
                market,
                response,
                _this131 = this,
                _arguments112 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments112.length > 1 && _arguments112[1] !== undefined ? _arguments112[1] : '90m';
                since = _arguments112.length > 2 && _arguments112[2] !== undefined ? _arguments112[2] : undefined;
                limit = _arguments112.length > 3 && _arguments112[3] !== undefined ? _arguments112[3] : undefined;
                params = _arguments112.length > 4 && _arguments112[4] !== undefined ? _arguments112[4] : {};
                return _this131.loadMarkets();
            }).then(function () {
                method = 'publicGetGraphsMarket' + _this131.timeframes[timeframe];
                market = _this131.market(symbol);
                return _this131[method](_this131.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this131.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                result,
                _this132 = this,
                _arguments113 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments113.length > 4 && _arguments113[4] !== undefined ? _arguments113[4] : undefined;
                params = _arguments113.length > 5 && _arguments113[5] !== undefined ? _arguments113[5] : {};
                return _this132.privatePostTrade(_this132.extend({
                    'market': _this132.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response
                };

                if ('id' in response['order']) {
                    result['id'] = response['id'];
                }return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this133 = this;

            return _this133.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api];
            if (api == 'public') {
                url += '/' + this.implodeParams(path + '.json', params);
            } else {
                var nonce = this.nonce();
                var query = this.extend({
                    'tonce': nonce,
                    'method': path
                }, params);
                body = this.urlencode(query);
                headers = {
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmex = {

        'id': 'bitmex',
        'name': 'BitMEX',
        'countries': 'SC', // Seychelles
        'version': 'v1',
        'rateLimit': 1500,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '5m': '5m',
            '1h': '1h',
            '1d': '1d'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
            'api': 'https://www.bitmex.com',
            'www': 'https://www.bitmex.com',
            'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http']
        },
        'api': {
            'public': {
                'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']
            },
            'private': {
                'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],
                'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],
                'put': ['order', 'order/bulk', 'user'],
                'delete': ['apiKey', 'order', 'order/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                isFuturesContract,
                symbol,
                _this134 = this;

            return Promise.resolve().then(function () {
                return _this134.publicGetInstrumentActive();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    base = market['underlying'];
                    quote = market['quoteCurrency'];
                    isFuturesContract = id != base + quote;

                    base = _this134.commonCurrencyCode(base);
                    quote = _this134.commonCurrencyCode(quote);
                    symbol = isFuturesContract ? id : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                b,
                balance,
                currency,
                account,
                _this135 = this,
                _arguments116 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments116.length > 0 && _arguments116[0] !== undefined ? _arguments116[0] : {};
                return _this135.loadMarkets();
            }).then(function () {
                return _this135.privateGetUserMargin({ 'currency': 'all' });
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    currency = balance['currency'].toUpperCase();

                    currency = _this135.commonCurrencyCode(currency);
                    account = {
                        'free': balance['availableMargin'],
                        'used': 0.0,
                        'total': balance['amount']
                    };

                    if (currency == 'BTC') {
                        account['free'] = account['free'] * 0.00000001;
                        account['total'] = account['total'] * 0.00000001;
                    }
                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                result,
                o,
                order,
                side,
                amount,
                price,
                _this136 = this,
                _arguments117 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments117.length > 1 && _arguments117[1] !== undefined ? _arguments117[1] : {};
                return _this136.loadMarkets();
            }).then(function () {
                return _this136.publicGetOrderBookL2(_this136.extend({
                    'symbol': _this136.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this136.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this136.iso8601(timestamp)
                };

                for (o = 0; o < orderbook.length; o++) {
                    order = orderbook[o];
                    side = order['side'] == 'Sell' ? 'asks' : 'bids';
                    amount = order['size'];
                    price = order['price'];

                    result[side].push([price, amount]);
                }
                result['bids'] = _this136.sortBy(result['bids'], 0, true);
                result['asks'] = _this136.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var request,
                quotes,
                quotesLength,
                quote,
                tickers,
                ticker,
                timestamp,
                _this137 = this;

            return Promise.resolve().then(function () {
                return _this137.loadMarkets();
            }).then(function () {
                request = {
                    'symbol': _this137.marketId(symbol),
                    'binSize': '1d',
                    'partial': true,
                    'count': 1,
                    'reverse': true
                };
                return _this137.publicGetQuoteBucketed(request);
            }).then(function (_resp) {
                quotes = _resp;
                quotesLength = quotes.length;
                quote = quotes[quotesLength - 1];
                return _this137.publicGetTradeBucketed(request);
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[0];
                timestamp = _this137.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this137.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(quote['bidPrice']),
                    'ask': parseFloat(quote['askPrice']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['homeNotional']),
                    'quoteVolume': parseFloat(ticker['foreignNotional']),
                    'info': ticker
                };
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var timestamp = this.parse8601(ohlcv['timestamp']);
            return [timestamp, ohlcv['open'], ohlcv['high'], ohlcv['low'], ohlcv['close'], ohlcv['volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                filter,
                market,
                request,
                response,
                _this138 = this,
                _arguments119 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments119.length > 1 && _arguments119[1] !== undefined ? _arguments119[1] : '1m';
                since = _arguments119.length > 2 && _arguments119[2] !== undefined ? _arguments119[2] : undefined;
                limit = _arguments119.length > 3 && _arguments119[3] !== undefined ? _arguments119[3] : undefined;
                params = _arguments119.length > 4 && _arguments119[4] !== undefined ? _arguments119[4] : {};
                return _this138.loadMarkets();
            }).then(function () {
                // send JSON key/value pairs, such as {"key": "value"}
                // filter by individual fields and do advanced queries on timestamps
                filter = { 'key': 'value' };
                // send a bare series (e.g. XBU) to nearest expiring contract in that series
                // you can also send a timeframe, e.g. XBU:monthly
                // timeframes: daily, weekly, monthly, quarterly, and biquarterly

                market = _this138.market(symbol);
                request = {
                    'symbol': market['id'],
                    'binSize': _this138.timeframes[timeframe],
                    'partial': true // true == include yet-incomplete current bins
                    // 'filter': filter, // filter by individual fields and do advanced queries
                    // 'columns': [],    // will return all columns if omitted
                    // 'start': 0,       // starting point for results (wtf?)
                    // 'reverse': false, // true == newest first
                    // 'endTime': '',    // ending date filter for results
                };

                if (since) {
                    request['startTime'] = since;
                } // starting date filter for results
                if (limit) {
                    request['count'] = limit;
                } // default 100
                return _this138.publicGetTradeBucketed(_this138.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this138.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['timestamp']);
            var symbol = undefined;
            if (!market) {
                if ('symbol' in trade) market = this.markets_by_id[trade['symbol']];
            }
            return {
                'id': trade['trdMatchID'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['side'].toLowerCase(),
                'price': trade['price'],
                'amount': trade['size']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this139 = this,
                _arguments120 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments120.length > 1 && _arguments120[1] !== undefined ? _arguments120[1] : {};
                return _this139.loadMarkets();
            }).then(function () {
                market = _this139.market(symbol);
                return _this139.publicGetTrade(_this139.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this139.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this140 = this,
                _arguments121 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments121.length > 4 && _arguments121[4] !== undefined ? _arguments121[4] : undefined;
                params = _arguments121.length > 5 && _arguments121[5] !== undefined ? _arguments121[5] : {};
                return _this140.loadMarkets();
            }).then(function () {
                order = {
                    'symbol': _this140.marketId(symbol),
                    'side': _this140.capitalize(side),
                    'orderQty': amount,
                    'ordType': _this140.capitalize(type)
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this140.privatePostOrder(_this140.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this141 = this;

            return Promise.resolve().then(function () {
                return _this141.loadMarkets();
            }).then(function () {
                return _this141.privateDeleteOrder({ 'orderID': id });
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var query = '/api' + '/' + this.version + '/' + path;
            if (Object.keys(params).length) query += '?' + this.urlencode(params);
            var url = this.urls['api'] + query;
            if (api == 'private') {
                var nonce = this.nonce().toString();
                if (method == 'POST') if (Object.keys(params).length) body = this.json(params);
                var request = [method, query, nonce, body || ''].join('');
                headers = {
                    'Content-Type': 'application/json',
                    'api-nonce': nonce,
                    'api-key': this.apiKey,
                    'api-signature': this.hmac(this.encode(request), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitso = {

        'id': 'bitso',
        'name': 'Bitso',
        'countries': 'MX', // Mexico
        'rateLimit': 2000, // 30 requests per minute
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',
            'api': 'https://api.bitso.com',
            'www': 'https://bitso.com',
            'doc': 'https://bitso.com/api_info'
        },
        'api': {
            'public': {
                'get': ['available_books', 'ticker', 'order_book', 'trades']
            },
            'private': {
                'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],
                'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal'],
                'delete': ['orders/{oid}', 'orders/all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split3,
                _symbol$split4,
                base,
                quote,
                _this142 = this;

            return Promise.resolve().then(function () {
                return _this142.publicGetAvailableBooks();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['payload'].length; p++) {
                    market = markets['payload'][p];
                    id = market['book'];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split3 = symbol.split('/');
                    _symbol$split4 = _slicedToArray(_symbol$split3, 2);
                    base = _symbol$split4[0];
                    quote = _symbol$split4[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this143 = this,
                _arguments124 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments124.length > 0 && _arguments124[0] !== undefined ? _arguments124[0] : {};
                return _this143.loadMarkets();
            }).then(function () {
                return _this143.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['payload']['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'].toUpperCase();
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['locked']),
                        'total': parseFloat(balance['total'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                _this144 = this,
                _arguments125 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments125.length > 1 && _arguments125[1] !== undefined ? _arguments125[1] : {};
                return _this144.loadMarkets();
            }).then(function () {
                return _this144.publicGetOrderBook(_this144.extend({
                    'book': _this144.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['payload'];
                timestamp = _this144.parse8601(orderbook['updated_at']);

                return _this144.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this145 = this;

            return Promise.resolve().then(function () {
                return _this145.loadMarkets();
            }).then(function () {
                return _this145.publicGetTicker({
                    'book': _this145.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['payload'];
                timestamp = _this145.parse8601(ticker['created_at']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this145.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['created_at']);
            var symbol = undefined;
            if (!market) {
                if ('book' in trade) market = this.markets_by_id[trade['book']];
            }
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['maker_side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this146 = this,
                _arguments127 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments127.length > 1 && _arguments127[1] !== undefined ? _arguments127[1] : {};
                return _this146.loadMarkets();
            }).then(function () {
                market = _this146.market(symbol);
                return _this146.publicGetTrades(_this146.extend({
                    'book': _this146.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this146.parseTrades(response['payload'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this147 = this,
                _arguments128 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments128.length > 4 && _arguments128[4] !== undefined ? _arguments128[4] : undefined;
                params = _arguments128.length > 5 && _arguments128[5] !== undefined ? _arguments128[5] : {};
                return _this147.loadMarkets();
            }).then(function () {
                order = {
                    'book': _this147.marketId(symbol),
                    'side': side,
                    'type': type,
                    'major': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this147.privatePostOrders(_this147.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['payload']['oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this148 = this;

            return Promise.resolve().then(function () {
                return _this148.loadMarkets();
            }).then(function () {
                return _this148.privateDeleteOrders({ 'oid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                query,
                url,
                nonce,
                request,
                signature,
                auth,
                response,
                _test3,
                _this149 = this,
                _arguments130 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments130.length > 1 && _arguments130[1] !== undefined ? _arguments130[1] : 'public';
                method = _arguments130.length > 2 && _arguments130[2] !== undefined ? _arguments130[2] : 'GET';
                params = _arguments130.length > 3 && _arguments130[3] !== undefined ? _arguments130[3] : {};
                headers = _arguments130.length > 4 && _arguments130[4] !== undefined ? _arguments130[4] : undefined;
                body = _arguments130.length > 5 && _arguments130[5] !== undefined ? _arguments130[5] : undefined;
                query = '/' + _this149.version + '/' + _this149.implodeParams(path, params);
                url = _this149.urls['api'] + query;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this149.urlencode(params);
                    }
                } else {
                    if (Object.keys(params).length) {
                        body = _this149.json(params);
                    }nonce = _this149.nonce().toString();
                    request = [nonce, method, query, body || ''].join('');
                    signature = _this149.hmac(_this149.encode(request), _this149.encode(_this149.secret));
                    auth = _this149.apiKey + ':' + nonce + ':' + signature;

                    headers = { 'Authorization': "Bitso " + auth };
                }
                return _this149.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test3 = 'success' in response;

                if (_test3 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this149.id + ' ' + _this149.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitstamp = {

        'id': 'bitstamp',
        'name': 'Bitstamp',
        'countries': 'GB',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
            'api': 'https://www.bitstamp.net/api',
            'www': 'https://www.bitstamp.net',
            'doc': 'https://www.bitstamp.net/api'
        },
        'api': {
            'public': {
                'get': ['order_book/{id}/', 'ticker_hour/{id}/', 'ticker/{id}/', 'transactions/{id}/']
            },
            'private': {
                'post': ['balance/', 'balance/{id}/', 'buy/{id}/', 'buy/market/{id}/', 'cancel_order/', 'liquidation_address/info/', 'liquidation_address/new/', 'open_orders/all/', 'open_orders/{id}/', 'order_status/', 'sell/{id}/', 'sell/market/{id}/', 'transfer-from-main/', 'transfer-to-main/', 'user_transactions/', 'user_transactions/{id}/', 'withdrawal/cancel/', 'withdrawal/open/', 'withdrawal/status/', 'xrp_address/', 'xrp_withdrawal/']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD' },
            'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR' },
            'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this150 = this,
                _arguments131 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments131.length > 1 && _arguments131[1] !== undefined ? _arguments131[1] : {};
                return _this150.publicGetOrderBookId(_this150.extend({
                    'id': _this150.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;

                return _this150.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this151 = this;

            return Promise.resolve().then(function () {
                return _this151.publicGetTickerId({
                    'id': _this151.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this151.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = undefined;
            if ('date' in trade) {
                timestamp = parseInt(trade['date']);
            } else if ('datetime' in trade) {
                // timestamp = this.parse8601 (trade['datetime']);
                timestamp = parseInt(trade['datetime']);
            }
            var side = trade['type'] == 0 ? 'buy' : 'sell';
            var order = undefined;
            if ('order_id' in trade) order = trade['order_id'].toString();
            if ('currency_pair' in trade) {
                if (trade['currency_pair'] in this.markets_by_id) market = this.markets_by_id[trade['currency_pair']];
            }
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': order,
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this152 = this,
                _arguments133 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments133.length > 1 && _arguments133[1] !== undefined ? _arguments133[1] : {};
                market = _this152.market(symbol);
                return _this152.publicGetTransactionsId(_this152.extend({
                    'id': market['id'],
                    'time': 'minute'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this152.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                lowercase,
                total,
                free,
                used,
                account,
                _this153 = this,
                _arguments134 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments134.length > 0 && _arguments134[0] !== undefined ? _arguments134[0] : {};
                return _this153.privatePostBalance();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this153.currencies.length; c++) {
                    currency = _this153.currencies[c];
                    lowercase = currency.toLowerCase();
                    total = lowercase + '_balance';
                    free = lowercase + '_available';
                    used = lowercase + '_reserved';
                    account = _this153.account();

                    if (free in balance) {
                        account['free'] = parseFloat(balance[free]);
                    }if (used in balance) {
                        account['used'] = parseFloat(balance[used]);
                    }if (total in balance) {
                        account['total'] = parseFloat(balance[total]);
                    }result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this154 = this,
                _arguments135 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments135.length > 4 && _arguments135[4] !== undefined ? _arguments135[4] : undefined;
                params = _arguments135.length > 5 && _arguments135[5] !== undefined ? _arguments135[5] : {};
                method = 'privatePost' + _this154.capitalize(side);
                order = {
                    'id': _this154.marketId(symbol),
                    'amount': amount
                };

                if (type == 'market') {
                    method += 'Market';
                } else {
                    order['price'] = price;
                }method += 'Id';
                return _this154[method](_this154.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this155 = this;

            return _this155.privatePostCancelOrder({ 'id': id });
        },
        parseOrderStatus: function parseOrderStatus(order) {
            if (order['status'] == 'Queue' || order['status'] == 'Open') return 'open';
            if (order['status'] == 'Finished') return 'closed';
            return order['status'];
        },
        fetchOrderStatus: function fetchOrderStatus(id) {
            var symbol,
                response,
                _this156 = this,
                _arguments137 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments137.length > 1 && _arguments137[1] !== undefined ? _arguments137[1] : undefined;
                return _this156.loadMarkets();
            }).then(function () {
                return _this156.privatePostOrderStatus({ 'id': id });
            }).then(function (_resp) {
                response = _resp;

                return _this156.parseOrderStatus(response);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var symbol,
                params,
                market,
                pair,
                request,
                response,
                result,
                _this157 = this,
                _arguments138 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments138.length > 0 && _arguments138[0] !== undefined ? _arguments138[0] : undefined;
                params = _arguments138.length > 1 && _arguments138[1] !== undefined ? _arguments138[1] : {};
                return _this157.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this157.market(symbol);
                }pair = market ? market['id'] : 'all';
                request = _this157.extend({ 'id': pair }, params);
                return _this157.privatePostOpenOrdersId(request);
            }).then(function (_resp) {
                response = _resp;
                result = _this157.parseTrades(response, market);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var _this158 = this;

            return Promise.resolve().then(function () {
                throw new NotSupported(_this158.id + ' fetchOrder is not implemented yet');
                return _this158.loadMarkets();
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _this159 = this,
                _arguments140 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments140.length > 1 && _arguments140[1] !== undefined ? _arguments140[1] : 'public';
                method = _arguments140.length > 2 && _arguments140[2] !== undefined ? _arguments140[2] : 'GET';
                params = _arguments140.length > 3 && _arguments140[3] !== undefined ? _arguments140[3] : {};
                headers = _arguments140.length > 4 && _arguments140[4] !== undefined ? _arguments140[4] : undefined;
                body = _arguments140.length > 5 && _arguments140[5] !== undefined ? _arguments140[5] : undefined;
                url = _this159.urls['api'] + '/' + _this159.version + '/' + _this159.implodeParams(path, params);
                query = _this159.omit(params, _this159.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this159.urlencode(query);
                    }
                } else {
                    if (!_this159.uid) {
                        throw new AuthenticationError(_this159.id + ' requires `' + _this159.id + '.uid` property for authentication');
                    }nonce = _this159.nonce().toString();
                    auth = nonce + _this159.uid + _this159.apiKey;
                    signature = _this159.encode(_this159.hmac(_this159.encode(auth), _this159.encode(_this159.secret)));

                    query = _this159.extend({
                        'key': _this159.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query);
                    body = _this159.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this159.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this159.id + ' ' + _this159.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bittrex = {

        'id': 'bittrex',
        'name': 'Bittrex',
        'countries': 'US',
        'version': 'v1.1',
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
            'api': 'https://bittrex.com/api',
            'www': 'https://bittrex.com',
            'doc': ['https://bittrex.com/Home/Api', 'https://www.npmjs.org/package/node.bittrex.api']
        },
        'api': {
            'public': {
                'get': ['currencies', 'markethistory', 'markets', 'marketsummaries', 'marketsummary', 'orderbook', 'ticker']
            },
            'account': {
                'get': ['balance', 'balances', 'depositaddress', 'deposithistory', 'order', 'orderhistory', 'withdrawalhistory', 'withdraw']
            },
            'market': {
                'get': ['buylimit', 'buymarket', 'cancel', 'openorders', 'selllimit', 'sellmarket']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this160 = this;

            return Promise.resolve().then(function () {
                return _this160.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];

                    base = _this160.commonCurrencyCode(base);
                    quote = _this160.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                indexed,
                c,
                currency,
                account,
                balance,
                _this161 = this,
                _arguments142 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments142.length > 0 && _arguments142[0] !== undefined ? _arguments142[0] : {};
                return _this161.loadMarkets();
            }).then(function () {
                return _this161.accountGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                indexed = _this161.indexBy(balances, 'Currency');

                for (c = 0; c < _this161.currencies.length; c++) {
                    currency = _this161.currencies[c];
                    account = _this161.account();

                    if (currency in indexed) {
                        balance = indexed[currency];

                        account['free'] = balance['Available'];
                        account['used'] = balance['Balance'] - balance['Available'];
                        account['total'] = balance['Balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                _this162 = this,
                _arguments143 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments143.length > 1 && _arguments143[1] !== undefined ? _arguments143[1] : {};
                return _this162.loadMarkets();
            }).then(function () {
                return _this162.publicGetOrderbook(_this162.extend({
                    'market': _this162.marketId(market),
                    'type': 'both',
                    'depth': 50
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this162.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['TimeStamp']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['Bid']),
                'ask': parseFloat(ticker['Ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['Last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _id$split,
                _id$split2,
                quote,
                base,
                _this163 = this;

            return Promise.resolve().then(function () {
                return _this163.loadMarkets();
            }).then(function () {
                return _this163.publicGetMarketsummaries();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['MarketName'];
                    market = undefined;
                    symbol = id;

                    if (id in _this163.markets_by_id) {
                        market = _this163.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        _id$split = id.split('-');
                        _id$split2 = _slicedToArray(_id$split, 2);
                        quote = _id$split2[0];
                        base = _id$split2[1];

                        base = _this163.commonCurrencyCode(base);
                        quote = _this163.commonCurrencyCode(quote);
                        symbol = base + '/' + quote;
                    }
                    result[symbol] = _this163.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this164 = this;

            return Promise.resolve().then(function () {
                return _this164.loadMarkets();
            }).then(function () {
                market = _this164.market(symbol);
                return _this164.publicGetMarketsummary({
                    'market': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][0];

                return _this164.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['TimeStamp']);
            var side = undefined;
            if (trade['OrderType'] == 'BUY') {
                side = 'buy';
            } else if (trade['OrderType'] == 'SELL') {
                side = 'sell';
            }
            var type = undefined;
            return {
                'id': trade['Id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['Price'],
                'amount': trade['Quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this165 = this,
                _arguments146 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments146.length > 1 && _arguments146[1] !== undefined ? _arguments146[1] : {};
                return _this165.loadMarkets();
            }).then(function () {
                market = _this165.market(symbol);
                return _this165.publicGetMarkethistory(_this165.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this165.parseTrades(response['result'], market);
            });
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                request,
                market,
                response,
                _this166 = this,
                _arguments147 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments147.length > 0 && _arguments147[0] !== undefined ? _arguments147[0] : undefined;
                params = _arguments147.length > 1 && _arguments147[1] !== undefined ? _arguments147[1] : {};
                return _this166.loadMarkets();
            }).then(function () {
                request = {};
                market = undefined;

                if (symbol) {
                    market = _this166.market(symbol);
                    request['market'] = market['id'];
                }
                return _this166.marketGetOpenorders(_this166.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this166.parseOrders(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                result,
                _this167 = this,
                _arguments148 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments148.length > 4 && _arguments148[4] !== undefined ? _arguments148[4] : undefined;
                params = _arguments148.length > 5 && _arguments148[5] !== undefined ? _arguments148[5] : {};
                return _this167.loadMarkets();
            }).then(function () {
                method = 'marketGet' + _this167.capitalize(side) + type;
                order = {
                    'market': _this167.marketId(symbol),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this167[method](_this167.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                result = {
                    'info': response,
                    'id': response['result']['uuid']
                };

                return result;
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this168 = this;

            return Promise.resolve().then(function () {
                return _this168.loadMarkets();
            }).then(function () {
                return _this168.marketGetCancel({ 'uuid': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = undefined;
            if ('OrderType' in order) side = order['OrderType'] == 'LIMIT_BUY' ? 'buy' : 'sell';
            if ('Type' in order) side = order['Type'] == 'LIMIT_BUY' ? 'buy' : 'sell';
            var status = 'open';
            if (order['Closed']) {
                status = 'closed';
            } else if (order['CancelInitiated']) {
                status = 'canceled';
            }
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else {
                var exchange = order['Exchange'];
                if (exchange in this.markets_by_id) {
                    market = this.markets_by_id[exchange];
                    symbol = ['symbol'];
                }
            }
            var timestamp = this.parse8601(order['Opened']);
            var result = {
                'info': order,
                'id': order['OrderUuid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'type': 'limit',
                'side': side,
                'price': order['Price'],
                'amount': order['Quantity'],
                'remaining': order['QuantityRemaining'],
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                _this169 = this;

            return Promise.resolve().then(function () {
                return _this169.loadMarkets();
            }).then(function () {
                return _this169.accountGetOrder({ 'uuid': id });
            }).then(function (_resp) {
                response = _resp;

                return _this169.parseOrder(response['result']);
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this170 = this,
                _arguments151 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments151.length > 3 && _arguments151[3] !== undefined ? _arguments151[3] : {};
                return _this170.loadMarkets();
            }).then(function () {
                return _this170.accountGetWithdraw(_this170.extend({
                    'currency': currency,
                    'quantity': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                signature,
                response,
                _test4,
                _this171 = this,
                _arguments152 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments152.length > 1 && _arguments152[1] !== undefined ? _arguments152[1] : 'public';
                method = _arguments152.length > 2 && _arguments152[2] !== undefined ? _arguments152[2] : 'GET';
                params = _arguments152.length > 3 && _arguments152[3] !== undefined ? _arguments152[3] : {};
                headers = _arguments152.length > 4 && _arguments152[4] !== undefined ? _arguments152[4] : undefined;
                body = _arguments152.length > 5 && _arguments152[5] !== undefined ? _arguments152[5] : undefined;
                url = _this171.urls['api'] + '/' + _this171.version + '/';

                if (api == 'public') {
                    url += api + '/' + method.toLowerCase() + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this171.urlencode(params);
                    }
                } else {
                    nonce = _this171.nonce();

                    url += api + '/';
                    if (api == 'account' && path != 'withdraw' || path == 'openorders') {
                        url += method.toLowerCase();
                    }url += path + '?' + _this171.urlencode(_this171.extend({
                        'nonce': nonce,
                        'apikey': _this171.apiKey
                    }, params));
                    signature = _this171.hmac(_this171.encode(url), _this171.encode(_this171.secret), 'sha512');

                    headers = { 'apisign': signature };
                }
                return _this171.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test4 = 'success' in response;

                if (_test4 && response['success']) {
                    return response;
                } else {
                    if ('message' in response) {
                        if (response['message'] == "INSUFFICIENT_FUNDS") {
                            throw new InsufficientFunds(_this171.id + ' ' + _this171.json(response));
                        }
                    }throw new ExchangeError(_this171.id + ' ' + _this171.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var blinktrade = {

        'id': 'blinktrade',
        'name': 'BlinkTrade',
        'countries': ['US', 'VE', 'VN', 'BR', 'PK', 'CL'],
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990968-75d9c884-6470-11e7-9073-46756c8e7e8c.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://blinktrade.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'api': {
            'public': {
                'get': ['{currency}/ticker', // ?crypto_currency=BTC
                '{currency}/orderbook', // ?crypto_currency=BTC
                '{currency}/trades']
            },
            'private': {
                'post': ['D', // order
                'F', // cancel order
                'U2', // balance
                'U4', // my orders
                'U6', // withdraw
                'U18', // deposit
                'U24', // confirm withdrawal
                'U26', // list withdrawals
                'U30', // list deposits
                'U34', // ledger
                'U70']
            }
        },
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                _this172 = this,
                _arguments153 = arguments;

            params = _arguments153.length > 0 && _arguments153[0] !== undefined ? _arguments153[0] : {};

            return _this172.privatePostU2({
                'BalanceReqID': _this172.nonce()
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this173 = this,
                _arguments154 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments154.length > 1 && _arguments154[1] !== undefined ? _arguments154[1] : {};
                market = _this173.market(symbol);
                return _this173.publicGetCurrencyOrderbook(_this173.extend({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this173.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                lowercaseQuote,
                quoteVolume,
                _this174 = this;

            return Promise.resolve().then(function () {
                market = _this174.market(symbol);
                return _this174.publicGetCurrencyTicker({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this174.milliseconds();
                lowercaseQuote = market['quote'].toLowerCase();
                quoteVolume = 'vol_' + lowercaseQuote;

                return {
                    'timestamp': timestamp,
                    'datetime': _this174.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this175 = this,
                _arguments156 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments156.length > 1 && _arguments156[1] !== undefined ? _arguments156[1] : {};
                market = _this175.market(symbol);
                return _this175.publicGetCurrencyTrades(_this175.extend({
                    'currency': market['quote'],
                    'crypto_currency': market['base']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this175.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                indexed,
                execution,
                _this176 = this,
                _arguments157 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments157.length > 4 && _arguments157[4] !== undefined ? _arguments157[4] : undefined;
                params = _arguments157.length > 5 && _arguments157[5] !== undefined ? _arguments157[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this176.id + ' allows limit orders only');
                }market = _this176.market(symbol);
                order = {
                    'ClOrdID': _this176.nonce(),
                    'Symbol': market['id'],
                    'Side': _this176.capitalize(side),
                    'OrdType': '2',
                    'Price': price,
                    'OrderQty': amount,
                    'BrokerID': market['brokerId']
                };
                return _this176.privatePostD(_this176.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                indexed = _this176.indexBy(response['Responses'], 'MsgType');
                execution = indexed['8'];

                return {
                    'info': response,
                    'id': execution['OrderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this177 = this,
                _arguments158 = arguments;

            params = _arguments158.length > 1 && _arguments158[1] !== undefined ? _arguments158[1] : {};

            return _this177.privatePostF(_this177.extend({
                'ClOrdID': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                response,
                _this178 = this,
                _arguments159 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments159.length > 1 && _arguments159[1] !== undefined ? _arguments159[1] : 'public';
                method = _arguments159.length > 2 && _arguments159[2] !== undefined ? _arguments159[2] : 'GET';
                params = _arguments159.length > 3 && _arguments159[3] !== undefined ? _arguments159[3] : {};
                headers = _arguments159.length > 4 && _arguments159[4] !== undefined ? _arguments159[4] : undefined;
                body = _arguments159.length > 5 && _arguments159[5] !== undefined ? _arguments159[5] : undefined;
                url = _this178.urls['api'][api] + '/' + _this178.version + '/' + _this178.implodeParams(path, params);
                query = _this178.omit(params, _this178.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this178.urlencode(query);
                    }
                } else {
                    nonce = _this178.nonce().toString();
                    request = _this178.extend({ 'MsgType': path }, query);

                    body = _this178.json(request);
                    headers = {
                        'APIKey': _this178.apiKey,
                        'Nonce': nonce,
                        'Signature': _this178.hmac(_this178.encode(nonce), _this178.encode(_this178.secret)),
                        'Content-Type': 'application/json'
                    };
                }
                return _this178.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('Status' in response) {
                    if (response['Status'] != 200) {
                        throw new ExchangeError(_this178.id + ' ' + _this178.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bl3p = {

        'id': 'bl3p',
        'name': 'BL3P',
        'countries': ['NL', 'EU'], // Netherlands, EU
        'rateLimit': 1000,
        'version': '1',
        'comment': 'An exchange market by BitonicNL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
            'api': 'https://api.bl3p.eu',
            'www': ['https://bl3p.eu', 'https://bitonic.nl'],
            'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']
        },
        'api': {
            'public': {
                'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']
            },
            'private': {
                'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this179 = this,
                _arguments160 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments160.length > 0 && _arguments160[0] !== undefined ? _arguments160[0] : {};
                return _this179.privatePostGENMKTMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['wallets'];
                result = { 'info': data };

                for (c = 0; c < _this179.currencies.length; c++) {
                    currency = _this179.currencies[c];
                    account = _this179.account();

                    if (currency in balance) {
                        if ('available' in balance[currency]) {
                            account['free'] = parseFloat(balance[currency]['available']['value']);
                        }
                    }
                    if (currency in balance) {
                        if ('balance' in balance[currency]) {
                            account['total'] = parseFloat(balance[currency]['balance']['value']);
                        }
                    }
                    if (account['total']) {
                        if (account['free']) {
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        parseBidAsk: function parseBidAsk(bidask) {
            var priceKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var amountKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

            return [bidask['price_int'] / 100000.0, bidask['amount_int'] / 100000000.0];
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this180 = this,
                _arguments161 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments161.length > 1 && _arguments161[1] !== undefined ? _arguments161[1] : {};
                market = _this180.market(symbol);
                return _this180.publicGetMarketOrderbook(_this180.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];

                return _this180.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this181 = this;

            return Promise.resolve().then(function () {
                return _this181.publicGetMarketTicker({
                    'market': _this181.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this181.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']['24h']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            return {
                'id': trade['trade_id'],
                'info': trade,
                'timestamp': trade['date'],
                'datetime': this.iso8601(trade['date']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price_int'] / 100000.0,
                'amount': trade['amount_int'] / 100000000.0
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                result,
                _this182 = this,
                _arguments163 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments163.length > 1 && _arguments163[1] !== undefined ? _arguments163[1] : {};
                market = _this182.market(symbol);
                return _this182.publicGetMarketTrades(_this182.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                result = _this182.parseTrades(response['data']['trades'], market);

                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this183 = this,
                _arguments164 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments164.length > 4 && _arguments164[4] !== undefined ? _arguments164[4] : undefined;
                params = _arguments164.length > 5 && _arguments164[5] !== undefined ? _arguments164[5] : {};
                market = _this183.market(symbol);
                order = {
                    'market': market['id'],
                    'amount_int': amount,
                    'fee_currency': market['quote'],
                    'type': side == 'buy' ? 'bid' : 'ask'
                };

                if (type == 'limit') {
                    order['price_int'] = price;
                }return _this183.privatePostMarketMoneyOrderAdd(_this183.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this184 = this;

            return _this184.privatePostMarketMoneyOrderCancel({ 'order_id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                secret,
                auth,
                signature,
                _this185 = this,
                _arguments166 = arguments;

            api = _arguments166.length > 1 && _arguments166[1] !== undefined ? _arguments166[1] : 'public';
            method = _arguments166.length > 2 && _arguments166[2] !== undefined ? _arguments166[2] : 'GET';
            params = _arguments166.length > 3 && _arguments166[3] !== undefined ? _arguments166[3] : {};
            headers = _arguments166.length > 4 && _arguments166[4] !== undefined ? _arguments166[4] : undefined;
            body = _arguments166.length > 5 && _arguments166[5] !== undefined ? _arguments166[5] : undefined;
            request = _this185.implodeParams(path, params);
            url = _this185.urls['api'] + '/' + _this185.version + '/' + request;
            query = _this185.omit(params, _this185.extractParams(path));

            if (api == 'public') {
                if (Object.keys(query).length) {
                    url += '?' + _this185.urlencode(query);
                }
            } else {
                nonce = _this185.nonce();

                body = _this185.urlencode(_this185.extend({ 'nonce': nonce }, query));
                secret = _this185.base64ToBinary(_this185.secret);
                auth = request + "\0" + body;
                signature = _this185.hmac(_this185.encode(auth), secret, 'sha512', 'base64');

                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Rest-Key': _this185.apiKey,
                    'Rest-Sign': signature
                };
            }
            return _this185.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcchina = {

        'id': 'btcchina',
        'name': 'BTCChina',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',
            'api': {
                'public': 'https://data.btcchina.com/data',
                'private': 'https://api.btcchina.com/api_trade_v1.php'
            },
            'www': 'https://www.btcchina.com',
            'doc': 'https://www.btcchina.com/apidocs'
        },
        'api': {
            'public': {
                'get': ['historydata', 'orderbook', 'ticker', 'trades']
            },
            'private': {
                'post': ['BuyIcebergOrder', 'BuyOrder', 'BuyOrder2', 'BuyStopOrder', 'CancelIcebergOrder', 'CancelOrder', 'CancelStopOrder', 'GetAccountInfo', 'getArchivedOrder', 'getArchivedOrders', 'GetDeposits', 'GetIcebergOrder', 'GetIcebergOrders', 'GetMarketDepth', 'GetMarketDepth2', 'GetOrder', 'GetOrders', 'GetStopOrder', 'GetStopOrders', 'GetTransactions', 'GetWithdrawal', 'GetWithdrawals', 'RequestWithdrawal', 'SellIcebergOrder', 'SellOrder', 'SellOrder2', 'SellStopOrder']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btccny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltccny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'BCH/CNY': { 'id': 'bcccny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'ethcny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                p,
                key,
                market,
                parts,
                id,
                base,
                quote,
                symbol,
                _this186 = this;

            return Promise.resolve().then(function () {
                return _this186.publicGetTicker({
                    'market': 'all'
                });
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (p = 0; p < keys.length; p++) {
                    key = keys[p];
                    market = markets[key];
                    parts = key.split('_');
                    id = parts[1];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this187 = this,
                _arguments168 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments168.length > 0 && _arguments168[0] !== undefined ? _arguments168[0] : {};
                return _this187.loadMarkets();
            }).then(function () {
                return _this187.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };


                for (c = 0; c < _this187.currencies.length; c++) {
                    currency = _this187.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this187.account();

                    if (lowercase in balances['balance']) {
                        account['total'] = parseFloat(balances['balance'][lowercase]['amount']);
                    }if (lowercase in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][lowercase]['amount']);
                    }account['free'] = account['total'] - account['used'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                result,
                _this188 = this,
                _arguments169 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments169.length > 1 && _arguments169[1] !== undefined ? _arguments169[1] : {};
                return _this188.loadMarkets();
            }).then(function () {
                return _this188.publicGetOrderbook(_this188.extend({
                    'market': _this188.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['date'] * 1000;
                result = _this188.parseOrderBook(orderbook, timestamp);

                result['asks'] = _this188.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                timestamp,
                _this189 = this;

            return Promise.resolve().then(function () {
                return _this189.loadMarkets();
            }).then(function () {
                market = _this189.market(symbol);
                return _this189.publicGetTicker({
                    'market': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers['ticker'];
                timestamp = ticker['date'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this189.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['prev_close']),
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this190 = this,
                _arguments171 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments171.length > 1 && _arguments171[1] !== undefined ? _arguments171[1] : {};
                return _this190.loadMarkets();
            }).then(function () {
                market = _this190.market(symbol);
                return _this190.publicGetTrades(_this190.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this190.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                id,
                response,
                _this191 = this,
                _arguments172 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments172.length > 4 && _arguments172[4] !== undefined ? _arguments172[4] : undefined;
                params = _arguments172.length > 5 && _arguments172[5] !== undefined ? _arguments172[5] : {};
                return _this191.loadMarkets();
            }).then(function () {
                market = _this191.market(symbol);
                method = 'privatePost' + _this191.capitalize(side) + 'Order2';
                order = {};
                id = market['id'].toUpperCase();

                if (type == 'market') {
                    order['params'] = [undefined, amount, id];
                } else {
                    order['params'] = [price, amount, id];
                }
                return _this191[method](_this191.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                market,
                _this192 = this,
                _arguments173 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments173.length > 1 && _arguments173[1] !== undefined ? _arguments173[1] : {};
                return _this192.loadMarkets();
            }).then(function () {
                market = params['market']; // TODO fixme

                return _this192.privatePostCancelOrder(_this192.extend({
                    'params': [id, market]
                }, params));
            });
        },
        nonce: function nonce() {
            return this.microseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][api] + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                if (!this.apiKey) throw new AuthenticationError(this.id + ' requires `' + this.id + '.apiKey` property for authentication');
                if (!this.secret) throw new AuthenticationError(this.id + ' requires `' + this.id + '.secret` property for authentication');
                var p = [];
                if ('params' in params) p = params['params'];
                var nonce = this.nonce();
                var request = {
                    'method': path,
                    'id': nonce,
                    'params': p
                };
                p = p.join(',');
                body = this.json(request);
                var query = 'tonce=' + nonce + '&accesskey=' + this.apiKey + '&requestmethod=' + method.toLowerCase() + '&id=' + nonce + '&method=' + path + '&params=' + p;
                var signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
                var auth = this.apiKey + ':' + signature;
                headers = {
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + this.stringToBase64(auth),
                    'Json-Rpc-Tonce': nonce
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------

    var btce = {

        'id': 'btce',
        'name': 'BTC-e',
        'countries': ['BG', 'RU'], // Bulgaria, Russia
        'version': '3',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27843225-1b571514-611a-11e7-9208-2641a560b561.jpg',
            'api': {
                'public': 'https://btc-e.com/api',
                'private': 'https://btc-e.com/tapi'
            },
            'www': 'https://btc-e.com',
            'doc': ['https://btc-e.com/api/3/docs', 'https://btc-e.com/tapi/docs']
        },
        'api': {
            'public': {
                'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split3,
                _id$split4,
                base,
                quote,
                symbol,
                _this193 = this;

            return Promise.resolve().then(function () {
                return _this193.publicGetInfo();
            }).then(function (_resp) {
                response = _resp;
                markets = response['pairs'];
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split3 = id.split('_');
                    _id$split4 = _slicedToArray(_id$split3, 2);
                    base = _id$split4[0];
                    quote = _id$split4[1];

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    if (base == 'DSH') {
                        base = 'DASH';
                    }base = _this193.commonCurrencyCode(base);
                    quote = _this193.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                funds,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this194 = this,
                _arguments175 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments175.length > 0 && _arguments175[0] !== undefined ? _arguments175[0] : {};
                return _this194.loadMarkets();
            }).then(function () {
                return _this194.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                funds = balances['funds'];
                currencies = Object.keys(funds);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    // they misspell DASH as dsh :/

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = {
                        'free': funds[currency],
                        'used': 0.0,
                        'total': funds[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                result,
                _this195 = this,
                _arguments176 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments176.length > 1 && _arguments176[1] !== undefined ? _arguments176[1] : {};
                return _this195.loadMarkets();
            }).then(function () {
                market = _this195.market(symbol);
                return _this195.publicGetDepthPair(_this195.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                if (market['id'] in response) {
                    orderbook = response[market['id']];
                    result = _this195.parseOrderBook(orderbook);

                    result['bids'] = _this195.sortBy(result['bids'], 0, true);
                    result['asks'] = _this195.sortBy(result['asks'], 0);
                    return result;
                } else {
                    throw new ExchangeError(_this195.id + ' ' + market['symbol'] + ' order book is empty or not available');
                }
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['high'] ? ticker['high'] : undefined,
                'low': ticker['low'] ? ticker['low'] : undefined,
                'bid': ticker['sell'] ? ticker['buy'] : undefined,
                'ask': ticker['buy'] ? ticker['sell'] : undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': ticker['last'] ? ticker['last'] : undefined,
                'change': undefined,
                'percentage': undefined,
                'average': ticker['avg'] ? ticker['avg'] : undefined,
                'baseVolume': ticker['vol_cur'] ? ticker['vol_cur'] : undefined,
                'quoteVolume': ticker['vol'] ? ticker['vol'] : undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var symbols,
                ids,
                tickers,
                result,
                keys,
                k,
                id,
                ticker,
                market,
                symbol,
                _this196 = this,
                _arguments177 = arguments;

            return Promise.resolve().then(function () {
                symbols = _arguments177.length > 0 && _arguments177[0] !== undefined ? _arguments177[0] : undefined;
                return _this196.loadMarkets();
            }).then(function () {
                ids = symbols ? _this196.marketIds(symbols) : _this196.ids;
                return _this196.publicGetTickerPair({
                    'pair': ids.join('-')
                });
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                keys = Object.keys(tickers);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    ticker = tickers[id];
                    market = _this196.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this196.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                id,
                tickers,
                _this197 = this;

            return Promise.resolve().then(function () {
                return _this197.loadMarkets();
            }).then(function () {
                market = _this197.market(symbol);
                id = market['id'];
                return _this197.fetchTickers([id]);
            }).then(function (_resp) {
                tickers = _resp;

                return tickers[symbol];
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'ask' ? 'sell' : 'buy';
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                id,
                response,
                _this198 = this,
                _arguments179 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments179.length > 1 && _arguments179[1] !== undefined ? _arguments179[1] : {};
                return _this198.loadMarkets();
            }).then(function () {
                market = _this198.market(symbol);
                id = market['id'];
                return _this198.publicGetTradesPair(_this198.extend({
                    'pair': id
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this198.parseTrades(response[id], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this199 = this,
                _arguments180 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments180.length > 4 && _arguments180[4] !== undefined ? _arguments180[4] : undefined;
                params = _arguments180.length > 5 && _arguments180[5] !== undefined ? _arguments180[5] : {};
                return _this199.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this199.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                };
                return _this199.privatePostTrade(_this199.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this200 = this;

            return Promise.resolve().then(function () {
                return _this200.loadMarkets();
            }).then(function () {
                return _this200.privatePostCancelOrder({ 'order_id': id });
            });
        },
        parseOrder: function parseOrder(order) {
            var statusCode = order['status'];
            var status = undefined;
            if (statusCode == 0) {
                status = 'open';
            } else if (statusCode == 2 || statusCode == 3) {
                status = 'canceled';
            } else {
                status = 'closed';
            }
            var timestamp = order['timestamp_created'] * 1000;
            var market = this.markets_by_id[order['pair']];
            var result = {
                'info': order,
                'id': order['id'],
                'symbol': market['symbol'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'type': 'limit',
                'side': order['type'],
                'price': order['rate'],
                'amount': order['start_amount'],
                'remaining': order['amount'],
                'status': status
            };
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var response,
                order,
                _this201 = this;

            return Promise.resolve().then(function () {
                return _this201.loadMarkets();
            }).then(function () {
                return _this201.privatePostOrderInfo({ 'order_id': id });
            }).then(function (_resp) {
                response = _resp;
                order = response['return'][id];

                return _this201.parseOrder(_this201.extend({ 'id': id }, order));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                response,
                _this202 = this,
                _arguments183 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments183.length > 1 && _arguments183[1] !== undefined ? _arguments183[1] : 'public';
                method = _arguments183.length > 2 && _arguments183[2] !== undefined ? _arguments183[2] : 'GET';
                params = _arguments183.length > 3 && _arguments183[3] !== undefined ? _arguments183[3] : {};
                headers = _arguments183.length > 4 && _arguments183[4] !== undefined ? _arguments183[4] : undefined;
                body = _arguments183.length > 5 && _arguments183[5] !== undefined ? _arguments183[5] : undefined;

                throw new ExchangeNotAvailable(_this202.id + ' operation was shut down in July 2017');
                url = _this202.urls['api'][api] + '/' + _this202.version + '/' + _this202.implodeParams(path, params);
                query = _this202.omit(params, _this202.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this202.urlencode(query);
                    }
                } else {
                    nonce = _this202.nonce();

                    body = _this202.urlencode(_this202.extend({
                        'nonce': nonce,
                        'method': path
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this202.apiKey,
                        'Sign': _this202.hmac(_this202.encode(body), _this202.encode(_this202.secret), 'sha512')
                    };
                }
                return _this202.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this202.id + ' ' + _this202.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var btcmarkets = {

        'id': 'btcmarkets',
        'name': 'BTC Markets',
        'countries': 'AU', // Australia
        'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg',
            'api': 'https://api.btcmarkets.net',
            'www': 'https://btcmarkets.net/',
            'doc': 'https://github.com/BTCMarkets/API'
        },
        'api': {
            'public': {
                'get': ['market/{id}/tick', 'market/{id}/orderbook', 'market/{id}/trades']
            },
            'private': {
                'get': ['account/balance', 'account/{id}/tradingfee'],
                'post': ['fundtransfer/withdrawCrypto', 'fundtransfer/withdrawEFT', 'order/create', 'order/cancel', 'order/history', 'order/open', 'order/trade/history', 'order/createBatch', // they promise it's coming soon...
                'order/detail']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC/AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC/AUD', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'ETH/AUD': { 'id': 'ETH/AUD', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD' },
            'ETC/AUD': { 'id': 'ETC/AUD', 'symbol': 'ETC/AUD', 'base': 'ETC', 'quote': 'AUD' },
            'XRP/AUD': { 'id': 'XRP/AUD', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD' },
            'BCH/AUD': { 'id': 'BCH/AUD', 'symbol': 'BCH/AUD', 'base': 'BCH', 'quote': 'AUD' },
            'LTC/BTC': { 'id': 'LTC/BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/BTC': { 'id': 'ETH/BTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'ETC/BTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRP/BTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'BCH/BTC': { 'id': 'BCH/BTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                multiplier,
                free,
                used,
                account,
                _this203 = this,
                _arguments184 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments184.length > 0 && _arguments184[0] !== undefined ? _arguments184[0] : {};
                return _this203.loadMarkets();
            }).then(function () {
                return _this203.privateGetAccountBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    multiplier = 100000000;
                    free = parseFloat(balance['balance'] / multiplier);
                    used = parseFloat(balance['pendingFunds'] / multiplier);
                    account = {
                        'free': free,
                        'used': used,
                        'total': _this203.sum(free, used)
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                _this204 = this,
                _arguments185 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments185.length > 1 && _arguments185[1] !== undefined ? _arguments185[1] : {};
                return _this204.loadMarkets();
            }).then(function () {
                market = _this204.market(symbol);
                return _this204.publicGetMarketIdOrderbook(_this204.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;

                return _this204.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bestBid']),
                'ask': parseFloat(ticker['bestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastPrice']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume24h']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this205 = this;

            return Promise.resolve().then(function () {
                return _this205.loadMarkets();
            }).then(function () {
                market = _this205.market(symbol);
                return _this205.publicGetMarketIdTick({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this205.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this206 = this,
                _arguments187 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments187.length > 1 && _arguments187[1] !== undefined ? _arguments187[1] : {};
                return _this206.loadMarkets();
            }).then(function () {
                market = _this206.market(symbol);
                return _this206.publicGetMarketIdTrades(_this206.extend({
                    // 'since': 59868345231,
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this206.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                multiplier,
                orderSide,
                order,
                response,
                _this207 = this,
                _arguments188 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments188.length > 4 && _arguments188[4] !== undefined ? _arguments188[4] : undefined;
                params = _arguments188.length > 5 && _arguments188[5] !== undefined ? _arguments188[5] : {};
                return _this207.loadMarkets();
            }).then(function () {
                market = _this207.market(symbol);
                multiplier = 100000000; // for price and volume
                // does BTC Markets support market orders at all?

                orderSide = side == 'buy' ? 'Bid' : 'Ask';
                order = _this207.ordered({
                    'currency': market['quote'],
                    'instrument': market['base'],
                    'price': price * multiplier,
                    'volume': amount * multiplier,
                    'orderSide': orderSide,
                    'ordertype': _this207.capitalize(type),
                    'clientRequestId': _this207.nonce().toString()
                });
                return _this207.privatePostOrderCreate(_this207.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrders: function cancelOrders(ids) {
            var _this208 = this;

            return Promise.resolve().then(function () {
                return _this208.loadMarkets();
            }).then(function () {
                return _this208.privatePostOrderCancel({ 'order_ids': ids });
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this209 = this;

            return Promise.resolve().then(function () {
                return _this209.loadMarkets();
            }).then(function () {
                return _this209.cancelOrders([id]);
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                uri,
                url,
                query,
                nonce,
                auth,
                secret,
                signature,
                response,
                _test5,
                _this210 = this,
                _arguments191 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments191.length > 1 && _arguments191[1] !== undefined ? _arguments191[1] : 'public';
                method = _arguments191.length > 2 && _arguments191[2] !== undefined ? _arguments191[2] : 'GET';
                params = _arguments191.length > 3 && _arguments191[3] !== undefined ? _arguments191[3] : {};
                headers = _arguments191.length > 4 && _arguments191[4] !== undefined ? _arguments191[4] : undefined;
                body = _arguments191.length > 5 && _arguments191[5] !== undefined ? _arguments191[5] : undefined;
                uri = '/' + _this210.implodeParams(path, params);
                url = _this210.urls['api'] + uri;
                query = _this210.omit(params, _this210.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this210.urlencode(params);
                    }
                } else {
                    nonce = _this210.nonce().toString();
                    auth = uri + "\n" + nonce + "\n";

                    headers = {
                        'Content-Type': 'application/json',
                        'apikey': _this210.apiKey,
                        'timestamp': nonce
                    };
                    if (method == 'POST') {
                        body = _this210.urlencode(query);
                        headers['Content-Length'] = body.length;
                        auth += body;
                    }
                    secret = _this210.base64ToBinary(_this210.secret);
                    signature = _this210.hmac(_this210.encode(auth), secret, 'sha512', 'base64');

                    headers['signature'] = signature;
                }
                return _this210.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test5 = api == 'private';

                if (_test5 && 'success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this210.id + ' ' + _this210.json(response));
                    }
                }
                if (_test5) {
                    return response;
                } else {
                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var btctrader = {

        'id': 'btctrader',
        'name': 'BTCTrader',
        'countries': ['TR', 'GR', 'PH'], // Turkey, Greece, Philippines
        'rateLimit': 1000,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1d': '1d'
        },
        'comment': 'base API for BTCExchange, BTCTurk',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992404-cda1e386-649c-11e7-8dc1-40bbd2897768.jpg',
            'api': 'https://www.btctrader.com/api',
            'www': 'https://www.btctrader.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'api': {
            'public': {
                'get': ['ohlcdata', // ?last=COUNT
                'orderbook', 'ticker', 'trades']
            },
            'private': {
                'get': ['balance', 'openOrders', 'userTransactions'],
                'post': ['buy', 'cancelOrder', 'sell']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                base,
                quote,
                symbol,
                market,
                _this211 = this,
                _arguments192 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments192.length > 0 && _arguments192[0] !== undefined ? _arguments192[0] : {};
                return _this211.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                base = {
                    'free': response['bitcoin_available'],
                    'used': response['bitcoin_reserved'],
                    'total': response['bitcoin_balance']
                };
                quote = {
                    'free': response['money_available'],
                    'used': response['money_reserved'],
                    'total': response['money_balance']
                };
                symbol = _this211.symbols[0];
                market = _this211.markets[symbol];

                result[market['base']] = base;
                result[market['quote']] = quote;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this212 = this,
                _arguments193 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments193.length > 1 && _arguments193[1] !== undefined ? _arguments193[1] : {};
                return _this212.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp'] * 1000);

                return _this212.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this213 = this;

            return Promise.resolve().then(function () {
                return _this213.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp'] * 1000);

                return {
                    'timestamp': timestamp,
                    'datetime': _this213.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['tid'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                maxCount,
                response,
                _this214 = this,
                _arguments195 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments195.length > 1 && _arguments195[1] !== undefined ? _arguments195[1] : {};
                market = _this214.market(symbol);
                maxCount = 50;
                return _this214.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this214.parseTrades(response, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1d';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            var timestamp = this.parse8601(ohlcv['Date']);
            return [timestamp, ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this215 = this,
                _arguments196 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments196.length > 1 && _arguments196[1] !== undefined ? _arguments196[1] : '1d';
                since = _arguments196.length > 2 && _arguments196[2] !== undefined ? _arguments196[2] : undefined;
                limit = _arguments196.length > 3 && _arguments196[3] !== undefined ? _arguments196[3] : undefined;
                params = _arguments196.length > 4 && _arguments196[4] !== undefined ? _arguments196[4] : {};
                return _this215.loadMarkets();
            }).then(function () {
                market = _this215.market(symbol);
                request = {};

                if (limit) {
                    request['last'] = limit;
                }return _this215.publicGetOhlcdata(_this215.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this215.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this216 = this,
                _arguments197 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments197.length > 4 && _arguments197[4] !== undefined ? _arguments197[4] : undefined;
                params = _arguments197.length > 5 && _arguments197[5] !== undefined ? _arguments197[5] : {};
                method = 'privatePost' + _this216.capitalize(side);
                order = {
                    'Type': side == 'buy' ? 'BuyBtc' : 'SelBtc',
                    'IsMarketOrder': type == 'market' ? 1 : 0
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['Total'] = amount;
                    } else {
                        order['Amount'] = amount;
                    }
                } else {
                    order['Price'] = price;
                    order['Amount'] = amount;
                }
                return _this216[method](_this216.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this217 = this;

            return _this217.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (this.id == 'btctrader') throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');
            var url = this.urls['api'] + '/' + path;
            if (api == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString;
                body = this.urlencode(params);
                var secret = this.base64ToString(this.secret);
                var auth = this.apiKey + nonce;
                headers = {
                    'X-PCK': this.apiKey,
                    'X-Stamp': nonce.toString(),
                    'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcexchange = extend(btctrader, {

        'id': 'btcexchange',
        'name': 'BTCExchange',
        'countries': 'PH', // Philippines
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',
            'api': 'https://www.btcexchange.ph/api',
            'www': 'https://www.btcexchange.ph',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' }
        }
    });

    //-----------------------------------------------------------------------------

    var btctradeua = {

        'id': 'btctradeua',
        'name': 'BTC Trade UA',
        'countries': 'UA', // Ukraine,
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
            'api': 'https://btc-trade.com.ua/api',
            'www': 'https://btc-trade.com.ua',
            'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'
        },
        'api': {
            'public': {
                'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']
            },
            'private': {
                'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']
            }
        },
        'markets': {
            'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH' },
            'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },
            'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },
            'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },
            'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },
            'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },
            'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },
            'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },
            'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        signIn: function signIn() {
            return this.privatePostAuth();
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                accounts,
                b,
                account,
                currency,
                balance,
                _this218 = this,
                _arguments199 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments199.length > 0 && _arguments199[0] !== undefined ? _arguments199[0] : {};
                return _this218.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('accounts' in result) {
                    accounts = response['accounts'];

                    for (b = 0; b < accounts.length; b++) {
                        account = accounts[b];
                        currency = account['currency'];
                        balance = parseFloat(account['balance']);

                        result[currency] = {
                            'free': balance,
                            'used': 0.0,
                            'total': balance
                        };
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                bids,
                asks,
                orderbook,
                _this219 = this,
                _arguments200 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments200.length > 1 && _arguments200[1] !== undefined ? _arguments200[1] : {};
                market = _this219.market(symbol);
                return _this219.publicGetTradesBuySymbol(_this219.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                bids = _resp;
                return _this219.publicGetTradesSellSymbol(_this219.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': [],
                    'asks': []
                };

                if (bids) {
                    if ('list' in bids) {
                        orderbook['bids'] = bids['list'];
                    }
                }
                if (asks) {
                    if ('list' in asks) {
                        orderbook['asks'] = asks['list'];
                    }
                }
                return _this219.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                result,
                tickerLength,
                start,
                t,
                candle,
                last,
                _this220 = this;

            return Promise.resolve().then(function () {
                return _this220.publicGetJapanStatHighSymbol({
                    'symbol': _this220.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['trades'];
                timestamp = _this220.milliseconds();
                result = {
                    'timestamp': timestamp,
                    'datetime': _this220.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
                tickerLength = ticker.length;

                if (tickerLength > 0) {
                    start = Math.max(tickerLength - 48, 0);

                    for (t = start; t < ticker.length; t++) {
                        candle = ticker[t];

                        if (typeof result['open'] == 'undefined') {
                            result['open'] = candle[1];
                        }if (typeof result['high'] == 'undefined' || result['high'] < candle[2]) {
                            result['high'] = candle[2];
                        }if (typeof result['low'] == 'undefined' || result['low'] > candle[3]) {
                            result['low'] = candle[3];
                        }if (typeof result['quoteVolume'] == 'undefined') {
                            result['quoteVolume'] = -candle[5];
                        } else {
                            result['quoteVolume'] -= candle[5];
                        }
                    }
                    last = tickerLength - 1;

                    result['close'] = ticker[last][4];
                    result['quoteVolume'] = -1 * result['quoteVolume'];
                }
                return result;
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.milliseconds(); // until we have a better solution for python
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amnt_base'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this221 = this,
                _arguments202 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments202.length > 1 && _arguments202[1] !== undefined ? _arguments202[1] : {};
                market = _this221.market(symbol);
                return _this221.publicGetDealsSymbol(_this221.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this221.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                _this222 = this,
                _arguments203 = arguments;

            price = _arguments203.length > 4 && _arguments203[4] !== undefined ? _arguments203[4] : undefined;
            params = _arguments203.length > 5 && _arguments203[5] !== undefined ? _arguments203[5] : {};

            if (type == 'market') {
                throw new ExchangeError(_this222.id + ' allows limit orders only');
            }market = _this222.market(symbol);
            method = 'privatePost' + _this222.capitalize(side) + 'Id';
            order = {
                'count': amount,
                'currency1': market['quote'],
                'currency': market['base'],
                'price': price
            };

            return _this222[method](_this222.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this223 = this;

            return _this223.privatePostRemoveOrderId({ 'id': id });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += this.implodeParams(path, query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'out_order_id': nonce,
                    'nonce': nonce
                }, query));
                var auth = body + this.secret;
                headers = {
                    'public-key': this.apiKey,
                    'api-sign': this.hash(this.encode(auth), 'sha256'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcturk = extend(btctrader, {

        'id': 'btcturk',
        'name': 'BTCTurk',
        'countries': 'TR', // Turkey
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',
            'api': 'https://www.btcturk.com/api',
            'www': 'https://www.btcturk.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'markets': {
            'BTC/TRY': { 'id': 'BTC/TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' }
        }
    });

    //-----------------------------------------------------------------------------

    var btcx = {

        'id': 'btcx',
        'name': 'BTCX',
        'countries': ['IS', 'US', 'EU'],
        'rateLimit': 1500, // support in english is very poor, unable to tell rate limits
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',
            'api': 'https://btc-x.is/api',
            'www': 'https://btc-x.is',
            'doc': 'https://btc-x.is/custom/api-document.html'
        },
        'api': {
            'public': {
                'get': ['depth/{id}/{limit}', 'ticker/{id}', 'trade/{id}/{limit}']
            },
            'private': {
                'post': ['balance', 'cancel', 'history', 'order', 'redeem', 'trade', 'withdraw']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this224 = this,
                _arguments205 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments205.length > 0 && _arguments205[0] !== undefined ? _arguments205[0] : {};
                return _this224.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balances[currency],
                        'used': 0.0,
                        'total': balances[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this225 = this,
                _arguments206 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments206.length > 1 && _arguments206[1] !== undefined ? _arguments206[1] : {};
                return _this225.publicGetDepthIdLimit(_this225.extend({
                    'id': _this225.marketId(symbol),
                    'limit': 1000
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this225.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this226 = this;

            return Promise.resolve().then(function () {
                return _this226.publicGetTickerId({
                    'id': _this226.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['time'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this226.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['sell']),
                    'ask': parseFloat(ticker['buy']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            var side = trade['type'] == 'ask' ? 'sell' : 'buy';
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this227 = this,
                _arguments208 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments208.length > 1 && _arguments208[1] !== undefined ? _arguments208[1] : {};
                market = _this227.market(symbol);
                return _this227.publicGetTradeIdLimit(_this227.extend({
                    'id': market['id'],
                    'limit': 1000
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this227.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this228 = this,
                _arguments209 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments209.length > 4 && _arguments209[4] !== undefined ? _arguments209[4] : undefined;
                params = _arguments209.length > 5 && _arguments209[5] !== undefined ? _arguments209[5] : {};
                return _this228.privatePostTrade(_this228.extend({
                    'type': side.toUpperCase(),
                    'market': _this228.marketId(symbol),
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order']['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this229 = this;

            return _this229.privatePostCancel({ 'order': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this230 = this,
                _arguments211 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments211.length > 1 && _arguments211[1] !== undefined ? _arguments211[1] : 'public';
                method = _arguments211.length > 2 && _arguments211[2] !== undefined ? _arguments211[2] : 'GET';
                params = _arguments211.length > 3 && _arguments211[3] !== undefined ? _arguments211[3] : {};
                headers = _arguments211.length > 4 && _arguments211[4] !== undefined ? _arguments211[4] : undefined;
                body = _arguments211.length > 5 && _arguments211[5] !== undefined ? _arguments211[5] : undefined;
                url = _this230.urls['api'] + '/' + _this230.version + '/';

                if (api == 'public') {
                    url += _this230.implodeParams(path, params);
                } else {
                    nonce = _this230.nonce();

                    url += api;
                    body = _this230.urlencode(_this230.extend({
                        'Method': path.toUpperCase(),
                        'Nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this230.apiKey,
                        'Signature': _this230.hmac(_this230.encode(body), _this230.encode(_this230.secret), 'sha512')
                    };
                }
                return _this230.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this230.id + ' ' + _this230.json(response['error']));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bter = {
        'id': 'bter',
        'name': 'Bter',
        'countries': ['VG', 'CN'], // British Virgin Islands, China
        'version': '2',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',
            'api': {
                'public': 'https://data.bter.com/api',
                'private': 'https://api.bter.com/api'
            },
            'www': 'https://bter.com',
            'doc': 'https://bter.com/api2'
        },
        'api': {
            'public': {
                'get': ['pairs', 'marketinfo', 'marketlist', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']
            },
            'private': {
                'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this231 = this;

            return Promise.resolve().then(function () {
                return _this231.publicGetMarketlist();
            }).then(function (_resp) {
                response = _resp;
                markets = response['data'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['pair'];
                    base = market['curr_a'];
                    quote = market['curr_b'];

                    base = _this231.commonCurrencyCode(base);
                    quote = _this231.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balance,
                result,
                c,
                currency,
                code,
                account,
                _this232 = this,
                _arguments213 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments213.length > 0 && _arguments213[0] !== undefined ? _arguments213[0] : {};
                return _this232.loadMarkets();
            }).then(function () {
                return _this232.privatePostBalances();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this232.currencies.length; c++) {
                    currency = _this232.currencies[c];
                    code = _this232.commonCurrencyCode(currency);
                    account = _this232.account();

                    if ('available' in balance) {
                        if (currency in balance['available']) {
                            account['free'] = parseFloat(balance['available'][currency]);
                        }
                    }
                    if ('locked' in balance) {
                        if (currency in balance['locked']) {
                            account['used'] = parseFloat(balance['locked'][currency]);
                        }
                    }
                    account['total'] = _this232.sum(account['free'], account['used']);
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                result,
                _this233 = this,
                _arguments214 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments214.length > 1 && _arguments214[1] !== undefined ? _arguments214[1] : {};
                return _this233.loadMarkets();
            }).then(function () {
                return _this233.publicGetOrderBookId(_this233.extend({
                    'id': _this233.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this233.parseOrderBook(orderbook);

                result['asks'] = _this233.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                _id$split5,
                _id$split6,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                ticker,
                market,
                _this234 = this;

            return Promise.resolve().then(function () {
                return _this234.loadMarkets();
            }).then(function () {
                return _this234.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _id$split5 = id.split('_');
                    _id$split6 = _slicedToArray(_id$split5, 2);
                    baseId = _id$split6[0];
                    quoteId = _id$split6[1];
                    base = baseId.toUpperCase();
                    quote = quoteId.toUpperCase();

                    base = _this234.commonCurrencyCode(base);
                    quote = _this234.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;
                    ticker = tickers[id];
                    market = undefined;

                    if (symbol in _this234.markets) {
                        market = _this234.markets[symbol];
                    }if (id in _this234.markets_by_id) {
                        market = _this234.markets_by_id[id];
                    }result[symbol] = _this234.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this235 = this;

            return Promise.resolve().then(function () {
                return _this235.loadMarkets();
            }).then(function () {
                market = _this235.market(symbol);
                return _this235.publicGetTickerId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this235.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['timestamp']) * 1000;
            return {
                'id': trade['tradeID'],
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['rate'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this236 = this,
                _arguments217 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments217.length > 1 && _arguments217[1] !== undefined ? _arguments217[1] : {};
                market = _this236.market(symbol);
                return _this236.loadMarkets();
            }).then(function () {
                return _this236.publicGetTradeHistoryId(_this236.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this236.parseTrades(response['data'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this237 = this,
                _arguments218 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments218.length > 4 && _arguments218[4] !== undefined ? _arguments218[4] : undefined;
                params = _arguments218.length > 5 && _arguments218[5] !== undefined ? _arguments218[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this237.id + ' allows limit orders only');
                }return _this237.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this237.capitalize(side);
                order = {
                    'currencyPair': _this237.marketId(symbol),
                    'rate': price,
                    'amount': amount
                };
                return _this237[method](_this237.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderNumber']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this238 = this;

            return Promise.resolve().then(function () {
                return _this238.loadMarkets();
            }).then(function () {
                return _this238.privatePostCancelOrder({ 'orderNumber': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                prefix,
                url,
                query,
                nonce,
                request,
                signature,
                response,
                _this239 = this,
                _arguments220 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments220.length > 1 && _arguments220[1] !== undefined ? _arguments220[1] : 'public';
                method = _arguments220.length > 2 && _arguments220[2] !== undefined ? _arguments220[2] : 'GET';
                params = _arguments220.length > 3 && _arguments220[3] !== undefined ? _arguments220[3] : {};
                headers = _arguments220.length > 4 && _arguments220[4] !== undefined ? _arguments220[4] : undefined;
                body = _arguments220.length > 5 && _arguments220[5] !== undefined ? _arguments220[5] : undefined;
                prefix = api == 'private' ? api + '/' : '';
                url = _this239.urls['api'][api] + _this239.version + '/1/' + prefix + _this239.implodeParams(path, params);
                query = _this239.omit(params, _this239.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this239.urlencode(query);
                    }
                } else {
                    nonce = _this239.nonce();
                    request = { 'nonce': nonce };

                    body = _this239.urlencode(_this239.extend(request, query));
                    signature = _this239.hmac(_this239.encode(body), _this239.encode(_this239.secret), 'sha512');

                    headers = {
                        'Key': _this239.apiKey,
                        'Sign': signature,
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString()
                    };
                }
                return _this239.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] != 'true') {
                        throw new ExchangeError(_this239.id + ' ' + _this239.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bxinth = {

        'id': 'bxinth',
        'name': 'BX.in.th',
        'countries': 'TH', // Thailand
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',
            'api': 'https://bx.in.th/api',
            'www': 'https://bx.in.th',
            'doc': 'https://bx.in.th/info/api'
        },
        'api': {
            'public': {
                'get': ['', // ticker
                'options', 'optionbook', 'orderbook', 'pairing', 'trade', 'tradehistory']
            },
            'private': {
                'post': ['balance', 'biller', 'billgroup', 'billpay', 'cancel', 'deposit', 'getorders', 'history', 'option-issue', 'option-bid', 'option-sell', 'option-myissue', 'option-mybid', 'option-myoptions', 'option-exercise', 'option-cancel', 'option-history', 'order', 'withdrawal', 'withdrawal-history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this240 = this;

            return Promise.resolve().then(function () {
                return _this240.publicGetPairing();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets[keys[p]];
                    id = market['pairing_id'].toString();
                    base = market['primary_currency'];
                    quote = market['secondary_currency'];

                    base = _this240.commonCurrencyCode(base);
                    quote = _this240.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        commonCurrencyCode: function commonCurrencyCode(currency) {
            // why would they use three letters instead of four for currency codes
            if (currency == 'DAS') return 'DASH';
            if (currency == 'DOG') return 'DOGE';
            return currency;
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                result,
                currencies,
                c,
                currency,
                code,
                account,
                _this241 = this,
                _arguments222 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments222.length > 0 && _arguments222[0] !== undefined ? _arguments222[0] : {};
                return _this241.loadMarkets();
            }).then(function () {
                return _this241.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balance'];
                result = { 'info': balance };
                currencies = Object.keys(balance);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = _this241.commonCurrencyCode(currency);
                    account = {
                        'free': parseFloat(balance[currency]['available']),
                        'used': 0.0,
                        'total': parseFloat(balance[currency]['total'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this242 = this,
                _arguments223 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments223.length > 1 && _arguments223[1] !== undefined ? _arguments223[1] : {};
                return _this242.loadMarkets();
            }).then(function () {
                return _this242.publicGetOrderbook(_this242.extend({
                    'pairing': _this242.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this242.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['orderbook']['bids']['highbid']),
                'ask': parseFloat(ticker['orderbook']['asks']['highbid']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_price']),
                'change': parseFloat(ticker['change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume_24hours']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                ticker,
                market,
                symbol,
                _this243 = this;

            return Promise.resolve().then(function () {
                return _this243.loadMarkets();
            }).then(function () {
                return _this243.publicGet();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    ticker = tickers[id];
                    market = _this243.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this243.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                id,
                ticker,
                _this244 = this;

            return Promise.resolve().then(function () {
                return _this244.loadMarkets();
            }).then(function () {
                market = _this244.market(symbol);
                return _this244.publicGet({ 'pairing': market['id'] });
            }).then(function (_resp) {
                tickers = _resp;
                id = market['id'].toString();
                ticker = tickers[id];

                return _this244.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['trade_date']);
            return {
                'id': trade['trade_id'],
                'info': trade,
                'order': trade['order_id'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['trade_type'],
                'price': parseFloat(trade['rate']),
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this245 = this,
                _arguments226 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments226.length > 1 && _arguments226[1] !== undefined ? _arguments226[1] : {};
                return _this245.loadMarkets();
            }).then(function () {
                market = _this245.market(symbol);
                return _this245.publicGetTrade(_this245.extend({
                    'pairing': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this245.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this246 = this,
                _arguments227 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments227.length > 4 && _arguments227[4] !== undefined ? _arguments227[4] : undefined;
                params = _arguments227.length > 5 && _arguments227[5] !== undefined ? _arguments227[5] : {};
                return _this246.loadMarkets();
            }).then(function () {
                return _this246.privatePostOrder(_this246.extend({
                    'pairing': _this246.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var pairing,
                _this247 = this;

            return Promise.resolve().then(function () {
                return _this247.loadMarkets();
            }).then(function () {
                pairing = undefined; // TODO fixme

                return _this247.privatePostCancel({
                    'order_id': id,
                    'pairing': pairing
                });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test6,
                _this248 = this,
                _arguments229 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments229.length > 1 && _arguments229[1] !== undefined ? _arguments229[1] : 'public';
                method = _arguments229.length > 2 && _arguments229[2] !== undefined ? _arguments229[2] : 'GET';
                params = _arguments229.length > 3 && _arguments229[3] !== undefined ? _arguments229[3] : {};
                headers = _arguments229.length > 4 && _arguments229[4] !== undefined ? _arguments229[4] : undefined;
                body = _arguments229.length > 5 && _arguments229[5] !== undefined ? _arguments229[5] : undefined;
                url = _this248.urls['api'] + '/';

                if (path) {
                    url += path + '/';
                }if (Object.keys(params).length) {
                    url += '?' + _this248.urlencode(params);
                }if (api == 'private') {
                    nonce = _this248.nonce();
                    auth = _this248.apiKey + nonce.toString() + _this248.secret;
                    signature = _this248.hash(_this248.encode(auth), 'sha256');

                    body = _this248.urlencode(_this248.extend({
                        'key': _this248.apiKey,
                        'nonce': nonce,
                        'signature': signature
                        // twofa: this.twofa,
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this248.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test6 = 'success' in response;

                    if (_test6 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this248.id + ' ' + _this248.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var ccex = {

        'id': 'ccex',
        'name': 'C-CEX',
        'countries': ['DE', 'EU'],
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',
            'api': {
                'tickers': 'https://c-cex.com/t',
                'public': 'https://c-cex.com/t/api_pub.html',
                'private': 'https://c-cex.com/t/api.html'
            },
            'www': 'https://c-cex.com',
            'doc': 'https://c-cex.com/?id=api'
        },
        'api': {
            'tickers': {
                'get': ['coinnames', '{market}', 'pairs', 'prices', 'volume_{coin}']
            },
            'public': {
                'get': ['balancedistribution', 'markethistory', 'markets', 'marketsummaries', 'orderbook']
            },
            'private': {
                'get': ['buylimit', 'cancel', 'getbalance', 'getbalances', 'getopenorders', 'getorder', 'getorderhistory', 'mytrades', 'selllimit']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this249 = this;

            return Promise.resolve().then(function () {
                return _this249.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['result'].length; p++) {
                    market = markets['result'][p];
                    id = market['MarketName'];
                    base = market['MarketCurrency'];
                    quote = market['BaseCurrency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this250 = this,
                _arguments231 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments231.length > 0 && _arguments231[0] !== undefined ? _arguments231[0] : {};
                return _this250.loadMarkets();
            }).then(function () {
                return _this250.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    account = {
                        'free': balance['Available'],
                        'used': balance['Pending'],
                        'total': balance['Balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this251 = this,
                _arguments232 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments232.length > 1 && _arguments232[1] !== undefined ? _arguments232[1] : {};
                return _this251.loadMarkets();
            }).then(function () {
                return _this251.publicGetOrderbook(_this251.extend({
                    'market': _this251.marketId(symbol),
                    'type': 'both',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];

                return _this251.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');
            });
        },
        parseTicker: function parseTicker(ticker) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = ticker['updated'] * 1000;
            var volume = undefined;
            if ('buysupport' in ticker) volume = parseFloat(ticker['buysupport']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['lastprice']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                ids,
                i,
                id,
                ticker,
                uppercase,
                market,
                symbol,
                _uppercase$split,
                _uppercase$split2,
                base,
                quote,
                _this252 = this;

            return Promise.resolve().then(function () {
                return _this252.loadMarkets();
            }).then(function () {
                return _this252.tickersGetPrices();
            }).then(function (_resp) {
                tickers = _resp;
                result = { 'info': tickers };
                ids = Object.keys(tickers);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    ticker = tickers[id];
                    uppercase = id.toUpperCase();
                    market = undefined;
                    symbol = undefined;

                    if (uppercase in _this252.markets_by_id) {
                        market = _this252.markets_by_id[uppercase];
                        symbol = market['symbol'];
                    } else {
                        _uppercase$split = uppercase.split('-');
                        _uppercase$split2 = _slicedToArray(_uppercase$split, 2);
                        base = _uppercase$split2[0];
                        quote = _uppercase$split2[1];

                        symbol = base + '/' + quote;
                    }
                    result[symbol] = _this252.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this253 = this;

            return Promise.resolve().then(function () {
                return _this253.loadMarkets();
            }).then(function () {
                market = _this253.market(symbol);
                return _this253.tickersGetMarket({
                    'market': market['id'].toLowerCase()
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this253.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['TimeStamp']);
            return {
                'id': trade['Id'],
                'info': trade,
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['OrderType'].toLowerCase(),
                'price': trade['Price'],
                'amount': trade['Quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this254 = this,
                _arguments235 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments235.length > 1 && _arguments235[1] !== undefined ? _arguments235[1] : {};
                return _this254.loadMarkets();
            }).then(function () {
                market = _this254.market(symbol);
                return _this254.publicGetMarkethistory(_this254.extend({
                    'market': _this254.marketId(market),
                    'type': 'both',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this254.parseTrades(response['result'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                response,
                _this255 = this,
                _arguments236 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments236.length > 4 && _arguments236[4] !== undefined ? _arguments236[4] : undefined;
                params = _arguments236.length > 5 && _arguments236[5] !== undefined ? _arguments236[5] : {};
                return _this255.loadMarkets();
            }).then(function () {
                method = 'privateGet' + _this255.capitalize(side) + type;
                return _this255[method](_this255.extend({
                    'market': _this255.marketId(symbol),
                    'quantity': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this256 = this;

            return Promise.resolve().then(function () {
                return _this256.loadMarkets();
            }).then(function () {
                return _this256.privateGetCancel({ 'uuid': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                response,
                _test7,
                _this257 = this,
                _arguments238 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments238.length > 1 && _arguments238[1] !== undefined ? _arguments238[1] : 'public';
                method = _arguments238.length > 2 && _arguments238[2] !== undefined ? _arguments238[2] : 'GET';
                params = _arguments238.length > 3 && _arguments238[3] !== undefined ? _arguments238[3] : {};
                headers = _arguments238.length > 4 && _arguments238[4] !== undefined ? _arguments238[4] : undefined;
                body = _arguments238.length > 5 && _arguments238[5] !== undefined ? _arguments238[5] : undefined;
                url = _this257.urls['api'][api];

                if (api == 'private') {
                    nonce = _this257.nonce().toString();
                    query = _this257.keysort(_this257.extend({
                        'a': path,
                        'apikey': _this257.apiKey,
                        'nonce': nonce
                    }, params));

                    url += '?' + _this257.urlencode(query);
                    headers = { 'apisign': _this257.hmac(_this257.encode(url), _this257.encode(_this257.secret), 'sha512') };
                } else {
                    if (api == 'public') {
                        url += '?' + _this257.urlencode(_this257.extend({
                            'a': 'get' + path
                        }, params));
                    } else {
                        url += '/' + _this257.implodeParams(path, params) + '.json';
                    }
                }return _this257.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'tickers') {
                    return response;
                } else {
                    _test7 = 'success' in response;

                    if (_test7 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this257.id + ' ' + _this257.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cex = {

        'id': 'cex',
        'name': 'CEX.IO',
        'countries': ['GB', 'EU', 'CY', 'RU'],
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
            'api': 'https://cex.io/api',
            'www': 'https://cex.io',
            'doc': 'https://cex.io/cex-api'
        },
        'api': {
            'public': {
                'get': ['currency_limits', 'last_price/{pair}', 'last_prices/{currencies}', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}', 'ticker/{pair}', 'tickers/{currencies}', 'trade_history/{pair}'],
                'post': ['convert/{pair}', 'price_stats/{pair}']
            },
            'private': {
                'post': ['active_orders_status/', 'archived_orders/{pair}', 'balance/', 'cancel_order/', 'cancel_orders/{pair}', 'cancel_replace_order/{pair}', 'close_position/{pair}', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}', 'open_orders/', 'open_position/{pair}', 'open_positions/{pair}', 'place_order/{pair}', 'place_order/{pair}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split5,
                _symbol$split6,
                base,
                quote,
                _this258 = this;

            return Promise.resolve().then(function () {
                return _this258.publicGetCurrencyLimits();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['data']['pairs'].length; p++) {
                    market = markets['data']['pairs'][p];
                    id = market['symbol1'] + '/' + market['symbol2'];
                    symbol = id;
                    _symbol$split5 = symbol.split('/');
                    _symbol$split6 = _slicedToArray(_symbol$split5, 2);
                    base = _symbol$split6[0];
                    quote = _symbol$split6[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                account,
                _this259 = this,
                _arguments240 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments240.length > 0 && _arguments240[0] !== undefined ? _arguments240[0] : {};
                return _this259.loadMarkets();
            }).then(function () {
                return _this259.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this259.currencies.length; c++) {
                    currency = _this259.currencies[c];
                    account = {
                        'free': parseFloat(balances[currency]['available']),
                        'used': parseFloat(balances[currency]['orders']),
                        'total': 0.0
                    };

                    account['total'] = _this259.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this260 = this,
                _arguments241 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments241.length > 1 && _arguments241[1] !== undefined ? _arguments241[1] : {};
                return _this260.loadMarkets();
            }).then(function () {
                return _this260.publicGetOrderBookPair(_this260.extend({
                    'pair': _this260.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;

                return _this260.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = parseInt(ticker['timestamp']) * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currencies,
                response,
                tickers,
                result,
                t,
                ticker,
                symbol,
                market,
                _this261 = this;

            return Promise.resolve().then(function () {
                return _this261.loadMarkets();
            }).then(function () {
                currencies = _this261.currencies.join('/');
                return _this261.publicGetTickersCurrencies({
                    'currencies': currencies
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['data'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    symbol = ticker['pair'].replace(':', '/');
                    market = _this261.markets[symbol];

                    result[symbol] = _this261.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this262 = this;

            return Promise.resolve().then(function () {
                return _this262.loadMarkets();
            }).then(function () {
                market = _this262.market(symbol);
                return _this262.publicGetTickerPair({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this262.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this263 = this,
                _arguments244 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments244.length > 1 && _arguments244[1] !== undefined ? _arguments244[1] : {};
                return _this263.loadMarkets();
            }).then(function () {
                market = _this263.market(symbol);
                return _this263.publicGetTradeHistoryPair(_this263.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this263.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this264 = this,
                _arguments245 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments245.length > 4 && _arguments245[4] !== undefined ? _arguments245[4] : undefined;
                params = _arguments245.length > 5 && _arguments245[5] !== undefined ? _arguments245[5] : {};
                return _this264.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this264.marketId(symbol),
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['order_type'] = type;
                }return _this264.privatePostPlaceOrderPair(_this264.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this265 = this;

            return Promise.resolve().then(function () {
                return _this265.loadMarkets();
            }).then(function () {
                return _this265.privatePostCancelOrder({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _test8,
                _test9,
                _this266 = this,
                _arguments247 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments247.length > 1 && _arguments247[1] !== undefined ? _arguments247[1] : 'public';
                method = _arguments247.length > 2 && _arguments247[2] !== undefined ? _arguments247[2] : 'GET';
                params = _arguments247.length > 3 && _arguments247[3] !== undefined ? _arguments247[3] : {};
                headers = _arguments247.length > 4 && _arguments247[4] !== undefined ? _arguments247[4] : undefined;
                body = _arguments247.length > 5 && _arguments247[5] !== undefined ? _arguments247[5] : undefined;
                url = _this266.urls['api'] + '/' + _this266.implodeParams(path, params);
                query = _this266.omit(params, _this266.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this266.urlencode(query);
                    }
                } else {
                    if (!_this266.uid) {
                        throw new AuthenticationError(_this266.id + ' requires `' + _this266.id + '.uid` property for authentication');
                    }nonce = _this266.nonce().toString();
                    auth = nonce + _this266.uid + _this266.apiKey;
                    signature = _this266.hmac(_this266.encode(auth), _this266.encode(_this266.secret));

                    body = _this266.urlencode(_this266.extend({
                        'key': _this266.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this266.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test8 = 'e' in response;
                _test9 = _test8 && 'ok' in response;

                if (_test9 && response['ok'] == 'ok') {
                    return response;
                } else {
                    if (_test8) {
                        throw new ExchangeError(_this266.id + ' ' + _this266.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chbtc = {
        'id': 'chbtc',
        'name': 'CHBTC',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',
            'api': {
                'public': 'http://api.chbtc.com/data', // no https for public API
                'private': 'https://trade.chbtc.com/api'
            },
            'www': 'https://trade.chbtc.com/api',
            'doc': 'https://www.chbtc.com/i/developer'
        },
        'api': {
            'public': {
                'get': ['ticker', 'depth', 'trades', 'kline']
            },
            'private': {
                'post': ['order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
            'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },
            'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                account,
                _this267 = this,
                _arguments248 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments248.length > 0 && _arguments248[0] !== undefined ? _arguments248[0] : {};
                return _this267.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (c = 0; c < _this267.currencies.length; c++) {
                    currency = _this267.currencies[c];
                    account = _this267.account();

                    if (currency in balances['balance']) {
                        account['free'] = parseFloat(balances['balance'][currency]['amount']);
                    }if (currency in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][currency]['amount']);
                    }account['total'] = _this267.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this268 = this,
                _arguments249 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments249.length > 1 && _arguments249[1] !== undefined ? _arguments249[1] : {};
                market = _this268.market(symbol);
                return _this268.publicGetDepth(_this268.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this268.milliseconds();
                bids = undefined;
                asks = undefined;

                if ('bids' in orderbook) {
                    bids = orderbook['bids'];
                }if ('asks' in orderbook) {
                    asks = orderbook['asks'];
                }result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this268.iso8601(timestamp)
                };

                if (result['bids']) {
                    result['bids'] = _this268.sortBy(result['bids'], 0, true);
                }if (result['asks']) {
                    result['asks'] = _this268.sortBy(result['asks'], 0);
                }return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this269 = this;

            return Promise.resolve().then(function () {
                return _this269.publicGetTicker({
                    'currency': _this269.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = _this269.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this269.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['date'] * 1000;
            var side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this270 = this,
                _arguments251 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments251.length > 1 && _arguments251[1] !== undefined ? _arguments251[1] : {};
                return _this270.loadMarkets();
            }).then(function () {
                market = _this270.market(symbol);
                return _this270.publicGetTrades(_this270.extend({
                    'currency': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this270.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                paramString,
                tradeType,
                response,
                _this271 = this,
                _arguments252 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments252.length > 4 && _arguments252[4] !== undefined ? _arguments252[4] : undefined;
                params = _arguments252.length > 5 && _arguments252[5] !== undefined ? _arguments252[5] : {};
                paramString = '&price=' + price.toString();

                paramString += '&amount=' + amount.toString();
                tradeType = side == 'buy' ? '1' : '0';

                paramString += '&tradeType=' + tradeType;
                paramString += '&currency=' + _this271.marketId(symbol);
                return _this271.privatePostOrder(paramString);
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                paramString,
                _this272 = this,
                _arguments253 = arguments;

            params = _arguments253.length > 1 && _arguments253[1] !== undefined ? _arguments253[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this272.privatePostCancelOrder(paramString);
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                paramString,
                _this273 = this,
                _arguments254 = arguments;

            params = _arguments254.length > 1 && _arguments254[1] !== undefined ? _arguments254[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this273.privatePostGetOrder(paramString);
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                paramsLength,
                nonce,
                auth,
                secret,
                signature,
                suffix,
                response,
                _this274 = this,
                _arguments255 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments255.length > 1 && _arguments255[1] !== undefined ? _arguments255[1] : 'public';
                method = _arguments255.length > 2 && _arguments255[2] !== undefined ? _arguments255[2] : 'GET';
                params = _arguments255.length > 3 && _arguments255[3] !== undefined ? _arguments255[3] : {};
                headers = _arguments255.length > 4 && _arguments255[4] !== undefined ? _arguments255[4] : undefined;
                body = _arguments255.length > 5 && _arguments255[5] !== undefined ? _arguments255[5] : undefined;
                url = _this274.urls['api'][api];

                if (api == 'public') {
                    url += '/' + _this274.version + '/' + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this274.urlencode(params);
                    }
                } else {
                    paramsLength = params.length; // params should be a string here

                    nonce = _this274.nonce();
                    auth = 'method=' + path;

                    auth += '&accesskey=' + _this274.apiKey;
                    auth += paramsLength ? params : '';
                    secret = _this274.hash(_this274.encode(_this274.secret), 'sha1');
                    signature = _this274.hmac(_this274.encode(auth), _this274.encode(secret), 'md5');
                    suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();

                    url += '/' + path + '?' + auth + '&' + suffix;
                }
                return _this274.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('code' in response) {
                        throw new ExchangeError(_this274.id + ' ' + _this274.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chilebit = extend(blinktrade, {
        'id': 'chilebit',
        'name': 'ChileBit',
        'countries': 'CL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://chilebit.net',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var coincheck = {

        'id': 'coincheck',
        'name': 'coincheck',
        'countries': ['JP', 'ID'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',
            'api': 'https://coincheck.com/api',
            'www': 'https://coincheck.com',
            'doc': 'https://coincheck.com/documents/exchange/api'
        },
        'api': {
            'public': {
                'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']
            },
            'private': {
                'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],
                'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],
                'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']
            }
        },
        'markets': {
            'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }, // the only real pair
            'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },
            'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },
            'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },
            'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },
            'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },
            'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },
            'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },
            'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },
            'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },
            'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },
            'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },
            'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },
            'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                reserved,
                _this275 = this,
                _arguments256 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments256.length > 0 && _arguments256[0] !== undefined ? _arguments256[0] : {};
                return _this275.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this275.currencies.length; c++) {
                    currency = _this275.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this275.account();

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]);
                    }reserved = lowercase + '_reserved';

                    if (reserved in balances) {
                        account['used'] = parseFloat(balances[reserved]);
                    }account['total'] = _this275.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this276 = this,
                _arguments257 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments257.length > 1 && _arguments257[1] !== undefined ? _arguments257[1] : {};
                return _this276.publicGetOrderBooks(params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this276.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this277 = this;

            return Promise.resolve().then(function () {
                return _this277.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this277.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['created_at']);
            return {
                'id': trade['id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['order_type'],
                'price': parseFloat(trade['rate']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this278 = this,
                _arguments259 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments259.length > 1 && _arguments259[1] !== undefined ? _arguments259[1] : {};
                market = _this278.market(symbol);
                return _this278.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this278.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                order_type,
                _prefix,
                response,
                _this279 = this,
                _arguments260 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments260.length > 4 && _arguments260[4] !== undefined ? _arguments260[4] : undefined;
                params = _arguments260.length > 5 && _arguments260[5] !== undefined ? _arguments260[5] : {};
                prefix = '';
                order = {
                    'pair': _this279.marketId(symbol)
                };

                if (type == 'market') {
                    order_type = type + '_' + side;

                    order['order_type'] = order_type;
                    _prefix = side == 'buy' ? order_type + '_' : '';

                    order[_prefix + 'amount'] = amount;
                } else {
                    order['order_type'] = side;
                    order['rate'] = price;
                    order['amount'] = amount;
                }
                return _this279.privatePostExchangeOrders(_this279.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this280 = this;

            return _this280.privateDeleteExchangeOrdersId({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                length,
                auth,
                response,
                _test10,
                _this281 = this,
                _arguments262 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments262.length > 1 && _arguments262[1] !== undefined ? _arguments262[1] : 'public';
                method = _arguments262.length > 2 && _arguments262[2] !== undefined ? _arguments262[2] : 'GET';
                params = _arguments262.length > 3 && _arguments262[3] !== undefined ? _arguments262[3] : {};
                headers = _arguments262.length > 4 && _arguments262[4] !== undefined ? _arguments262[4] : undefined;
                body = _arguments262.length > 5 && _arguments262[5] !== undefined ? _arguments262[5] : undefined;
                url = _this281.urls['api'] + '/' + _this281.implodeParams(path, params);
                query = _this281.omit(params, _this281.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this281.urlencode(query);
                    }
                } else {
                    nonce = _this281.nonce().toString();
                    length = 0;

                    if (Object.keys(query).length) {
                        body = _this281.urlencode(_this281.keysort(query));
                        length = body.length;
                    }
                    auth = nonce + url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': length,
                        'ACCESS-KEY': _this281.apiKey,
                        'ACCESS-NONCE': nonce,
                        'ACCESS-SIGNATURE': _this281.hmac(_this281.encode(auth), _this281.encode(_this281.secret))
                    };
                }
                return _this281.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'public') {
                    return response;
                } else {
                    _test10 = 'success' in response;

                    if (_test10 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this281.id + ' ' + _this281.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinfloor = {

        'id': 'coinfloor',
        'name': 'coinfloor',
        'rateLimit': 1000,
        'countries': 'UK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg',
            'api': 'https://webapi.coinfloor.co.uk:8090/bist',
            'www': 'https://www.coinfloor.co.uk',
            'doc': ['https://github.com/coinfloor/api', 'https://www.coinfloor.co.uk/api']
        },
        'api': {
            'public': {
                'get': ['{id}/ticker/', '{id}/order_book/', '{id}/transactions/']
            },
            'private': {
                'post': ['{id}/balance/', '{id}/user_transactions/', '{id}/open_orders/', '{id}/cancel_order/', '{id}/buy/', '{id}/sell/', '{id}/buy_market/', '{id}/sell_market/', '{id}/estimate_sell_market/', '{id}/estimate_buy_market/']
            }
        },
        'markets': {
            'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/USD': { 'id': 'XBT/USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/PLN': { 'id': 'XBT/PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BCH/GBP': { 'id': 'BCH/GBP', 'symbol': 'BCH/GBP', 'base': 'BCH', 'quote': 'GBP' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                symbol,
                _this282 = this,
                _arguments263 = arguments;

            params = _arguments263.length > 0 && _arguments263[0] !== undefined ? _arguments263[0] : {};
            symbol = undefined;

            if ('symbol' in params) {
                symbol = params['symbol'];
            }if ('id' in params) {
                symbol = params['id'];
            }if (!symbol) {
                throw new ExchangeError(_this282.id + ' fetchBalance requires a symbol param');
            }return _this282.privatePostIdBalance({
                'id': _this282.marketId(symbol)
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var orderbook,
                _this283 = this;

            return Promise.resolve().then(function () {
                return _this283.publicGetIdOrderBook({
                    'id': _this283.marketId(symbol)
                });
            }).then(function (_resp) {
                orderbook = _resp;

                return _this283.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            // rewrite to get the timestamp from HTTP headers
            var timestamp = this.milliseconds();
            // they sometimes return null for vwap
            var vwap = undefined;
            if ('vwap' in ticker) if (ticker['vwap']) vwap = parseFloat(ticker['vwap']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': vwap,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this284 = this;

            return Promise.resolve().then(function () {
                market = _this284.market(symbol);
                return _this284.publicGetIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this284.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this285 = this,
                _arguments266 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments266.length > 1 && _arguments266[1] !== undefined ? _arguments266[1] : {};
                market = _this285.market(symbol);
                return _this285.publicGetIdTransactions(_this285.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this285.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                method,
                _this286 = this,
                _arguments267 = arguments;

            price = _arguments267.length > 4 && _arguments267[4] !== undefined ? _arguments267[4] : undefined;
            params = _arguments267.length > 5 && _arguments267[5] !== undefined ? _arguments267[5] : {};
            order = { 'id': _this286.marketId(symbol) };
            method = 'privatePostId' + _this286.capitalize(side);

            if (type == 'market') {
                order['quantity'] = amount;
                method += 'Market';
            } else {
                order['price'] = price;
                order['amount'] = amount;
            }
            return _this286[method](_this286.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this287 = this;

            return _this287.privatePostIdCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/
            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({ 'nonce': nonce }, query));
                var auth = this.uid + '/' + this.apiKey + ':' + this.password;
                var signature = this.stringToBase64(auth);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + signature
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coingi = {

        'id': 'coingi',
        'name': 'Coingi',
        'rateLimit': 1000,
        'countries': ['PA', 'BG', 'CN', 'US'], // Panama, Bulgaria, China, US
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',
            'api': 'https://api.coingi.com',
            'www': 'https://coingi.com',
            'doc': 'http://docs.coingi.apiary.io/'
        },
        'api': {
            'current': {
                'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']
            },
            'user': {
                'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']
            }
        },
        'markets': {
            'LTC/BTC': { 'id': 'ltc-btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'PPC/BTC': { 'id': 'ppc-btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'doge-btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'VTC/BTC': { 'id': 'vtc-btc', 'symbol': 'VTC/BTC', 'base': 'VTC', 'quote': 'BTC' },
            'FTC/BTC': { 'id': 'ftc-btc', 'symbol': 'FTC/BTC', 'base': 'FTC', 'quote': 'BTC' },
            'NMC/BTC': { 'id': 'nmc-btc', 'symbol': 'NMC/BTC', 'base': 'NMC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash-btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                currencies,
                c,
                currency,
                balances,
                result,
                b,
                balance,
                _currency3,
                account,
                _this288 = this,
                _arguments269 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments269.length > 0 && _arguments269[0] !== undefined ? _arguments269[0] : {};
                currencies = [];

                for (c = 0; c < _this288.currencies.length; c++) {
                    currency = _this288.currencies[c].toLowerCase();

                    currencies.push(currency);
                }
                return _this288.userPostBalance({
                    'currencies': currencies.join(',')
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    _currency3 = balance['currency']['name'];

                    _currency3 = _currency3.toUpperCase();
                    account = {
                        'free': balance['available'],
                        'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],
                        'total': 0.0
                    };

                    account['total'] = _this288.sum(account['free'], account['used']);
                    result[_currency3] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this289 = this,
                _arguments270 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments270.length > 1 && _arguments270[1] !== undefined ? _arguments270[1] : {};
                market = _this289.market(symbol);
                return _this289.currentGetOrderBookPairAskCountBidCountDepth(_this289.extend({
                    'pair': market['id'],
                    'askCount': 512, // maximum returned number of asks 1-512
                    'bidCount': 512, // maximum returned number of bids 1-512
                    'depth': 32 // maximum number of depth range steps 1-32
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this289.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['high'],
                'low': ticker['low'],
                'bid': ticker['highestBid'],
                'ask': ticker['lowestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': undefined,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': ticker['baseVolume'],
                'quoteVolume': ticker['counterVolume'],
                'info': ticker
            };
            return ticker;
        },
        fetchTickers: function fetchTickers() {
            var symbols,
                response,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this290 = this,
                _arguments271 = arguments;

            return Promise.resolve().then(function () {
                symbols = _arguments271.length > 0 && _arguments271[0] !== undefined ? _arguments271[0] : undefined;
                return _this290.currentGet24hourRollingAggregation();
            }).then(function (_resp) {
                response = _resp;
                result = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    base = ticker['currencyPair']['base'].toUpperCase();
                    quote = ticker['currencyPair']['counter'].toUpperCase();
                    symbol = base + '/' + quote;
                    market = _this290.markets[symbol];

                    result[symbol] = _this290.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var tickers,
                _this291 = this;

            return Promise.resolve().then(function () {
                return _this291.fetchTickers(symbol);
            }).then(function (_resp) {
                tickers = _resp;

                return tickers[symbol];
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'id': trade['id'],
                'info': trade,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined, // type
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this292 = this,
                _arguments273 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments273.length > 1 && _arguments273[1] !== undefined ? _arguments273[1] : {};
                market = _this292.market(symbol);
                return _this292.currentGetTransactionsPairMaxCount(_this292.extend({
                    'pair': market['id'],
                    'maxCount': 128
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this292.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this293 = this,
                _arguments274 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments274.length > 4 && _arguments274[4] !== undefined ? _arguments274[4] : undefined;
                params = _arguments274.length > 5 && _arguments274[5] !== undefined ? _arguments274[5] : {};
                order = {
                    'currencyPair': _this293.marketId(symbol),
                    'volume': amount,
                    'price': price,
                    'orderType': side == 'buy' ? 0 : 1
                };
                return _this293.userPostAddOrder(_this293.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['result']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this294 = this;

            return _this294.userPostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                auth,
                response,
                _this295 = this,
                _arguments276 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments276.length > 1 && _arguments276[1] !== undefined ? _arguments276[1] : 'public';
                method = _arguments276.length > 2 && _arguments276[2] !== undefined ? _arguments276[2] : 'GET';
                params = _arguments276.length > 3 && _arguments276[3] !== undefined ? _arguments276[3] : {};
                headers = _arguments276.length > 4 && _arguments276[4] !== undefined ? _arguments276[4] : undefined;
                body = _arguments276.length > 5 && _arguments276[5] !== undefined ? _arguments276[5] : undefined;
                url = _this295.urls['api'] + '/' + api + '/' + _this295.implodeParams(path, params);
                query = _this295.omit(params, _this295.extractParams(path));

                if (api == 'current') {
                    if (Object.keys(query).length) {
                        url += '?' + _this295.urlencode(query);
                    }
                } else {
                    nonce = _this295.nonce();
                    request = _this295.extend({
                        'token': _this295.apiKey,
                        'nonce': nonce
                    }, query);
                    auth = nonce.toString() + '$' + _this295.apiKey;

                    request['signature'] = _this295.hmac(_this295.encode(auth), _this295.encode(_this295.secret));
                    body = _this295.json(request);
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this295.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this295.id + ' ' + _this295.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinmarketcap = {

        'id': 'coinmarketcap',
        'name': 'CoinMarketCap',
        'rateLimit': 10000,
        'version': 'v1',
        'countries': 'US',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',
            'api': 'https://api.coinmarketcap.com',
            'www': 'https://coinmarketcap.com',
            'doc': 'https://coinmarketcap.com/api'
        },
        'api': {
            'public': {
                'get': ['ticker/', 'ticker/{id}/', 'global/']
            }
        },
        'currencies': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD'],

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                _this296 = this,
                _arguments277 = arguments;

            params = _arguments277.length > 1 && _arguments277[1] !== undefined ? _arguments277[1] : {};

            throw new ExchangeError('Fetching order books is not supported by the API of ' + _this296.id);
        },
        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                c,
                base,
                baseId,
                quote,
                quoteId,
                symbol,
                id,
                _this297 = this;

            return Promise.resolve().then(function () {
                return _this297.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];

                    for (c = 0; c < _this297.currencies.length; c++) {
                        base = market['symbol'];
                        baseId = market['id'];
                        quote = _this297.currencies[c];
                        quoteId = quote.toLowerCase();
                        symbol = base + '/' + quote;
                        id = baseId + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'baseId': baseId,
                            'quoteId': quoteId,
                            'info': market
                        });
                    }
                }
                return result;
            });
        },
        fetchGlobal: function fetchGlobal() {
            var currency,
                request,
                _this298 = this,
                _arguments279 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments279.length > 0 && _arguments279[0] !== undefined ? _arguments279[0] : 'USD';
                return _this298.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this298.publicGetGlobal(request);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            if ('last_updated' in ticker) if (ticker['last_updated']) timestamp = parseInt(ticker['last_updated']) * 1000;
            var volume = undefined;
            var volumeKey = '24h_volume_' + market['quoteId'];
            if (ticker[volumeKey]) volume = parseFloat(ticker[volumeKey]);
            var price = 'price_' + market['quoteId'];
            var change = undefined;
            var changeKey = 'percent_change_24h';
            if (ticker[changeKey]) change = parseFloat(ticker[changeKey]);
            var last = undefined;
            if (price in ticker) if (ticker[price]) last = parseFloat(ticker[price]);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': change,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                request,
                response,
                tickers,
                t,
                ticker,
                id,
                market,
                symbol,
                _this299 = this,
                _arguments280 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments280.length > 0 && _arguments280[0] !== undefined ? _arguments280[0] : 'USD';
                return _this299.loadMarkets();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this299.publicGetTicker(request);
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    id = ticker['id'] + '/' + currency;
                    market = _this299.markets_by_id[id];
                    symbol = market['symbol'];

                    tickers[symbol] = _this299.parseTicker(ticker, market);
                }
                return tickers;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                request,
                response,
                ticker,
                _this300 = this;

            return Promise.resolve().then(function () {
                return _this300.loadMarkets();
            }).then(function () {
                market = _this300.market(symbol);
                request = {
                    'convert': market['quote'],
                    'id': market['baseId']
                };
                return _this300.publicGetTickerId(request);
            }).then(function (_resp) {
                response = _resp;
                ticker = response[0];

                return _this300.parseTicker(ticker, market);
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinmate = {

        'id': 'coinmate',
        'name': 'CoinMate',
        'countries': ['GB', 'CZ'], // UK, Czech Republic
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',
            'api': 'https://coinmate.io/api',
            'www': 'https://coinmate.io',
            'doc': ['http://docs.coinmate.apiary.io', 'https://coinmate.io/developers']
        },
        'api': {
            'public': {
                'get': ['orderBook', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balances', 'bitcoinWithdrawal', 'bitcoinDepositAddresses', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'openOrders', 'redeemVoucher', 'sellInstant', 'sellLimit', 'transactionHistory', 'unconfirmedBitcoinDeposits']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                account,
                _this301 = this,
                _arguments282 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments282.length > 0 && _arguments282[0] !== undefined ? _arguments282[0] : {};
                return _this301.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (c = 0; c < _this301.currencies.length; c++) {
                    currency = _this301.currencies[c];
                    account = _this301.account();

                    if (currency in balances) {
                        account['free'] = balances[currency]['available'];
                        account['used'] = balances[currency]['reserved'];
                        account['total'] = balances[currency]['balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                timestamp,
                _this302 = this,
                _arguments283 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments283.length > 1 && _arguments283[1] !== undefined ? _arguments283[1] : {};
                return _this302.publicGetOrderBook(_this302.extend({
                    'currencyPair': _this302.marketId(symbol),
                    'groupByPriceLimit': 'False'
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = orderbook['timestamp'] * 1000;

                return _this302.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                ticker,
                timestamp,
                _this303 = this;

            return Promise.resolve().then(function () {
                return _this303.publicGetTicker({
                    'currencyPair': _this303.marketId(symbol)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this303.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['amount']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'id': trade['transactionId'],
                'info': trade,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this304 = this,
                _arguments285 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments285.length > 1 && _arguments285[1] !== undefined ? _arguments285[1] : {};
                market = _this304.market(symbol);
                return _this304.publicGetTransactions(_this304.extend({
                    'currencyPair': market['id'],
                    'minutesIntoHistory': 10
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this304.parseTrades(response['data'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this305 = this,
                _arguments286 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments286.length > 4 && _arguments286[4] !== undefined ? _arguments286[4] : undefined;
                params = _arguments286.length > 5 && _arguments286[5] !== undefined ? _arguments286[5] : {};
                method = 'privatePost' + _this305.capitalize(side);
                order = {
                    'currencyPair': _this305.marketId(symbol)
                };

                if (type == 'market') {
                    if (side == 'buy') {
                        order['total'] = amount; // amount in fiat
                    } else {
                        order['amount'] = amount;
                    } // amount in fiat
                    method += 'Instant';
                } else {
                    order['amount'] = amount; // amount in crypto
                    order['price'] = price;
                    method += _this305.capitalize(type);
                }
                return _this305[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this306 = this;

            return _this306.privatePostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _this307 = this,
                _arguments288 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments288.length > 1 && _arguments288[1] !== undefined ? _arguments288[1] : 'public';
                method = _arguments288.length > 2 && _arguments288[2] !== undefined ? _arguments288[2] : 'GET';
                params = _arguments288.length > 3 && _arguments288[3] !== undefined ? _arguments288[3] : {};
                headers = _arguments288.length > 4 && _arguments288[4] !== undefined ? _arguments288[4] : undefined;
                body = _arguments288.length > 5 && _arguments288[5] !== undefined ? _arguments288[5] : undefined;
                url = _this307.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this307.urlencode(params);
                    }
                } else {
                    if (!_this307.uid) {
                        throw new AuthenticationError(_this307.id + ' requires `' + _this307.id + '.uid` property for authentication');
                    }nonce = _this307.nonce().toString();
                    auth = nonce + _this307.uid + _this307.apiKey;
                    signature = _this307.hmac(_this307.encode(auth), _this307.encode(_this307.secret));

                    body = _this307.urlencode(_this307.extend({
                        'clientId': _this307.uid,
                        'nonce': nonce,
                        'publicKey': _this307.apiKey,
                        'signature': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this307.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this307.id + ' ' + _this307.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinsecure = {

        'id': 'coinsecure',
        'name': 'Coinsecure',
        'countries': 'IN', // India
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',
            'api': 'https://api.coinsecure.in',
            'www': 'https://coinsecure.in',
            'doc': ['https://api.coinsecure.in', 'https://github.com/coinsecure/plugins']
        },
        'api': {
            'public': {
                'get': ['bitcoin/search/confirmation/{txid}', 'exchange/ask/low', 'exchange/ask/orders', 'exchange/bid/high', 'exchange/bid/orders', 'exchange/lastTrade', 'exchange/max24Hr', 'exchange/min24Hr', 'exchange/ticker', 'exchange/trades']
            },
            'private': {
                'get': ['mfa/authy/call', 'mfa/authy/sms', 'netki/search/{netkiName}', 'user/bank/otp/{number}', 'user/kyc/otp/{number}', 'user/profile/phone/otp/{number}', 'user/wallet/coin/address/{id}', 'user/wallet/coin/deposit/confirmed/all', 'user/wallet/coin/deposit/confirmed/{id}', 'user/wallet/coin/deposit/unconfirmed/all', 'user/wallet/coin/deposit/unconfirmed/{id}', 'user/wallet/coin/wallets', 'user/exchange/bank/fiat/accounts', 'user/exchange/bank/fiat/balance/available', 'user/exchange/bank/fiat/balance/pending', 'user/exchange/bank/fiat/balance/total', 'user/exchange/bank/fiat/deposit/cancelled', 'user/exchange/bank/fiat/deposit/unverified', 'user/exchange/bank/fiat/deposit/verified', 'user/exchange/bank/fiat/withdraw/cancelled', 'user/exchange/bank/fiat/withdraw/completed', 'user/exchange/bank/fiat/withdraw/unverified', 'user/exchange/bank/fiat/withdraw/verified', 'user/exchange/ask/cancelled', 'user/exchange/ask/completed', 'user/exchange/ask/pending', 'user/exchange/bid/cancelled', 'user/exchange/bid/completed', 'user/exchange/bid/pending', 'user/exchange/bank/coin/addresses', 'user/exchange/bank/coin/balance/available', 'user/exchange/bank/coin/balance/pending', 'user/exchange/bank/coin/balance/total', 'user/exchange/bank/coin/deposit/cancelled', 'user/exchange/bank/coin/deposit/unverified', 'user/exchange/bank/coin/deposit/verified', 'user/exchange/bank/coin/withdraw/cancelled', 'user/exchange/bank/coin/withdraw/completed', 'user/exchange/bank/coin/withdraw/unverified', 'user/exchange/bank/coin/withdraw/verified', 'user/exchange/bank/summary', 'user/exchange/coin/fee', 'user/exchange/fiat/fee', 'user/exchange/kycs', 'user/exchange/referral/coin/paid', 'user/exchange/referral/coin/successful', 'user/exchange/referral/fiat/paid', 'user/exchange/referrals', 'user/exchange/trade/summary', 'user/login/token/{token}', 'user/summary', 'user/wallet/summary', 'wallet/coin/withdraw/cancelled', 'wallet/coin/withdraw/completed', 'wallet/coin/withdraw/unverified', 'wallet/coin/withdraw/verified'],
                'post': ['login', 'login/initiate', 'login/password/forgot', 'mfa/authy/initiate', 'mfa/ga/initiate', 'signup', 'user/netki/update', 'user/profile/image/update', 'user/exchange/bank/coin/withdraw/initiate', 'user/exchange/bank/coin/withdraw/newVerifycode', 'user/exchange/bank/fiat/withdraw/initiate', 'user/exchange/bank/fiat/withdraw/newVerifycode', 'user/password/change', 'user/password/reset', 'user/wallet/coin/withdraw/initiate', 'wallet/coin/withdraw/newVerifycode'],
                'put': ['signup/verify/{token}', 'user/exchange/kyc', 'user/exchange/bank/fiat/deposit/new', 'user/exchange/ask/new', 'user/exchange/bid/new', 'user/exchange/instant/buy', 'user/exchange/instant/sell', 'user/exchange/bank/coin/withdraw/verify', 'user/exchange/bank/fiat/account/new', 'user/exchange/bank/fiat/withdraw/verify', 'user/mfa/authy/initiate/enable', 'user/mfa/ga/initiate/enable', 'user/netki/create', 'user/profile/phone/new', 'user/wallet/coin/address/new', 'user/wallet/coin/new', 'user/wallet/coin/withdraw/sendToExchange', 'user/wallet/coin/withdraw/verify'],
                'delete': ['user/gcm/{code}', 'user/logout', 'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}', 'user/exchange/bank/fiat/deposit/cancel/{depositID}', 'user/exchange/ask/cancel/{orderID}', 'user/exchange/bid/cancel/{orderID}', 'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}', 'user/mfa/authy/disable/{code}', 'user/mfa/ga/disable/{code}', 'user/profile/phone/delete', 'user/profile/image/delete/{netkiName}', 'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}']
            }
        },
        'markets': {
            'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                balance,
                coin,
                fiat,
                result,
                _this308 = this,
                _arguments289 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments289.length > 0 && _arguments289[0] !== undefined ? _arguments289[0] : {};
                return _this308.privateGetUserExchangeBankSummary();
            }).then(function (_resp) {
                response = _resp;
                balance = response['message'];
                coin = {
                    'free': balance['availableCoinBalance'],
                    'used': balance['pendingCoinBalance'],
                    'total': balance['totalCoinBalance']
                };
                fiat = {
                    'free': balance['availableFiatBalance'],
                    'used': balance['pendingFiatBalance'],
                    'total': balance['totalFiatBalance']
                };
                result = {
                    'info': balance,
                    'BTC': coin,
                    'INR': fiat
                };

                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                bids,
                asks,
                orderbook,
                _this309 = this,
                _arguments290 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments290.length > 1 && _arguments290[1] !== undefined ? _arguments290[1] : {};
                return _this309.publicGetExchangeBidOrders(params);
            }).then(function (_resp) {
                bids = _resp;
                return _this309.publicGetExchangeAskOrders(params);
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': bids['message'],
                    'asks': asks['message']
                };

                return _this309.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'rate', 'vol');
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                ticker,
                timestamp,
                _this310 = this;

            return Promise.resolve().then(function () {
                return _this310.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['message'];
                timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this310.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['coinvolume']),
                    'quoteVolume': parseFloat(ticker['fiatvolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this311 = this,
                _arguments292 = arguments;

            params = _arguments292.length > 1 && _arguments292[1] !== undefined ? _arguments292[1] : {};

            return _this311.publicGetExchangeTrades(params);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                direction,
                response,
                _this312 = this,
                _arguments293 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments293.length > 4 && _arguments293[4] !== undefined ? _arguments293[4] : undefined;
                params = _arguments293.length > 5 && _arguments293[5] !== undefined ? _arguments293[5] : {};
                method = 'privatePutUserExchange';
                order = {};

                if (type == 'market') {
                    method += 'Instant' + _this312.capitalize(side);
                    if (side == 'buy') {
                        order['maxFiat'] = amount;
                    } else {
                        order['maxVol'] = amount;
                    }
                } else {
                    direction = side == 'buy' ? 'Bid' : 'Ask';

                    method += direction + 'New';
                    order['rate'] = price;
                    order['vol'] = amount;
                }
                return _this312[method](self.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['message']['orderID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var method,
                _this313 = this;

            throw new ExchangeError(_this313.id + ' cancelOrder () is not fully implemented yet');
            method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here

            return _this313[method]({ 'orderID': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _test11,
                _this314 = this,
                _arguments295 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments295.length > 1 && _arguments295[1] !== undefined ? _arguments295[1] : 'public';
                method = _arguments295.length > 2 && _arguments295[2] !== undefined ? _arguments295[2] : 'GET';
                params = _arguments295.length > 3 && _arguments295[3] !== undefined ? _arguments295[3] : {};
                headers = _arguments295.length > 4 && _arguments295[4] !== undefined ? _arguments295[4] : undefined;
                body = _arguments295.length > 5 && _arguments295[5] !== undefined ? _arguments295[5] : undefined;
                url = _this314.urls['api'] + '/' + _this314.version + '/' + _this314.implodeParams(path, params);
                query = _this314.omit(params, _this314.extractParams(path));

                if (api == 'private') {
                    headers = { 'Authorization': _this314.apiKey };
                    if (Object.keys(query).length) {
                        body = _this314.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this314.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test11 = 'success' in response;

                if (_test11 && response['success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this314.id + ' ' + _this314.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var coinspot = {

        'id': 'coinspot',
        'name': 'CoinSpot',
        'countries': 'AU', // Australia
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
            'api': {
                'public': 'https://www.coinspot.com.au/pubapi',
                'private': 'https://www.coinspot.com.au/api'
            },
            'www': 'https://www.coinspot.com.au',
            'doc': 'https://www.coinspot.com.au/api'
        },
        'api': {
            'public': {
                'get': ['latest']
            },
            'private': {
                'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel']
            }
        },
        'markets': {
            'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                balances,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this315 = this,
                _arguments296 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments296.length > 0 && _arguments296[0] !== undefined ? _arguments296[0] : {};
                return _this315.privatePostMyBalances();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('balance' in response) {
                    balances = response['balance'];
                    currencies = Object.keys(balances);

                    for (c = 0; c < currencies.length; c++) {
                        currency = currencies[c];
                        uppercase = currency.toUpperCase();
                        account = {
                            'free': balances[currency],
                            'used': 0.0,
                            'total': balances[currency]
                        };

                        if (uppercase == 'DRK') {
                            uppercase = 'DASH';
                        }result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                result,
                _this316 = this,
                _arguments297 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments297.length > 1 && _arguments297[1] !== undefined ? _arguments297[1] : {};
                market = _this316.market(symbol);
                return _this316.privatePostOrders(_this316.extend({
                    'cointype': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this316.milliseconds();
                result = _this316.parseOrderBook(orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');

                result['bids'] = _this316.sortBy(result['bids'], 0, true);
                result['asks'] = _this316.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var response,
                id,
                ticker,
                timestamp,
                _this317 = this;

            return Promise.resolve().then(function () {
                return _this317.publicGetLatest();
            }).then(function (_resp) {
                response = _resp;
                id = _this317.marketId(market);

                id = id.toLowerCase();
                ticker = response['prices'][id];
                timestamp = _this317.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this317.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this318 = this,
                _arguments299 = arguments;

            params = _arguments299.length > 1 && _arguments299[1] !== undefined ? _arguments299[1] : {};

            return _this318.privatePostOrdersHistory(_this318.extend({
                'cointype': _this318.marketId(market)
            }, params));
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this319 = this,
                _arguments300 = arguments;

            price = _arguments300.length > 4 && _arguments300[4] !== undefined ? _arguments300[4] : undefined;
            params = _arguments300.length > 5 && _arguments300[5] !== undefined ? _arguments300[5] : {};
            method = 'privatePostMy' + _this319.capitalize(side);

            if (type == 'market') {
                throw new ExchangeError(_this319.id + ' allows limit orders only');
            }order = {
                'cointype': _this319.marketId(market),
                'amount': amount,
                'rate': price
            };

            return _this319[method](_this319.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                method,
                _this320 = this,
                _arguments301 = arguments;

            params = _arguments301.length > 1 && _arguments301[1] !== undefined ? _arguments301[1] : {};

            throw new ExchangeError(_this320.id + ' cancelOrder () is not fully implemented yet');
            method = 'privatePostMyBuy';

            return _this320[method]({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                _this321 = this,
                _arguments302 = arguments;

            api = _arguments302.length > 1 && _arguments302[1] !== undefined ? _arguments302[1] : 'public';
            method = _arguments302.length > 2 && _arguments302[2] !== undefined ? _arguments302[2] : 'GET';
            params = _arguments302.length > 3 && _arguments302[3] !== undefined ? _arguments302[3] : {};
            headers = _arguments302.length > 4 && _arguments302[4] !== undefined ? _arguments302[4] : undefined;
            body = _arguments302.length > 5 && _arguments302[5] !== undefined ? _arguments302[5] : undefined;

            if (!_this321.apiKey) {
                throw new AuthenticationError(_this321.id + ' requires apiKey for all requests');
            }url = _this321.urls['api'][api] + '/' + path;

            if (api == 'private') {
                nonce = _this321.nonce();

                body = _this321.json(_this321.extend({ 'nonce': nonce }, params));
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length,
                    'key': _this321.apiKey,
                    'sign': _this321.hmac(_this321.encode(body), _this321.encode(_this321.secret), 'sha512')
                };
            }
            return _this321.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var cryptopia = {

        'id': 'cryptopia',
        'name': 'Cryptopia',
        'rateLimit': 1500,
        'countries': 'NZ', // New Zealand
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg',
            'api': 'https://www.cryptopia.co.nz/api',
            'www': 'https://www.cryptopia.co.nz',
            'doc': ['https://www.cryptopia.co.nz/Forum/Thread/255', 'https://www.cryptopia.co.nz/Forum/Thread/256']
        },
        'api': {
            'public': {
                'get': ['GetCurrencies', 'GetTradePairs', 'GetMarkets', 'GetMarkets/{id}', 'GetMarkets/{hours}', 'GetMarkets/{id}/{hours}', 'GetMarket/{id}', 'GetMarket/{id}/{hours}', 'GetMarketHistory/{id}', 'GetMarketHistory/{id}/{hours}', 'GetMarketOrders/{id}', 'GetMarketOrders/{id}/{count}', 'GetMarketOrderGroups/{ids}/{count}']
            },
            'private': {
                'post': ['CancelTrade', 'GetBalance', 'GetDepositAddress', 'GetOpenOrders', 'GetTradeHistory', 'GetTransactions', 'SubmitTip', 'SubmitTrade', 'SubmitTransfer', 'SubmitWithdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                result,
                markets,
                i,
                market,
                id,
                symbol,
                _symbol$split7,
                _symbol$split8,
                base,
                quote,
                _this322 = this;

            return Promise.resolve().then(function () {
                return _this322.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = [];
                markets = response['Data'];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    id = market['TradePairId'];
                    symbol = market['Label'];
                    _symbol$split7 = symbol.split('/');
                    _symbol$split8 = _slicedToArray(_symbol$split7, 2);
                    base = _symbol$split8[0];
                    quote = _symbol$split8[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                response,
                orderbook,
                _this323 = this,
                _arguments304 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments304.length > 1 && _arguments304[1] !== undefined ? _arguments304[1] : {};
                return _this323.loadMarkets();
            }).then(function () {
                return _this323.publicGetMarketOrdersId(_this323.extend({
                    'id': _this323.marketId(market)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['Data'];

                return _this323.parseOrderBook(orderbook, undefined, 'Buy', 'Sell', 'Price', 'Total');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'info': ticker,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['High']),
                'low': parseFloat(ticker['Low']),
                'bid': parseFloat(ticker['BidPrice']),
                'ask': parseFloat(ticker['AskPrice']),
                'vwap': undefined,
                'open': parseFloat(ticker['Open']),
                'close': parseFloat(ticker['Close']),
                'first': undefined,
                'last': parseFloat(ticker['LastPrice']),
                'change': parseFloat(ticker['Change']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['BaseVolume']),
                'quoteVolume': parseFloat(ticker['Volume'])
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this324 = this;

            return Promise.resolve().then(function () {
                return _this324.loadMarkets();
            }).then(function () {
                market = _this324.market(symbol);
                return _this324.publicGetMarketId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['Data'];

                return _this324.parseTicker(ticker, market);
            });
        },
        fetchTickers: function fetchTickers() {
            var response,
                result,
                tickers,
                i,
                ticker,
                id,
                market,
                symbol,
                _this325 = this;

            return Promise.resolve().then(function () {
                return _this325.loadMarkets();
            }).then(function () {
                return _this325.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                tickers = response['Data'];

                for (i = 0; i < tickers.length; i++) {
                    ticker = tickers[i];
                    id = ticker['TradePairId'];
                    market = _this325.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this325.parseTicker(ticker, market);
                }
                return result;
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['Timestamp'] * 1000;
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['Type'].toLowerCase(),
                'price': trade['Price'],
                'amount': trade['Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                trades,
                _this326 = this,
                _arguments307 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments307.length > 1 && _arguments307[1] !== undefined ? _arguments307[1] : {};
                return _this326.loadMarkets();
            }).then(function () {
                market = _this326.market(symbol);
                return _this326.publicGetMarketHistoryIdHours(_this326.extend({
                    'id': market['id'],
                    'hours': 24 // default
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['Data'];

                return _this326.parseTrades(trades, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                i,
                balance,
                currency,
                account,
                _this327 = this,
                _arguments308 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments308.length > 0 && _arguments308[0] !== undefined ? _arguments308[0] : {};
                return _this327.loadMarkets();
            }).then(function () {
                return _this327.privatePostGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['Data'];
                result = { 'info': response };

                for (i = 0; i < balances.length; i++) {
                    balance = balances[i];
                    currency = balance['Symbol'];
                    account = {
                        'free': balance['Available'],
                        'used': 0.0,
                        'total': balance['Total']
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this328 = this,
                _arguments309 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments309.length > 4 && _arguments309[4] !== undefined ? _arguments309[4] : undefined;
                params = _arguments309.length > 5 && _arguments309[5] !== undefined ? _arguments309[5] : {};
                return _this328.loadMarkets();
            }).then(function () {
                order = {
                    'Market': _this328.marketId(market),
                    'Type': _this328.capitalize(side),
                    'Rate': price,
                    'Amount': amount
                };
                return _this328.privatePostSubmitTrade(_this328.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Data']['OrderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this329 = this;

            return Promise.resolve().then(function () {
                return _this329.loadMarkets();
            }).then(function () {
                return _this329.privatePostCancelTrade({
                    'Type': 'Trade',
                    'OrderId': id
                });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _hash,
                secret,
                uri,
                lowercase,
                payload,
                signature,
                auth,
                response,
                _test12,
                _test13,
                _this330 = this,
                _arguments311 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments311.length > 1 && _arguments311[1] !== undefined ? _arguments311[1] : 'public';
                method = _arguments311.length > 2 && _arguments311[2] !== undefined ? _arguments311[2] : 'GET';
                params = _arguments311.length > 3 && _arguments311[3] !== undefined ? _arguments311[3] : {};
                headers = _arguments311.length > 4 && _arguments311[4] !== undefined ? _arguments311[4] : undefined;
                body = _arguments311.length > 5 && _arguments311[5] !== undefined ? _arguments311[5] : undefined;
                url = _this330.urls['api'] + '/' + _this330.implodeParams(path, params);
                query = _this330.omit(params, _this330.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this330.urlencode(query);
                    }
                } else {
                    nonce = _this330.nonce().toString();

                    body = _this330.json(query);
                    _hash = _this330.hash(_this330.encode(body), 'md5', 'base64');
                    secret = _this330.base64ToBinary(_this330.secret);
                    uri = _this330.encodeURIComponent(url);
                    lowercase = uri.toLowerCase();
                    payload = _this330.apiKey + method + lowercase + nonce + _this330.binaryToString(_hash);
                    signature = _this330.hmac(_this330.encode(payload), secret, 'sha256', 'base64');
                    auth = 'amx ' + _this330.apiKey + ':' + _this330.binaryToString(signature) + ':' + nonce;

                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length,
                        'Authorization': auth
                    };
                }
                return _this330.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test12 = response;
                _test13 = _test12 && 'Success' in response;

                if (_test13 && response['Success']) {
                    return response;
                } else {
                    throw new ExchangeError(_this330.id + ' ' + _this330.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var dsx = {

        'id': 'dsx',
        'name': 'DSX',
        'countries': 'UK',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',
            'api': {
                'mapi': 'https://dsx.uk/mapi', // market data
                'tapi': 'https://dsx.uk/tapi', // trading
                'dwapi': 'https://dsx.uk/dwapi' // deposit/withdraw
            },
            'www': 'https://dsx.uk',
            'doc': ['https://api.dsx.uk', 'https://dsx.uk/api_docs/public', 'https://dsx.uk/api_docs/private', '']
        },
        'api': {
            'mapi': { // market data (public)
                'get': ['barsFromMoment/{id}/{period}/{start}', // empty reply :\
                'depth/{id}', 'info', 'lastBars/{id}/{period}/{amount}', // period is (m, h or d)
                'periodBars/{id}/{period}/{start}/{end}', 'ticker/{id}', 'trades/{id}']
            },
            'tapi': { // trading (private)
                'post': ['getInfo', 'TransHistory', 'TradeHistory', 'OrderHistory', 'ActiveOrders', 'Trade', 'CancelOrder']
            },
            'dwapi': { // deposit / withdraw (private)
                'post': ['getCryptoDepositAddress', 'cryptoWithdraw', 'fiatWithdraw', 'getTransactionStatus', 'getTransactions']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                symbol,
                _this331 = this;

            return Promise.resolve().then(function () {
                return _this331.mapiGetInfo();
            }).then(function (_resp) {
                response = _resp;
                keys = Object.keys(response['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = response['pairs'][id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                account,
                _this332 = this,
                _arguments313 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments313.length > 0 && _arguments313[0] !== undefined ? _arguments313[0] : {};
                return _this332.loadMarkets();
            }).then(function () {
                return _this332.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['total']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': balances['funds'][currency],
                        'used': 0.0,
                        'total': balances['total'][currency]
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this333 = this,
                _arguments314 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments314.length > 1 && _arguments314[1] !== undefined ? _arguments314[1] : {};
                return _this333.loadMarkets();
            }).then(function () {
                market = _this333.market(symbol);
                return _this333.mapiGetDepthId(_this333.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];

                return _this333.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                timestamp,
                _this334 = this;

            return Promise.resolve().then(function () {
                return _this334.loadMarkets();
            }).then(function () {
                market = _this334.market(symbol);
                return _this334.mapiGetTickerId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response[market['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this334.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker['vol_cur']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                _this335 = this,
                _arguments316 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments316.length > 1 && _arguments316[1] !== undefined ? _arguments316[1] : {};
                return _this335.loadMarkets();
            }).then(function () {
                return _this335.mapiGetTradesId(_this335.extend({
                    'id': _this335.marketId(symbol)
                }, params));
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this336 = this,
                _arguments317 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments317.length > 4 && _arguments317[4] !== undefined ? _arguments317[4] : undefined;
                params = _arguments317.length > 5 && _arguments317[5] !== undefined ? _arguments317[5] : {};
                return _this336.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this336.id + ' allows limit orders only');
                }order = {
                    'pair': _this336.marketId(symbol),
                    'type': side,
                    'rate': price,
                    'amount': amount
                };
                return _this336.tapiPostTrade(_this336.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['orderId'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this337 = this;

            return Promise.resolve().then(function () {
                return _this337.loadMarkets();
            }).then(function () {
                return _this337.tapiPostCancelOrder({ 'orderId': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _method,
                response,
                _test14,
                _this338 = this,
                _arguments319 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments319.length > 1 && _arguments319[1] !== undefined ? _arguments319[1] : 'mapi';
                method = _arguments319.length > 2 && _arguments319[2] !== undefined ? _arguments319[2] : 'GET';
                params = _arguments319.length > 3 && _arguments319[3] !== undefined ? _arguments319[3] : {};
                headers = _arguments319.length > 4 && _arguments319[4] !== undefined ? _arguments319[4] : undefined;
                body = _arguments319.length > 5 && _arguments319[5] !== undefined ? _arguments319[5] : undefined;
                url = _this338.urls['api'][api];

                if (api == 'mapi' || api == 'dwapi') {
                    url += '/' + _this338.implodeParams(path, params);
                }query = _this338.omit(params, _this338.extractParams(path));

                if (api == 'mapi') {
                    if (Object.keys(query).length) {
                        url += '?' + _this338.urlencode(query);
                    }
                } else {
                    nonce = _this338.nonce();
                    _method = path;

                    body = _this338.urlencode(_this338.extend({
                        'method': path,
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this338.apiKey,
                        'Sign': _this338.hmac(_this338.encode(body), _this338.encode(_this338.secret), 'sha512', 'base64')
                    };
                }
                return _this338.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'mapi') {
                    return response;
                } else {
                    _test14 = 'success' in response;

                    if (_test14 && response['success']) {
                        return response;
                    } else {
                        throw new ExchangeError(_this338.id + ' ' + _this338.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var exmo = {

        'id': 'exmo',
        'name': 'EXMO',
        'countries': ['ES', 'RU'], // Spain, Russia
        'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
            'api': 'https://api.exmo.com',
            'www': 'https://exmo.me',
            'doc': ['https://exmo.me/ru/api_doc', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs']
        },
        'api': {
            'public': {
                'get': ['currency', 'order_book', 'pair_settings', 'ticker', 'trades']
            },
            'private': {
                'post': ['user_info', 'order_create', 'order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'required_amount', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'wallet_history']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split9,
                _symbol$split10,
                base,
                quote,
                _this339 = this;

            return Promise.resolve().then(function () {
                return _this339.publicGetPairSettings();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    symbol = id.replace('_', '/');
                    _symbol$split9 = symbol.split('/');
                    _symbol$split10 = _slicedToArray(_symbol$split9, 2);
                    base = _symbol$split10[0];
                    quote = _symbol$split10[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                result,
                c,
                currency,
                account,
                _this340 = this,
                _arguments321 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments321.length > 0 && _arguments321[0] !== undefined ? _arguments321[0] : {};
                return _this340.loadMarkets();
            }).then(function () {
                return _this340.privatePostUserInfo();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (c = 0; c < _this340.currencies.length; c++) {
                    currency = _this340.currencies[c];
                    account = _this340.account();

                    if (currency in response['balances']) {
                        account['free'] = parseFloat(response['balances'][currency]);
                    }if (currency in response['reserved']) {
                        account['used'] = parseFloat(response['reserved'][currency]);
                    }account['total'] = _this340.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                _this341 = this,
                _arguments322 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments322.length > 1 && _arguments322[1] !== undefined ? _arguments322[1] : {};
                return _this341.loadMarkets();
            }).then(function () {
                market = _this341.market(symbol);
                return _this341.publicGetOrderBook(_this341.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];

                return _this341.parseOrderBook(orderbook, undefined, 'bid', 'ask');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy_price']),
                'ask': parseFloat(ticker['sell_price']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['vol_curr']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                response,
                result,
                ids,
                i,
                id,
                market,
                symbol,
                ticker,
                _this342 = this,
                _arguments323 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments323.length > 0 && _arguments323[0] !== undefined ? _arguments323[0] : 'USD';
                return _this342.loadMarkets();
            }).then(function () {
                return _this342.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                result = {};
                ids = Object.keys(response);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this342.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = response[id];

                    result[symbol] = _this342.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var response,
                market,
                _this343 = this;

            return Promise.resolve().then(function () {
                return _this343.loadMarkets();
            }).then(function () {
                return _this343.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                market = _this343.market(symbol);

                return _this343.parseTicker(response[market['id']], market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'id': trade['trade_id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this344 = this,
                _arguments325 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments325.length > 1 && _arguments325[1] !== undefined ? _arguments325[1] : {};
                return _this344.loadMarkets();
            }).then(function () {
                market = _this344.market(symbol);
                return _this344.publicGetTrades(_this344.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this344.parseTrades(response[market['id']], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                response,
                _this345 = this,
                _arguments326 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments326.length > 4 && _arguments326[4] !== undefined ? _arguments326[4] : undefined;
                params = _arguments326.length > 5 && _arguments326[5] !== undefined ? _arguments326[5] : {};
                return _this345.loadMarkets();
            }).then(function () {
                prefix = '';

                if (type == 'market') {
                    prefix = 'market_';
                }order = {
                    'pair': _this345.marketId(symbol),
                    'quantity': amount,
                    'price': price || 0,
                    'type': prefix + side
                };
                return _this345.privatePostOrderCreate(_this345.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this346 = this;

            return Promise.resolve().then(function () {
                return _this346.loadMarkets();
            }).then(function () {
                return _this346.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test15,
                _this347 = this,
                _arguments328 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments328.length > 1 && _arguments328[1] !== undefined ? _arguments328[1] : 'public';
                method = _arguments328.length > 2 && _arguments328[2] !== undefined ? _arguments328[2] : 'GET';
                params = _arguments328.length > 3 && _arguments328[3] !== undefined ? _arguments328[3] : {};
                headers = _arguments328.length > 4 && _arguments328[4] !== undefined ? _arguments328[4] : undefined;
                body = _arguments328.length > 5 && _arguments328[5] !== undefined ? _arguments328[5] : undefined;
                url = _this347.urls['api'] + '/' + _this347.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this347.urlencode(params);
                    }
                } else {
                    nonce = _this347.nonce();

                    body = _this347.urlencode(_this347.extend({ 'nonce': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this347.apiKey,
                        'Sign': _this347.hmac(_this347.encode(body), _this347.encode(_this347.secret), 'sha512')
                    };
                }
                return _this347.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test15 = 'result' in response;

                if (_test15 && response['result']) {
                    return response;
                } else {
                    if (_test15) {
                        throw new ExchangeError(_this347.id + ' ' + _this347.json(response));
                    }

                    return response;
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var flowbtc = {

        'id': 'flowbtc',
        'name': 'flowBTC',
        'countries': 'BR', // Brazil
        'version': 'v1',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',
            'api': 'https://api.flowbtc.com:8400/ajax',
            'www': 'https://trader.flowbtc.com',
            'doc': 'http://www.flowbtc.com.br/api/'
        },
        'api': {
            'public': {
                'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']
            },
            'private': {
                'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this348 = this;

            return Promise.resolve().then(function () {
                return _this348.publicPostGetProductPairs();
            }).then(function (_resp) {
                response = _resp;
                markets = response['productPairs'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['name'];
                    base = market['product1Label'];
                    quote = market['product2Label'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this349 = this,
                _arguments330 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments330.length > 0 && _arguments330[0] !== undefined ? _arguments330[0] : {};
                return _this349.loadMarkets();
            }).then(function () {
                return _this349.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['currencies'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['name'];
                    account = {
                        'free': balance['balance'],
                        'used': balance['hold'],
                        'total': 0.0
                    };

                    account['total'] = _this349.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this350 = this,
                _arguments331 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments331.length > 1 && _arguments331[1] !== undefined ? _arguments331[1] : {};
                return _this350.loadMarkets();
            }).then(function () {
                market = _this350.market(symbol);
                return _this350.publicPostGetOrderBook(_this350.extend({
                    'productPair': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this350.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'px', 'qty');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                _this351 = this;

            return Promise.resolve().then(function () {
                return _this351.loadMarkets();
            }).then(function () {
                market = _this351.market(symbol);
                return _this351.publicPostGetTicker({
                    'productPair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this351.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this351.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume24hr']),
                    'quoteVolume': parseFloat(ticker['volume24hrProduct2']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['unixtime'] * 1000;
            var side = trade['incomingOrderSide'] == 0 ? 'buy' : 'sell';
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': side,
                'price': trade['px'],
                'amount': trade['qty']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this352 = this,
                _arguments333 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments333.length > 1 && _arguments333[1] !== undefined ? _arguments333[1] : {};
                return _this352.loadMarkets();
            }).then(function () {
                market = _this352.market(symbol);
                return _this352.publicPostGetTrades(_this352.extend({
                    'ins': market['id'],
                    'startIndex': -1
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this352.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                response,
                _this353 = this,
                _arguments334 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments334.length > 4 && _arguments334[4] !== undefined ? _arguments334[4] : undefined;
                params = _arguments334.length > 5 && _arguments334[5] !== undefined ? _arguments334[5] : {};
                return _this353.loadMarkets();
            }).then(function () {
                orderType = type == 'market' ? 1 : 0;
                order = {
                    'ins': _this353.marketId(symbol),
                    'side': side,
                    'orderType': orderType,
                    'qty': amount,
                    'px': price
                };
                return _this353.privatePostCreateOrder(_this353.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['serverOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this354 = this,
                _arguments335 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments335.length > 1 && _arguments335[1] !== undefined ? _arguments335[1] : {};
                return _this354.loadMarkets();
            }).then(function () {
                if ('ins' in params) {
                    return _this354.privatePostCancelOrder(_this354.extend({
                        'serverOrderId': id
                    }, params));
                } else {
                    throw new ExchangeError(_this354.id + ' requires `ins` symbol parameter for cancelling an order');
                }
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test16,
                _this355 = this,
                _arguments336 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments336.length > 1 && _arguments336[1] !== undefined ? _arguments336[1] : 'public';
                method = _arguments336.length > 2 && _arguments336[2] !== undefined ? _arguments336[2] : 'GET';
                params = _arguments336.length > 3 && _arguments336[3] !== undefined ? _arguments336[3] : {};
                headers = _arguments336.length > 4 && _arguments336[4] !== undefined ? _arguments336[4] : undefined;
                body = _arguments336.length > 5 && _arguments336[5] !== undefined ? _arguments336[5] : undefined;
                url = _this355.urls['api'] + '/' + _this355.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        body = _this355.json(params);
                    }
                } else {
                    if (!_this355.uid) {
                        throw new AuthenticationError(_this355.id + ' requires `' + _this355.id + '.uid` property for authentication');
                    }nonce = _this355.nonce();
                    auth = nonce.toString() + _this355.uid + _this355.apiKey;
                    signature = _this355.hmac(_this355.encode(auth), _this355.encode(_this355.secret));

                    body = _this355.json(_this355.extend({
                        'apiKey': _this355.apiKey,
                        'apiNonce': nonce,
                        'apiSig': signature.toUpperCase()
                    }, params));
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this355.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test16 = 'isAccepted' in response;

                if (_test16 && response['isAccepted']) {
                    return response;
                } else {
                    throw new ExchangeError(_this355.id + ' ' + _this355.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var foxbit = extend(blinktrade, {
        'id': 'foxbit',
        'name': 'FoxBit',
        'countries': 'BR',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://foxbit.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var fyb = {

        'rateLimit': 1500,
        'api': {
            'public': {
                'get': ['ticker', 'tickerdetailed', 'orderbook', 'trades']
            },
            'private': {
                'post': ['test', 'getaccinfo', 'getpendingorders', 'getorderhistory', 'cancelpendingorder', 'placeorder', 'withdraw']
            }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balance,
                btc,
                symbol,
                quote,
                lowercase,
                fiat,
                crypto,
                accounts,
                _this356 = this,
                _arguments337 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments337.length > 0 && _arguments337[0] !== undefined ? _arguments337[0] : {};
                return _this356.privatePostGetaccinfo();
            }).then(function (_resp) {
                balance = _resp;
                btc = parseFloat(balance['btcBal']);
                symbol = _this356.symbols[0];
                quote = _this356.markets[symbol]['quote'];
                lowercase = quote.toLowerCase() + 'Bal';
                fiat = parseFloat(balance[lowercase]);
                crypto = {
                    'free': btc,
                    'used': 0.0,
                    'total': btc
                };
                accounts = { 'BTC': crypto };

                accounts[quote] = {
                    'free': fiat,
                    'used': 0.0,
                    'total': fiat
                };
                accounts['info'] = balance;
                return accounts;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this357 = this,
                _arguments338 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments338.length > 1 && _arguments338[1] !== undefined ? _arguments338[1] : {};
                return _this357.publicGetOrderbook(params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this357.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                last,
                volume,
                _this358 = this;

            return Promise.resolve().then(function () {
                return _this358.publicGetTickerdetailed();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this358.milliseconds();
                last = undefined;
                volume = undefined;

                if ('last' in ticker) {
                    last = parseFloat(ticker['last']);
                }if ('vol' in ticker) {
                    volume = parseFloat(ticker['vol']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this358.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this359 = this,
                _arguments340 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments340.length > 1 && _arguments340[1] !== undefined ? _arguments340[1] : {};
                market = _this359.market(symbol);
                return _this359.publicGetTrades(params);
            }).then(function (_resp) {
                response = _resp;

                return _this359.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this360 = this,
                _arguments341 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments341.length > 4 && _arguments341[4] !== undefined ? _arguments341[4] : undefined;
                params = _arguments341.length > 5 && _arguments341[5] !== undefined ? _arguments341[5] : {};
                return _this360.privatePostPlaceorder(_this360.extend({
                    'qty': amount,
                    'price': price,
                    'type': side[0].toUpperCase()
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['pending_oid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this361 = this;

            return _this361.privatePostCancelpendingorder({ 'orderNo': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this362 = this,
                _arguments343 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments343.length > 1 && _arguments343[1] !== undefined ? _arguments343[1] : 'public';
                method = _arguments343.length > 2 && _arguments343[2] !== undefined ? _arguments343[2] : 'GET';
                params = _arguments343.length > 3 && _arguments343[3] !== undefined ? _arguments343[3] : {};
                headers = _arguments343.length > 4 && _arguments343[4] !== undefined ? _arguments343[4] : undefined;
                body = _arguments343.length > 5 && _arguments343[5] !== undefined ? _arguments343[5] : undefined;
                url = _this362.urls['api'] + '/' + path;

                if (api == 'public') {
                    url += '.json';
                } else {
                    nonce = _this362.nonce();

                    body = _this362.urlencode(_this362.extend({ 'timestamp': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this362.apiKey,
                        'sig': _this362.hmac(_this362.encode(body), _this362.encode(_this362.secret), 'sha1')
                    };
                }
                return _this362.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (api == 'private') {
                    if ('error' in response) {
                        if (response['error']) {
                            throw new ExchangeError(_this362.id + ' ' + _this362.json(response));
                        }
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var fybse = extend(fyb, {
        'id': 'fybse',
        'name': 'FYB-SE',
        'countries': 'SE', // Sweden
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
            'api': 'https://www.fybse.se/api/SEK',
            'www': 'https://www.fybse.se',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' }
        }
    });

    //-----------------------------------------------------------------------------

    var fybsg = extend(fyb, {
        'id': 'fybsg',
        'name': 'FYB-SG',
        'countries': 'SG', // Singapore
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',
            'api': 'https://www.fybsg.com/api/SGD',
            'www': 'https://www.fybsg.com',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'markets': {
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' }
        }
    });

    //-----------------------------------------------------------------------------

    var gatecoin = {

        'id': 'gatecoin',
        'name': 'Gatecoin',
        'rateLimit': 2000,
        'countries': 'HK', // Hong Kong
        'comment': 'a regulated/licensed exchange',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1m',
            '15m': '15m',
            '1h': '1h',
            '6h': '6h',
            '1d': '24h'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',
            'api': 'https://api.gatecoin.com',
            'www': 'https://gatecoin.com',
            'doc': ['https://gatecoin.com/api', 'https://github.com/Gatecoin/RESTful-API-Implementation', 'https://api.gatecoin.com/swagger-ui/index.html']
        },
        'api': {
            'public': {
                'get': ['Public/ExchangeRate', // Get the exchange rates
                'Public/LiveTicker', // Get live ticker for all currency
                'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency
                'Public/LiveTickers', // Get live ticker for all currency
                'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.
                'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency
                'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency
                'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history
                'Public/Transactions/{CurrencyPair}', // Gets recent transactions
                'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions
                'Reference/BusinessNatureList', // Get the business nature list.
                'Reference/Countries', // Get the country list.
                'Reference/Currencies', // Get the currency list.
                'Reference/CurrencyPairs', // Get the currency pair list.
                'Reference/CurrentStatusList', // Get the current status list.
                'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.
                'Reference/IncomeRangeList', // Get the income range list.
                'Reference/IncomeSourceList', // Get the income source list.
                'Reference/VerificationLevelList', // Get the verif level list.
                'Stream/PublicChannel'],
                'post': ['Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date
                'Ping', // Post a string, then get it back.
                'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails
                'RegisterUser']
            },
            'private': {
                'get': ['Account/CorporateData', // Get corporate account data
                'Account/DocumentAddress', // Check if residence proof uploaded
                'Account/DocumentCorporation', // Check if registered document uploaded
                'Account/DocumentID', // Check if ID document copy uploaded
                'Account/DocumentInformation', // Get Step3 Data
                'Account/Email', // Get user email
                'Account/FeeRate', // Get fee rate of logged in user
                'Account/Level', // Get verif level of logged in user
                'Account/PersonalInformation', // Get Step1 Data
                'Account/Phone', // Get user phone number
                'Account/Profile', // Get trader profile
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Get referral information
                'Account/ReferralCode', // Get the referral code of the logged in user
                'Account/ReferralNames', // Get names of referred traders
                'Account/ReferralReward', // Get referral reward information
                'Account/ReferredCode', // Get referral code
                'Account/ResidentInformation', // Get Step2 Data
                'Account/SecuritySettings', // Get verif details of logged in user
                'Account/User', // Get all user info
                'APIKey/APIKey', // Get API Key for logged in user
                'Auth/ConnectionHistory', // Gets connection history of logged in user
                'Balance/Balances', // Gets the available balance for each currency for the logged in account.
                'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.
                'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user
                'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user
                'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit
                'Bank/Transactions', // Get all account transactions of the logged in user
                'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.
                'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.
                'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.
                'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.
                'Info/ReferenceCurrency', // Get user's reference currency
                'Info/ReferenceLanguage', // Get user's reference language
                'Notification/Messages', // Get from oldest unread + 3 read message to newest messages
                'Trade/Orders', // Gets open orders for the logged in trader.
                'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.
                'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/Trades', // Gets all transactions of logged in user
                'Trade/UserTrades'],
                'post': ['Account/DocumentAddress', // Upload address proof document
                'Account/DocumentCorporation', // Upload registered document document
                'Account/DocumentID', // Upload ID document copy
                'Account/Email/RequestVerify', // Request for verification email
                'Account/Email/Verify', // Verification email
                'Account/GoogleAuth', // Enable google auth
                'Account/Level', // Request verif level of logged in user
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Post a referral email
                'APIKey/APIKey', // Create a new API key for logged in user
                'Auth/ChangePassword', // Change password.
                'Auth/ForgotPassword', // Request reset password
                'Auth/ForgotUserID', // Request user id
                'Auth/Login', // Trader session log in.
                'Auth/Logout', // Logout from the current session.
                'Auth/LogoutOtherSessions', // Logout other sessions.
                'Auth/ResetPassword', // Reset password
                'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account
                'Bank/UserAccounts', // Add an account the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.
                'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.
                'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.
                'Notification/Messages', // Mark all as read
                'Notification/Messages/{ID}', // Mark as read
                'Trade/Orders', // Place an order at the exchange.
                'Trade/StopOrders'],
                'put': ['Account/CorporateData', // Update user company data for corporate account
                'Account/DocumentID', // Update ID document meta data
                'Account/DocumentInformation', // Update Step3 Data
                'Account/Email', // Update user email
                'Account/PersonalInformation', // Update Step1 Data
                'Account/Phone', // Update user phone number
                'Account/Questionnaire', // update the questionnaire
                'Account/ReferredCode', // Update referral code
                'Account/ResidentInformation', // Update Step2 Data
                'Account/SecuritySettings', // Update verif details of logged in user
                'Account/User', // Update all user info
                'Bank/UserAccounts', // Update the label of existing user bank accounnt
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address
                'Info/ReferenceCurrency', // User's reference currency
                'Info/ReferenceLanguage'],
                'delete': ['APIKey/APIKey/{PublicKey}', // Remove an API key
                'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user
                'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.
                'Trade/Orders', // Cancels all existing order
                'Trade/Orders/{OrderID}', // Cancels an existing order
                'Trade/StopOrders', // Cancels all existing stop orders
                'Trade/StopOrders/{ID}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var response,
                markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this363 = this;

            return Promise.resolve().then(function () {
                return _this363.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                markets = response['tickers'];
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currencyPair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this364 = this,
                _arguments345 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments345.length > 0 && _arguments345[0] !== undefined ? _arguments345[0] : {};
                return _this364.loadMarkets();
            }).then(function () {
                return _this364.privateGetBalanceBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': balance['availableBalance'],
                        'used': _this364.sum(balance['pendingIncoming'], balance['pendingOutgoing'], balance['openOrder']),
                        'total': balance['balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                _this365 = this,
                _arguments346 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments346.length > 1 && _arguments346[1] !== undefined ? _arguments346[1] : {};
                return _this365.loadMarkets();
            }).then(function () {
                market = _this365.market(symbol);
                return _this365.publicGetPublicMarketDepthCurrencyPair(_this365.extend({
                    'CurrencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this365.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = parseInt(ticker['createDateTime']) * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                result,
                t,
                ticker,
                id,
                market,
                symbol,
                _this366 = this;

            return Promise.resolve().then(function () {
                return _this366.loadMarkets();
            }).then(function () {
                return _this366.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = response['tickers'];
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    id = ticker['currencyPair'];
                    market = _this366.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this366.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                ticker,
                _this367 = this;

            return Promise.resolve().then(function () {
                return _this367.loadMarkets();
            }).then(function () {
                market = _this367.market(symbol);
                return _this367.publicGetPublicLiveTickerCurrencyPair({
                    'CurrencyPair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];

                return _this367.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = undefined;
            var order = undefined;
            if ('way' in trade) {
                side = trade['way'] == 'bid' ? 'buy' : 'sell';
                var orderId = trade['way'] + 'OrderId';
                order = trade[orderId];
            }
            var timestamp = parseInt(trade['transactionTime']) * 1000;
            if (!market) market = this.markets_by_id[trade['currencyPair']];
            return {
                'info': trade,
                'id': trade['transactionId'].toString(),
                'order': order,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this368 = this,
                _arguments349 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments349.length > 1 && _arguments349[1] !== undefined ? _arguments349[1] : {};
                return _this368.loadMarkets();
            }).then(function () {
                market = _this368.market(symbol);
                return _this368.publicGetPublicTransactionsCurrencyPair(_this368.extend({
                    'CurrencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this368.parseTrades(response['transactions'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [parseInt(ohlcv['createDateTime']) * 1000, ohlcv['open'], ohlcv['high'], ohlcv['low'], undefined, ohlcv['volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this369 = this,
                _arguments350 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments350.length > 1 && _arguments350[1] !== undefined ? _arguments350[1] : '1m';
                since = _arguments350.length > 2 && _arguments350[2] !== undefined ? _arguments350[2] : undefined;
                limit = _arguments350.length > 3 && _arguments350[3] !== undefined ? _arguments350[3] : undefined;
                params = _arguments350.length > 4 && _arguments350[4] !== undefined ? _arguments350[4] : {};
                return _this369.loadMarkets();
            }).then(function () {
                market = _this369.market(symbol);
                request = {
                    'CurrencyPair': market['id'],
                    'Timeframe': _this369.timeframes[timeframe]
                };

                if (limit) {
                    request['Count'] = limit;
                }request = _this369.extend(request, params);
                return _this369.publicGetPublicTickerHistoryCurrencyPairTimeframe(request);
            }).then(function (_resp) {
                response = _resp;

                return _this369.parseOHLCVs(response['tickers'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this370 = this,
                _arguments351 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments351.length > 4 && _arguments351[4] !== undefined ? _arguments351[4] : undefined;
                params = _arguments351.length > 5 && _arguments351[5] !== undefined ? _arguments351[5] : {};
                return _this370.loadMarkets();
            }).then(function () {
                order = {
                    'Code': _this370.marketId(symbol),
                    'Way': side == 'buy' ? 'Bid' : 'Ask',
                    'Amount': amount
                };

                if (type == 'limit') {
                    order['Price'] = price;
                }if (_this370.twofa) {
                    if ('ValidationCode' in params) {
                        order['ValidationCode'] = params['ValidationCode'];
                    } else {
                        throw new AuthenticationError(_this370.id + ' two-factor authentication requires a missing ValidationCode parameter');
                    }
                }
                return _this370.privatePostTradeOrders(_this370.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['clOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this371 = this;

            return Promise.resolve().then(function () {
                return _this371.loadMarkets();
            }).then(function () {
                return _this371.privateDeleteTradeOrdersOrderID({ 'OrderID': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                contentType,
                auth,
                signature,
                response,
                _test17,
                _test18,
                _this372 = this,
                _arguments353 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments353.length > 1 && _arguments353[1] !== undefined ? _arguments353[1] : 'public';
                method = _arguments353.length > 2 && _arguments353[2] !== undefined ? _arguments353[2] : 'GET';
                params = _arguments353.length > 3 && _arguments353[3] !== undefined ? _arguments353[3] : {};
                headers = _arguments353.length > 4 && _arguments353[4] !== undefined ? _arguments353[4] : undefined;
                body = _arguments353.length > 5 && _arguments353[5] !== undefined ? _arguments353[5] : undefined;
                url = _this372.urls['api'] + '/' + _this372.implodeParams(path, params);
                query = _this372.omit(params, _this372.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this372.urlencode(query);
                    }
                } else {
                    nonce = _this372.nonce();
                    contentType = method == 'GET' ? '' : 'application/json';
                    auth = method + url + contentType + nonce.toString();

                    auth = auth.toLowerCase();
                    signature = _this372.hmac(_this372.encode(auth), _this372.encode(_this372.secret), 'sha256', 'base64');

                    headers = {
                        'API_PUBLIC_KEY': _this372.apiKey,
                        'API_REQUEST_SIGNATURE': signature,
                        'API_REQUEST_DATE': nonce
                    };
                    if (method != 'GET') {
                        headers['Content-Type'] = contentType;
                        body = _this372.json(_this372.extend({ 'nonce': nonce }, params));
                    }
                }
                return _this372.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test17 = 'responseStatus' in response;
                _test18 = _test17 && 'message' in response['responseStatus'];

                if (_test18 && response['responseStatus']['message'] == 'OK') {
                    return response;
                } else {
                    throw new ExchangeError(_this372.id + ' ' + _this372.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gdax = {
        'id': 'gdax',
        'name': 'GDAX',
        'countries': 'US',
        'rateLimit': 1000,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': 60,
            '5m': 300,
            '15m': 900,
            '30m': 1800,
            '1h': 3600,
            '2h': 7200,
            '4h': 14400,
            '12h': 43200,
            '1d': 86400,
            '1w': 604800,
            '1M': 2592000,
            '1y': 31536000
        },
        'urls': {
            'test': 'https://api-public.sandbox.gdax.com',
            'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',
            'api': 'https://api.gdax.com',
            'www': 'https://www.gdax.com',
            'doc': 'https://docs.gdax.com'
        },
        'api': {
            'public': {
                'get': ['currencies', 'products', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']
            },
            'private': {
                'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'coinbase-accounts', 'fills', 'funding', 'orders', 'orders/{id}', 'payment-methods', 'position', 'reports/{id}', 'users/self/trailing-volume'],
                'post': ['deposits/coinbase-account', 'deposits/payment-method', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/crypto', 'withdrawals/payment-method'],
                'delete': ['orders', 'orders/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this373 = this;

            return Promise.resolve().then(function () {
                return _this373.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quote_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this374 = this,
                _arguments355 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments355.length > 0 && _arguments355[0] !== undefined ? _arguments355[0] : {};
                return _this374.loadMarkets();
            }).then(function () {
                return _this374.privateGetAccounts();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['hold']),
                        'total': parseFloat(balance['balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this375 = this,
                _arguments356 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments356.length > 1 && _arguments356[1] !== undefined ? _arguments356[1] : {};
                return _this375.loadMarkets();
            }).then(function () {
                return _this375.publicGetProductsIdBook(_this375.extend({
                    'id': _this375.marketId(market),
                    'level': 2 // 1 best bidask, 2 aggregated, 3 full
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this375.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                quote,
                timestamp,
                bid,
                ask,
                _this376 = this;

            return Promise.resolve().then(function () {
                return _this376.loadMarkets();
            }).then(function () {
                market = _this376.market(symbol);
                return _this376.publicGetProductsIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                return _this376.publicGetProductsIdStats({
                    'id': market['id']
                });
            }).then(function (_resp) {
                quote = _resp;
                timestamp = _this376.parse8601(ticker['time']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    bid = parseFloat(ticker['bid']);
                }if ('ask' in ticker) {
                    ask = parseFloat(ticker['ask']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this376.iso8601(timestamp),
                    'high': parseFloat(quote['high']),
                    'low': parseFloat(quote['low']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': parseFloat(quote['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(quote['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(['time']);
            var type = undefined;
            return {
                'id': trade['trade_id'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['size'])
            };
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this377 = this,
                _arguments358 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments358.length > 1 && _arguments358[1] !== undefined ? _arguments358[1] : {};
                return _this377.loadMarkets();
            }).then(function () {
                return _this377.publicGetProductsIdTrades(_this377.extend({
                    'id': _this377.marketId(market) // fixes issue #2
                }, params));
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, ohlcv[3], ohlcv[2], ohlcv[1], ohlcv[4], ohlcv[5]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                _this378 = this,
                _arguments359 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments359.length > 1 && _arguments359[1] !== undefined ? _arguments359[1] : '1m';
                since = _arguments359.length > 2 && _arguments359[2] !== undefined ? _arguments359[2] : undefined;
                limit = _arguments359.length > 3 && _arguments359[3] !== undefined ? _arguments359[3] : undefined;
                params = _arguments359.length > 4 && _arguments359[4] !== undefined ? _arguments359[4] : {};
                return _this378.loadMarkets();
            }).then(function () {
                market = _this378.market(symbol);
                return _this378.publicGetProductsIdCandles(_this378.extend({
                    'id': market['id'],
                    'granularity': _this378.timeframes[timeframe],
                    'start': since,
                    'end': limit
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this378.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        fetchTime: function fetchTime() {
            var response,
                _this379 = this;

            response = _this379.publicGetTime();

            return _this379.parse8601(response['iso']);
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                oid,
                order,
                response,
                _this380 = this,
                _arguments361 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments361.length > 4 && _arguments361[4] !== undefined ? _arguments361[4] : undefined;
                params = _arguments361.length > 5 && _arguments361[5] !== undefined ? _arguments361[5] : {};
                return _this380.loadMarkets();
            }).then(function () {
                oid = _this380.nonce().toString();
                order = {
                    'product_id': _this380.marketId(market),
                    'side': side,
                    'size': amount,
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this380.privatePostOrders(_this380.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this381 = this;

            return Promise.resolve().then(function () {
                return _this381.loadMarkets();
            }).then(function () {
                return _this381.privateDeleteOrdersId({ 'id': id });
            });
        },
        getPaymentMethods: function getPaymentMethods() {
            var response,
                _this382 = this;

            return Promise.resolve().then(function () {
                return _this382.privateGetPaymentMethods();
            }).then(function (_resp) {
                response = _resp;

                return response;
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this383 = this,
                _arguments364 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments364.length > 3 && _arguments364[3] !== undefined ? _arguments364[3] : {};

                if ('payment_method_id' in params) {
                    return Promise.resolve().then(function () {
                        return _this383.loadMarkets();
                    }).then(function () {
                        return _this383.privatePostWithdraw(_this383.extend({
                            'currency': currency,
                            'amount': amount
                            // 'address': address, // they don't allow withdrawals to direct addresses
                        }, params));
                    }).then(function (_resp) {
                        response = _resp;

                        return {
                            'info': response,
                            'id': response['result']
                        };
                    });
                } else {
                    throw new ExchangeError(_this383.id + " withdraw requires a 'payment_method_id' parameter");
                }
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                what,
                secret,
                signature,
                response,
                _this386 = this,
                _arguments367 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments367.length > 1 && _arguments367[1] !== undefined ? _arguments367[1] : 'public';
                method = _arguments367.length > 2 && _arguments367[2] !== undefined ? _arguments367[2] : 'GET';
                params = _arguments367.length > 3 && _arguments367[3] !== undefined ? _arguments367[3] : {};
                headers = _arguments367.length > 4 && _arguments367[4] !== undefined ? _arguments367[4] : undefined;
                body = _arguments367.length > 5 && _arguments367[5] !== undefined ? _arguments367[5] : undefined;
                request = '/' + _this386.implodeParams(path, params);
                url = _this386.urls['api'] + request;
                query = _this386.omit(params, _this386.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this386.urlencode(query);
                    }
                } else {
                    if (!_this386.apiKey) {
                        throw new AuthenticationError(_this386.id + ' requires apiKey property for authentication and trading');
                    }if (!_this386.secret) {
                        throw new AuthenticationError(_this386.id + ' requires secret property for authentication and trading');
                    }if (!_this386.password) {
                        throw new AuthenticationError(_this386.id + ' requires password property for authentication and trading');
                    }nonce = _this386.nonce().toString();

                    if (Object.keys(query).length) {
                        body = _this386.json(query);
                    }what = nonce + method + request + (body || '');
                    secret = _this386.base64ToBinary(_this386.secret);
                    signature = _this386.hmac(_this386.encode(what), secret, 'sha256', 'base64');

                    headers = {
                        'CB-ACCESS-KEY': _this386.apiKey,
                        'CB-ACCESS-SIGN': _this386.decode(signature),
                        'CB-ACCESS-TIMESTAMP': nonce,
                        'CB-ACCESS-PASSPHRASE': _this386.password,
                        'Content-Type': 'application/json'
                    };
                }
                return _this386.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this386.id + ' ' + _this386.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var gemini = {
        'id': 'gemini',
        'name': 'Gemini',
        'countries': 'US',
        'rateLimit': 1500, // 200 for private API
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
            'api': 'https://api.gemini.com',
            'www': 'https://gemini.com',
            'doc': 'https://docs.gemini.com/rest-api'
        },
        'api': {
            'public': {
                'get': ['symbols', 'pubticker/{symbol}', 'book/{symbol}', 'trades/{symbol}', 'auction/{symbol}', 'auction/{symbol}/history']
            },
            'private': {
                'post': ['order/new', 'order/cancel', 'order/cancel/session', 'order/cancel/all', 'order/status', 'orders', 'mytrades', 'tradevolume', 'balances', 'deposit/{currency}/newAddress', 'withdraw/{currency}', 'heartbeat']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                id,
                market,
                uppercase,
                base,
                quote,
                symbol,
                _this387 = this;

            return Promise.resolve().then(function () {
                return _this387.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    id = markets[p];
                    market = id;
                    uppercase = market.toUpperCase();
                    base = uppercase.slice(0, 3);
                    quote = uppercase.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this388 = this,
                _arguments369 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments369.length > 1 && _arguments369[1] !== undefined ? _arguments369[1] : {};
                return _this388.loadMarkets();
            }).then(function () {
                return _this388.publicGetBookSymbol(_this388.extend({
                    'symbol': _this388.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this388.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this389 = this;

            return Promise.resolve().then(function () {
                return _this389.loadMarkets();
            }).then(function () {
                market = _this389.market(symbol);
                return _this389.publicGetPubtickerSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['volume']['timestamp'];
                baseVolume = market['base'];
                quoteVolume = market['quote'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this389.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume'][baseVolume]),
                    'quoteVolume': parseFloat(ticker['volume'][quoteVolume]),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['timestampms'];
            return {
                'id': trade['tid'].toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this390 = this,
                _arguments371 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments371.length > 1 && _arguments371[1] !== undefined ? _arguments371[1] : {};
                return _this390.loadMarkets();
            }).then(function () {
                market = _this390.market(symbol);
                return _this390.publicGetTradesSymbol(_this390.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this390.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this391 = this,
                _arguments372 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments372.length > 0 && _arguments372[0] !== undefined ? _arguments372[0] : {};
                return _this391.loadMarkets();
            }).then(function () {
                return _this391.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': 0.0,
                        'total': parseFloat(balance['amount'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this392 = this,
                _arguments373 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments373.length > 4 && _arguments373[4] !== undefined ? _arguments373[4] : undefined;
                params = _arguments373.length > 5 && _arguments373[5] !== undefined ? _arguments373[5] : {};
                return _this392.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this392.id + ' allows limit orders only');
                }order = {
                    'client_order_id': _this392.nonce(),
                    'symbol': _this392.marketId(symbol),
                    'amount': amount.toString(),
                    'price': price.toString(),
                    'side': side,
                    'type': 'exchange limit' // gemini allows limit orders only
                };
                return _this392.privatePostOrderNew(_this392.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this393 = this;

            return Promise.resolve().then(function () {
                return _this393.loadMarkets();
            }).then(function () {
                return _this393.privatePostCancelOrder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                payload,
                signature,
                response,
                _this394 = this,
                _arguments375 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments375.length > 1 && _arguments375[1] !== undefined ? _arguments375[1] : 'public';
                method = _arguments375.length > 2 && _arguments375[2] !== undefined ? _arguments375[2] : 'GET';
                params = _arguments375.length > 3 && _arguments375[3] !== undefined ? _arguments375[3] : {};
                headers = _arguments375.length > 4 && _arguments375[4] !== undefined ? _arguments375[4] : undefined;
                body = _arguments375.length > 5 && _arguments375[5] !== undefined ? _arguments375[5] : undefined;
                url = '/' + _this394.version + '/' + _this394.implodeParams(path, params);
                query = _this394.omit(params, _this394.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this394.urlencode(query);
                    }
                } else {
                    nonce = _this394.nonce();
                    request = _this394.extend({
                        'request': url,
                        'nonce': nonce
                    }, query);
                    payload = _this394.json(request);

                    payload = _this394.stringToBase64(_this394.encode(payload));
                    signature = _this394.hmac(payload, _this394.encode(_this394.secret), 'sha384');

                    headers = {
                        'Content-Type': 'text/plain',
                        'Content-Length': 0,
                        'X-GEMINI-APIKEY': _this394.apiKey,
                        'X-GEMINI-PAYLOAD': payload,
                        'X-GEMINI-SIGNATURE': signature
                    };
                }
                url = _this394.urls['api'] + url;
                return _this394.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (response['result'] == 'error') {
                        throw new ExchangeError(_this394.id + ' ' + _this394.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc = {

        'id': 'hitbtc',
        'name': 'HitBTC',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'http://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://hitbtc.com/api', 'http://hitbtc-com.github.io/hitbtc-api', 'http://jsfiddle.net/bmknight/RqbYB']
        },
        'api': {
            'public': {
                'get': ['{symbol}/orderbook', '{symbol}/ticker', '{symbol}/trades', '{symbol}/trades/recent', 'symbols', 'ticker', 'time,']
            },
            'trading': {
                'get': ['balance', 'orders/active', 'orders/recent', 'order', 'trades/by/order', 'trades'],
                'post': ['new_order', 'cancel_order', 'cancel_orders']
            },
            'payment': {
                'get': ['balance', 'address/{currency}', 'transactions', 'transactions/{transaction}'],
                'post': ['transfer_to_trading', 'transfer_to_main', 'address/{currency}', 'payout']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                lot,
                step,
                symbol,
                _this395 = this;

            return Promise.resolve().then(function () {
                return _this395.publicGetSymbols();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['symbols'].length; p++) {
                    market = markets['symbols'][p];
                    id = market['symbol'];
                    base = market['commodity'];
                    quote = market['currency'];
                    lot = parseFloat(market['lot']);
                    step = parseFloat(market['step']);

                    base = _this395.commonCurrencyCode(base);
                    quote = _this395.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'lot': lot,
                        'step': step,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                code,
                currency,
                account,
                _this396 = this,
                _arguments377 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments377.length > 0 && _arguments377[0] !== undefined ? _arguments377[0] : {};
                return _this396.loadMarkets();
            }).then(function () {
                return _this396.tradingGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    code = balance['currency_code'];
                    currency = _this396.commonCurrencyCode(code);
                    account = {
                        'free': parseFloat(balance['cash']),
                        'used': parseFloat(balance['reserved']),
                        'total': 0.0
                    };

                    account['total'] = _this396.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this397 = this,
                _arguments378 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments378.length > 1 && _arguments378[1] !== undefined ? _arguments378[1] : {};
                return _this397.loadMarkets();
            }).then(function () {
                return _this397.publicGetSymbolOrderbook(_this397.extend({
                    'symbol': _this397.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this397.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': parseFloat(ticker['volume_quote']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this398 = this;

            return Promise.resolve().then(function () {
                return _this398.loadMarkets();
            }).then(function () {
                return _this398.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this398.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this398.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this399 = this;

            return Promise.resolve().then(function () {
                return _this399.loadMarkets();
            }).then(function () {
                market = _this399.market(symbol);
                return _this399.publicGetSymbolTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new ExchangeError(_this399.id + ' ' + ticker['message']);
                }return _this399.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            return {
                'info': trade,
                'id': trade[0],
                'timestamp': trade[3],
                'datetime': this.iso8601(trade[3]),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade[4],
                'price': parseFloat(trade[1]),
                'amount': parseFloat(trade[2])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this400 = this,
                _arguments381 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments381.length > 1 && _arguments381[1] !== undefined ? _arguments381[1] : {};
                return _this400.loadMarkets();
            }).then(function () {
                market = _this400.market(symbol);
                return _this400.publicGetSymbolTrades(_this400.extend({
                    'symbol': market['id'],
                    // 'from': 0,
                    // 'till': 100,
                    // 'by': 'ts', // or by trade_id
                    // 'sort': 'desc', // or asc
                    // 'start_index': 0,
                    // 'max_results': 1000,
                    // 'format_item': 'object',
                    // 'format_price': 'number',
                    // 'format_amount': 'number',
                    // 'format_tid': 'string',
                    // 'format_timestamp': 'millisecond',
                    // 'format_wrap': false,
                    'side': 'true'
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this400.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                quantity,
                wholeLots,
                difference,
                clientOrderId,
                order,
                response,
                _this401 = this,
                _arguments382 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments382.length > 4 && _arguments382[4] !== undefined ? _arguments382[4] : undefined;
                params = _arguments382.length > 5 && _arguments382[5] !== undefined ? _arguments382[5] : {};
                return _this401.loadMarkets();
            }).then(function () {
                market = _this401.market(symbol);
                // check if amount can be evenly divided into lots
                // they want integer quantity in lot units

                quantity = parseFloat(amount) / market['lot'];
                wholeLots = Math.round(quantity);
                difference = quantity - wholeLots;

                if (Math.abs(difference) > market['step']) {
                    throw new ExchangeError(_this401.id + ' order amount should be evenly divisible by lot unit size of ' + market['lot'].toString());
                }clientOrderId = _this401.milliseconds();
                order = {
                    'clientOrderId': clientOrderId.toString(),
                    'symbol': market['id'],
                    'side': side,
                    'quantity': wholeLots.toString(), // quantity in integer lot units
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = '%.10f'.sprintf(price);
                }return _this401.tradingPostNewOrder(_this401.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['ExecutionReport']['clientOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this402 = this,
                _arguments383 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments383.length > 1 && _arguments383[1] !== undefined ? _arguments383[1] : {};
                return _this402.loadMarkets();
            }).then(function () {
                return _this402.tradingPostCancelOrder(_this402.extend({
                    'clientOrderId': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this403 = this,
                _arguments384 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments384.length > 3 && _arguments384[3] !== undefined ? _arguments384[3] : {};
                return _this403.loadMarkets();
            }).then(function () {
                return _this403.paymentPostPayout(_this403.extend({
                    'currency_code': currency,
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['transaction']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this404 = this,
                _arguments385 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments385.length > 1 && _arguments385[1] !== undefined ? _arguments385[1] : 'public';
                method = _arguments385.length > 2 && _arguments385[2] !== undefined ? _arguments385[2] : 'GET';
                params = _arguments385.length > 3 && _arguments385[3] !== undefined ? _arguments385[3] : {};
                headers = _arguments385.length > 4 && _arguments385[4] !== undefined ? _arguments385[4] : undefined;
                body = _arguments385.length > 5 && _arguments385[5] !== undefined ? _arguments385[5] : undefined;
                url = '/' + 'api' + '/' + _this404.version + '/' + api + '/' + _this404.implodeParams(path, params);
                query = _this404.omit(params, _this404.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this404.urlencode(query);
                    }
                } else {
                    nonce = _this404.nonce();

                    query = _this404.extend({ 'nonce': nonce, 'apikey': _this404.apiKey }, query);
                    if (method == 'POST') {
                        if (Object.keys(query).length) {
                            body = _this404.urlencode(query);
                        }
                    }url += '?' + _this404.urlencode(query);
                    auth = url + (body || '');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Signature': _this404.hmac(_this404.encode(auth), _this404.encode(_this404.secret), 'sha512').toLowerCase()
                    };
                }
                url = _this404.urls['api'] + url;
                return _this404.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('code' in response) {
                    if ('ExecutionReport' in response) {
                        if (response['ExecutionReport']['orderRejectReason'] == 'orderExceedsLimit') {
                            throw new InsufficientFunds(_this404.id + ' ' + _this404.json(response));
                        }
                    }
                    throw new ExchangeError(_this404.id + ' ' + _this404.json(response));
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc2 = extend(hitbtc, {

        'id': 'hitbtc2',
        'name': 'HitBTC v2',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '2',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'https://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://api.hitbtc.com/api/2/explore', 'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv2.md']
        },
        'api': {
            'public': {
                'get': ['symbol', // Available Currency Symbols
                'symbol/{symbol}', // Get symbol info
                'currency', // Available Currencies
                'currency/{currency}', // Get currency info
                'ticker', // Ticker list for all symbols
                'ticker/{symbol}', // Ticker for symbol
                'trades/{symbol}', // Trades
                'orderbook/{symbol}']
            },
            'private': {
                'get': ['order', // List your current open orders
                'order/{clientOrderId}', // Get a single order by clientOrderId
                'trading/balance', // Get trading balance
                'trading/fee/{symbol}', // Get trading fee rate
                'history/trades', // Get historical trades
                'history/order', // Get historical orders
                'history/order/{id}/trades', // Get historical trades by specified order
                'account/balance', // Get main acccount balance
                'account/transactions', // Get account transactions
                'account/transactions/{id}', // Get account transaction by id
                'account/crypto/address/{currency}'],
                'post': ['order', // Create new order
                'account/crypto/withdraw', // Withdraw crypro
                'account/crypto/address/{currency}', // Create new deposit crypro address
                'account/transfer'],
                'put': ['order/{clientOrderId}', // Create new order
                'account/crypto/withdraw/{id}'],
                'delete': ['order', // Cancel all open orders
                'order/{clientOrderId}', // Cancel order
                'account/crypto/withdraw/{id}'],
                'patch': ['order/{clientOrderId}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                i,
                market,
                id,
                base,
                quote,
                lot,
                step,
                symbol,
                _this405 = this;

            return Promise.resolve().then(function () {
                return _this405.publicGetSymbol();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (i = 0; i < markets.length; i++) {
                    market = markets[i];
                    id = market['id'];
                    base = market['baseCurrency'];
                    quote = market['quoteCurrency'];
                    lot = market['quantityIncrement'];
                    step = market['tickSize'];

                    base = _this405.commonCurrencyCode(base);
                    quote = _this405.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'lot': lot,
                        'step': step,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                code,
                currency,
                account,
                _this406 = this,
                _arguments387 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments387.length > 0 && _arguments387[0] !== undefined ? _arguments387[0] : {};
                return _this406.loadMarkets();
            }).then(function () {
                return _this406.privateGetAccountBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    code = balance['currency'];
                    currency = _this406.commonCurrencyCode(code);
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['reserved']),
                        'total': 0.0
                    };

                    account['total'] = _this406.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this407 = this,
                _arguments388 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments388.length > 1 && _arguments388[1] !== undefined ? _arguments388[1] : {};
                return _this407.loadMarkets();
            }).then(function () {
                return _this407.publicGetOrderbookSymbol(_this407.extend({
                    'symbol': _this407.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this407.parseOrderBook(orderbook, undefined, 'bid', 'ask', 'price', 'size');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['timestamp']);
            var high = undefined;
            if ('high' in ticker) if (ticker['high']) high = parseFloat(ticker['high']);
            var low = undefined;
            if ('low' in ticker) if (ticker['low']) low = parseFloat(ticker['low']);
            var open = undefined;
            if ('open' in ticker) if (ticker['open']) open = parseFloat(ticker['open']);
            var close = undefined;
            if ('close' in ticker) if (ticker['close']) close = parseFloat(ticker['close']);
            var last = undefined;
            if ('last' in ticker) if (ticker['last']) last = parseFloat(ticker['last']);
            var bid = undefined;
            if ('bid' in ticker) if (ticker['bid']) bid = parseFloat(ticker['bid']);
            var ask = undefined;
            if ('ask' in ticker) if (ticker['ask']) ask = parseFloat(ticker['ask']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': high,
                'low': low,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': open,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume']),
                'quoteVolume': parseFloat(ticker['volumeQuote']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                i,
                ticker,
                id,
                market,
                symbol,
                _this408 = this;

            return Promise.resolve().then(function () {
                return _this408.loadMarkets();
            }).then(function () {
                return _this408.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};

                for (i = 0; i < tickers.length; i++) {
                    ticker = tickers[i];
                    id = ticker['symbol'];
                    market = _this408.markets_by_id[id];
                    symbol = market['symbol'];

                    result[symbol] = _this408.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this409 = this;

            return Promise.resolve().then(function () {
                return _this409.loadMarkets();
            }).then(function () {
                market = _this409.market(symbol);
                return _this409.publicGetTickerSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new ExchangeError(_this409.id + ' ' + ticker['message']);
                }return _this409.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['timestamp']);
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['quantity'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this410 = this,
                _arguments391 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments391.length > 1 && _arguments391[1] !== undefined ? _arguments391[1] : {};
                return _this410.loadMarkets();
            }).then(function () {
                market = _this410.market(symbol);
                return _this410.publicGetTradesSymbol(_this410.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this410.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                clientOrderId,
                order,
                response,
                _this411 = this,
                _arguments392 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments392.length > 4 && _arguments392[4] !== undefined ? _arguments392[4] : undefined;
                params = _arguments392.length > 5 && _arguments392[5] !== undefined ? _arguments392[5] : {};
                return _this411.loadMarkets();
            }).then(function () {
                market = _this411.market(symbol);
                clientOrderId = _this411.milliseconds();

                amount = parseFloat(amount);
                order = {
                    'clientOrderId': clientOrderId.toString(),
                    'symbol': market['id'],
                    'side': side,
                    'quantity': amount.toString(),
                    'type': type
                };

                if (type == 'limit') {
                    price = parseFloat(price);
                    order['price'] = '%.10f'.sprintf(price);
                }
                return _this411.privatePostOrder(_this411.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['clientOrderId']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this412 = this,
                _arguments393 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments393.length > 1 && _arguments393[1] !== undefined ? _arguments393[1] : {};
                return _this412.loadMarkets();
            }).then(function () {
                return _this412.privateDeleteOrder(_this412.extend({
                    'clientOrderId': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this413 = this,
                _arguments394 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments394.length > 3 && _arguments394[3] !== undefined ? _arguments394[3] : {};
                return _this413.loadMarkets();
            }).then(function () {
                amount = parseFloat(amount);
                return _this413.privatePostAccountCryptoWithdraw(_this413.extend({
                    'currency': currency,
                    'amount': amount.toString(),
                    'address': address
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                payload,
                auth,
                response,
                _this414 = this,
                _arguments395 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments395.length > 1 && _arguments395[1] !== undefined ? _arguments395[1] : 'public';
                method = _arguments395.length > 2 && _arguments395[2] !== undefined ? _arguments395[2] : 'GET';
                params = _arguments395.length > 3 && _arguments395[3] !== undefined ? _arguments395[3] : {};
                headers = _arguments395.length > 4 && _arguments395[4] !== undefined ? _arguments395[4] : undefined;
                body = _arguments395.length > 5 && _arguments395[5] !== undefined ? _arguments395[5] : undefined;
                url = '/api' + '/' + _this414.version + '/';
                query = _this414.omit(params, _this414.extractParams(path));

                if (api == 'public') {
                    url += api + '/' + _this414.implodeParams(path, params);
                    if (Object.keys(query).length) {
                        url += '?' + _this414.urlencode(query);
                    }
                } else {
                    url += _this414.implodeParams(path, params) + '?' + _this414.urlencode(query);
                    if (method != 'GET') {
                        if (Object.keys(query).length) {
                            body = _this414.json(query);
                        }
                    }payload = _this414.encode(_this414.apiKey + ':' + _this414.secret);
                    auth = _this414.stringToBase64(payload);

                    headers = {
                        'Authorization': "Basic " + _this414.decode(auth),
                        'Content-Type': 'application/json'
                    };
                }
                url = _this414.urls['api'] + url;
                return _this414.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this414.id + ' ' + _this414.json(response));
                }return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var huobi = {

        'id': 'huobi',
        'name': 'Huobi',
        'countries': 'CN',
        'rateLimit': 2000,
        'version': 'v3',
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '001',
            '5m': '005',
            '15m': '015',
            '30m': '030',
            '1h': '060',
            '1d': '100',
            '1w': '200',
            '1M': '300',
            '1y': '400'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'http://api.huobi.com',
            'www': 'https://www.huobi.com',
            'doc': 'https://github.com/huobiapi/API_Docs_en/wiki'
        },
        'api': {
            'staticmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'usdmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'trade': {
                'post': ['get_account_info', 'get_orders', 'order_info', 'buy', 'sell', 'buy_market', 'sell_market', 'cancel_order', 'get_new_deal_orders', 'get_order_id_by_trade_id', 'withdraw_coin', 'cancel_withdraw_coin', 'get_withdraw_coin_result', 'transfer', 'loan', 'repayment', 'get_loan_available', 'get_loans']
            }
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },
            'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 },
            'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket', 'coinType': 1 }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                available,
                frozen,
                loan,
                _this415 = this,
                _arguments396 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments396.length > 0 && _arguments396[0] !== undefined ? _arguments396[0] : {};
                return _this415.tradePostGetAccountInfo();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this415.currencies.length; c++) {
                    currency = _this415.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this415.account();
                    available = 'available_' + lowercase + '_display';
                    frozen = 'frozen_' + lowercase + '_display';
                    loan = 'loan_' + lowercase + '_display';

                    if (available in balances) {
                        account['free'] = parseFloat(balances[available]);
                    }if (frozen in balances) {
                        account['used'] = parseFloat(balances[frozen]);
                    }if (loan in balances) {
                        account['used'] = _this415.sum(account['used'], parseFloat(balances[loan]));
                    }account['total'] = _this415.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                method,
                orderbook,
                _this416 = this,
                _arguments397 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments397.length > 1 && _arguments397[1] !== undefined ? _arguments397[1] : {};
                market = _this416.market(symbol);
                method = market['type'] + 'GetDepthId';
                return _this416[method](_this416.extend({ 'id': market['id'] }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this416.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                method,
                response,
                ticker,
                timestamp,
                _this417 = this;

            return Promise.resolve().then(function () {
                market = _this417.market(symbol);
                method = market['type'] + 'GetTickerId';
                return _this417[method]({ 'id': market['id'] });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['time']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this417.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['ts'];
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['direction'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                method,
                response,
                _this418 = this,
                _arguments399 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments399.length > 1 && _arguments399[1] !== undefined ? _arguments399[1] : {};
                market = _this418.market(symbol);
                method = market['type'] + 'GetDetailId';
                return _this418[method](_this418.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this418.parseTrades(response['trades'], market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            // not implemented yet
            return [ohlcv[0], ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[6]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                method,
                ohlcvs,
                _this419 = this,
                _arguments400 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments400.length > 1 && _arguments400[1] !== undefined ? _arguments400[1] : '1m';
                since = _arguments400.length > 2 && _arguments400[2] !== undefined ? _arguments400[2] : undefined;
                limit = _arguments400.length > 3 && _arguments400[3] !== undefined ? _arguments400[3] : undefined;
                params = _arguments400.length > 4 && _arguments400[4] !== undefined ? _arguments400[4] : {};
                market = _this419.market(symbol);
                method = market['type'] + 'GetIdKlinePeriod';
                return _this419[method](_this419.extend({
                    'id': market['id'],
                    'period': _this419.timeframes[timeframe]
                }, params));
            }).then(function (_resp) {
                ohlcvs = _resp;

                return ohlcvs;
                // return this.parseOHLCVs (market, ohlcvs, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                order,
                response,
                _this420 = this,
                _arguments401 = arguments;

            price = _arguments401.length > 4 && _arguments401[4] !== undefined ? _arguments401[4] : undefined;
            params = _arguments401.length > 5 && _arguments401[5] !== undefined ? _arguments401[5] : {};
            market = _this420.market(symbol);
            method = 'tradePost' + _this420.capitalize(side);
            order = {
                'coin_type': market['coinType'],
                'amount': amount,
                'market': market['quote'].toLowerCase()
            };

            if (type == 'limit') {
                order['price'] = price;
            } else {
                method += _this420.capitalize(type);
            }response = _this420[method](_this420.extend(order, params));

            return {
                'info': response,
                'id': response['id']
            };
        },
        cancelOrder: function cancelOrder(id) {
            var _this421 = this;

            return _this421.tradePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                _query,
                response,
                _this422 = this,
                _arguments403 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments403.length > 1 && _arguments403[1] !== undefined ? _arguments403[1] : 'trade';
                method = _arguments403.length > 2 && _arguments403[2] !== undefined ? _arguments403[2] : 'GET';
                params = _arguments403.length > 3 && _arguments403[3] !== undefined ? _arguments403[3] : {};
                headers = _arguments403.length > 4 && _arguments403[4] !== undefined ? _arguments403[4] : undefined;
                body = _arguments403.length > 5 && _arguments403[5] !== undefined ? _arguments403[5] : undefined;
                url = _this422.urls['api'];

                if (api == 'trade') {
                    url += '/api' + _this422.version;
                    query = _this422.keysort(_this422.extend({
                        'method': path,
                        'access_key': _this422.apiKey,
                        'created': _this422.nonce()
                    }, params));
                    queryString = _this422.urlencode(_this422.omit(query, 'market'));
                    // secret key must be at the end of query to be signed

                    queryString += '&secret_key=' + _this422.secret;
                    query['sign'] = _this422.hash(_this422.encode(queryString));
                    body = _this422.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                } else {
                    url += '/' + api + '/' + _this422.implodeParams(path, params) + '_json.js';
                    _query = _this422.omit(params, _this422.extractParams(path));

                    if (Object.keys(_query).length) {
                        url += '?' + _this422.urlencode(_query);
                    }
                }
                return _this422.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('status' in response) {
                    if (response['status'] == 'error') {
                        throw new ExchangeError(_this422.id + ' ' + _this422.json(response));
                    }
                }if ('code' in response) {
                    throw new ExchangeError(_this422.id + ' ' + _this422.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var itbit = {

        'id': 'itbit',
        'name': 'itBit',
        'countries': 'US',
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
            'api': 'https://api.itbit.com',
            'www': 'https://www.itbit.com',
            'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']
        },
        'api': {
            'public': {
                'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']
            },
            'private': {
                'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders/{id}'],
                'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],
                'delete': ['wallets/{walletId}/orders/{id}']
            }
        },
        'markets': {
            'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this423 = this,
                _arguments404 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments404.length > 1 && _arguments404[1] !== undefined ? _arguments404[1] : {};
                return _this423.publicGetMarketsSymbolOrderBook(_this423.extend({
                    'symbol': _this423.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this423.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                bid,
                ask,
                _this424 = this;

            return Promise.resolve().then(function () {
                return _this424.publicGetMarketsSymbolTicker({
                    'symbol': _this424.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this424.parse8601(ticker['serverTimeUTC']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    if (ticker['bid']) {
                        bid = parseFloat(ticker['bid']);
                    }
                }if ('ask' in ticker) {
                    if (ticker['ask']) {
                        ask = parseFloat(ticker['ask']);
                    }
                }return {
                    'timestamp': timestamp,
                    'datetime': _this424.iso8601(timestamp),
                    'high': parseFloat(ticker['high24h']),
                    'low': parseFloat(ticker['low24h']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': parseFloat(ticker['vwap24h']),
                    'open': parseFloat(ticker['openToday']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume24h']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['timestamp']);
            var id = trade['matchNumber'].toString();
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': id,
                'order': id,
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this425 = this,
                _arguments406 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments406.length > 1 && _arguments406[1] !== undefined ? _arguments406[1] : {};
                market = _this425.market(symbol);
                return _this425.publicGetMarketsSymbolTrades(_this425.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this425.parseTrades(response['recentTrades'], market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this426 = this,
                _arguments407 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments407.length > 0 && _arguments407[0] !== undefined ? _arguments407[0] : {};
                return _this426.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['availableBalance']),
                        'used': 0.0,
                        'total': parseFloat(balance['totalBalance'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchWallets: function fetchWallets() {
            return this.privateGetWallets();
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this427 = this,
                _arguments408 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments408.length > 4 && _arguments408[4] !== undefined ? _arguments408[4] : undefined;
                params = _arguments408.length > 5 && _arguments408[5] !== undefined ? _arguments408[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this427.id + ' allows limit orders only');
                }amount = amount.toString();
                price = price.toString();
                market = _this427.market(symbol);
                order = {
                    'side': side,
                    'type': type,
                    'currency': market['base'],
                    'amount': amount,
                    'display': amount,
                    'price': price,
                    'instrument': market['id']
                };
                return _this427.privatePostTradeAdd(_this427.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this428 = this,
                _arguments409 = arguments;

            params = _arguments409.length > 1 && _arguments409[1] !== undefined ? _arguments409[1] : {};

            return _this428.privateDeleteWalletsWalletIdOrdersId(_this428.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                timestamp,
                auth,
                message,
                _hash2,
                binhash,
                signature,
                response,
                _this429 = this,
                _arguments410 = arguments;

            api = _arguments410.length > 1 && _arguments410[1] !== undefined ? _arguments410[1] : 'public';
            method = _arguments410.length > 2 && _arguments410[2] !== undefined ? _arguments410[2] : 'GET';
            params = _arguments410.length > 3 && _arguments410[3] !== undefined ? _arguments410[3] : {};
            headers = _arguments410.length > 4 && _arguments410[4] !== undefined ? _arguments410[4] : undefined;
            body = _arguments410.length > 5 && _arguments410[5] !== undefined ? _arguments410[5] : undefined;
            url = _this429.urls['api'] + '/' + _this429.version + '/' + _this429.implodeParams(path, params);
            query = _this429.omit(params, _this429.extractParams(path));

            if (api == 'public') {
                if (Object.keys(query).length) {
                    url += '?' + _this429.urlencode(query);
                }
            } else {
                if (Object.keys(query).length) {
                    body = _this429.json(query);
                } else {
                    body = '';
                }nonce = _this429.nonce().toString();
                timestamp = nonce;
                auth = [method, url, body, nonce, timestamp];
                message = nonce + _this429.json(auth);
                _hash2 = _this429.hash(_this429.encode(message), 'sha256', 'binary');
                binhash = _this429.binaryConcat(url, _hash2);
                signature = _this429.hmac(binhash, _this429.encode(_this429.secret), 'sha512', 'base64');

                headers = {
                    'Authorization': self.apiKey + ':' + signature,
                    'Content-Type': 'application/json',
                    'X-Auth-Timestamp': timestamp,
                    'X-Auth-Nonce': nonce
                };
            }
            response = _this429.fetch(url, method, headers, body);

            if ('code' in response) {
                throw new ExchangeError(_this429.id + ' ' + _this429.json(response));
            }return response;
        }
    };

    //-----------------------------------------------------------------------------

    var jubi = {

        'id': 'jubi',
        'name': 'jubi.com',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',
            'api': 'https://www.jubi.com/api',
            'www': 'https://www.jubi.com',
            'doc': 'https://www.jubi.com/help/api.html'
        },
        'api': {
            'public': {
                'get': ['depth', 'orders', 'ticker', 'allticker']
            },
            'private': {
                'post': ['balance', 'trade_add', 'trade_cancel', 'trade_list', 'trade_view', 'wallet']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                base,
                quote,
                symbol,
                _this430 = this;

            return Promise.resolve().then(function () {
                return _this430.publicGetAllticker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    base = id.toUpperCase();
                    quote = 'CNY';
                    symbol = base + '/' + quote;

                    base = _this430.commonCurrencyCode(base);
                    quote = _this430.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': id
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                free,
                used,
                _this431 = this,
                _arguments412 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments412.length > 0 && _arguments412[0] !== undefined ? _arguments412[0] : {};
                return _this431.loadMarkets();
            }).then(function () {
                return _this431.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this431.currencies.length; c++) {
                    currency = _this431.currencies[c];
                    lowercase = currency.toLowerCase();

                    if (lowercase == 'dash') {
                        lowercase = 'drk';
                    }account = _this431.account();
                    free = lowercase + '_balance';
                    used = lowercase + '_lock';

                    if (free in balances) {
                        account['free'] = parseFloat(balances[free]);
                    }if (used in balances) {
                        account['used'] = parseFloat(balances[used]);
                    }account['total'] = _this431.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                result,
                _this432 = this,
                _arguments413 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments413.length > 1 && _arguments413[1] !== undefined ? _arguments413[1] : {};
                return _this432.loadMarkets();
            }).then(function () {
                return _this432.publicGetDepth(_this432.extend({
                    'coin': _this432.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this432.parseOrderBook(orderbook);

                result['asks'] = _this432.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this433 = this;

            return Promise.resolve().then(function () {
                return _this433.loadMarkets();
            }).then(function () {
                return _this433.publicGetAllticker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this433.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this433.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this434 = this;

            return Promise.resolve().then(function () {
                return _this434.loadMarkets();
            }).then(function () {
                market = _this434.market(symbol);
                return _this434.publicGetTicker({
                    'coin': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this434.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'id': trade['tid'],
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this435 = this,
                _arguments416 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments416.length > 1 && _arguments416[1] !== undefined ? _arguments416[1] : {};
                return _this435.loadMarkets();
            }).then(function () {
                market = _this435.market(symbol);
                return _this435.publicGetOrders(_this435.extend({
                    'coin': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this435.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this436 = this,
                _arguments417 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments417.length > 4 && _arguments417[4] !== undefined ? _arguments417[4] : undefined;
                params = _arguments417.length > 5 && _arguments417[5] !== undefined ? _arguments417[5] : {};
                return _this436.loadMarkets();
            }).then(function () {
                return _this436.privatePostTradeAdd(_this436.extend({
                    'amount': amount,
                    'price': price,
                    'type': side,
                    'coin': _this436.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this437 = this,
                _arguments418 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments418.length > 1 && _arguments418[1] !== undefined ? _arguments418[1] : {};
                return _this437.loadMarkets();
            }).then(function () {
                return _this437.privateDeleteWalletsWalletIdOrdersId(_this437.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                request,
                secret,
                response,
                _this438 = this,
                _arguments419 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments419.length > 1 && _arguments419[1] !== undefined ? _arguments419[1] : 'public';
                method = _arguments419.length > 2 && _arguments419[2] !== undefined ? _arguments419[2] : 'GET';
                params = _arguments419.length > 3 && _arguments419[3] !== undefined ? _arguments419[3] : {};
                headers = _arguments419.length > 4 && _arguments419[4] !== undefined ? _arguments419[4] : undefined;
                body = _arguments419.length > 5 && _arguments419[5] !== undefined ? _arguments419[5] : undefined;
                url = _this438.urls['api'] + '/' + _this438.version + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this438.urlencode(params);
                    }
                } else {
                    nonce = _this438.nonce().toString();
                    query = _this438.extend({
                        'key': _this438.apiKey,
                        'nonce': nonce
                    }, params);
                    request = _this438.urlencode(query);
                    secret = _this438.hash(_this438.encode(_this438.secret));

                    query['signature'] = _this438.hmac(_this438.encode(request), _this438.encode(secret));
                    body = _this438.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this438.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this438.id + ' ' + _this438.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // kraken is also owner of ex. Coinsetter / CaVirtEx / Clevercoin

    var kraken = {

        'id': 'kraken',
        'name': 'Kraken',
        'countries': 'US',
        'version': '0',
        'rateLimit': 1500,
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '4h': '240',
            '1d': '1440',
            '1w': '10080',
            '2w': '21600'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',
            'api': 'https://api.kraken.com',
            'www': 'https://www.kraken.com',
            'doc': ['https://www.kraken.com/en-us/help/api', 'https://github.com/nothingisdead/npm-kraken-api']
        },
        'api': {
            'public': {
                'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']
            },
            'private': {
                'post': ['AddOrder', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                base,
                quote,
                darkpool,
                symbol,
                _this439 = this;

            return Promise.resolve().then(function () {
                return _this439.publicGetAssetPairs();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['result'][id];
                    base = market['base'];
                    quote = market['quote'];

                    if (base[0] == 'X' || base[0] == 'Z') {
                        base = base.slice(1);
                    }if (quote[0] == 'X' || quote[0] == 'Z') {
                        quote = quote.slice(1);
                    }base = _this439.commonCurrencyCode(base);
                    quote = _this439.commonCurrencyCode(quote);
                    darkpool = id.indexOf('.d') >= 0;
                    symbol = darkpool ? market['altname'] : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'darkpool': darkpool,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                darkpool,
                market,
                response,
                orderbook,
                _this440 = this,
                _arguments421 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments421.length > 1 && _arguments421[1] !== undefined ? _arguments421[1] : {};
                return _this440.loadMarkets();
            }).then(function () {
                darkpool = symbol.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this440.id + ' does not provide an order book for darkpool symbol ' + symbol);
                }market = _this440.market(symbol);
                return _this440.publicGetDepth(_this440.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][market['id']];

                return _this440.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['h'][1]),
                'low': parseFloat(ticker['l'][1]),
                'bid': parseFloat(ticker['b'][0]),
                'ask': parseFloat(ticker['a'][0]),
                'vwap': parseFloat(ticker['p'][1]),
                'open': parseFloat(ticker['o']),
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['c'][0]),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['v'][1]),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var pairs,
                s,
                symbol,
                market,
                filter,
                response,
                tickers,
                ids,
                result,
                i,
                id,
                _market,
                _symbol,
                ticker,
                _this441 = this;

            return Promise.resolve().then(function () {
                return _this441.loadMarkets();
            }).then(function () {
                pairs = [];

                for (s = 0; s < _this441.symbols.length; s++) {
                    symbol = _this441.symbols[s];
                    market = _this441.markets[symbol];

                    if (!market['darkpool']) {
                        pairs.push(market['id']);
                    }
                }
                filter = pairs.join(',');
                return _this441.publicGetTicker({
                    'pair': filter
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result'];
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    _market = _this441.markets_by_id[id];
                    _symbol = _market['symbol'];
                    ticker = tickers[id];

                    result[_symbol] = _this441.parseTicker(ticker, _market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var darkpool,
                market,
                response,
                ticker,
                _this442 = this;

            return Promise.resolve().then(function () {
                return _this442.loadMarkets();
            }).then(function () {
                darkpool = symbol.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new ExchangeError(_this442.id + ' does not provide a ticker for darkpool symbol ' + symbol);
                }market = _this442.market(symbol);
                return _this442.publicGetTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][market['id']];

                return _this442.parseTicker(ticker, market);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, parseFloat(ohlcv[1]), parseFloat(ohlcv[2]), parseFloat(ohlcv[3]), parseFloat(ohlcv[4]), parseFloat(ohlcv[6])];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                response,
                ohlcvs,
                _this443 = this,
                _arguments424 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments424.length > 1 && _arguments424[1] !== undefined ? _arguments424[1] : '1m';
                since = _arguments424.length > 2 && _arguments424[2] !== undefined ? _arguments424[2] : undefined;
                limit = _arguments424.length > 3 && _arguments424[3] !== undefined ? _arguments424[3] : undefined;
                params = _arguments424.length > 4 && _arguments424[4] !== undefined ? _arguments424[4] : {};
                return _this443.loadMarkets();
            }).then(function () {
                market = _this443.market(symbol);
                return _this443.publicGetOHLC(_this443.extend({
                    'pair': market['id'],
                    'interval': _this443.timeframes[timeframe],
                    'since': since
                }, params));
            }).then(function (_resp) {
                response = _resp;
                ohlcvs = response['result'][market['id']];

                return _this443.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade[2] * 1000);
            var side = trade[3] == 's' ? 'sell' : 'buy';
            var type = trade[4] == 'l' ? 'limit' : 'market';
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': type,
                'side': side,
                'price': parseFloat(trade[0]),
                'amount': parseFloat(trade[1])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                id,
                response,
                trades,
                _this444 = this,
                _arguments425 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments425.length > 1 && _arguments425[1] !== undefined ? _arguments425[1] : {};
                return _this444.loadMarkets();
            }).then(function () {
                market = _this444.market(symbol);
                id = market['id'];
                return _this444.publicGetTrades(_this444.extend({
                    'pair': id
                }, params));
            }).then(function (_resp) {
                response = _resp;
                trades = response['result'][id];

                return _this444.parseTrades(trades, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                code,
                balance,
                account,
                _this445 = this,
                _arguments426 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments426.length > 0 && _arguments426[0] !== undefined ? _arguments426[0] : {};
                return _this445.loadMarkets();
            }).then(function () {
                return _this445.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = currency;
                    // X-ISO4217-A3 standard currency codes

                    if (code[0] == 'X') {
                        code = code.slice(1);
                    } else {
                        if (code[0] == 'Z') {
                            code = code.slice(1);
                        }
                    }code = _this445.commonCurrencyCode(code);
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    result[code] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                length,
                id,
                _this446 = this,
                _arguments427 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments427.length > 4 && _arguments427[4] !== undefined ? _arguments427[4] : undefined;
                params = _arguments427.length > 5 && _arguments427[5] !== undefined ? _arguments427[5] : {};
                return _this446.loadMarkets();
            }).then(function () {
                order = {
                    'pair': _this446.marketId(symbol),
                    'type': side,
                    'ordertype': type,
                    'volume': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this446.privatePostAddOrder(_this446.extend(order, params));
            }).then(function (_resp) {
                response = _resp;
                length = response['result']['txid'].length;
                id = length > 1 ? response['result']['txid'] : response['result']['txid'][0];

                return {
                    'info': response,
                    'id': id
                };
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var description = order['descr'];
            market = this.markets_by_id[description['pair']];
            var side = description['type'];
            var type = description['ordertype'];
            var symbol = market ? market['symbol'] : undefined;
            var timestamp = order['opentm'] * 1000;
            return {
                'id': order['refid'],
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'status': order['status'],
                'symbol': symbol,
                'type': type,
                'side': side,
                'price': order['price'],
                'amount': order['vol']
                // 'trades': this.parseTrades (order['trades'], market),
            };
        },
        parseOrders: function parseOrders(orders) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var result = [];
            var ids = Object.keys(orders);
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var order = this.parseOrder(orders[id]);
            }
            return result;
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                response,
                orders,
                order,
                _this447 = this,
                _arguments428 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments428.length > 1 && _arguments428[1] !== undefined ? _arguments428[1] : {};
                return _this447.loadMarkets();
            }).then(function () {
                return _this447.privatePostQueryOrders(_this447.extend({
                    'trades': true, // whether or not to include trades in output (optional, default false)
                    'txid': id // comma delimited list of transaction ids to query info about (20 maximum)
                    // 'userref': 'optional', // restrict results to given user reference id (optional)
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orders = response['result'];
                order = _this447.parseOrder(orders[id]);

                return _this447.extend({ 'info': response }, order);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this448 = this;

            return Promise.resolve().then(function () {
                return _this448.loadMarkets();
            }).then(function () {
                return _this448.privatePostCancelOrder({ 'txid': id });
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                response,
                _this449 = this,
                _arguments430 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments430.length > 3 && _arguments430[3] !== undefined ? _arguments430[3] : {};

                if ('key' in params) {
                    return Promise.resolve().then(function () {
                        return _this449.loadMarkets();
                    }).then(function () {
                        return _this449.privatePostWithdraw(_this449.extend({
                            'asset': currency,
                            'amount': amount
                            // 'address': address, // they don't allow withdrawals to direct addresses
                        }, params));
                    }).then(function (_resp) {
                        response = _resp;

                        return {
                            'info': response,
                            'id': response['result']
                        };
                    });
                } else {
                    throw new ExchangeError(_this449.id + " withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)");
                }
            }).then(function () {});
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                _hash3,
                binary,
                binhash,
                secret,
                signature,
                response,
                numErrors,
                _this452 = this,
                _arguments433 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments433.length > 1 && _arguments433[1] !== undefined ? _arguments433[1] : 'public';
                method = _arguments433.length > 2 && _arguments433[2] !== undefined ? _arguments433[2] : 'GET';
                params = _arguments433.length > 3 && _arguments433[3] !== undefined ? _arguments433[3] : {};
                headers = _arguments433.length > 4 && _arguments433[4] !== undefined ? _arguments433[4] : undefined;
                body = _arguments433.length > 5 && _arguments433[5] !== undefined ? _arguments433[5] : undefined;
                url = '/' + _this452.version + '/' + api + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this452.urlencode(params);
                    }
                } else {
                    nonce = _this452.nonce().toString();

                    body = _this452.urlencode(_this452.extend({ 'nonce': nonce }, params));
                    auth = _this452.encode(nonce + body);
                    _hash3 = _this452.hash(auth, 'sha256', 'binary');
                    binary = _this452.stringToBinary(_this452.encode(url));
                    binhash = _this452.binaryConcat(binary, _hash3);
                    secret = _this452.base64ToBinary(_this452.secret);
                    signature = _this452.hmac(binhash, secret, 'sha512', 'base64');

                    headers = {
                        'API-Key': _this452.apiKey,
                        'API-Sign': _this452.decode(signature),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                url = _this452.urls['api'] + url;
                return _this452.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    numErrors = response['error'].length;

                    if (numErrors) {
                        throw new ExchangeError(_this452.id + ' ' + _this452.json(response));
                    }
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var lakebtc = {

        'id': 'lakebtc',
        'name': 'LakeBTC',
        'countries': 'US',
        'version': 'api_v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',
            'api': 'https://api.lakebtc.com',
            'www': 'https://www.lakebtc.com',
            'doc': ['https://www.lakebtc.com/s/api_v2', 'https://www.lakebtc.com/s/api']
        },
        'api': {
            'public': {
                'get': ['bcorderbook', 'bctrades', 'ticker']
            },
            'private': {
                'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                keys,
                k,
                id,
                market,
                base,
                quote,
                symbol,
                _this453 = this;

            return Promise.resolve().then(function () {
                return _this453.publicGetTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];
                keys = Object.keys(markets);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    market = markets[id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this454 = this,
                _arguments435 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments435.length > 0 && _arguments435[0] !== undefined ? _arguments435[0] : {};
                return _this454.loadMarkets();
            }).then(function () {
                return _this454.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this455 = this,
                _arguments436 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments436.length > 1 && _arguments436[1] !== undefined ? _arguments436[1] : {};
                return _this455.loadMarkets();
            }).then(function () {
                return _this455.publicGetBcorderbook(_this455.extend({
                    'symbol': _this455.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this455.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                timestamp,
                volume,
                _this456 = this;

            return Promise.resolve().then(function () {
                return _this456.loadMarkets();
            }).then(function () {
                market = _this456.market(symbol);
                return _this456.publicGetTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];
                timestamp = _this456.milliseconds();
                volume = undefined;

                if ('volume' in ticker) {
                    if (ticker['volume']) {
                        volume = parseFloat(ticker['volume']);
                    }
                }return {
                    'timestamp': timestamp,
                    'datetime': _this456.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this457 = this,
                _arguments438 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments438.length > 1 && _arguments438[1] !== undefined ? _arguments438[1] : {};
                return _this457.loadMarkets();
            }).then(function () {
                market = _this457.market(symbol);
                return _this457.publicGetBctrades(_this457.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this457.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                marketId,
                order,
                response,
                _this458 = this,
                _arguments439 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments439.length > 4 && _arguments439[4] !== undefined ? _arguments439[4] : undefined;
                params = _arguments439.length > 5 && _arguments439[5] !== undefined ? _arguments439[5] : {};
                return _this458.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this458.id + ' allows limit orders only');
                }method = 'privatePost' + _this458.capitalize(side) + 'Order';
                marketId = _this458.marketId(market);
                order = {
                    'params': [price, amount, marketId]
                };
                return _this458[method](_this458.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this459 = this;

            return Promise.resolve().then(function () {
                return _this459.loadMarkets();
            }).then(function () {
                return _this459.privatePostCancelOrder({ 'params': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                signature,
                response,
                _this460 = this,
                _arguments441 = arguments;

            api = _arguments441.length > 1 && _arguments441[1] !== undefined ? _arguments441[1] : 'public';
            method = _arguments441.length > 2 && _arguments441[2] !== undefined ? _arguments441[2] : 'GET';
            params = _arguments441.length > 3 && _arguments441[3] !== undefined ? _arguments441[3] : {};
            headers = _arguments441.length > 4 && _arguments441[4] !== undefined ? _arguments441[4] : undefined;
            body = _arguments441.length > 5 && _arguments441[5] !== undefined ? _arguments441[5] : undefined;
            url = _this460.urls['api'] + '/' + _this460.version;

            if (api == 'public') {
                url += '/' + path;
                if (Object.keys(params).length) {
                    url += '?' + _this460.urlencode(params);
                }
            } else {
                nonce = _this460.nonce();

                if (Object.keys(params).length) {
                    params = params.join(',');
                } else {
                    params = '';
                }query = _this460.urlencode({
                    'tonce': nonce,
                    'accesskey': _this460.apiKey,
                    'requestmethod': method.toLowerCase(),
                    'id': nonce,
                    'method': path,
                    'params': params
                });

                body = _this460.json({
                    'method': path,
                    'params': params,
                    'id': nonce
                });
                signature = _this460.hmac(_this460.encode(query), _this460.secret, 'sha1', 'base64');

                headers = {
                    'Json-Rpc-Tonce': nonce,
                    'Authorization': "Basic " + _this460.apiKey + ':' + signature,
                    'Content-Length': body.length,
                    'Content-Type': 'application/json'
                };
            }
            response = _this460.fetch(url, method, headers, body);

            if ('error' in response) {
                throw new ExchangeError(_this460.id + ' ' + _this460.json(response));
            }return response;
        }
    };

    //-----------------------------------------------------------------------------

    var livecoin = {

        'id': 'livecoin',
        'name': 'LiveCoin',
        'countries': ['US', 'UK', 'RU'],
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',
            'api': 'https://api.livecoin.net',
            'www': 'https://www.livecoin.net',
            'doc': 'https://www.livecoin.net/api?lang=en'
        },
        'api': {
            'public': {
                'get': ['exchange/all/order_book', 'exchange/last_trades', 'exchange/maxbid_minask', 'exchange/order_book', 'exchange/restrictions', 'exchange/ticker', // omit params to get all tickers at once
                'info/coinInfo']
            },
            'private': {
                'get': ['exchange/client_orders', 'exchange/order', 'exchange/trades', 'exchange/commission', 'exchange/commissionCommonInfo', 'payment/balances', 'payment/balance', 'payment/get/address', 'payment/history/size', 'payment/history/transactions'],
                'post': ['exchange/buylimit', 'exchange/buymarket', 'exchange/cancellimit', 'exchange/selllimit', 'exchange/sellmarket', 'payment/out/capitalist', 'payment/out/card', 'payment/out/coin', 'payment/out/okpay', 'payment/out/payeer', 'payment/out/perfectmoney', 'payment/voucher/amount', 'payment/voucher/make', 'payment/voucher/redeem']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split11,
                _symbol$split12,
                base,
                quote,
                _this461 = this;

            return Promise.resolve().then(function () {
                return _this461.publicGetExchangeTicker();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['symbol'];
                    symbol = id;
                    _symbol$split11 = symbol.split('/');
                    _symbol$split12 = _slicedToArray(_symbol$split11, 2);
                    base = _symbol$split12[0];
                    quote = _symbol$split12[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this462 = this,
                _arguments443 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments443.length > 0 && _arguments443[0] !== undefined ? _arguments443[0] : {};
                return _this462.loadMarkets();
            }).then(function () {
                return _this462.privateGetPaymentBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < _this462.currencies.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = undefined;

                    if (currency in result) {
                        account = result[currency];
                    } else {
                        account = _this462.account();
                    }if (balance['type'] == 'total') {
                        account['total'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'available') {
                        account['free'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'trade') {
                        account['used'] = parseFloat(balance['value']);
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this463 = this,
                _arguments444 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments444.length > 1 && _arguments444[1] !== undefined ? _arguments444[1] : {};
                return _this463.loadMarkets();
            }).then(function () {
                return _this463.publicGetExchangeOrderBook(_this463.extend({
                    'currencyPair': _this463.marketId(symbol),
                    'groupByPrice': 'false',
                    'depth': 100
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];

                return _this463.parseOrderBook(orderbook, timestamp);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['best_bid']),
                'ask': parseFloat(ticker['best_ask']),
                'vwap': parseFloat(ticker['vwap']),
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this464 = this;

            return Promise.resolve().then(function () {
                return _this464.loadMarkets();
            }).then(function () {
                return _this464.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this464.indexBy(response, 'symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this464.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this464.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this465 = this;

            return Promise.resolve().then(function () {
                return _this465.loadMarkets();
            }).then(function () {
                market = _this465.market(symbol);
                return _this465.publicGetExchangeTicker({
                    'currencyPair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this465.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['time'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['id'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['type'].toLowerCase(),
                'price': trade['price'],
                'amount': trade['quantity']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this466 = this,
                _arguments447 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments447.length > 1 && _arguments447[1] !== undefined ? _arguments447[1] : {};
                return _this466.loadMarkets();
            }).then(function () {
                market = _this466.market(symbol);
                return _this466.publicGetExchangeLastTrades(_this466.extend({
                    'currencyPair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this466.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this467 = this,
                _arguments448 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments448.length > 4 && _arguments448[4] !== undefined ? _arguments448[4] : undefined;
                params = _arguments448.length > 5 && _arguments448[5] !== undefined ? _arguments448[5] : {};
                return _this467.loadMarkets();
            }).then(function () {
                method = 'privatePostExchange' + _this467.capitalize(side) + type;
                order = {
                    'currencyPair': _this467.marketId(symbol),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this467[method](_this467.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this468 = this,
                _arguments449 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments449.length > 1 && _arguments449[1] !== undefined ? _arguments449[1] : {};
                return _this468.loadMarkets();
            }).then(function () {
                return _this468.privatePostExchangeCancellimit(_this468.extend({
                    'orderId': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                signature,
                response,
                _this469 = this,
                _arguments450 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments450.length > 1 && _arguments450[1] !== undefined ? _arguments450[1] : 'public';
                method = _arguments450.length > 2 && _arguments450[2] !== undefined ? _arguments450[2] : 'GET';
                params = _arguments450.length > 3 && _arguments450[3] !== undefined ? _arguments450[3] : {};
                headers = _arguments450.length > 4 && _arguments450[4] !== undefined ? _arguments450[4] : undefined;
                body = _arguments450.length > 5 && _arguments450[5] !== undefined ? _arguments450[5] : undefined;
                url = _this469.urls['api'] + '/' + path;

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this469.urlencode(params);
                    }
                } else {
                    query = _this469.urlencode(_this469.keysort(params));

                    if (method == 'GET') {
                        if (query) {
                            url += '?' + query;
                        } else {
                            if (query) {
                                body = query;
                            }
                        }
                    }signature = _this469.hmac(_this469.encode(query), _this469.encode(_this469.secret), 'sha256');

                    headers = {
                        'Api-Key': _this469.apiKey,
                        'Sign': signature.toUpperCase(),
                        'Content-Type': 'application/x-www-form-urlencoded'
                    };
                }
                return _this469.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this469.id + ' ' + _this469.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var liqui = extend(btce, {
        'id': 'liqui',
        'name': 'Liqui',
        'countries': 'UA',
        'rateLimit': 1000,
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',
            'api': {
                'public': 'https://api.liqui.io/api',
                'private': 'https://api.liqui.io/tapi'
            },
            'www': 'https://liqui.io',
            'doc': 'https://liqui.io/api'
        },

        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                signature,
                response,
                _this470 = this,
                _arguments451 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments451.length > 1 && _arguments451[1] !== undefined ? _arguments451[1] : 'public';
                method = _arguments451.length > 2 && _arguments451[2] !== undefined ? _arguments451[2] : 'GET';
                params = _arguments451.length > 3 && _arguments451[3] !== undefined ? _arguments451[3] : {};
                headers = _arguments451.length > 4 && _arguments451[4] !== undefined ? _arguments451[4] : undefined;
                body = _arguments451.length > 5 && _arguments451[5] !== undefined ? _arguments451[5] : undefined;
                url = _this470.urls['api'][api];
                query = _this470.omit(params, _this470.extractParams(path));

                if (api == 'public') {
                    url += '/' + _this470.version + '/' + _this470.implodeParams(path, params);
                    if (Object.keys(query).length) {
                        url += '?' + _this470.urlencode(query);
                    }
                } else {
                    nonce = _this470.nonce();

                    body = _this470.urlencode(_this470.extend({
                        'nonce': nonce,
                        'method': path
                    }, query));
                    signature = _this470.hmac(_this470.encode(body), _this470.encode(_this470.secret), 'sha512');

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length.toString(),
                        'Key': _this470.apiKey,
                        'Sign': signature
                    };
                }
                return _this470.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this470.id + ' ' + _this470.json(response));
                    }
                }return response;
            });
        }
    });

    //-----------------------------------------------------------------------------

    var luno = {

        'id': 'luno',
        'name': 'luno',
        'countries': ['GB', 'SG', 'ZA'],
        'rateLimit': 3000,
        'version': '1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
            'api': 'https://api.mybitx.com/api',
            'www': 'https://www.luno.com',
            'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']
        },
        'api': {
            'public': {
                'get': ['orderbook', 'ticker', 'tickers', 'trades']
            },
            'private': {
                'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}'],
                'post': ['accounts', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],
                'put': ['quotes/{id}'],
                'delete': ['quotes/{id}', 'withdrawals/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this471 = this;

            return Promise.resolve().then(function () {
                return _this471.publicGetTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['pair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = _this471.commonCurrencyCode(base);
                    quote = _this471.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                reserved,
                unconfirmed,
                account,
                _this472 = this,
                _arguments453 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments453.length > 0 && _arguments453[0] !== undefined ? _arguments453[0] : {};
                return _this472.loadMarkets();
            }).then(function () {
                return _this472.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = _this472.commonCurrencyCode(balance['asset']);
                    reserved = parseFloat(balance['reserved']);
                    unconfirmed = parseFloat(balance['unconfirmed']);
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': _this472.sum(reserved, unconfirmed),
                        'total': 0.0
                    };

                    account['total'] = _this472.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this473 = this,
                _arguments454 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments454.length > 1 && _arguments454[1] !== undefined ? _arguments454[1] : {};
                return _this473.loadMarkets();
            }).then(function () {
                return _this473.publicGetOrderbook(_this473.extend({
                    'pair': _this473.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];

                return _this473.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['rolling_24_hour_volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this474 = this;

            return Promise.resolve().then(function () {
                return _this474.loadMarkets();
            }).then(function () {
                return _this474.publicGetTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this474.indexBy(response['tickers'], 'pair');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this474.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this474.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this475 = this;

            return Promise.resolve().then(function () {
                return _this475.loadMarkets();
            }).then(function () {
                market = _this475.market(symbol);
                return _this475.publicGetTicker({
                    'pair': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this475.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var side = trade['is_buy'] ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': undefined,
                'order': undefined,
                'timestamp': trade['timestamp'],
                'datetime': this.iso8601(trade['timestamp']),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['volume'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this476 = this,
                _arguments457 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments457.length > 1 && _arguments457[1] !== undefined ? _arguments457[1] : {};
                return _this476.loadMarkets();
            }).then(function () {
                market = _this476.market(symbol);
                return _this476.publicGetTrades(_this476.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this476.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this477 = this,
                _arguments458 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments458.length > 4 && _arguments458[4] !== undefined ? _arguments458[4] : undefined;
                params = _arguments458.length > 5 && _arguments458[5] !== undefined ? _arguments458[5] : {};
                return _this477.loadMarkets();
            }).then(function () {
                method = 'privatePost';
                order = { 'pair': _this477.marketId(market) };

                if (type == 'market') {
                    method += 'Marketorder';
                    order['type'] = side.toUpperCase();
                    if (side == 'buy') {
                        order['counter_volume'] = amount;
                    } else {
                        order['base_volume'] = amount;
                    }
                } else {
                    method += 'Order';
                    order['volume'] = amount;
                    order['price'] = price;
                    if (side == 'buy') {
                        order['type'] = 'BID';
                    } else {
                        order['type'] = 'ASK';
                    }
                }
                return _this477[method](_this477.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this478 = this;

            return Promise.resolve().then(function () {
                return _this478.loadMarkets();
            }).then(function () {
                return _this478.privatePostStoporder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                auth,
                response,
                _this479 = this,
                _arguments460 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments460.length > 1 && _arguments460[1] !== undefined ? _arguments460[1] : 'public';
                method = _arguments460.length > 2 && _arguments460[2] !== undefined ? _arguments460[2] : 'GET';
                params = _arguments460.length > 3 && _arguments460[3] !== undefined ? _arguments460[3] : {};
                headers = _arguments460.length > 4 && _arguments460[4] !== undefined ? _arguments460[4] : undefined;
                body = _arguments460.length > 5 && _arguments460[5] !== undefined ? _arguments460[5] : undefined;
                url = _this479.urls['api'] + '/' + _this479.version + '/' + _this479.implodeParams(path, params);
                query = _this479.omit(params, _this479.extractParams(path));

                if (Object.keys(query).length) {
                    url += '?' + _this479.urlencode(query);
                }if (api == 'private') {
                    auth = _this479.encode(_this479.apiKey + ':' + _this479.secret);

                    auth = _this479.stringToBase64(auth);
                    headers = { 'Authorization': 'Basic ' + _this479.decode(auth) };
                }
                return _this479.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this479.id + ' ' + _this479.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var mercado = {

        'id': 'mercado',
        'name': 'Mercado Bitcoin',
        'countries': 'BR', // Brazil
        'rateLimit': 1000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
            'api': {
                'public': 'https://www.mercadobitcoin.net/api',
                'private': 'https://www.mercadobitcoin.net/tapi'
            },
            'www': 'https://www.mercadobitcoin.com.br',
            'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']
        },
        'api': {
            'public': {
                'get': [// last slash critical
                'orderbook/', 'orderbook_litecoin/', 'ticker/', 'ticker_litecoin/', 'trades/', 'trades_litecoin/', 'v2/ticker/', 'v2/ticker_litecoin/']
            },
            'private': {
                'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'withdraw_coin']
            }
        },
        'markets': {
            'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': '' },
            'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' }
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                method,
                orderbook,
                _this480 = this,
                _arguments461 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments461.length > 1 && _arguments461[1] !== undefined ? _arguments461[1] : {};
                market = _this480.market(symbol);
                method = 'publicGetOrderbook' + _this480.capitalize(market['suffix']);
                return _this480[method](params);
            }).then(function (_resp) {
                orderbook = _resp;

                return _this480.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                method,
                response,
                ticker,
                timestamp,
                _this481 = this;

            return Promise.resolve().then(function () {
                market = _this481.market(symbol);
                method = 'publicGetV2Ticker' + _this481.capitalize(market['suffix']);
                return _this481[method]();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(ticker['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this481.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['date'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                method,
                response,
                _this482 = this,
                _arguments463 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments463.length > 1 && _arguments463[1] !== undefined ? _arguments463[1] : {};
                market = _this482.market(symbol);
                method = 'publicGetTrades' + _this482.capitalize(market['suffix']);
                return _this482[method](params);
            }).then(function (_resp) {
                response = _resp;

                return _this482.parseTrades(response, market);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this483 = this,
                _arguments464 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments464.length > 0 && _arguments464[0] !== undefined ? _arguments464[0] : {};
                return _this483.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (c = 0; c < _this483.currencies.length; c++) {
                    currency = _this483.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this483.account();

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]['available']);
                        account['total'] = parseFloat(balances[lowercase]['total']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this484 = this,
                _arguments465 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments465.length > 4 && _arguments465[4] !== undefined ? _arguments465[4] : undefined;
                params = _arguments465.length > 5 && _arguments465[5] !== undefined ? _arguments465[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this484.id + ' allows limit orders only');
                }method = 'privatePostPlace' + _this484.capitalize(side) + 'Order';
                order = {
                    'coin_pair': _this484.marketId(symbol),
                    'quantity': amount,
                    'limit_price': price
                };
                return _this484[method](_this484.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['response_data']['order']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this485 = this,
                _arguments466 = arguments;

            params = _arguments466.length > 1 && _arguments466[1] !== undefined ? _arguments466[1] : {};

            return _this485.privatePostCancelOrder(_this485.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                response,
                _this486 = this,
                _arguments467 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments467.length > 1 && _arguments467[1] !== undefined ? _arguments467[1] : 'public';
                method = _arguments467.length > 2 && _arguments467[2] !== undefined ? _arguments467[2] : 'GET';
                params = _arguments467.length > 3 && _arguments467[3] !== undefined ? _arguments467[3] : {};
                headers = _arguments467.length > 4 && _arguments467[4] !== undefined ? _arguments467[4] : undefined;
                body = _arguments467.length > 5 && _arguments467[5] !== undefined ? _arguments467[5] : undefined;
                url = _this486.urls['api'][api] + '/';

                if (api == 'public') {
                    url += path;
                } else {
                    url += _this486.version + '/';
                    nonce = _this486.nonce();

                    body = _this486.urlencode(_this486.extend({
                        'tapi_method': path,
                        'tapi_nonce': nonce
                    }, params));
                    auth = '/tapi/' + _this486.version + '/' + '?' + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'TAPI-ID': _this486.apiKey,
                        'TAPI-MAC': _this486.hmac(_this486.encode(auth), _this486.secret, 'sha512')
                    };
                }
                return _this486.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error_message' in response) {
                    throw new ExchangeError(_this486.id + ' ' + _this486.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------
    // OKCoin
    // China
    // https://www.okcoin.com/
    // https://www.okcoin.com/rest_getStarted.html
    // https://github.com/OKCoin/websocket
    // https://www.npmjs.com/package/okcoin.com
    // https://www.okcoin.cn
    // https://www.okcoin.cn/rest_getStarted.html

    var okcoin = {

        'version': 'v1',
        'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1min',
            '3m': '3min',
            '5m': '5min',
            '15m': '15min',
            '30m': '30min',
            '1h': '1hour',
            '2h': '2hour',
            '4h': '4hour',
            '6h': '6hour',
            '12h': '12hour',
            '1d': '1day',
            '3d': '3day',
            '1w': '1week'
        },
        'api': {
            'public': {
                'get': ['depth', 'exchange_rate', 'future_depth', 'future_estimated_price', 'future_hold_amount', 'future_index', 'future_kline', 'future_price_limit', 'future_ticker', 'future_trades', 'kline', 'otcs', 'ticker', 'trades']
            },
            'private': {
                'post': ['account_records', 'batch_trade', 'borrow_money', 'borrow_order_info', 'borrows_info', 'cancel_borrow', 'cancel_order', 'cancel_otc_order', 'cancel_withdraw', 'future_batch_trade', 'future_cancel', 'future_devolve', 'future_explosive', 'future_order_info', 'future_orders_info', 'future_position', 'future_position_4fix', 'future_trade', 'future_trades_history', 'future_userinfo', 'future_userinfo_4fix', 'lend_depth', 'order_fee', 'order_history', 'order_info', 'orders_info', 'otc_order_history', 'otc_order_info', 'repayment', 'submit_otc_order', 'trade', 'trade_history', 'trade_otc_order', 'withdraw', 'withdraw_info', 'unrepayments_info', 'userinfo']
            }
        },

        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                timestamp,
                _this487 = this,
                _arguments468 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments468.length > 1 && _arguments468[1] !== undefined ? _arguments468[1] : {};
                return _this487.publicGetDepth(_this487.extend({
                    'symbol': _this487.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this487.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': _this487.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this487.iso8601(timestamp)
                };
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['timestamp'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['vol']),
                'info': ticker
            };
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                timestamp,
                ticker,
                _this488 = this;

            return Promise.resolve().then(function () {
                market = _this488.market(symbol);
                return _this488.publicGetTicker({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                response = _resp;
                timestamp = parseInt(response['date']) * 1000;
                ticker = _this488.extend(response['ticker'], { 'timestamp': timestamp });

                return _this488.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var symbol = undefined;
            if (market) symbol = market['symbol'];
            return {
                'info': trade,
                'timestamp': trade['date_ms'],
                'datetime': this.iso8601(trade['date_ms']),
                'symbol': symbol,
                'id': trade['tid'],
                'order': undefined,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this489 = this,
                _arguments470 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments470.length > 1 && _arguments470[1] !== undefined ? _arguments470[1] : {};
                market = _this489.market(symbol);
                return _this489.publicGetTrades(_this489.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this489.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this490 = this,
                _arguments471 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments471.length > 1 && _arguments471[1] !== undefined ? _arguments471[1] : '1m';
                since = _arguments471.length > 2 && _arguments471[2] !== undefined ? _arguments471[2] : undefined;
                limit = _arguments471.length > 3 && _arguments471[3] !== undefined ? _arguments471[3] : 1440;
                params = _arguments471.length > 4 && _arguments471[4] !== undefined ? _arguments471[4] : {};
                market = _this490.market(symbol);
                request = {
                    'symbol': market['id'],
                    'type': _this490.timeframes[timeframe]
                };

                if (limit) {
                    request['size'] = parseInt(limit);
                }if (since) {
                    request['since'] = since;
                } else {
                    request['since'] = _this490.milliseconds() - 86400000; // last 24 hours
                }
                return _this490.publicGetKline(_this490.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this490.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this491 = this,
                _arguments472 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments472.length > 0 && _arguments472[0] !== undefined ? _arguments472[0] : {};
                return _this491.privatePostUserinfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['info']['funds'];
                result = { 'info': response };

                for (c = 0; c < _this491.currencies.length; c++) {
                    currency = _this491.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this491.account();

                    if (lowercase in balances['free']) {
                        account['free'] = parseFloat(balances['free'][lowercase]);
                    }if (lowercase in balances['freezed']) {
                        account['used'] = parseFloat(balances['freezed'][lowercase]);
                    }account['total'] = _this491.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this492 = this,
                _arguments473 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments473.length > 4 && _arguments473[4] !== undefined ? _arguments473[4] : undefined;
                params = _arguments473.length > 5 && _arguments473[5] !== undefined ? _arguments473[5] : {};
                order = {
                    'symbol': _this492.marketId(market),
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                    order['amount'] = amount;
                } else {
                    if (side == 'buy') {
                        order['price'] = params;
                    } else {
                        order['amount'] = amount;
                    }
                    order['type'] += '_market';
                }
                return _this492.privatePostTrade(_this492.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this493 = this,
                _arguments474 = arguments;

            params = _arguments474.length > 1 && _arguments474[1] !== undefined ? _arguments474[1] : {};

            return _this493.privatePostCancelOrder(_this493.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                queryString,
                response,
                _this494 = this,
                _arguments475 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments475.length > 1 && _arguments475[1] !== undefined ? _arguments475[1] : 'public';
                method = _arguments475.length > 2 && _arguments475[2] !== undefined ? _arguments475[2] : 'GET';
                params = _arguments475.length > 3 && _arguments475[3] !== undefined ? _arguments475[3] : {};
                headers = _arguments475.length > 4 && _arguments475[4] !== undefined ? _arguments475[4] : undefined;
                body = _arguments475.length > 5 && _arguments475[5] !== undefined ? _arguments475[5] : undefined;
                url = '/' + 'api' + '/' + _this494.version + '/' + path + '.do';

                if (api == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this494.urlencode(params);
                    }
                } else {
                    query = _this494.keysort(_this494.extend({
                        'api_key': _this494.apiKey
                    }, params));
                    // secret key must be at the end of query

                    queryString = _this494.urlencode(query) + '&secret_key=' + _this494.secret;

                    query['sign'] = _this494.hash(_this494.encode(queryString)).toUpperCase();
                    body = _this494.urlencode(query);
                    headers = { 'Content-Type': 'application/x-www-form-urlencoded' };
                }
                url = _this494.urls['api'] + url;
                return _this494.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('result' in response) {
                    if (!response['result']) {
                        throw new ExchangeError(_this494.id + ' ' + _this494.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var okcoincny = extend(okcoin, {
        'id': 'okcoincny',
        'name': 'OKCoin CNY',
        'countries': 'CN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',
            'api': 'https://www.okcoin.cn',
            'www': 'https://www.okcoin.cn',
            'doc': 'https://www.okcoin.cn/rest_getStarted.html'
        },
        'markets': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' }
        }
    });

    //-----------------------------------------------------------------------------

    var okcoinusd = extend(okcoin, {
        'id': 'okcoinusd',
        'name': 'OKCoin USD',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
            'api': 'https://www.okcoin.com',
            'www': 'https://www.okcoin.com',
            'doc': ['https://www.okcoin.com/rest_getStarted.html', 'https://www.npmjs.com/package/okcoin.com']
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETC/USD': { 'id': 'etc_usd', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' }
        }
    });

    //-----------------------------------------------------------------------------

    var okex = extend(okcoin, {
        'id': 'okex',
        'name': 'OKEX',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/29562593-9038a9bc-8742-11e7-91cc-8201f845bfc1.jpg',
            'api': 'https://www.okex.com',
            'www': 'https://www.okex.com',
            'doc': 'https://www.okex.com/rest_getStarted.html'
        },
        'markets': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' }
            // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            // 'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },
        },

        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this495 = this,
                _arguments476 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments476.length > 1 && _arguments476[1] !== undefined ? _arguments476[1] : {};
                return _this495.publicGetFutureDepth(_this495.extend({
                    'symbol': _this495.marketId(symbol),
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this495.milliseconds();

                return {
                    'bids': orderbook['bids'],
                    'asks': _this495.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this495.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var params,
                market,
                response,
                timestamp,
                ticker,
                _this496 = this,
                _arguments477 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments477.length > 1 && _arguments477[1] !== undefined ? _arguments477[1] : {};
                market = _this496.market(symbol);
                return _this496.publicGetFutureTicker(_this496.extend({
                    'symbol': market['id'],
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = parseInt(response['date']) * 1000;
                ticker = _this496.extend(response['ticker'], { 'timestamp': timestamp });

                return _this496.parseTicker(ticker, market);
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this497 = this,
                _arguments478 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments478.length > 1 && _arguments478[1] !== undefined ? _arguments478[1] : {};
                market = _this497.market(symbol);
                return _this497.publicGetFutureTrades(_this497.extend({
                    'symbol': market['id'],
                    'contract_type': 'this_week' // next_week, quarter
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this497.parseTrades(response, market);
            });
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this498 = this,
                _arguments479 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments479.length > 1 && _arguments479[1] !== undefined ? _arguments479[1] : '1m';
                since = _arguments479.length > 2 && _arguments479[2] !== undefined ? _arguments479[2] : undefined;
                limit = _arguments479.length > 3 && _arguments479[3] !== undefined ? _arguments479[3] : undefined;
                params = _arguments479.length > 4 && _arguments479[4] !== undefined ? _arguments479[4] : {};
                market = _this498.market(symbol);
                request = {
                    'symbol': market['id'],
                    'contract_type': 'this_week', // next_week, quarter
                    'type': _this498.timeframes[timeframe],
                    'since': since
                };

                if (limit) {
                    request['size'] = parseInt(limit);
                }if (since) {
                    request['since'] = since;
                } else {
                    request['since'] = _this498.milliseconds() - 86400000; // last 24 hours
                }
                return _this498.publicGetFutureKline(_this498.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this498.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                response,
                _this499 = this,
                _arguments480 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments480.length > 4 && _arguments480[4] !== undefined ? _arguments480[4] : undefined;
                params = _arguments480.length > 5 && _arguments480[5] !== undefined ? _arguments480[5] : {};
                orderType = side == 'buy' ? '1' : '2';
                order = {
                    'symbol': _this499.marketId(symbol),
                    'type': orderType,
                    'contract_type': 'this_week', // next_week, quarter
                    'match_price': 0, // match best counter party price? 0 or 1, ignores price if 1
                    'lever_rate': 10, // leverage rate value: 10 or 20 (10 by default)
                    'price': price,
                    'amount': amount
                };
                return _this499.privatePostFutureTrade(_this499.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this500 = this,
                _arguments481 = arguments;

            params = _arguments481.length > 1 && _arguments481[1] !== undefined ? _arguments481[1] : {};

            return _this500.privatePostFutureCancel(_this500.extend({
                'order_id': id
            }, params));
        }
    });

    //-----------------------------------------------------------------------------

    var paymium = {

        'id': 'paymium',
        'name': 'Paymium',
        'countries': ['FR', 'EU'],
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
            'api': 'https://paymium.com/api',
            'www': 'https://www.paymium.com',
            'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers']
        },
        'api': {
            'public': {
                'get': ['countries', 'data/{id}/ticker', 'data/{id}/trades', 'data/{id}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']
            },
            'private': {
                'get': ['merchant/get_payment/{UUID}', 'user', 'user/addresses', 'user/addresses/{btc_address}', 'user/orders', 'user/orders/{UUID}', 'user/price_alerts'],
                'post': ['user/orders', 'user/addresses', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],
                'delete': ['user/orders/{UUID}/cancel', 'user/price_alerts/{id}']
            }
        },
        'markets': {
            'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                balance,
                locked,
                _this501 = this,
                _arguments482 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments482.length > 0 && _arguments482[0] !== undefined ? _arguments482[0] : {};
                return _this501.privateGetUser();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this501.currencies.length; c++) {
                    currency = _this501.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this501.account();
                    balance = 'balance_' + lowercase;
                    locked = 'locked_' + lowercase;

                    if (balance in balances) {
                        account['free'] = balances[balance];
                    }if (locked in balances) {
                        account['used'] = balances[locked];
                    }account['total'] = _this501.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                result,
                _this502 = this,
                _arguments483 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments483.length > 1 && _arguments483[1] !== undefined ? _arguments483[1] : {};
                return _this502.publicGetDataIdDepth(_this502.extend({
                    'id': _this502.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                result = _this502.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'price', 'amount');

                result['bids'] = _this502.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this503 = this;

            return Promise.resolve().then(function () {
                return _this503.publicGetDataIdTicker({
                    'id': _this503.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['at'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this503.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['price']),
                    'change': undefined,
                    'percentage': parseFloat(ticker['variation']),
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['created_at_int']) * 1000;
            var volume = 'traded_' + market['base'].toLowerCase();
            return {
                'info': trade,
                'id': trade['uuid'],
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade[volume]
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this504 = this,
                _arguments485 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments485.length > 1 && _arguments485[1] !== undefined ? _arguments485[1] : {};
                market = _this504.market(symbol);
                return _this504.publicGetDataIdTrades(_this504.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this504.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this505 = this,
                _arguments486 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments486.length > 4 && _arguments486[4] !== undefined ? _arguments486[4] : undefined;
                params = _arguments486.length > 5 && _arguments486[5] !== undefined ? _arguments486[5] : {};
                order = {
                    'type': _this505.capitalize(type) + 'Order',
                    'currency': _this505.marketId(market),
                    'direction': side,
                    'amount': amount
                };

                if (type == 'market') {
                    order['price'] = price;
                }return _this505.privatePostUserOrders(_this505.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['uuid']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this506 = this,
                _arguments487 = arguments;

            params = _arguments487.length > 1 && _arguments487[1] !== undefined ? _arguments487[1] : {};

            return _this506.privatePostCancelOrder(_this506.extend({
                'orderNumber': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this507 = this,
                _arguments488 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments488.length > 1 && _arguments488[1] !== undefined ? _arguments488[1] : 'public';
                method = _arguments488.length > 2 && _arguments488[2] !== undefined ? _arguments488[2] : 'GET';
                params = _arguments488.length > 3 && _arguments488[3] !== undefined ? _arguments488[3] : {};
                headers = _arguments488.length > 4 && _arguments488[4] !== undefined ? _arguments488[4] : undefined;
                body = _arguments488.length > 5 && _arguments488[5] !== undefined ? _arguments488[5] : undefined;
                url = _this507.urls['api'] + '/' + _this507.version + '/' + _this507.implodeParams(path, params);
                query = _this507.omit(params, _this507.extractParams(path));

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this507.urlencode(query);
                    }
                } else {
                    body = _this507.json(params);
                    nonce = _this507.nonce().toString();
                    auth = nonce + url + body;

                    headers = {
                        'Api-Key': _this507.apiKey,
                        'Api-Signature': _this507.hmac(_this507.encode(auth), _this507.secret),
                        'Api-Nonce': nonce,
                        'Content-Type': 'application/json'
                    };
                }
                return _this507.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this507.id + ' ' + _this507.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var poloniex = {

        'id': 'poloniex',
        'name': 'Poloniex',
        'countries': 'US',
        'rateLimit': 500, // 6 calls per second
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
            'api': {
                'public': 'https://poloniex.com/public',
                'private': 'https://poloniex.com/tradingApi'
            },
            'www': 'https://poloniex.com',
            'doc': ['https://poloniex.com/support/api/', 'http://pastebin.com/dMX7mZE0']
        },
        'api': {
            'public': {
                'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']
            },
            'private': {
                'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                _id$split7,
                _id$split8,
                quote,
                base,
                symbol,
                _this508 = this;

            return Promise.resolve().then(function () {
                return _this508.publicGetReturnTicker();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets[id];
                    _id$split7 = id.split('_');
                    _id$split8 = _slicedToArray(_id$split7, 2);
                    quote = _id$split8[0];
                    base = _id$split8[1];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this509 = this,
                _arguments490 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments490.length > 0 && _arguments490[0] !== undefined ? _arguments490[0] : {};
                return _this509.loadMarkets();
            }).then(function () {
                return _this509.privatePostReturnCompleteBalances({
                    'account': 'all'
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances[currency];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['onOrders']),
                        'total': 0.0
                    };

                    account['total'] = _this509.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this510 = this,
                _arguments491 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments491.length > 1 && _arguments491[1] !== undefined ? _arguments491[1] : {};
                return _this510.loadMarkets();
            }).then(function () {
                return _this510.publicGetReturnOrderBook(_this510.extend({
                    'currencyPair': _this510.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this510.parseOrderBook(orderbook);
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high24hr']),
                'low': parseFloat(ticker['low24hr']),
                'bid': parseFloat(ticker['highestBid']),
                'ask': parseFloat(ticker['lowestAsk']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': parseFloat(ticker['percentChange']),
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['baseVolume']),
                'quoteVolume': parseFloat(ticker['quoteVolume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this511 = this;

            return Promise.resolve().then(function () {
                return _this511.loadMarkets();
            }).then(function () {
                return _this511.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this511.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this511.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                _this512 = this;

            return Promise.resolve().then(function () {
                return _this512.loadMarkets();
            }).then(function () {
                market = _this512.market(symbol);
                return _this512.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];

                return _this512.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = this.parse8601(trade['date']);
            var id = undefined;
            var order = undefined;
            var symbol = undefined;
            if (market) {
                symbol = market['symbol'];
            } else if ('currencyPair' in trade) {
                var marketId = trade['currencyPair'];
                symbol = this.markets_by_id[marketId]['symbol'];
            }
            if ('tradeID' in trade) id = trade['tradeID'];
            if ('orderNumber' in trade) order = trade['orderNumber'];
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': symbol,
                'id': id,
                'order': order,
                'type': undefined,
                'side': trade['type'],
                'price': parseFloat(trade['rate']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                trades,
                _this513 = this,
                _arguments494 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments494.length > 1 && _arguments494[1] !== undefined ? _arguments494[1] : {};
                return _this513.loadMarkets();
            }).then(function () {
                market = _this513.market(symbol);
                return _this513.publicGetReturnTradeHistory(_this513.extend({
                    'currencyPair': market['id'],
                    'end': _this513.seconds() // last 50000 trades by default
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this513.parseTrades(trades, market);
            });
        },
        fetchMyTrades: function fetchMyTrades() {
            var symbol,
                params,
                market,
                pair,
                request,
                response,
                result,
                ids,
                i,
                id,
                _market2,
                _symbol2,
                _this514 = this,
                _arguments495 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments495.length > 0 && _arguments495[0] !== undefined ? _arguments495[0] : undefined;
                params = _arguments495.length > 1 && _arguments495[1] !== undefined ? _arguments495[1] : {};
                return _this514.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this514.market(symbol);
                }pair = market ? market['id'] : 'all';
                request = _this514.extend({
                    'currencyPair': pair,
                    'end': _this514.seconds() // last 50000 trades by default
                }, params);
                return _this514.privatePostReturnTradeHistory(request);
            }).then(function (_resp) {
                response = _resp;
                result = undefined;

                if (market) {
                    result = _this514.parseTrades(response, market);
                } else {
                    result = { 'info': response };
                    ids = Object.keys(response);

                    for (i = 0; i < ids.length; i++) {
                        id = ids[i];
                        _market2 = _this514.markets_by_id[id];
                        _symbol2 = _market2['symbol'];

                        result[_symbol2] = _this514.parseTrades(response[id], _market2);
                    }
                }
                return result;
            });
        },
        parseOrder: function parseOrder(order, market) {
            var trades = undefined;
            if ('resultingTrades' in order) trades = this.parseTrades(order['resultingTrades'], market);
            return {
                'info': order,
                'id': order['orderNumber'],
                'timestamp': order['timestamp'],
                'datetime': this.iso8601(order['timestamp']),
                'status': order['status'],
                'symbol': market['symbol'],
                'type': order['type'],
                'side': order['side'],
                'price': order['price'],
                'amount': order['amount'],
                'trades': trades
            };
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                pair,
                response,
                result,
                orders,
                i,
                order,
                timestamp,
                extended,
                ids,
                _i,
                id,
                _orders,
                _market3,
                _symbol3,
                o,
                _order2,
                _timestamp2,
                _extended,
                _this515 = this,
                _arguments496 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments496.length > 0 && _arguments496[0] !== undefined ? _arguments496[0] : undefined;
                params = _arguments496.length > 1 && _arguments496[1] !== undefined ? _arguments496[1] : {};
                return _this515.loadMarkets();
            }).then(function () {
                market = undefined;

                if (symbol) {
                    market = _this515.market(symbol);
                }pair = market ? market['id'] : 'all';
                return _this515.privatePostReturnOpenOrders(_this515.extend({
                    'currencyPair': pair
                }));
            }).then(function (_resp) {
                response = _resp;
                result = [];

                if (market) {
                    orders = response;

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        timestamp = _this515.parse8601(order['date']);
                        extended = _this515.extend(order, {
                            'timestamp': timestamp,
                            'status': 'open',
                            'type': 'limit',
                            'side': order['type'],
                            'price': order['rate']
                        });

                        result.push(_this515.parseOrder(extended, market));
                    }
                } else {
                    ids = Object.keys(response);

                    for (_i = 0; _i < ids.length; _i++) {
                        id = ids[_i];
                        _orders = response[id];
                        _market3 = _this515.markets_by_id[id];
                        _symbol3 = _market3['symbol'];

                        for (o = 0; o < _orders.length; o++) {
                            _order2 = _orders[o];
                            _timestamp2 = _this515.parse8601(_order2['date']);
                            _extended = _this515.extend(_order2, {
                                'timestamp': _timestamp2,
                                'status': 'open',
                                'type': 'limit',
                                'side': _order2['type'],
                                'price': _order2['rate']
                            });

                            result.push(_this515.parseOrder(_extended, _market3));
                        }
                    }
                }
                return result;
            });
        },
        fetchOrderStatus: function fetchOrderStatus(id) {
            var market,
                orders,
                indexed,
                _this516 = this,
                _arguments497 = arguments;

            return Promise.resolve().then(function () {
                market = _arguments497.length > 1 && _arguments497[1] !== undefined ? _arguments497[1] : undefined;
                return _this516.loadMarkets();
            }).then(function () {
                return _this516.fetchOpenOrders(market);
            }).then(function (_resp) {
                orders = _resp;
                indexed = _this516.indexBy(orders, 'id');

                return id in indexed ? 'open' : 'closed';
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                market,
                response,
                timestamp,
                order,
                id,
                _this517 = this,
                _arguments498 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments498.length > 4 && _arguments498[4] !== undefined ? _arguments498[4] : undefined;
                params = _arguments498.length > 5 && _arguments498[5] !== undefined ? _arguments498[5] : {};

                if (type == 'market') {
                    throw new ExchangeError(_this517.id + ' allows limit orders only');
                }return _this517.loadMarkets();
            }).then(function () {
                method = 'privatePost' + _this517.capitalize(side);
                market = _this517.market(symbol);
                return _this517[method](_this517.extend({
                    'currencyPair': market['id'],
                    'rate': price,
                    'amount': amount
                }, params));
            }).then(function (_resp) {
                response = _resp;
                timestamp = _this517.milliseconds();
                order = _this517.parseOrder(_this517.extend({
                    'timestamp': timestamp,
                    'status': 'open',
                    'type': type,
                    'side': side,
                    'price': price,
                    'amount': amount
                }, response), market);
                id = order['id'];

                _this517.orders[id] = order;
                return _this517.extend({ 'info': response }, order);
            });
        },
        fetchOrder: function fetchOrder(id) {
            var orders,
                index,
                _this518 = this;

            return Promise.resolve().then(function () {
                return _this518.loadMarkets();
            }).then(function () {
                return _this518.fetchOpenOrders();
            }).then(function (_resp) {
                orders = _resp;
                index = _this518.indexBy(orders, 'id');

                if (id in index) {
                    _this518.orders[id] = index[id];
                    return index[id];
                } else {
                    if (id in _this518.orders) {
                        _this518.orders[id]['status'] = 'closed';
                        return _this518.orders[id];
                    } else {
                        throw new ExchangeError(_this518.id + ' order ' + id + ' not found');
                    }
                }
            });
        },
        fetchOrderTrades: function fetchOrderTrades(id) {
            var params,
                trades,
                _this519 = this,
                _arguments500 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments500.length > 1 && _arguments500[1] !== undefined ? _arguments500[1] : {};
                return _this519.loadMarkets();
            }).then(function () {
                return _this519.privatePostReturnOrderTrades(_this519.extend({
                    'orderNumber': id
                }, params));
            }).then(function (_resp) {
                trades = _resp;

                return _this519.parseTrades(trades);
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this520 = this,
                _arguments501 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments501.length > 1 && _arguments501[1] !== undefined ? _arguments501[1] : {};
                return _this520.loadMarkets();
            }).then(function () {
                return _this520.privatePostCancelOrder(_this520.extend({
                    'orderNumber': id
                }, params));
            });
        },
        withdraw: function withdraw(currency, amount, address) {
            var params,
                result,
                _this521 = this,
                _arguments502 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments502.length > 3 && _arguments502[3] !== undefined ? _arguments502[3] : {};
                return _this521.loadMarkets();
            }).then(function () {
                return _this521.privatePostWithdraw(_this521.extend({
                    'currency': currency,
                    'amount': amount,
                    'address': address
                }, params));
            }).then(function (_resp) {
                result = _resp;

                return {
                    'info': result,
                    'id': result['response']
                };
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                error,
                failed,
                _this522 = this,
                _arguments503 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments503.length > 1 && _arguments503[1] !== undefined ? _arguments503[1] : 'public';
                method = _arguments503.length > 2 && _arguments503[2] !== undefined ? _arguments503[2] : 'GET';
                params = _arguments503.length > 3 && _arguments503[3] !== undefined ? _arguments503[3] : {};
                headers = _arguments503.length > 4 && _arguments503[4] !== undefined ? _arguments503[4] : undefined;
                body = _arguments503.length > 5 && _arguments503[5] !== undefined ? _arguments503[5] : undefined;
                url = _this522.urls['api'][api];
                query = _this522.extend({ 'command': path }, params);

                if (api == 'public') {
                    url += '?' + _this522.urlencode(query);
                } else {
                    query['nonce'] = _this522.nonce();
                    body = _this522.urlencode(query);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this522.apiKey,
                        'Sign': _this522.hmac(_this522.encode(body), _this522.encode(_this522.secret), 'sha512')
                    };
                }
                return _this522.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    error = _this522.id + ' ' + _this522.json(response);
                    failed = response['error'].indexOf('Not enough') >= 0;

                    if (failed) {
                        throw new InsufficientFunds(error);
                    }throw new ExchangeError(error);
                }
                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quadrigacx = {

        'id': 'quadrigacx',
        'name': 'QuadrigaCX',
        'countries': 'CA',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',
            'api': 'https://api.quadrigacx.com',
            'www': 'https://www.quadrigacx.com',
            'doc': 'https://www.quadrigacx.com/api_info'
        },
        'api': {
            'public': {
                'get': ['order_book', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balance', 'bitcoin_deposit_address', 'bitcoin_withdrawal', 'buy', 'cancel_order', 'ether_deposit_address', 'ether_withdrawal', 'lookup_order', 'open_orders', 'sell', 'user_transactions']
            }
        },
        'markets': {
            'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD' }
        },

        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this523 = this,
                _arguments504 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments504.length > 0 && _arguments504[0] !== undefined ? _arguments504[0] : {};
                return _this523.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this523.currencies.length; c++) {
                    currency = _this523.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': parseFloat(balances[lowercase + '_available']),
                        'used': parseFloat(balances[lowercase + '_reserved']),
                        'total': parseFloat(balances[lowercase + '_balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this524 = this,
                _arguments505 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments505.length > 1 && _arguments505[1] !== undefined ? _arguments505[1] : {};
                return _this524.publicGetOrderBook(_this524.extend({
                    'book': _this524.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;

                return _this524.parseOrderBook(orderbook, timestamp);
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var ticker,
                timestamp,
                _this525 = this;

            return Promise.resolve().then(function () {
                return _this525.publicGetTicker({
                    'book': _this525.marketId(symbol)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this525.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = parseInt(trade['date']) * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': trade['tid'].toString(),
                'order': undefined,
                'type': undefined,
                'side': trade['side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['amount'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this526 = this,
                _arguments507 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments507.length > 1 && _arguments507[1] !== undefined ? _arguments507[1] : {};
                market = _this526.market(symbol);
                return _this526.publicGetTransactions(_this526.extend({
                    'book': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this526.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                method,
                order,
                response,
                _this527 = this,
                _arguments508 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments508.length > 4 && _arguments508[4] !== undefined ? _arguments508[4] : undefined;
                params = _arguments508.length > 5 && _arguments508[5] !== undefined ? _arguments508[5] : {};
                method = 'privatePost' + _this527.capitalize(side);
                order = {
                    'amount': amount,
                    'book': _this527.marketId(symbol)
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this527[method](_this527.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this528 = this,
                _arguments509 = arguments;

            params = _arguments509.length > 1 && _arguments509[1] !== undefined ? _arguments509[1] : {};

            return _this528.privatePostCancelOrder(_this528.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                request,
                signature,
                query,
                response,
                _this529 = this,
                _arguments510 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments510.length > 1 && _arguments510[1] !== undefined ? _arguments510[1] : 'public';
                method = _arguments510.length > 2 && _arguments510[2] !== undefined ? _arguments510[2] : 'GET';
                params = _arguments510.length > 3 && _arguments510[3] !== undefined ? _arguments510[3] : {};
                headers = _arguments510.length > 4 && _arguments510[4] !== undefined ? _arguments510[4] : undefined;
                body = _arguments510.length > 5 && _arguments510[5] !== undefined ? _arguments510[5] : undefined;
                url = _this529.urls['api'] + '/' + _this529.version + '/' + path;

                if (api == 'public') {
                    url += '?' + _this529.urlencode(params);
                } else {
                    if (!_this529.uid) {
                        throw new AuthenticationError(_this529.id + ' requires `' + _this529.id + '.uid` property for authentication');
                    }nonce = _this529.nonce();
                    request = [nonce.toString(), _this529.uid, _this529.apiKey].join('');
                    signature = _this529.hmac(_this529.encode(request), _this529.encode(_this529.secret));
                    query = _this529.extend({
                        'key': _this529.apiKey,
                        'nonce': nonce,
                        'signature': signature
                    }, params);

                    body = _this529.json(query);
                    headers = {
                        'Content-Type': 'application/json',
                        'Content-Length': body.length
                    };
                }
                return _this529.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this529.id + ' ' + _this529.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var quoine = {

        'id': 'quoine',
        'name': 'QUOINE',
        'countries': ['JP', 'SG', 'VN'],
        'version': '2',
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',
            'api': 'https://api.quoine.com',
            'www': 'https://www.quoine.com',
            'doc': 'https://developers.quoine.com'
        },
        'api': {
            'public': {
                'get': ['products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}']
            },
            'private': {
                'get': ['accounts/balance', 'crypto_accounts', 'executions/me', 'fiat_accounts', 'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', 'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}'],
                'post': ['fiat_accounts', 'loan_bids', 'orders'],
                'put': ['loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', 'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this530 = this;

            return Promise.resolve().then(function () {
                return _this530.publicGetProducts();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    base = market['base_currency'];
                    quote = market['quoted_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this531 = this,
                _arguments512 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments512.length > 0 && _arguments512[0] !== undefined ? _arguments512[0] : {};
                return _this531.loadMarkets();
            }).then(function () {
                return _this531.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = parseFloat(balance['balance']);
                    account = {
                        'free': total,
                        'used': 0.0,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this532 = this,
                _arguments513 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments513.length > 1 && _arguments513[1] !== undefined ? _arguments513[1] : {};
                return _this532.loadMarkets();
            }).then(function () {
                return _this532.publicGetProductsIdPriceLevels(_this532.extend({
                    'id': _this532.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this532.parseOrderBook(orderbook, undefined, 'buy_price_levels', 'sell_price_levels');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            var last = undefined;
            if ('last_traded_price' in ticker) {
                if (ticker['last_traded_price']) {
                    var length = ticker['last_traded_price'].length;
                    if (length > 0) last = parseFloat(ticker['last_traded_price']);
                }
            }
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high_market_ask']),
                'low': parseFloat(ticker['low_market_bid']),
                'bid': parseFloat(ticker['market_bid']),
                'ask': parseFloat(ticker['market_ask']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_24h']),
                'quoteVolume': undefined,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                result,
                t,
                ticker,
                base,
                quote,
                symbol,
                market,
                _this533 = this;

            return Promise.resolve().then(function () {
                return _this533.loadMarkets();
            }).then(function () {
                return _this533.publicGetProducts();
            }).then(function (_resp) {
                tickers = _resp;
                result = {};

                for (t = 0; t < tickers.length; t++) {
                    ticker = tickers[t];
                    base = ticker['base_currency'];
                    quote = ticker['quoted_currency'];
                    symbol = base + '/' + quote;
                    market = _this533.markets[symbol];

                    result[symbol] = _this533.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this534 = this;

            return Promise.resolve().then(function () {
                return _this534.loadMarkets();
            }).then(function () {
                market = _this534.market(symbol);
                return _this534.publicGetProductsId({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this534.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['created_at'] * 1000;
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['taker_side'],
                'price': parseFloat(trade['price']),
                'amount': parseFloat(trade['quantity'])
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this535 = this,
                _arguments516 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments516.length > 1 && _arguments516[1] !== undefined ? _arguments516[1] : {};
                return _this535.loadMarkets();
            }).then(function () {
                market = _this535.market(symbol);
                return _this535.publicGetExecutions(_this535.extend({
                    'product_id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this535.parseTrades(response['models'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this536 = this,
                _arguments517 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments517.length > 4 && _arguments517[4] !== undefined ? _arguments517[4] : undefined;
                params = _arguments517.length > 5 && _arguments517[5] !== undefined ? _arguments517[5] : {};
                return _this536.loadMarkets();
            }).then(function () {
                order = {
                    'order_type': type,
                    'product_id': _this536.marketId(symbol),
                    'side': side,
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this536.privatePostOrders(_this536.extend({
                    'order': order
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this537 = this,
                _arguments518 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments518.length > 1 && _arguments518[1] !== undefined ? _arguments518[1] : {};
                return _this537.loadMarkets();
            }).then(function () {
                return _this537.privatePutOrdersIdCancel(_this537.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                request,
                response,
                _this538 = this,
                _arguments519 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments519.length > 1 && _arguments519[1] !== undefined ? _arguments519[1] : 'public';
                method = _arguments519.length > 2 && _arguments519[2] !== undefined ? _arguments519[2] : 'GET';
                params = _arguments519.length > 3 && _arguments519[3] !== undefined ? _arguments519[3] : {};
                headers = _arguments519.length > 4 && _arguments519[4] !== undefined ? _arguments519[4] : undefined;
                body = _arguments519.length > 5 && _arguments519[5] !== undefined ? _arguments519[5] : undefined;
                url = '/' + _this538.implodeParams(path, params);
                query = _this538.omit(params, _this538.extractParams(path));

                headers = {
                    'X-Quoine-API-Version': _this538.version,
                    'Content-Type': 'application/json'
                };
                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this538.urlencode(query);
                    }
                } else {
                    nonce = _this538.nonce();
                    request = {
                        'path': url,
                        'nonce': nonce,
                        'token_id': _this538.apiKey,
                        'iat': Math.floor(nonce / 1000) // issued at
                    };

                    if (Object.keys(query).length) {
                        body = _this538.json(query);
                    }headers['X-Quoine-Auth'] = _this538.jwt(request, _this538.secret);
                }
                return _this538.fetch(_this538.urls['api'] + url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('message' in response) {
                    throw new ExchangeError(_this538.id + ' ' + _this538.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var southxchange = {

        'id': 'southxchange',
        'name': 'SouthXchange',
        'countries': 'AR', // Argentina
        'rateLimit': 1000,
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',
            'api': 'https://www.southxchange.com/api',
            'www': 'https://www.southxchange.com',
            'doc': 'https://www.southxchange.com/Home/Api'
        },
        'api': {
            'public': {
                'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']
            },
            'private': {
                'post': ['cancelMarketOrders', 'cancelOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'placeOrder', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                base,
                quote,
                symbol,
                id,
                _this539 = this;

            return Promise.resolve().then(function () {
                return _this539.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    base = market[0];
                    quote = market[1];
                    symbol = base + '/' + quote;
                    id = symbol;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this540 = this,
                _arguments521 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments521.length > 0 && _arguments521[0] !== undefined ? _arguments521[0] : {};
                return _this540.loadMarkets();
            }).then(function () {
                return _this540.privatePostListBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.uppercase;
                    free = parseFloat(balance['Available']);
                    used = parseFloat(balance['Unconfirmed']);
                    total = _this540.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                _this541 = this,
                _arguments522 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments522.length > 1 && _arguments522[1] !== undefined ? _arguments522[1] : {};
                return _this541.loadMarkets();
            }).then(function () {
                return _this541.publicGetBookSymbol(_this541.extend({
                    'symbol': _this541.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this541.parseOrderBook(orderbook, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.milliseconds();
            var bid = undefined;
            var ask = undefined;
            var last = undefined;
            var change = undefined;
            var volume = undefined;
            if ('Bid' in ticker) if (ticker['Bid']) bid = parseFloat(ticker['Bid']);
            if ('Ask' in ticker) if (ticker['Ask']) ask = parseFloat(ticker['Ask']);
            if ('Last' in ticker) if (ticker['Last']) last = parseFloat(ticker['Last']);
            if ('Variation24Hr' in ticker) if (ticker['Variation24Hr']) change = parseFloat(ticker['Variation24Hr']);
            if ('Volume24Hr' in ticker) if (ticker['Volume24Hr']) volume = parseFloat(ticker['Volume24Hr']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': bid,
                'ask': ask,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': change,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this542 = this;

            return Promise.resolve().then(function () {
                return _this542.loadMarkets();
            }).then(function () {
                return _this542.publicGetPrices();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this542.indexBy(response, 'Market');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this542.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this542.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this543 = this;

            return Promise.resolve().then(function () {
                return _this543.loadMarkets();
            }).then(function () {
                market = _this543.market(symbol);
                return _this543.publicGetPriceSymbol({
                    'symbol': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this543.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = trade['At'] * 1000;
            return {
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'id': undefined,
                'order': undefined,
                'type': undefined,
                'side': trade['Type'],
                'price': trade['Price'],
                'amount': trade['Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this544 = this,
                _arguments525 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments525.length > 1 && _arguments525[1] !== undefined ? _arguments525[1] : {};
                return _this544.loadMarkets();
            }).then(function () {
                market = _this544.market(symbol);
                return _this544.publicGetTradesSymbol(_this544.extend({
                    'symbol': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this544.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                order,
                response,
                _this545 = this,
                _arguments526 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments526.length > 4 && _arguments526[4] !== undefined ? _arguments526[4] : undefined;
                params = _arguments526.length > 5 && _arguments526[5] !== undefined ? _arguments526[5] : {};
                return _this545.loadMarkets();
            }).then(function () {
                market = _this545.market(symbol);
                order = {
                    'listingCurrency': market['base'],
                    'referenceCurrency': market['quote'],
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limitPrice'] = price;
                }return _this545.privatePostPlaceOrder(_this545.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response.toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this546 = this,
                _arguments527 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments527.length > 1 && _arguments527[1] !== undefined ? _arguments527[1] : {};
                return _this546.loadMarkets();
            }).then(function () {
                return _this546.privatePostCancelOrder(_this546.extend({
                    'orderCode': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                response,
                _this547 = this,
                _arguments528 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments528.length > 1 && _arguments528[1] !== undefined ? _arguments528[1] : 'public';
                method = _arguments528.length > 2 && _arguments528[2] !== undefined ? _arguments528[2] : 'GET';
                params = _arguments528.length > 3 && _arguments528[3] !== undefined ? _arguments528[3] : {};
                headers = _arguments528.length > 4 && _arguments528[4] !== undefined ? _arguments528[4] : undefined;
                body = _arguments528.length > 5 && _arguments528[5] !== undefined ? _arguments528[5] : undefined;
                url = _this547.urls['api'] + '/' + _this547.implodeParams(path, params);
                query = _this547.omit(params, _this547.extractParams(path));

                if (api == 'private') {
                    nonce = _this547.nonce();

                    query = _this547.extend({
                        'key': _this547.apiKey,
                        'nonce': nonce
                    }, query);
                    body = _this547.json(query);
                    headers = {
                        'Content-Type': 'application/json',
                        'Hash': _this547.hmac(_this547.encode(body), _this547.encode(_this547.secret), 'sha512')
                    };
                }
                return _this547.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                // if (!response)
                //     throw new ExchangeError (this.id + ' ' + this.json (response));

                return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var surbitcoin = extend(blinktrade, {
        'id': 'surbitcoin',
        'name': 'SurBitcoin',
        'countries': 'VE',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://surbitcoin.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' }
        }
    });

    //-----------------------------------------------------------------------------

    var therock = {

        'id': 'therock',
        'name': 'TheRockTrading',
        'countries': 'MT',
        'rateLimit': 1000,
        'version': 'v1',
        'hasFetchTickers': true,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
            'api': 'https://api.therocktrading.com',
            'www': 'https://therocktrading.com',
            'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']
        },
        'api': {
            'public': {
                'get': ['funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']
            },
            'private': {
                'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],
                'post': ['atms/withdraw', 'funds/{fund_id}/orders'],
                'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this548 = this;

            return Promise.resolve().then(function () {
                return _this548.publicGetFundsTickers();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets['tickers'].length; p++) {
                    market = markets['tickers'][p];
                    id = market['fund_id'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                free,
                total,
                used,
                account,
                _this549 = this,
                _arguments530 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments530.length > 0 && _arguments530[0] !== undefined ? _arguments530[0] : {};
                return _this549.loadMarkets();
            }).then(function () {
                return _this549.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    free = balance['trading_balance'];
                    total = balance['balance'];
                    used = total - free;
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                orderbook,
                timestamp,
                _this550 = this,
                _arguments531 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments531.length > 1 && _arguments531[1] !== undefined ? _arguments531[1] : {};
                return _this550.loadMarkets();
            }).then(function () {
                return _this550.publicGetFundsIdOrderbook(_this550.extend({
                    'id': _this550.marketId(symbol)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this550.parse8601(orderbook['date']);

                return _this550.parseOrderBook(orderbook, timestamp, 'bids', 'asks', 'price', 'amount');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = this.parse8601(ticker['date']);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['bid']),
                'ask': parseFloat(ticker['ask']),
                'vwap': undefined,
                'open': parseFloat(ticker['open']),
                'close': parseFloat(ticker['close']),
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': parseFloat(ticker['volume_traded']),
                'quoteVolume': parseFloat(ticker['volume']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var response,
                tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                ticker,
                _this551 = this;

            return Promise.resolve().then(function () {
                return _this551.loadMarkets();
            }).then(function () {
                return _this551.publicGetFundsTickers();
            }).then(function (_resp) {
                response = _resp;
                tickers = _this551.indexBy(response['tickers'], 'fund_id');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = _this551.markets_by_id[id];
                    symbol = market['symbol'];
                    ticker = tickers[id];

                    result[symbol] = _this551.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                ticker,
                _this552 = this;

            return Promise.resolve().then(function () {
                return _this552.loadMarkets();
            }).then(function () {
                market = _this552.market(symbol);
                return _this552.publicGetFundsIdTicker({
                    'id': market['id']
                });
            }).then(function (_resp) {
                ticker = _resp;

                return _this552.parseTicker(ticker, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (!market) market = this.markets_by_id[trade['fund_id']];
            var timestamp = this.parse8601(trade['date']);
            return {
                'info': trade,
                'id': trade['id'].toString(),
                'order': undefined,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': trade['side'],
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this553 = this,
                _arguments534 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments534.length > 1 && _arguments534[1] !== undefined ? _arguments534[1] : {};
                return _this553.loadMarkets();
            }).then(function () {
                market = _this553.market(symbol);
                return _this553.publicGetFundsIdTrades(_this553.extend({
                    'id': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this553.parseTrades(response['trades'], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this554 = this,
                _arguments535 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments535.length > 4 && _arguments535[4] !== undefined ? _arguments535[4] : undefined;
                params = _arguments535.length > 5 && _arguments535[5] !== undefined ? _arguments535[5] : {};
                return _this554.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this554.id + ' allows limit orders only');
                }return _this554.privatePostFundsFundIdOrders(_this554.extend({
                    'fund_id': _this554.marketId(symbol),
                    'side': side,
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this555 = this,
                _arguments536 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments536.length > 1 && _arguments536[1] !== undefined ? _arguments536[1] : {};
                return _this555.loadMarkets();
            }).then(function () {
                return _this555.privateDeleteFundsFundIdOrdersId(_this555.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                response,
                _this556 = this,
                _arguments537 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments537.length > 1 && _arguments537[1] !== undefined ? _arguments537[1] : 'public';
                method = _arguments537.length > 2 && _arguments537[2] !== undefined ? _arguments537[2] : 'GET';
                params = _arguments537.length > 3 && _arguments537[3] !== undefined ? _arguments537[3] : {};
                headers = _arguments537.length > 4 && _arguments537[4] !== undefined ? _arguments537[4] : undefined;
                body = _arguments537.length > 5 && _arguments537[5] !== undefined ? _arguments537[5] : undefined;
                url = _this556.urls['api'] + '/' + _this556.version + '/' + _this556.implodeParams(path, params);
                query = _this556.omit(params, _this556.extractParams(path));

                if (api == 'private') {
                    nonce = _this556.nonce().toString();
                    auth = nonce + url;

                    headers = {
                        'X-TRT-KEY': _this556.apiKey,
                        'X-TRT-NONCE': nonce,
                        'X-TRT-SIGN': _this556.hmac(_this556.encode(auth), _this556.encode(_this556.secret), 'sha512')
                    };
                    if (Object.keys(query).length) {
                        body = _this556.json(query);
                        headers['Content-Type'] = 'application/json';
                    }
                }
                return _this556.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    throw new ExchangeError(_this556.id + ' ' + _this556.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var urdubit = extend(blinktrade, {
        'id': 'urdubit',
        'name': 'UrduBit',
        'countries': 'PK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://urdubit.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var vaultoro = {

        'id': 'vaultoro',
        'name': 'Vaultoro',
        'countries': 'CH',
        'rateLimit': 1000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',
            'api': 'https://api.vaultoro.com',
            'www': 'https://www.vaultoro.com',
            'doc': 'https://api.vaultoro.com'
        },
        'api': {
            'public': {
                'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']
            },
            'private': {
                'get': ['balance', 'mytrades', 'orders'],
                'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var result,
                markets,
                market,
                base,
                quote,
                symbol,
                baseId,
                quoteId,
                id,
                _this557 = this;

            return Promise.resolve().then(function () {
                result = [];
                return _this557.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                market = markets['data'];
                base = market['BaseCurrency'];
                quote = market['MarketCurrency'];
                symbol = base + '/' + quote;
                baseId = base;
                quoteId = quote;
                id = market['MarketName'];

                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'info': market
                });
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this558 = this,
                _arguments539 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments539.length > 0 && _arguments539[0] !== undefined ? _arguments539[0] : {};
                return _this558.loadMarkets();
            }).then(function () {
                return _this558.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    uppercase = currency.toUpperCase();
                    free = balance['cash'];
                    used = balance['reserved'];
                    total = _this558.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                result,
                _this559 = this,
                _arguments540 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments540.length > 1 && _arguments540[1] !== undefined ? _arguments540[1] : {};
                return _this559.loadMarkets();
            }).then(function () {
                return _this559.publicGetOrderbook(params);
            }).then(function (_resp) {
                response = _resp;
                orderbook = {
                    'bids': response['data'][0]['b'],
                    'asks': response['data'][1]['s']
                };
                result = _this559.parseOrderBook(orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');

                result['bids'] = _this559.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var quote,
                bidsLength,
                bid,
                ask,
                response,
                ticker,
                timestamp,
                _this560 = this;

            return Promise.resolve().then(function () {
                return _this560.loadMarkets();
            }).then(function () {
                return _this560.publicGetBidandask();
            }).then(function (_resp) {
                quote = _resp;
                bidsLength = quote['bids'].length;
                bid = quote['bids'][bidsLength - 1];
                ask = quote['asks'][0];
                return _this560.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = _this560.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this560.iso8601(timestamp),
                    'high': parseFloat(ticker['24hHigh']),
                    'low': parseFloat(ticker['24hLow']),
                    'bid': bid[0],
                    'ask': ask[0],
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['LastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['24hVolume']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade, market) {
            var timestamp = this.parse8601(trade['Time']);
            return {
                'id': undefined,
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'order': undefined,
                'type': undefined,
                'side': undefined,
                'price': trade['Gold_Price'],
                'amount': trade['Gold_Amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this561 = this,
                _arguments542 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments542.length > 1 && _arguments542[1] !== undefined ? _arguments542[1] : {};
                return _this561.loadMarkets();
            }).then(function () {
                market = _this561.market(symbol);
                return _this561.publicGetTransactionsDay(params);
            }).then(function (_resp) {
                response = _resp;

                return _this561.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                market,
                method,
                response,
                _this562 = this,
                _arguments543 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments543.length > 4 && _arguments543[4] !== undefined ? _arguments543[4] : undefined;
                params = _arguments543.length > 5 && _arguments543[5] !== undefined ? _arguments543[5] : {};
                return _this562.loadMarkets();
            }).then(function () {
                market = _this562.market(symbol);
                method = 'privatePost' + _this562.capitalize(side) + 'SymbolType';
                return _this562[method](_this562.extend({
                    'symbol': market['quoteId'].toLowerCase(),
                    'type': type,
                    'gld': amount,
                    'price': price || 1
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['data']['Order_ID']
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this563 = this,
                _arguments544 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments544.length > 1 && _arguments544[1] !== undefined ? _arguments544[1] : {};
                return _this563.loadMarkets();
            }).then(function () {
                return _this563.privatePostCancelId(_this563.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/';
            if (api == 'public') {
                url += path;
            } else {
                var nonce = this.nonce();
                url += this.version + '/' + this.implodeParams(path, params);
                var query = this.extend({
                    'nonce': nonce,
                    'apikey': this.apiKey
                }, this.omit(params, this.extractParams(path)));
                url += '?' + this.urlencode(query);
                headers = {
                    'Content-Type': 'application/json',
                    'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var vbtc = extend(blinktrade, {
        'id': 'vbtc',
        'name': 'VBTC',
        'countries': 'VN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://vbtc.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'markets': {
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' }
        }
    });

    //-----------------------------------------------------------------------------

    var virwox = {

        'id': 'virwox',
        'name': 'VirWoX',
        'countries': 'AT',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',
            'api': {
                'public': 'http://api.virwox.com/api/json.php',
                'private': 'https://www.virwox.com/api/trading.php'
            },
            'www': 'https://www.virwox.com',
            'doc': 'https://www.virwox.com/developers.php'
        },
        'api': {
            'public': {
                'get': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics'],
                'post': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics']
            },
            'private': {
                'get': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder'],
                'post': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                market,
                id,
                symbol,
                base,
                quote,
                _this564 = this;

            return Promise.resolve().then(function () {
                return _this564.publicGetInstruments();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    market = markets['result'][keys[p]];
                    id = market['instrumentID'];
                    symbol = market['symbol'];
                    base = market['longCurrency'];
                    quote = market['shortCurrency'];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this565 = this,
                _arguments546 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments546.length > 0 && _arguments546[0] !== undefined ? _arguments546[0] : {};
                return _this565.loadMarkets();
            }).then(function () {
                return _this565.privatePostGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result']['accountList'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = balance['balance'];
                    account = {
                        'free': total,
                        'used': 0.0,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchBestPrices: function fetchBestPrices(symbol) {
            var _this566 = this;

            return Promise.resolve().then(function () {
                return _this566.loadMarkets();
            }).then(function () {
                return _this566.publicPostGetBestPrices({
                    'symbols': [symbol]
                });
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                response,
                orderbook,
                _this567 = this,
                _arguments548 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments548.length > 1 && _arguments548[1] !== undefined ? _arguments548[1] : {};
                return _this567.loadMarkets();
            }).then(function () {
                return _this567.publicPostGetMarketDepth(_this567.extend({
                    'symbols': [symbol],
                    'buyDepth': 100,
                    'sellDepth': 100
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][0];

                return _this567.parseOrderBook(orderbook, undefined, 'buy', 'sell', 'price', 'volume');
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var end,
                start,
                response,
                tickers,
                keys,
                length,
                lastKey,
                ticker,
                timestamp,
                _this568 = this;

            return Promise.resolve().then(function () {
                return _this568.loadMarkets();
            }).then(function () {
                end = _this568.milliseconds();
                start = end - 86400000;
                return _this568.publicGetTradedPriceVolume({
                    'instrument': symbol,
                    'endDate': _this568.yyyymmddhhmmss(end),
                    'startDate': _this568.yyyymmddhhmmss(start),
                    'HLOC': 1
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result']['priceVolumeList'];
                keys = Object.keys(tickers);
                length = keys.length;
                lastKey = keys[length - 1];
                ticker = tickers[lastKey];
                timestamp = _this568.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this568.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['longVolume']),
                    'quoteVolume': parseFloat(ticker['shortVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(market) {
            var params,
                _this569 = this,
                _arguments550 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments550.length > 1 && _arguments550[1] !== undefined ? _arguments550[1] : {};
                return _this569.loadMarkets();
            }).then(function () {
                return _this569.publicGetRawTradeData(_this569.extend({
                    'instrument': market,
                    'timespan': 3600
                }, params));
            });
        },
        createOrder: function createOrder(market, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this570 = this,
                _arguments551 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments551.length > 4 && _arguments551[4] !== undefined ? _arguments551[4] : undefined;
                params = _arguments551.length > 5 && _arguments551[5] !== undefined ? _arguments551[5] : {};
                return _this570.loadMarkets();
            }).then(function () {
                order = {
                    'instrument': _this570.symbol(market),
                    'orderType': side.toUpperCase(),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this570.privatePostPlaceOrder(_this570.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['orderID'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this571 = this,
                _arguments552 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments552.length > 1 && _arguments552[1] !== undefined ? _arguments552[1] : {};
                return _this571.loadMarkets();
            }).then(function () {
                return _this571.privatePostCancelOrder(_this571.extend({
                    'orderID': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                auth,
                nonce,
                response,
                _this572 = this,
                _arguments553 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments553.length > 1 && _arguments553[1] !== undefined ? _arguments553[1] : 'public';
                method = _arguments553.length > 2 && _arguments553[2] !== undefined ? _arguments553[2] : 'GET';
                params = _arguments553.length > 3 && _arguments553[3] !== undefined ? _arguments553[3] : {};
                headers = _arguments553.length > 4 && _arguments553[4] !== undefined ? _arguments553[4] : undefined;
                body = _arguments553.length > 5 && _arguments553[5] !== undefined ? _arguments553[5] : undefined;
                url = _this572.urls['api'][api];
                auth = {};

                if (api == 'private') {
                    auth['key'] = _this572.apiKey;
                    auth['user'] = _this572.login;
                    auth['pass'] = _this572.password;
                }
                nonce = _this572.nonce();

                if (method == 'GET') {
                    url += '?' + _this572.urlencode(_this572.extend({
                        'method': path,
                        'id': nonce
                    }, auth, params));
                } else {
                    headers = { 'Content-Type': 'application/json' };
                    body = _this572.json({
                        'method': path,
                        'params': _this572.extend(auth, params),
                        'id': nonce
                    });
                }
                return _this572.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    if (response['error']) {
                        throw new ExchangeError(_this572.id + ' ' + _this572.json(response));
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var xbtce = {

        'id': 'xbtce',
        'name': 'xBTCe',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': 'v1',
        'hasFetchTickers': true,
        'hasFetchOHLCV': false,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',
            'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',
            'www': 'https://www.xbtce.com',
            'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']
        },
        'api': {
            'public': {
                'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']
            },
            'private': {
                'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],
                'post': ['trade', 'tradehistory'],
                'put': ['trade'],
                'delete': ['trade']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                base,
                quote,
                symbol,
                _this573 = this;

            return Promise.resolve().then(function () {
                return _this573.privateGetSymbol();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['Symbol'];
                    base = market['MarginCurrency'];
                    quote = market['ProfitCurrency'];

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    symbol = market['IsTradeAllowed'] ? symbol : id;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                total,
                account,
                _this574 = this,
                _arguments555 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments555.length > 0 && _arguments555[0] !== undefined ? _arguments555[0] : {};
                return _this574.loadMarkets();
            }).then(function () {
                return _this574.privateGetAsset();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.toUpperCase();
                    // xbtce names DASH incorrectly as DSH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }total = balance['balance'];
                    account = {
                        'free': balance['FreeAmount'],
                        'used': balance['LockedAmount'],
                        'total': balance['Amount']
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                _this575 = this,
                _arguments556 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments556.length > 1 && _arguments556[1] !== undefined ? _arguments556[1] : {};
                return _this575.loadMarkets();
            }).then(function () {
                market = _this575.market(symbol);
                return _this575.privateGetLevel2Filter(_this575.extend({
                    'filter': market['id']
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                orderbook = orderbook[0];
                timestamp = orderbook['Timestamp'];

                return _this575.parseOrderBook(orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = 0;
            var last = undefined;
            if ('LastBuyTimestamp' in ticker) if (timestamp < ticker['LastBuyTimestamp']) {
                timestamp = ticker['LastBuyTimestamp'];
                last = ticker['LastBuyPrice'];
            }
            if ('LastSellTimestamp' in ticker) if (timestamp < ticker['LastSellTimestamp']) {
                timestamp = ticker['LastSellTimestamp'];
                last = ticker['LastSellPrice'];
            }
            if (!timestamp) timestamp = this.milliseconds();
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': ticker['DailyBestBuyPrice'],
                'low': ticker['DailyBestSellPrice'],
                'bid': ticker['BestBid'],
                'ask': ticker['BestAsk'],
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': last,
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': ticker['DailyTradedTotalVolume'],
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                ticker,
                _this576 = this;

            return Promise.resolve().then(function () {
                return _this576.loadMarkets();
            }).then(function () {
                return _this576.publicGetTicker();
            }).then(function (_resp) {
                tickers = _resp;

                tickers = _this576.indexBy(tickers, 'Symbol');
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = undefined;

                    if (id in _this576.markets_by_id) {
                        market = _this576.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        if (base == 'DSH') {
                            base = 'DASH';
                        }if (quote == 'DSH') {
                            quote = 'DASH';
                        }symbol = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this576.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                length,
                ticker,
                _this577 = this;

            return Promise.resolve().then(function () {
                return _this577.loadMarkets();
            }).then(function () {
                market = _this577.market(symbol);
                return _this577.publicGetTickerFilter({
                    'filter': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                length = tickers.length;

                if (length < 1) {
                    throw new ExchangeError(_this577.id + ' fetchTicker returned empty response, xBTCe public API error');
                }tickers = _this577.indexBy(tickers, 'Symbol');
                ticker = tickers[market['id']];

                return _this577.parseTicker(ticker, market);
            });
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                _this578 = this,
                _arguments559 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments559.length > 1 && _arguments559[1] !== undefined ? _arguments559[1] : {};
                return _this578.loadMarkets();
            }).then(function () {
                // no method for trades?
                return _this578.privateGetTrade(params);
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv['Timestamp'], ohlcv['Open'], ohlcv['High'], ohlcv['Low'], ohlcv['Close'], ohlcv['Volume']];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                minutes,
                periodicity,
                market,
                response,
                _this579 = this,
                _arguments560 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments560.length > 1 && _arguments560[1] !== undefined ? _arguments560[1] : '1m';
                since = _arguments560.length > 2 && _arguments560[2] !== undefined ? _arguments560[2] : undefined;
                limit = _arguments560.length > 3 && _arguments560[3] !== undefined ? _arguments560[3] : undefined;
                params = _arguments560.length > 4 && _arguments560[4] !== undefined ? _arguments560[4] : {};

                throw new NotSupported(_this579.id + ' fetchOHLCV is disabled by the exchange');
                minutes = parseInt(timeframe / 60); // 1 minute by default

                periodicity = minutes.toString();
                return _this579.loadMarkets();
            }).then(function () {
                market = _this579.market(symbol);

                if (!since) {
                    since = _this579.seconds() - 86400 * 7;
                } // last day by defulat
                if (!limit) {
                    limit = 1000;
                } // default
                return _this579.privateGetQuotehistorySymbolPeriodicityBarsBid(_this579.extend({
                    'symbol': market['id'],
                    'periodicity': '5m', // periodicity,
                    'timestamp': since,
                    'count': limit
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this579.parseOHLCVs(response['Bars'], market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this580 = this,
                _arguments561 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments561.length > 4 && _arguments561[4] !== undefined ? _arguments561[4] : undefined;
                params = _arguments561.length > 5 && _arguments561[5] !== undefined ? _arguments561[5] : {};
                return _this580.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this580.id + ' allows limit orders only');
                }return _this580.tapiPostTrade(_this580.extend({
                    'pair': _this580.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['Id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this581 = this,
                _arguments562 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments562.length > 1 && _arguments562[1] !== undefined ? _arguments562[1] : {};
                return _this581.loadMarkets();
            }).then(function () {
                return _this581.privateDeleteTrade(_this581.extend({
                    'Type': 'Cancel',
                    'Id': id
                }, params));
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var api = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');
            if (!this.uid) throw new AuthenticationError(this.id + ' requires uid property for authentication and trading');
            var url = this.urls['api'] + '/' + this.version;
            if (api == 'public') url += '/' + api;
            url += '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (api == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                headers = { 'Accept-Encoding': 'gzip, deflate' };
                var nonce = this.nonce().toString();
                if (method == 'POST') {
                    if (Object.keys(query).length) {
                        headers['Content-Type'] = 'application/json';
                        body = this.json(query);
                    } else url += '?' + this.urlencode(query);
                }
                var auth = nonce + this.uid + this.apiKey + method + url;
                if (body) auth += body;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
                var credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + this.binaryToString(signature);
                headers['Authorization'] = 'HMAC ' + credentials;
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var yobit = {

        'id': 'yobit',
        'name': 'YoBit',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
            'api': 'https://yobit.net',
            'www': 'https://www.yobit.net',
            'doc': 'https://www.yobit.net/en/api/'
        },
        'api': {
            'api': {
                'get': ['depth/{pairs}', 'info', 'ticker/{pairs}', 'trades/{pairs}']
            },
            'tapi': {
                'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                keys,
                result,
                p,
                id,
                market,
                symbol,
                _symbol$split13,
                _symbol$split14,
                base,
                quote,
                _this582 = this;

            return Promise.resolve().then(function () {
                return _this582.apiGetInfo();
            }).then(function (_resp) {
                markets = _resp;
                keys = Object.keys(markets['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    market = markets['pairs'][id];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split13 = symbol.split('/');
                    _symbol$split14 = _slicedToArray(_symbol$split13, 2);
                    base = _symbol$split14[0];
                    quote = _symbol$split14[1];

                    base = _this582.commonCurrencyCode(base);
                    quote = _this582.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this583 = this,
                _arguments564 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments564.length > 0 && _arguments564[0] !== undefined ? _arguments564[0] : {};
                return _this583.loadMarkets();
            }).then(function () {
                return _this583.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this583.currencies.length; c++) {
                    currency = _this583.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = _this583.account();

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                response,
                orderbook,
                timestamp,
                bids,
                asks,
                _this584 = this,
                _arguments565 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments565.length > 1 && _arguments565[1] !== undefined ? _arguments565[1] : {};
                return _this584.loadMarkets();
            }).then(function () {
                market = _this584.market(symbol);
                return _this584.apiGetDepthPairs(_this584.extend({
                    'pairs': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[market['id']];
                timestamp = _this584.milliseconds();
                bids = 'bids' in orderbook ? orderbook['bids'] : [];
                asks = 'asks' in orderbook ? orderbook['asks'] : [];

                return {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this584.iso8601(timestamp)
                };
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                tickers,
                ticker,
                timestamp,
                _this585 = this;

            return Promise.resolve().then(function () {
                return _this585.loadMarkets();
            }).then(function () {
                market = _this585.market(symbol);
                return _this585.apiGetTickerPairs({
                    'pairs': market['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[market['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this585.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol_cur']),
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this586 = this,
                _arguments567 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments567.length > 1 && _arguments567[1] !== undefined ? _arguments567[1] : {};
                return _this586.loadMarkets();
            }).then(function () {
                market = _this586.market(symbol);
                return _this586.apiGetTradesPairs(_this586.extend({
                    'pairs': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this586.parseTrades(response[market['id']], market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                rate,
                response,
                _this587 = this,
                _arguments568 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments568.length > 4 && _arguments568[4] !== undefined ? _arguments568[4] : undefined;
                params = _arguments568.length > 5 && _arguments568[5] !== undefined ? _arguments568[5] : {};
                return _this587.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this587.id + ' allows limit orders only');
                }rate = price.toString();
                return _this587.tapiPostTrade(_this587.extend({
                    'pair': _this587.marketId(symbol),
                    'type': side,
                    'amount': amount,
                    'rate': '%.8f'.sprintf(price)
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this588 = this,
                _arguments569 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments569.length > 1 && _arguments569[1] !== undefined ? _arguments569[1] : {};
                return _this588.loadMarkets();
            }).then(function () {
                return _this588.tapiPostCancelOrder(_this588.extend({
                    'order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                _query2,
                response,
                _this589 = this,
                _arguments570 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments570.length > 1 && _arguments570[1] !== undefined ? _arguments570[1] : 'api';
                method = _arguments570.length > 2 && _arguments570[2] !== undefined ? _arguments570[2] : 'GET';
                params = _arguments570.length > 3 && _arguments570[3] !== undefined ? _arguments570[3] : {};
                headers = _arguments570.length > 4 && _arguments570[4] !== undefined ? _arguments570[4] : undefined;
                body = _arguments570.length > 5 && _arguments570[5] !== undefined ? _arguments570[5] : undefined;
                url = _this589.urls['api'] + '/' + api;

                if (api == 'api') {
                    url += '/' + _this589.version + '/' + _this589.implodeParams(path, params);
                    query = _this589.omit(params, _this589.extractParams(path));

                    if (Object.keys(query).length) {
                        url += '?' + _this589.urlencode(query);
                    }
                } else {
                    nonce = _this589.nonce();
                    _query2 = _this589.extend({ 'method': path, 'nonce': nonce }, params);

                    body = _this589.urlencode(_query2);
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'key': _this589.apiKey,
                        'sign': _this589.hmac(_this589.encode(body), _this589.encode(_this589.secret), 'sha512')
                    };
                }
                return _this589.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this589.id + ' ' + _this589.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var yunbi = {

        'id': 'yunbi',
        'name': 'YUNBI',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v2',
        'hasFetchTickers': true,
        'hasFetchOHLCV': true,
        'timeframes': {
            '1m': '1',
            '5m': '5',
            '15m': '15',
            '30m': '30',
            '1h': '60',
            '2h': '120',
            '4h': '240',
            '12h': '720',
            '1d': '1440',
            '3d': '4320',
            '1w': '10080'
        },
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',
            'api': 'https://yunbi.com',
            'www': 'https://yunbi.com',
            'doc': ['https://yunbi.com/documents/api/guide', 'https://yunbi.com/swagger/']
        },
        'api': {
            'public': {
                'get': ['tickers', 'tickers/{market}', 'markets', 'order_book', 'k', 'depth', 'trades', 'k_with_pending_trades', 'timestamp', 'addresses/{address}', 'partners/orders/{id}/trades']
            },
            'private': {
                'get': ['deposits', 'members/me', 'deposit', 'deposit_address', 'order', 'orders', 'trades/my'],
                'post': ['order/delete', 'orders', 'orders/multi', 'orders/clear']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split15,
                _symbol$split16,
                base,
                quote,
                _this590 = this;

            return Promise.resolve().then(function () {
                return _this590.publicGetMarkets();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['id'];
                    symbol = market['name'];
                    _symbol$split15 = symbol.split('/');
                    _symbol$split16 = _slicedToArray(_symbol$split15, 2);
                    base = _symbol$split16[0];
                    quote = _symbol$split16[1];

                    base = _this590.commonCurrencyCode(base);
                    quote = _this590.commonCurrencyCode(quote);
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                account,
                _this591 = this,
                _arguments572 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments572.length > 0 && _arguments572[0] !== undefined ? _arguments572[0] : {};
                return _this591.loadMarkets();
            }).then(function () {
                return _this591.privateGetMembersMe();
            }).then(function (_resp) {
                response = _resp;
                balances = response['accounts'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': parseFloat(balance['locked']),
                        'total': 0.0
                    };

                    account['total'] = _this591.sum(account['free'], account['used']);
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(symbol) {
            var params,
                market,
                orderbook,
                timestamp,
                result,
                _this592 = this,
                _arguments573 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments573.length > 1 && _arguments573[1] !== undefined ? _arguments573[1] : {};
                return _this592.loadMarkets();
            }).then(function () {
                market = _this592.market(symbol);
                return _this592.publicGetDepth(_this592.extend({
                    'market': market['id'],
                    'limit': 300
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = _this592.parseOrderBook(orderbook, timestamp);

                result['bids'] = _this592.sortBy(result['bids'], 0, true);
                result['asks'] = _this592.sortBy(result['asks'], 0);
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, market) {
            var timestamp = ticker['at'] * 1000;
            ticker = ticker['ticker'];
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy']),
                'ask': parseFloat(ticker['sell']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last']),
                'change': undefined,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': parseFloat(ticker['vol']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var tickers,
                ids,
                result,
                i,
                id,
                market,
                symbol,
                base,
                quote,
                _symbol4,
                ticker,
                _this593 = this;

            return Promise.resolve().then(function () {
                return _this593.loadMarkets();
            }).then(function () {
                return _this593.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ids = Object.keys(tickers);
                result = {};

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    market = undefined;
                    symbol = id;

                    if (id in _this593.markets_by_id) {
                        market = _this593.markets_by_id[id];
                        symbol = market['symbol'];
                    } else {
                        base = id.slice(0, 3);
                        quote = id.slice(3, 6);

                        base = base.toUpperCase();
                        quote = quote.toUpperCase();
                        base = _this593.commonCurrencyCode(base);
                        quote = _this593.commonCurrencyCode(quote);
                        _symbol4 = base + '/' + quote;
                    }
                    ticker = tickers[id];

                    result[symbol] = _this593.parseTicker(ticker, market);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(symbol) {
            var market,
                response,
                _this594 = this;

            return Promise.resolve().then(function () {
                return _this594.loadMarkets();
            }).then(function () {
                market = _this594.market(symbol);
                return _this594.publicGetTickersMarket({
                    'market': market['id']
                });
            }).then(function (_resp) {
                response = _resp;

                return _this594.parseTicker(response, market);
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var timestamp = trade['timestamp'] * 1000;
            var side = trade['type'] == 'bid' ? 'buy' : 'sell';
            return {
                'info': trade,
                'id': trade['tid'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this595 = this,
                _arguments576 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments576.length > 1 && _arguments576[1] !== undefined ? _arguments576[1] : {};
                return _this595.loadMarkets();
            }).then(function () {
                market = _this595.market(symbol);
                return _this595.publicGetTrades(_this595.extend({
                    'market': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;
                // looks like they switched this endpoint off
                // it returns 503 Service Temporarily Unavailable always
                // return this.parseTrades (reponse, market);

                return response;
            });
        },
        parseOHLCV: function parseOHLCV(ohlcv) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
            var timeframe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1m';
            var since = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
            var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

            return [ohlcv[0] * 1000, ohlcv[1], ohlcv[2], ohlcv[3], ohlcv[4], ohlcv[5]];
        },
        fetchOHLCV: function fetchOHLCV(symbol) {
            var timeframe,
                since,
                limit,
                params,
                market,
                request,
                response,
                _this596 = this,
                _arguments577 = arguments;

            return Promise.resolve().then(function () {
                timeframe = _arguments577.length > 1 && _arguments577[1] !== undefined ? _arguments577[1] : '1m';
                since = _arguments577.length > 2 && _arguments577[2] !== undefined ? _arguments577[2] : undefined;
                limit = _arguments577.length > 3 && _arguments577[3] !== undefined ? _arguments577[3] : undefined;
                params = _arguments577.length > 4 && _arguments577[4] !== undefined ? _arguments577[4] : {};
                return _this596.loadMarkets();
            }).then(function () {
                market = _this596.market(symbol);

                if (!limit) {
                    limit = 500;
                } // default is 30
                request = {
                    'market': market['id'],
                    'period': _this596.timeframes[timeframe],
                    'limit': limit
                };

                if (since) {
                    request['timestamp'] = since;
                }return _this596.publicGetK(_this596.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this596.parseOHLCVs(response, market, timeframe, since, limit);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                order,
                response,
                _this597 = this,
                _arguments578 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments578.length > 4 && _arguments578[4] !== undefined ? _arguments578[4] : undefined;
                params = _arguments578.length > 5 && _arguments578[5] !== undefined ? _arguments578[5] : {};
                return _this597.loadMarkets();
            }).then(function () {
                order = {
                    'market': _this597.marketId(symbol),
                    'side': side,
                    'volume': amount.toString(),
                    'ord_type': type
                };

                if (type == 'limit') {
                    order['price'] = price.toString();
                }
                return _this597.privatePostOrders(_this597.extend(order, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this598 = this;

            return Promise.resolve().then(function () {
                return _this598.loadMarkets();
            }).then(function () {
                return _this598.privatePostOrderDelete({ 'id': id });
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                _query3,
                auth,
                signature,
                suffix,
                response,
                _this599 = this,
                _arguments580 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments580.length > 1 && _arguments580[1] !== undefined ? _arguments580[1] : 'public';
                method = _arguments580.length > 2 && _arguments580[2] !== undefined ? _arguments580[2] : 'GET';
                params = _arguments580.length > 3 && _arguments580[3] !== undefined ? _arguments580[3] : {};
                headers = _arguments580.length > 4 && _arguments580[4] !== undefined ? _arguments580[4] : undefined;
                body = _arguments580.length > 5 && _arguments580[5] !== undefined ? _arguments580[5] : undefined;
                request = '/api/' + _this599.version + '/' + _this599.implodeParams(path, params) + '.json';
                query = _this599.omit(params, _this599.extractParams(path));
                url = _this599.urls['api'] + request;

                if (api == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this599.urlencode(query);
                    }
                } else {
                    nonce = _this599.nonce().toString();
                    _query3 = _this599.urlencode(_this599.keysort(_this599.extend({
                        'access_key': _this599.apiKey,
                        'tonce': nonce
                    }, params)));
                    auth = method + '|' + request + '|' + _query3;
                    signature = _this599.hmac(_this599.encode(auth), _this599.encode(_this599.secret));
                    suffix = _query3 + '&signature=' + signature;

                    if (method == 'GET') {
                        url += '?' + suffix;
                    } else {
                        body = suffix;
                        headers = {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'Content-Length': body.length
                        };
                    }
                }
                return _this599.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this599.id + ' ' + _this599.json(response));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var zaif = {

        'id': 'zaif',
        'name': 'Zaif',
        'countries': 'JP',
        'rateLimit': 2000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
            'api': 'https://api.zaif.jp',
            'www': 'https://zaif.jp',
            'doc': ['http://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif']
        },
        'api': {
            'public': {
                'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']
            },
            'ecapi': {
                'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']
            }
        },

        fetchMarkets: function fetchMarkets() {
            var markets,
                result,
                p,
                market,
                id,
                symbol,
                _symbol$split17,
                _symbol$split18,
                base,
                quote,
                _this600 = this;

            return Promise.resolve().then(function () {
                return _this600.publicGetCurrencyPairsAll();
            }).then(function (_resp) {
                markets = _resp;
                result = [];

                for (p = 0; p < markets.length; p++) {
                    market = markets[p];
                    id = market['currency_pair'];
                    symbol = market['name'];
                    _symbol$split17 = symbol.split('/');
                    _symbol$split18 = _slicedToArray(_symbol$split17, 2);
                    base = _symbol$split18[0];
                    quote = _symbol$split18[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': market
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var params,
                response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                uppercase,
                account,
                _this601 = this,
                _arguments582 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments582.length > 0 && _arguments582[0] !== undefined ? _arguments582[0] : {};
                return _this601.loadMarkets();
            }).then(function () {
                return _this601.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['funds']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances['funds'][currency];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balance,
                        'used': 0.0,
                        'total': balance
                    };

                    if ('deposit' in balances) {
                        if (currency in balances['deposit']) {
                            account['total'] = balances['deposit'][currency];
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(market) {
            var params,
                orderbook,
                _this602 = this,
                _arguments583 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments583.length > 1 && _arguments583[1] !== undefined ? _arguments583[1] : {};
                return _this602.loadMarkets();
            }).then(function () {
                return _this602.publicGetDepthPair(_this602.extend({
                    'pair': _this602.marketId(market)
                }, params));
            }).then(function (_resp) {
                orderbook = _resp;

                return _this602.parseOrderBook(orderbook);
            });
        },
        fetchTicker: function fetchTicker(market) {
            var ticker,
                timestamp,
                _this603 = this;

            return Promise.resolve().then(function () {
                return _this603.loadMarkets();
            }).then(function () {
                return _this603.publicGetTickerPair({
                    'pair': _this603.marketId(market)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this603.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this603.iso8601(timestamp),
                    'high': ticker['high'],
                    'low': ticker['low'],
                    'bid': ticker['bid'],
                    'ask': ticker['ask'],
                    'vwap': ticker['vwap'],
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'],
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': ticker['volume'],
                    'info': ticker
                };
            });
        },
        parseTrade: function parseTrade(trade) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = trade['trade_type'] == 'bid' ? 'buy' : 'sell';
            var timestamp = trade['date'] * 1000;
            var id = undefined;
            if ('id' in trade) {
                id = trade['id'];
            } else if ('tid' in trade) {
                id = trade['tid'];
            }
            if (!market) market = this.markets_by_id[trade['currency_pair']];
            return {
                'id': id.toString(),
                'info': trade,
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'symbol': market['symbol'],
                'type': undefined,
                'side': side,
                'price': trade['price'],
                'amount': trade['amount']
            };
        },
        fetchTrades: function fetchTrades(symbol) {
            var params,
                market,
                response,
                _this604 = this,
                _arguments585 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments585.length > 1 && _arguments585[1] !== undefined ? _arguments585[1] : {};
                return _this604.loadMarkets();
            }).then(function () {
                market = _this604.market(symbol);
                return _this604.publicGetTradesPair(_this604.extend({
                    'pair': market['id']
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return _this604.parseTrades(response, market);
            });
        },
        createOrder: function createOrder(symbol, type, side, amount) {
            var price,
                params,
                response,
                _this605 = this,
                _arguments586 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments586.length > 4 && _arguments586[4] !== undefined ? _arguments586[4] : undefined;
                params = _arguments586.length > 5 && _arguments586[5] !== undefined ? _arguments586[5] : {};
                return _this605.loadMarkets();
            }).then(function () {
                if (type == 'market') {
                    throw new ExchangeError(_this605.id + ' allows limit orders only');
                }return _this605.privatePostTrade(_this605.extend({
                    'currency_pair': _this605.marketId(symbol),
                    'action': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount,
                    'price': price
                }, params));
            }).then(function (_resp) {
                response = _resp;

                return {
                    'info': response,
                    'id': response['return']['order_id'].toString()
                };
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this606 = this,
                _arguments587 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments587.length > 1 && _arguments587[1] !== undefined ? _arguments587[1] : {};
                return _this606.loadMarkets();
            }).then(function () {
                return _this606.privatePostCancelOrder(_this606.extend({
                    'order_id': id
                }, params));
            });
        },
        parseOrder: function parseOrder(order) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var side = order['action'] == 'bid' ? 'buy' : 'sell';
            var timestamp = parseInt(order['timestamp']) * 1000;
            if (!market) market = this.markets_by_id[order['currency_pair']];
            return {
                'id': order['id'].toString(),
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'status': 'open',
                'symbol': market['symbol'],
                'type': 'limit',
                'side': side,
                'price': order['price'],
                'amount': order['amount'],
                'trades': undefined
            };
        },
        parseOrders: function parseOrders(orders) {
            var market = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            var ids = Object.keys(orders);
            var result = [];
            for (var i = 0; i < ids.length; i++) {
                var id = ids[i];
                var order = orders[id];
                var extended = this.extend(order, { 'id': id });
                result.push(this.parseOrder(extended, market));
            }
            return result;
        },
        fetchOpenOrders: function fetchOpenOrders() {
            var symbol,
                params,
                market,
                request,
                response,
                _this607 = this,
                _arguments588 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments588.length > 0 && _arguments588[0] !== undefined ? _arguments588[0] : undefined;
                params = _arguments588.length > 1 && _arguments588[1] !== undefined ? _arguments588[1] : {};
                market = undefined;
                // let request = {
                //     'is_token': false,
                //     'is_token_both': false,
                // };

                request = {};

                if (symbol) {
                    market = _this607.market(symbol);
                    request['currency_pair'] = market['id'];
                }
                return _this607.privatePostActiveOrders(_this607.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this607.parseOrders(response['return'], market);
            });
        },
        fetchClosedOrders: function fetchClosedOrders() {
            var symbol,
                params,
                market,
                request,
                response,
                _this608 = this,
                _arguments589 = arguments;

            return Promise.resolve().then(function () {
                symbol = _arguments589.length > 0 && _arguments589[0] !== undefined ? _arguments589[0] : undefined;
                params = _arguments589.length > 1 && _arguments589[1] !== undefined ? _arguments589[1] : {};
                market = undefined;
                // let request = {
                //     'from': 0,
                //     'count': 1000,
                //     'from_id': 0,
                //     'end_id': 1000,
                //     'order': 'DESC',
                //     'since': 1503821051,
                //     'end': 1503821051,
                //     'is_token': false,
                // };

                request = {};

                if (symbol) {
                    market = _this608.market(symbol);
                    request['currency_pair'] = market['id'];
                }
                return _this608.privatePostTradeHistory(_this608.extend(request, params));
            }).then(function (_resp) {
                response = _resp;

                return _this608.parseOrders(response['return'], market);
            });
        },
        request: function request(path) {
            var api,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this609 = this,
                _arguments590 = arguments;

            return Promise.resolve().then(function () {
                api = _arguments590.length > 1 && _arguments590[1] !== undefined ? _arguments590[1] : 'api';
                method = _arguments590.length > 2 && _arguments590[2] !== undefined ? _arguments590[2] : 'GET';
                params = _arguments590.length > 3 && _arguments590[3] !== undefined ? _arguments590[3] : {};
                headers = _arguments590.length > 4 && _arguments590[4] !== undefined ? _arguments590[4] : undefined;
                body = _arguments590.length > 5 && _arguments590[5] !== undefined ? _arguments590[5] : undefined;
                url = _this609.urls['api'] + '/';

                if (api == 'public') {
                    url += 'api/' + _this609.version + '/' + _this609.implodeParams(path, params);
                } else {
                    url += api == 'ecapi' ? 'ecapi' : 'tapi';
                    nonce = _this609.nonce();

                    body = _this609.urlencode(_this609.extend({
                        'method': path,
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this609.apiKey,
                        'Sign': _this609.hmac(_this609.encode(body), _this609.encode(_this609.secret), 'sha512')
                    };
                }
                return _this609.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new ExchangeError(_this609.id + ' ' + response['error']);
                }if ('success' in response) {
                    if (!response['success']) {
                        throw new ExchangeError(_this609.id + ' ' + _this609.json(response));
                    }
                }return response;
            });
        }
    };

    //=============================================================================

    var exchanges = {

        '_1broker': _1broker,
        '_1btcxe': _1btcxe,
        'anxpro': anxpro,
        'binance': binance,
        'bit2c': bit2c,
        'bitbay': bitbay,
        'bitbays': bitbays,
        'bitcoincoid': bitcoincoid,
        'bitfinex': bitfinex,
        'bitfinex2': bitfinex2,
        'bitflyer': bitflyer,
        'bitlish': bitlish,
        'bitmarket': bitmarket,
        'bitmex': bitmex,
        'bitso': bitso,
        'bitstamp': bitstamp,
        'bittrex': bittrex,
        'bl3p': bl3p,
        'btcchina': btcchina,
        'btce': btce,
        'btcexchange': btcexchange,
        'btcmarkets': btcmarkets,
        'btctradeua': btctradeua,
        'btcturk': btcturk,
        'btcx': btcx,
        'bter': bter,
        'bxinth': bxinth,
        'ccex': ccex,
        'cex': cex,
        'chbtc': chbtc,
        'chilebit': chilebit,
        'coincheck': coincheck,
        'coinfloor': coinfloor,
        'coingi': coingi,
        'coinmarketcap': coinmarketcap,
        'coinmate': coinmate,
        'coinsecure': coinsecure,
        'coinspot': coinspot,
        'cryptopia': cryptopia,
        'dsx': dsx,
        'exmo': exmo,
        'flowbtc': flowbtc,
        'foxbit': foxbit,
        'fybse': fybse,
        'fybsg': fybsg,
        'gatecoin': gatecoin,
        'gdax': gdax,
        'gemini': gemini,
        'hitbtc': hitbtc,
        'hitbtc2': hitbtc2,
        'huobi': huobi,
        'itbit': itbit,
        'jubi': jubi,
        'kraken': kraken,
        'lakebtc': lakebtc,
        'livecoin': livecoin,
        'liqui': liqui,
        'luno': luno,
        'mercado': mercado,
        'okcoincny': okcoincny,
        'okcoinusd': okcoinusd,
        'okex': okex,
        'paymium': paymium,
        'poloniex': poloniex,
        'quadrigacx': quadrigacx,
        'quoine': quoine,
        'southxchange': southxchange,
        'surbitcoin': surbitcoin,
        'therock': therock,
        'urdubit': urdubit,
        'vaultoro': vaultoro,
        'vbtc': vbtc,
        'virwox': virwox,
        'xbtce': xbtce,
        'yobit': yobit,
        'yunbi': yunbi,
        'zaif': zaif
    };

    var defineAllExchanges = function defineAllExchanges(exchanges) {
        var result = {};

        var _loop3 = function _loop3(id) {
            result[id] = function (params) {
                return new Exchange(extend(exchanges[id], params));
            };
        };

        for (var id in exchanges) {
            _loop3(id);
        }result.exchanges = Object.keys(exchanges);
        return result;
    };

    //-----------------------------------------------------------------------------

    var ccxt = Object.assign(defineAllExchanges(exchanges), {

        version: version,

        // exceptions

        CCXTError: CCXTError,
        ExchangeError: ExchangeError,
        NotSupported: NotSupported,
        AuthenticationError: AuthenticationError,
        InsufficientFunds: InsufficientFunds,
        NetworkError: NetworkError,
        DDoSProtection: DDoSProtection,
        RequestTimeout: RequestTimeout,
        ExchangeNotAvailable: ExchangeNotAvailable,

        // common utility functions

        sleep: sleep,
        timeout: timeout,
        capitalize: capitalize,
        keysort: keysort,
        extend: extend,
        omit: omit,
        indexBy: indexBy,
        sortBy: sortBy,
        flatten: flatten,
        unique: unique,
        pluck: pluck,
        urlencode: urlencode,
        sum: sum,
        decimal: decimal,

        // underscore aliases

        index_by: indexBy,
        sort_by: sortBy,

        // crypto functions

        binaryConcat: binaryConcat,
        stringToBinary: stringToBinary,
        binaryToString: binaryToString,
        stringToBase64: stringToBase64,
        utf16ToBase64: utf16ToBase64,
        base64ToBinary: base64ToBinary,
        base64ToString: base64ToString,
        urlencodeBase64: urlencodeBase64,
        hash: hash,
        hmac: hmac,
        jwt: jwt

    });

    //-----------------------------------------------------------------------------

    if (isCommonJS) {

        module.exports = ccxt;
    } else {

        window.ccxt = ccxt;
    }

    //-----------------------------------------------------------------------------
})(); // end of namespace

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQXJCSjtBQXNCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQXRCSjtBQXVCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQXZCSjtBQXdCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQXhCSjtBQXlCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQXpCSjtBQTBCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQTFCSjtBQTJCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQTNCSjtBQTRCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQTVCSjtBQTZCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQTdCSjtBQThCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQsU0FBUyxLQUFoRSxFQTlCSjtBQStCUCx1QkFBVyxFQUFFLE1BQU0sU0FBUixFQUFtQixVQUFVLFNBQTdCLEVBQXdDLFFBQVEsS0FBaEQsRUFBdUQs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QTBELFNBQVMsS0FBbkUsRUFiTDtBQWNQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBZEw7QUFlUCx1QkFBWSxFQUFFLE1BQU0sU0FBUixFQUFvQixVQUFVLFNBQTlCLEVBQTBDLFFBQVEsS0FBbEQsRUFBMEQsU0FBUyxLQUFuRSxFQWZMO0FBZ0JQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBaEJMO0FBaUJQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBakJMO0FBa0JQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBbEJMO0FBbUJQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBbkJMO0FBb0JQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBcEJMO0FBcUJQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBckJMO0FBc0JQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBdEJMO0FBdUJQLHVCQUFZLEVBQUUsTUFBTSxTQUFSLEVBQW9CLFVBQVUsU0FBOUIsRUFBMEMsUUFBUSxLQUFsRCxFQUEwRCxTQUFTLEtBQW5FLEVBdkJMO0FBd0JQLHdCQUFZLEVBQUUsTUFBTSxVQUFSLEVBQW9CLFVBQVUsVUFBOUIs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QWEsU0FBYixDQUFuQjtBQUNBLGVBQU8sTUFBUDtBQUNILEtBUkQ7O0FBVUE7O0FBRUEsUUFBTSxPQUFPLE9BQU8sTUFBUCxDQUFlLG1CQUFvQixTQUFwQixDQUFmLEVBQStDOztBQUV4RCx3QkFGd0Q7O0FBSXhEOztBQUVBLDRCQU53RDtBQU94RCxvQ0FQd0Q7QUFReEQsa0NBUndEO0FBU3hELGdEQVR3RDtBQVV4RCw0Q0FWd0Q7QUFXeEQsa0NBWHdEO0FBWXhELHNDQVp3RDtBQWF4RCxzQ0Fid0Q7QUFjeEQsa0RBZHdEOztBQWdCeEQ7O0FBRUEsb0JBbEJ3RDtBQW1CeEQsd0JBbkJ3RDtBQW9CeEQsOEJBcEJ3RDtBQXFCeEQsd0JBckJ3RDtBQXNCeEQsc0JBdEJ3RDtBQXVCeEQsa0JBdkJ3RDtBQXdCeEQsd0JBeEJ3RDtBQXlCeEQsc0JBekJ3RDtBQTBCeEQsd0JBMUJ3RDtBQTJCeEQsc0JBM0J3RDtBQTRCeEQsb0JBNUJ3RDtBQTZCeEQsNEJBN0J3RDtBQThCeEQsZ0JBOUJ3RDtBQStCeEQsd0JBL0J3RDs7QUFpQ3hEOztBQUVBLGtCQUFVLE9BbkM4QztBQW9DeEQsaUJBQVMsTUFwQytDOztBQXNDeEQ7O0FBRUEsa0NBeEN3RDtBQXlDeEQsc0NBekN3RDtBQTBDeEQsc0NBMUN3RDtBQTJDeEQsc0NBM0N3RDtBQTRDeEQsb0NBNUN3RDtBQTZDeEQsc0NBN0N3RDtBQThDeEQsc0NBOUN3RDtBQStDeEQsd0NBL0N3RDtBQWdEeEQsa0JBaER3RDtBQWlEeEQsa0JBakR3RDtBQWtEeEQ7O0FBbER3RCxLQUEvQyxDQUFiOztBQXNEQTs7QUFFQSxRQUFJLFVBQUosRUFBZ0I7O0FBRVosZUFBTyxPQUFQLEdBQWlCLElBQWpCO0FBRUgsS0FKRCxNQUlPOztBQUVILGVBQU8sSUFBUCxHQUFjLElBQWQ7QUFDSDs7QUFFRDtBQUVDLENBanJoQkQsSSxDQWlyaEJNIiwiZmlsZSI6ImNjeHQuZXM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG5cbk1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAxNyBJZ29yIEtyb2l0b3JcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuXG4qL1xuXG4oZnVuY3Rpb24gKCkge1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBkZXBlbmRlbmNpZXNcblxuY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlICgnY3J5cHRvLWpzJylcbiAgICAsIHFzICAgICAgID0gcmVxdWlyZSAoJ3FzJykgLy8gcXVlcnlzdHJpbmdcbiAgICAvLyAsIHdzICAgICAgID0gcmVxdWlyZSAoJ3dzJykgLy8gd2Vic29ja2V0XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHRoaXMgaXMgdXBkYXRlZCBieSB2c3MuanMgd2hlbiBidWlsZGluZ1xuXG5jb25zdCB2ZXJzaW9uID0gJzEuNi42MydcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gcGxhdGZvcm0gZGV0ZWN0aW9uXG5cbmNvbnN0IGlzTm9kZSAgICAgPSAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgLCBpc0NvbW1vbkpTID0gKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJiAodHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNsYXNzIENDWFRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgICAgICBzdXBlciAobWVzc2FnZSlcbiAgICAgICAgLy8gYSB3b3JrYXJvdW5kIHRvIG1ha2UgYGluc3RhbmNlb2YgQ0NYVEVycm9yYCB3b3JrIGluIEVTNVxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQ0NYVEVycm9yXG4gICAgICAgIHRoaXMuX19wcm90b19fICAgPSBDQ1hURXJyb3IucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG5jbGFzcyBFeGNoYW5nZUVycm9yIGV4dGVuZHMgQ0NYVEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgICAgICBzdXBlciAobWVzc2FnZSlcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IEV4Y2hhbmdlRXJyb3JcbiAgICAgICAgdGhpcy5fX3Byb3RvX18gICA9IEV4Y2hhbmdlRXJyb3IucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG5jbGFzcyBOb3RTdXBwb3J0ZWQgZXh0ZW5kcyBFeGNoYW5nZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZSkge1xuICAgICAgICBzdXBlciAobWVzc2FnZSlcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IE5vdFN1cHBvcnRlZFxuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gTm90U3VwcG9ydGVkLnByb3RvdHlwZVxuICAgICAgICB0aGlzLm1lc3NhZ2UgICAgID0gbWVzc2FnZVxuICAgIH1cbn1cblxuY2xhc3MgQXV0aGVudGljYXRpb25FcnJvciBleHRlbmRzIEV4Y2hhbmdlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yIChtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyIChtZXNzYWdlKVxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQXV0aGVudGljYXRpb25FcnJvclxuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gQXV0aGVudGljYXRpb25FcnJvci5wcm90b3R5cGVcbiAgICAgICAgdGhpcy5tZXNzYWdlICAgICA9IG1lc3NhZ2VcbiAgICB9XG59XG5cbmNsYXNzIEluc3VmZmljaWVudEZ1bmRzIGV4dGVuZHMgRXhjaGFuZ2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIgKG1lc3NhZ2UpXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBJbnN1ZmZpY2llbnRGdW5kc1xuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gSW5zdWZmaWNpZW50RnVuZHMucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfSAgIFxufVxuXG5jbGFzcyBOZXR3b3JrRXJyb3IgZXh0ZW5kcyBDQ1hURXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yIChtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyIChtZXNzYWdlKVxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gTmV0d29ya0Vycm9yXG4gICAgICAgIHRoaXMuX19wcm90b19fICAgPSBOZXR3b3JrRXJyb3IucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG5jbGFzcyBERG9TUHJvdGVjdGlvbiBleHRlbmRzIE5ldHdvcmtFcnJvciB7XG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIgKG1lc3NhZ2UpXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBERG9TUHJvdGVjdGlvblxuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gRERvU1Byb3RlY3Rpb24ucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG5jbGFzcyBSZXF1ZXN0VGltZW91dCBleHRlbmRzIE5ldHdvcmtFcnJvciB7XG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIgKG1lc3NhZ2UpXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBSZXF1ZXN0VGltZW91dFxuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gUmVxdWVzdFRpbWVvdXQucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG5jbGFzcyBFeGNoYW5nZU5vdEF2YWlsYWJsZSBleHRlbmRzIE5ldHdvcmtFcnJvciB7XG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIgKG1lc3NhZ2UpXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBFeGNoYW5nZU5vdEF2YWlsYWJsZVxuICAgICAgICB0aGlzLl9fcHJvdG9fXyAgID0gRXhjaGFuZ2VOb3RBdmFpbGFibGUucHJvdG90eXBlXG4gICAgICAgIHRoaXMubWVzc2FnZSAgICAgPSBtZXNzYWdlXG4gICAgfVxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyB1dGlsaXR5IGhlbHBlcnNcblxuY29uc3Qgc2xlZXAgPSBtcyA9PiBuZXcgUHJvbWlzZSAocmVzb2x2ZSA9PiBzZXRUaW1lb3V0IChyZXNvbHZlLCBtcykpO1xuXG5jb25zdCBkZWNpbWFsID0gZmxvYXQgPT4gcGFyc2VGbG9hdCAoZmxvYXQpLnRvU3RyaW5nICgpXG5cbmNvbnN0IHRpbWVvdXQgPSAobXMsIHByb21pc2UpID0+XG4gICAgICAgIFByb21pc2UucmFjZSAoW1xuICAgICAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgICAgIHNsZWVwIChtcykudGhlbiAoKCkgPT4geyB0aHJvdyBuZXcgUmVxdWVzdFRpbWVvdXQgKCdyZXF1ZXN0IHRpbWVkIG91dCcpIH0pXG4gICAgICAgIF0pXG5cbmNvbnN0IGNhcGl0YWxpemUgPSBzdHJpbmcgPT4gc3RyaW5nLmxlbmd0aCA/IChzdHJpbmcuY2hhckF0ICgwKS50b1VwcGVyQ2FzZSAoKSArIHN0cmluZy5zbGljZSAoMSkpIDogc3RyaW5nXG5cbmNvbnN0IGtleXNvcnQgPSBvYmplY3QgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9XG4gICAgT2JqZWN0LmtleXMgKG9iamVjdCkuc29ydCAoKS5mb3JFYWNoIChrZXkgPT4gcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XSlcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmNvbnN0IGV4dGVuZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge31cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICBPYmplY3Qua2V5cyAoYXJnc1tpXSkuZm9yRWFjaCAoa2V5ID0+XG4gICAgICAgICAgICAgICAgKHJlc3VsdFtrZXldID0gYXJnc1tpXVtrZXldKSlcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmNvbnN0IG9taXQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gZXh0ZW5kIChvYmplY3QpXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbYXJndW1lbnRzW2ldXVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5IChhcmd1bWVudHNbaV0pKVxuICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBhcmd1bWVudHNbaV0ubGVuZ3RoOyBrKyspXG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFthcmd1bWVudHNbaV1ba11dXG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBpbmRleEJ5ID0gKGFycmF5LCBrZXkpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBhcnJheVtpXVxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnRba2V5XSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmVzdWx0W2VsZW1lbnRba2V5XV0gPSBlbGVtZW50XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5jb25zdCBzb3J0QnkgPSAoYXJyYXksIGtleSwgZGVzY2VuZGluZyA9IGZhbHNlKSA9PiB7XG4gICAgZGVzY2VuZGluZyA9IGRlc2NlbmRpbmcgPyAtMSA6IDFcbiAgICByZXR1cm4gYXJyYXkuc29ydCAoKGEsIGIpID0+ICgoYVtrZXldIDwgYltrZXldKSA/IC1kZXNjZW5kaW5nIDogKChhW2tleV0gPiBiW2tleV0pID8gZGVzY2VuZGluZyA6IDApKSlcbn1cblxuY29uc3QgZmxhdHRlbiA9IChhcnJheSwgcmVzdWx0ID0gW10pID0+IHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhcnJheVtpXVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSAodmFsdWUpKSB7XG4gICAgICAgICAgICBmbGF0dGVuICh2YWx1ZSwgcmVzdWx0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHZhbHVlKVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuY29uc3QgdW5pcXVlID0gYXJyYXkgPT4gYXJyYXkuZmlsdGVyICgodmFsdWUsIGluZGV4LCBzZWxmKSA9PiAoc2VsZi5pbmRleE9mICh2YWx1ZSkgPT0gaW5kZXgpKVxuXG5jb25zdCBwbHVjayA9IChhcnJheSwga2V5KSA9PiBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyIChlbGVtZW50ID0+ICh0eXBlb2YgZWxlbWVudFtrZXldICE9ICd1bmRlZmluZWQnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCAoZWxlbWVudCA9PiBlbGVtZW50W2tleV0pXG5cbmNvbnN0IHVybGVuY29kZSA9IG9iamVjdCA9PiBxcy5zdHJpbmdpZnkgKG9iamVjdClcblxuY29uc3Qgc3VtID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhcmdzLmZpbHRlciAoYXJnID0+IHR5cGVvZiBhcmcgIT0gJ3VuZGVmaW5lZCcpXG4gICAgcmV0dXJuIChyZXN1bHQubGVuZ3RoID4gMCkgP1xuICAgICAgICByZXN1bHQucmVkdWNlICgoc3VtLCB2YWx1ZSkgPT4gc3VtICsgdmFsdWUsIDApIDogdW5kZWZpbmVkXG59XG5cbmNvbnN0IG9yZGVyZWQgPSB4ID0+IHggLy8gYSBzdHViIHRvIGtlZXAgYXNzb2Mga2V5cyBpbiBvcmRlciwgaW4gSlMgaXQgZG9lcyBub3RoaW5nLCBpdCdzIG1vc3RseSBmb3IgUHl0aG9uXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGEgY3Jvc3MtcGxhdGZvcm0gRmV0Y2ggQVBJXG5cbmNvbnN0IG5vZGVGZXRjaCAgID0gaXNOb2RlICYmIG1vZHVsZS5yZXF1aXJlICgnbm9kZS1mZXRjaCcpICAgICAgICAgLy8gdXNpbmcgbW9kdWxlLnJlcXVpcmUgdG8gcHJldmVudCBXZWJwYWNrIC8gUmVhY3QgTmF0aXZlIGZyb20gdHJ5aW5nIHRvIGluY2x1ZGUgaXRcbiAgICAsIHdpbmRvd0ZldGNoID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5mZXRjaCkgLy8gbmF0aXZlIEZldGNoIEFQSSAoaW4gbmV3ZXIgYnJvd3NlcnMpXG4gICAgLCB4aHJGZXRjaCAgICA9ICh1cmwsIG9wdGlvbnMsIHZlcmJvc2UgPSBmYWxzZSkgPT4gICAgICAgICAgICAgIC8vIGEgcXVpY2sgYWQtaG9jIHBvbHlmaWxsIChmb3Igb2xkZXIgYnJvd3NlcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcmJvc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICh1cmwsIG9wdGlvbnMpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QgKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4gKG1ldGhvZCwgdXJsLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSAyMDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSAoeGhyLnJlc3BvbnNlVGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBbNDAzLCA0MDQsIC4uLl0uaW5kZXhPZiAoeGhyLnN0YXR1cykgPj0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciAobWV0aG9kLCB1cmwsIHhoci5zdGF0dXMsIHhoci5yZXNwb25zZVRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaGVhZGVycyAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaGVhZGVyIGluIG9wdGlvbnMuaGVhZGVycylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyIChoZWFkZXIsIG9wdGlvbnMuaGVhZGVyc1toZWFkZXJdKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQgKG9wdGlvbnMuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbmNvbnN0IGZldGNoID0gbm9kZUZldGNoIHx8IHdpbmRvd0ZldGNoIHx8IHhockZldGNoXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIHN0cmluZyDihpDihpIgYmluYXJ5IOKGkOKGkiBiYXNlNjQgY29udmVyc2lvbiByb3V0aW5lc1xuXG5jb25zdCBzdHJpbmdUb0JpbmFyeSA9IHN0ciA9PiB7XG4gICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkgKHN0ci5sZW5ndGgpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHsgYXJyW2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7IH1cbiAgICByZXR1cm4gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUgKGFycilcbn1cblxuY29uc3Qgc3RyaW5nVG9CYXNlNjQgPSBzdHJpbmcgPT4gQ3J5cHRvSlMuZW5jLkxhdGluMS5wYXJzZSAoc3RyaW5nKS50b1N0cmluZyAoQ3J5cHRvSlMuZW5jLkJhc2U2NClcbiAgICAsIHV0ZjE2VG9CYXNlNjQgID0gc3RyaW5nID0+IENyeXB0b0pTLmVuYy5VdGYxNiAucGFyc2UgKHN0cmluZykudG9TdHJpbmcgKENyeXB0b0pTLmVuYy5CYXNlNjQpXG4gICAgLCBiYXNlNjRUb0JpbmFyeSA9IHN0cmluZyA9PiBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlIChzdHJpbmcpXG4gICAgLCBiYXNlNjRUb1N0cmluZyA9IHN0cmluZyA9PiBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlIChzdHJpbmcpLnRvU3RyaW5nIChDcnlwdG9KUy5lbmMuVXRmOClcbiAgICAsIGJpbmFyeVRvU3RyaW5nID0gc3RyaW5nID0+IHN0cmluZ1xuXG5jb25zdCBiaW5hcnlDb25jYXQgPSAoLi4uYXJncykgPT4gYXJncy5yZWR1Y2UgKChhLCBiKSA9PiBhLmNvbmNhdCAoYikpXG5cbi8vIHVybC1zYWZlLWJhc2U2NCB3aXRob3V0IGVxdWFscyBzaWducywgd2l0aCArIHJlcGxhY2VkIGJ5IC0gYW5kIHNsYXNoZXMgcmVwbGFjZWQgYnkgdW5kZXJzY29yZXNcbmNvbnN0IHVybGVuY29kZUJhc2U2NCA9IGJhc2U2NHN0cmluZyA9PiBiYXNlNjRzdHJpbmcucmVwbGFjZSAoL1s9XSskLywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UgKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlICgvXFwvL2csICdfJylcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gY3J5cHRvZ3JhcGh5XG5cbmNvbnN0IGhhc2ggPSAocmVxdWVzdCwgaGFzaCA9ICdtZDUnLCBkaWdlc3QgPSAnaGV4JykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IENyeXB0b0pTW2hhc2gudG9VcHBlckNhc2UgKCldIChyZXF1ZXN0KVxuICAgIHJldHVybiAoZGlnZXN0ID09ICdiaW5hcnknKSA/IHJlc3VsdCA6IHJlc3VsdC50b1N0cmluZyAoQ3J5cHRvSlMuZW5jW2NhcGl0YWxpemUgKGRpZ2VzdCldKVxufVxuXG5jb25zdCBobWFjID0gKHJlcXVlc3QsIHNlY3JldCwgaGFzaCA9ICdzaGEyNTYnLCBkaWdlc3QgPSAnaGV4JykgPT4ge1xuICAgIGNvbnN0IGVuY29kaW5nID0gKGRpZ2VzdCA9PSAnYmluYXJ5JykgPyAnTGF0aW4xJyA6IGNhcGl0YWxpemUgKGRpZ2VzdClcbiAgICByZXR1cm4gQ3J5cHRvSlNbJ0htYWMnICsgaGFzaC50b1VwcGVyQ2FzZSAoKV0gKHJlcXVlc3QsIHNlY3JldCkudG9TdHJpbmcgKENyeXB0b0pTLmVuY1tjYXBpdGFsaXplIChlbmNvZGluZyldKVxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBhIEpTT04gV2ViIFRva2VuIGF1dGhlbnRpY2F0aW9uIG1ldGhvZFxuXG5jb25zdCBqd3QgPSAocmVxdWVzdCwgc2VjcmV0LCBhbGcgPSAnSFMyNTYnLCBoYXNoID0gJ3NoYTI1NicpID0+IHtcbiAgICBjb25zdCBlbmNvZGVkSGVhZGVyID0gdXJsZW5jb2RlQmFzZTY0IChzdHJpbmdUb0Jhc2U2NCAoSlNPTi5zdHJpbmdpZnkgKHsgJ2FsZyc6IGFsZywgJ3R5cCc6ICdKV1QnIH0pKSlcbiAgICAgICAgLCBlbmNvZGVkRGF0YSA9IHVybGVuY29kZUJhc2U2NCAoc3RyaW5nVG9CYXNlNjQgKEpTT04uc3RyaW5naWZ5IChyZXF1ZXN0KSkpXG4gICAgICAgICwgdG9rZW4gPSBbIGVuY29kZWRIZWFkZXIsIGVuY29kZWREYXRhIF0uam9pbiAoJy4nKVxuICAgICAgICAsIHNpZ25hdHVyZSA9IHVybGVuY29kZUJhc2U2NCAodXRmMTZUb0Jhc2U2NCAoaG1hYyAodG9rZW4sIHNlY3JldCwgaGFzaCwgJ3V0ZjE2JykpKVxuICAgIHJldHVybiBbIHRva2VuLCBzaWduYXR1cmUgXS5qb2luICgnLicpXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIGNvbnN0IFdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJylcbi8vIGNvbnN0IHdzID0gbmV3IFdlYlNvY2tldCAodGhpcy51cmxzWyd3ZWJzb2NrZXQnXSlcbi8vIHdzLm9uICgnb3BlbicsIGZ1bmN0aW9uIG9wZW4gKCkge1xuLy8gICAgIGNvbnNvbGUubG9nICgnY29ubmVjdGVkJylcbi8vICAgICAvLyB3cy5zZW5kIChEYXRlLm5vdyAoKSlcbi8vIH0pXG4vLyB3cy5vbiAoJ2Nsb3NlJywgZnVuY3Rpb24gY2xvc2UgKCkge1xuLy8gICAgIGNvbnNvbGUubG9nICgnZGlzY29ubmVjdGVkJylcbi8vIH0pO1xuLy8gd3Mub24gKCdtZXNzYWdlJywgZnVuY3Rpb24gaW5jb21pbmcgKGRhdGEpIHtcbi8vICAgICAvLyBjb25zb2xlLmxvZyAoYFJvdW5kdHJpcCB0aW1lOiAke0RhdGUubm93KCkgLSBkYXRhfSBtc2ApO1xuLy8gICAgIHNldFRpbWVvdXQgKGZ1bmN0aW9uIHRpbWVvdXQgKCkge1xuLy8gICAgICAgICB3cy5zZW5kIChEYXRlLm5vdyAoKSlcbi8vICAgICB9LCA1MDApXG4vLyB9KVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyB0aGUgYmFzZSBjbGFzc1xuXG5jb25zdCBFeGNoYW5nZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcblxuICAgIHRoaXMuaGFzaCA9IGhhc2hcbiAgICB0aGlzLmhtYWMgPSBobWFjXG4gICAgdGhpcy5qd3QgPSBqd3QgLy8gSlNPTiBXZWIgVG9rZW5cbiAgICB0aGlzLmJpbmFyeUNvbmNhdCA9IGJpbmFyeUNvbmNhdFxuICAgIHRoaXMuc3RyaW5nVG9CaW5hcnkgPSBzdHJpbmdUb0JpbmFyeVxuICAgIHRoaXMuc3RyaW5nVG9CYXNlNjQgPSBzdHJpbmdUb0Jhc2U2NFxuICAgIHRoaXMuYmFzZTY0VG9CaW5hcnkgPSBiYXNlNjRUb0JpbmFyeVxuICAgIHRoaXMuYmFzZTY0VG9TdHJpbmcgPSBiYXNlNjRUb1N0cmluZ1xuICAgIHRoaXMuYmluYXJ5VG9TdHJpbmcgPSBiaW5hcnlUb1N0cmluZ1xuICAgIHRoaXMudXRmMTZUb0Jhc2U2NCA9IHV0ZjE2VG9CYXNlNjRcbiAgICB0aGlzLnVybGVuY29kZSA9IHVybGVuY29kZVxuICAgIHRoaXMuZW5jb2RlVVJJQ29tcG9uZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgdGhpcy5vbWl0ID0gb21pdFxuICAgIHRoaXMucGx1Y2sgPSBwbHVja1xuICAgIHRoaXMudW5pcXVlID0gdW5pcXVlXG4gICAgdGhpcy5leHRlbmQgPSBleHRlbmRcbiAgICB0aGlzLmZsYXR0ZW4gPSBmbGF0dGVuXG4gICAgdGhpcy5pbmRleEJ5ID0gaW5kZXhCeVxuICAgIHRoaXMuc29ydEJ5ID0gc29ydEJ5XG4gICAgdGhpcy5rZXlzb3J0ID0ga2V5c29ydFxuICAgIHRoaXMuZGVjaW1hbCA9IGRlY2ltYWxcbiAgICB0aGlzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplXG4gICAgdGhpcy5qc29uID0gSlNPTi5zdHJpbmdpZnlcbiAgICB0aGlzLnN1bSA9IHN1bVxuICAgIHRoaXMub3JkZXJlZCA9IG9yZGVyZWRcblxuICAgIHRoaXMuZW5jb2RlID0gc3RyaW5nID0+IHN0cmluZ1xuICAgIHRoaXMuZGVjb2RlID0gc3RyaW5nID0+IHN0cmluZ1xuXG4gICAgaWYgKGlzTm9kZSlcbiAgICAgICAgdGhpcy5ub2RlVmVyc2lvbiA9IHByb2Nlc3MudmVyc2lvbi5tYXRjaCAoL1xcZCtcXC5cXGQrLlxcZCsvKSBbMF1cblxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcmRlcnMgPSB7fVxuICAgICAgICB0aGlzLnRyYWRlcyA9IHt9XG4gICAgICAgIGlmICh0aGlzLmFwaSlcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lUkVTVEFQSSAodGhpcy5hcGksICdyZXF1ZXN0Jyk7XG4gICAgICAgIGlmICh0aGlzLm1hcmtldHMpXG4gICAgICAgICAgICB0aGlzLnNldE1hcmtldHMgKHRoaXMubWFya2V0cyk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZpbmVSRVNUQVBJID0gZnVuY3Rpb24gKGFwaSwgbWV0aG9kTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIE9iamVjdC5rZXlzIChhcGkpLmZvckVhY2ggKHR5cGUgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMgKGFwaVt0eXBlXSkuZm9yRWFjaCAoaHR0cE1ldGhvZCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHVybHMgPSBhcGlbdHlwZV1baHR0cE1ldGhvZF1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IHVybHNbaV0udHJpbSAoKVxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXRQYXRoID0gdXJsLnNwbGl0ICgvW15hLXpBLVowLTldLylcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdXBwZXJjYXNlTWV0aG9kICA9IGh0dHBNZXRob2QudG9VcHBlckNhc2UgKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxvd2VyY2FzZU1ldGhvZCAgPSBodHRwTWV0aG9kLnRvTG93ZXJDYXNlICgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBjYW1lbGNhc2VNZXRob2QgID0gY2FwaXRhbGl6ZSAobG93ZXJjYXNlTWV0aG9kKVxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FtZWxjYXNlU3VmZml4ICA9IHNwbGl0UGF0aC5tYXAgKGNhcGl0YWxpemUpLmpvaW4gKCcnKVxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5kZXJzY29yZVN1ZmZpeCA9IHNwbGl0UGF0aC5tYXAgKHggPT4geC50cmltICgpLnRvTG93ZXJDYXNlICgpKS5maWx0ZXIgKHggPT4geC5sZW5ndGggPiAwKS5qb2luICgnXycpXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbWVsY2FzZVN1ZmZpeC5pbmRleE9mIChjYW1lbGNhc2VNZXRob2QpID09PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZWxjYXNlU3VmZml4ID0gY2FtZWxjYXNlU3VmZml4LnNsaWNlIChjYW1lbGNhc2VNZXRob2QubGVuZ3RoKVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1bmRlcnNjb3JlU3VmZml4LmluZGV4T2YgKGxvd2VyY2FzZU1ldGhvZCkgPT09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmRlcnNjb3JlU3VmZml4ID0gdW5kZXJzY29yZVN1ZmZpeC5zbGljZSAobG93ZXJjYXNlTWV0aG9kLmxlbmd0aClcblxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FtZWxjYXNlICA9IHR5cGUgKyBjYW1lbGNhc2VNZXRob2QgKyBjYXBpdGFsaXplIChjYW1lbGNhc2VTdWZmaXgpXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bmRlcnNjb3JlID0gdHlwZSArICdfJyArIGxvd2VyY2FzZU1ldGhvZCArICdfJyArIHVuZGVyc2NvcmVTdWZmaXhcblxuICAgICAgICAgICAgICAgICAgICBpZiAoJ3N1ZmZpeGVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ2NhbWVsY2FzZScgaW4gb3B0aW9uc1snc3VmZml4ZXMnXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW1lbGNhc2UgKz0gb3B0aW9uc1snc3VmZml4ZXMnXVsnY2FtZWxjYXNlJ11cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgndW5kZXJzY29yZScgaW4gb3B0aW9ucy5zdWZmaXhlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcnNjb3JlICs9IG9wdGlvbnNbJ3N1ZmZpeGVzJ11bJ3VuZGVyc2NvcmUnXVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCd1bmRlcnNjb3JlX3N1ZmZpeCcgaW4gb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyc2NvcmUgKz0gb3B0aW9ucy51bmRlcnNjb3JlU3VmZml4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ2NhbWVsY2FzZV9zdWZmaXgnIGluIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lbGNhc2UgKz0gb3B0aW9ucy5jYW1lbGNhc2VTdWZmaXg7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnRpYWwgPSBhc3luYyBwYXJhbXMgPT4gdGhpc1ttZXRob2ROYW1lXSAodXJsLCB0eXBlLCB1cHBlcmNhc2VNZXRob2QsIHBhcmFtcylcblxuICAgICAgICAgICAgICAgICAgICB0aGlzW2NhbWVsY2FzZV0gID0gcGFydGlhbFxuICAgICAgICAgICAgICAgICAgICB0aGlzW3VuZGVyc2NvcmVdID0gcGFydGlhbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIC8vIHRoaXMuaW5pdGlhbGl6ZVN0cmVhbWluZ0FQSSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgdGhpcy53cyA9IG5ldyBXZWJTb2NrZXQgKHRoaXMudXJsc1snd2Vic29ja2V0J10pXG4gICAgLy8gICAgIHdzLm9uICgnb3BlbicsIGZ1bmN0aW9uIG9wZW4gKCkge1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2cgKCdjb25uZWN0ZWQnKVxuICAgIC8vICAgICAgICAgLy8gd3Muc2VuZCAoRGF0ZS5ub3cgKCkpXG4gICAgLy8gICAgIH0pXG4gICAgLy8gICAgIHdzLm9uICgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyAoJ2Rpc2Nvbm5lY3RlZCcpXG4gICAgLy8gICAgIH0pXG4gICAgLy8gICAgIHdzLm9uICgnbWVzc2FnZScsIGZ1bmN0aW9uIGluY29taW5nIChkYXRhKSB7XG4gICAgLy8gICAgICAgICAvLyBjb25zb2xlLmxvZyAoYFJvdW5kdHJpcCB0aW1lOiAke0RhdGUubm93KCkgLSBkYXRhfSBtc2ApO1xuICAgIC8vICAgICAgICAgc2V0VGltZW91dCAoZnVuY3Rpb24gdGltZW91dCAoKSB7XG4gICAgLy8gICAgICAgICAgICAgd3Muc2VuZCAoRGF0ZS5ub3cgKCkpXG4gICAgLy8gICAgICAgICB9LCA1MDApXG4gICAgLy8gICAgIH0pXG4gICAgLy8gfSxcblxuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbiAodXJsLCBtZXRob2QgPSAnR0VUJywgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuXG4gICAgICAgIGlmIChpc05vZGUgJiYgdGhpcy51c2VyQWdlbnQpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMudXNlckFnZW50ID09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBleHRlbmQgKHsgJ1VzZXItQWdlbnQnOiB0aGlzLnVzZXJBZ2VudCB9LCBoZWFkZXJzKVxuICAgICAgICAgICAgZWxzZSBpZiAoKHR5cGVvZiB0aGlzLnVzZXJBZ2VudCA9PSAnb2JqZWN0JykgJiYgKCdVc2VyLUFnZW50JyBpbiB0aGlzLnVzZXJBZ2VudCkpXG4gICAgICAgICAgICAgICAgaGVhZGVycyA9IGV4dGVuZCAodGhpcy51c2VyQWdlbnQsIGhlYWRlcnMpXG5cbiAgICAgICAgaWYgKHRoaXMucHJveHkubGVuZ3RoKVxuICAgICAgICAgICAgaGVhZGVycyA9IGV4dGVuZCAoeyAnT3JpZ2luJzogJyonIH0sIGhlYWRlcnMpXG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7ICdtZXRob2QnOiBtZXRob2QsICdoZWFkZXJzJzogaGVhZGVycywgJ2JvZHknOiBib2R5IH1cblxuICAgICAgICB1cmwgPSB0aGlzLnByb3h5ICsgdXJsXG5cbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nICh0aGlzLmlkLCBtZXRob2QsIHVybCwgXCJcXG5SZXF1ZXN0OlxcblwiLCBvcHRpb25zKVxuXG4gICAgICAgIHJldHVybiB0aW1lb3V0ICh0aGlzLnRpbWVvdXQsIGZldGNoICh1cmwsIG9wdGlvbnMpXG4gICAgICAgICAgICAuY2F0Y2ggKGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlTm90QXZhaWxhYmxlIChbIHRoaXMuaWQsIG1ldGhvZCwgdXJsLCBlLnR5cGUsIGUubWVzc2FnZSBdLmpvaW4gKCcgJykpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGUgLy8gcmV0aHJvdyBhbGwgdW5rbm93biBlcnJvcnNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbiAocmVzcG9uc2UgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCAoKS50aGVuICh0ZXh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmVyYm9zZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICh0aGlzLmlkLCBtZXRob2QsIHVybCwgdGV4dCA/IChcIlxcblJlc3BvbnNlOlxcblwiICsgdGV4dCkgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXNwb25zZS5zdGF0dXMgPj0gMjAwKSAmJiAocmVzcG9uc2Uuc3RhdHVzIDw9IDMwMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dFxuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRldGFpbHMgPSB0ZXh0XG4gICAgICAgICAgICAgICAgICAgIGlmIChbIDQyOSBdLmluZGV4T2YgKHJlc3BvbnNlLnN0YXR1cykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBERG9TUHJvdGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsgNDA0LCA0MDksIDQyMiwgNTAwLCA1MDEsIDUwMiwgNTIwLCA1MjEsIDUyMiwgNTI1IF0uaW5kZXhPZiAocmVzcG9uc2Uuc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IEV4Y2hhbmdlTm90QXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoWyA0MDAsIDQwMywgNDA1LCA1MDMgXS5pbmRleE9mIChyZXNwb25zZS5zdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZG9zUHJvdGVjdGlvbiA9IHRleHQubWF0Y2ggKC9jbG91ZGZsYXJlfGluY2Fwc3VsYS9pKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRkb3NQcm90ZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBERG9TUHJvdGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IEV4Y2hhbmdlTm90QXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlscyA9IHRleHQgKyAnIChwb3NzaWJsZSByZWFzb25zOiAnICsgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZCBBUEkga2V5cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYWQgb3Igb2xkIG5vbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2V4Y2hhbmdlIGlzIGRvd24gb3Igb2ZmbGluZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbiBtYWludGVuYW5jZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdERG9TIHByb3RlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmF0ZS1saW1pdGluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luICgnLCAnKSArICcpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFsgNDA4LCA1MDQgXS5pbmRleE9mIChyZXNwb25zZS5zdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gUmVxdWVzdFRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChbIDQwMSwgNTExIF0uaW5kZXhPZiAocmVzcG9uc2Uuc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IEF1dGhlbnRpY2F0aW9uRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gRXhjaGFuZ2VFcnJvclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvciAoWyB0aGlzLmlkLCBtZXRob2QsIHVybCwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0LCBkZXRhaWxzIF0uam9pbiAoJyAnKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSkudGhlbiAocmVzcG9uc2UgPT4gdGhpcy5oYW5kbGVSZXNwb25zZSAodXJsLCBtZXRob2QsIGhlYWRlcnMsIHJlc3BvbnNlKSkpXG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVSZXNwb25zZSA9IGZ1bmN0aW9uICh1cmwsIG1ldGhvZCA9ICdHRVQnLCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgYm9keSAhPSAnc3RyaW5nJykgfHwgKGJvZHkubGVuZ3RoIDwgMikpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKFt0aGlzLmlkLCBtZXRob2QsIHVybCwgJ3JldHVybmVkIGVtcHR5IHJlc3BvbnNlJ10uam9pbiAoJyAnKSlcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlIChib2R5KVxuXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcblxuICAgICAgICAgICAgbGV0IG1haW50ZW5hbmNlID0gYm9keS5tYXRjaCAoL29mZmxpbmV8YnVzeXxyZXRyeXx3YWl0fHVuYXZhaWxhYmxlfG1haW50YWlufG1haW50ZW5hbmNlfG1haW50ZW5hbmNpbmcvaSlcbiAgICAgICAgICAgIGxldCBkZG9zUHJvdGVjdGlvbiA9IGJvZHkubWF0Y2ggKC9jbG91ZGZsYXJlfGluY2Fwc3VsYXxvdmVybG9hZC9pKVxuXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBFeGNoYW5nZU5vdEF2YWlsYWJsZVxuICAgICAgICAgICAgICAgIGxldCBkZXRhaWxzID0gJ25vdCBhY2Nlc3NpYmxlIGZyb20gdGhpcyBsb2NhdGlvbiBhdCB0aGUgbW9tZW50J1xuICAgICAgICAgICAgICAgIGlmIChtYWludGVuYW5jZSlcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlscyA9ICdvZmZsaW5lLCBvbiBtYWludGVuYW5jZSBvciB1bnJlYWNoYWJsZSBmcm9tIHRoaXMgbG9jYXRpb24gYXQgdGhlIG1vbWVudCdcbiAgICAgICAgICAgICAgICBpZiAoZGRvc1Byb3RlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gRERvU1Byb3RlY3Rpb25cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3IgKFsgdGhpcy5pZCwgbWV0aG9kLCB1cmwsIGRldGFpbHMgXS5qb2luICgnICcpKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy52ZXJib3NlKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nICh0aGlzLmlkLCBtZXRob2QsIHVybCwgJ2Vycm9yJywgZSwgXCJyZXNwb25zZSBib2R5OlxcbidcIiArIGJvZHkgKyBcIidcIilcblxuICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRNYXJrZXRzID0gZnVuY3Rpb24gKG1hcmtldHMpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgKG1hcmtldHMpXG4gICAgICAgIHRoaXMubWFya2V0cyA9IGluZGV4QnkgKHZhbHVlcywgJ3N5bWJvbCcpXG4gICAgICAgIHRoaXMubWFya2V0c0J5SWQgPSBpbmRleEJ5IChtYXJrZXRzLCAnaWQnKVxuICAgICAgICB0aGlzLm1hcmtldHNfYnlfaWQgPSB0aGlzLm1hcmtldHNCeUlkXG4gICAgICAgIHRoaXMuc3ltYm9scyA9IE9iamVjdC5rZXlzICh0aGlzLm1hcmtldHMpLnNvcnQgKClcbiAgICAgICAgdGhpcy5pZHMgPSBPYmplY3Qua2V5cyAodGhpcy5tYXJrZXRzX2J5X2lkKS5zb3J0ICgpXG4gICAgICAgIGxldCBiYXNlID0gdGhpcy5wbHVjayAodmFsdWVzLmZpbHRlciAobWFya2V0ID0+ICdiYXNlJyBpbiBtYXJrZXQpLCAnYmFzZScpXG4gICAgICAgIGxldCBxdW90ZSA9IHRoaXMucGx1Y2sgKHZhbHVlcy5maWx0ZXIgKG1hcmtldCA9PiAncXVvdGUnIGluIG1hcmtldCksICdxdW90ZScpXG4gICAgICAgIHRoaXMuY3VycmVuY2llcyA9IHRoaXMudW5pcXVlIChiYXNlLmNvbmNhdCAocXVvdGUpKVxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXRzXG4gICAgfVxuXG4gICAgdGhpcy5sb2FkTWFya2V0cyA9IGZ1bmN0aW9uIChyZWxvYWQgPSBmYWxzZSkge1xuICAgICAgICBpZiAoIXJlbG9hZCAmJiB0aGlzLm1hcmtldHMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZXRzQnlJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVzb2x2ZSAodGhpcy5zZXRNYXJrZXRzICh0aGlzLm1hcmtldHMpKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVzb2x2ZSAodGhpcy5tYXJrZXRzKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaE1hcmtldHMgKCkudGhlbiAobWFya2V0cyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRNYXJrZXRzIChtYXJrZXRzKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hUaWNrZXJzID0gZnVuY3Rpb24gKHN5bWJvbHMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZCAodGhpcy5pZCArICcgQVBJIGRvZXMgbm90IGFsbG93IHRvIGZldGNoIGFsbCB0aWNrZXJzIGF0IG9uY2Ugd2l0aCBhIHNpbmdsZSBjYWxsIHRvIGZldGNoX3RpY2tlcnMgKCkgZm9yIG5vdycpXG4gICAgfVxuXG4gICAgdGhpcy5mZXRjaE1hcmtldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSAoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVzb2x2ZSAodGhpcy5tYXJrZXRzKSlcbiAgICB9XG5cbiAgICB0aGlzLmZldGNoT3JkZXJTdGF0dXMgPSBhc3luYyBmdW5jdGlvbiAoaWQsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgb3JkZXIgPSBhd2FpdCBmZXRjaE9yZGVyIChpZClcbiAgICAgICAgcmV0dXJuIG9yZGVyWydzdGF0dXMnXVxuICAgIH1cblxuICAgIHRoaXMuYWNjb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdmcmVlJzogMC4wLFxuICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAndG90YWwnOiAwLjAsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSA9IGZ1bmN0aW9uIChjdXJyZW5jeSkge1xuICAgICAgICBpZiAoIXRoaXMuc3Vic3RpdHV0ZUNvbW1vbkN1cnJlbmN5Q29kZXMpXG4gICAgICAgICAgICByZXR1cm4gY3VycmVuY3lcbiAgICAgICAgaWYgKGN1cnJlbmN5ID09ICdYQlQnKVxuICAgICAgICAgICAgcmV0dXJuICdCVEMnXG4gICAgICAgIGlmIChjdXJyZW5jeSA9PSAnQkNDJylcbiAgICAgICAgICAgIHJldHVybiAnQkNIJ1xuICAgICAgICBpZiAoY3VycmVuY3kgPT0gJ0RSSycpXG4gICAgICAgICAgICByZXR1cm4gJ0RBU0gnXG4gICAgICAgIHJldHVybiBjdXJyZW5jeVxuICAgIH1cblxuICAgIHRoaXMubWFya2V0ID0gZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gKCgodHlwZW9mIHN5bWJvbCA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgICAgICAodHlwZW9mIHRoaXMubWFya2V0cyAhPSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICh0eXBlb2YgdGhpcy5tYXJrZXRzW3N5bWJvbF0gIT0gJ3VuZGVmaW5lZCcpKSA/XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXRzW3N5bWJvbF0gOlxuICAgICAgICAgICAgICAgIHN5bWJvbClcbiAgICB9XG5cbiAgICB0aGlzLm1hcmtldF9pZCA9XG4gICAgdGhpcy5tYXJrZXRJZCA9IGZ1bmN0aW9uIChzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2V0IChzeW1ib2wpLmlkIHx8IHN5bWJvbFxuICAgIH1cblxuICAgIHRoaXMubWFya2V0X2lkcyA9XG4gICAgdGhpcy5tYXJrZXRJZHMgPSBmdW5jdGlvbiAoc3ltYm9scykge1xuICAgICAgICByZXR1cm4gc3ltYm9scy5tYXAgKHN5bWJvbCA9PiB0aGlzLm1hcmtldElkKHN5bWJvbCkpO1xuICAgIH1cblxuICAgIHRoaXMuc3ltYm9sID0gZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXQgKHN5bWJvbCkuc3ltYm9sIHx8IHN5bWJvbFxuICAgIH1cblxuICAgIHRoaXMuZXh0cmFjdF9wYXJhbXMgPVxuICAgIHRoaXMuZXh0cmFjdFBhcmFtcyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgdmFyIHJlID0gL3soW2EtekEtWjAtOV9dKz8pfS9nXG4gICAgICAgIHZhciBtYXRjaGVzID0gW11cbiAgICAgICAgbGV0IG1hdGNoXG4gICAgICAgIHdoaWxlIChtYXRjaCA9IHJlLmV4ZWMgKHN0cmluZykpXG4gICAgICAgICAgICBtYXRjaGVzLnB1c2ggKG1hdGNoWzFdKVxuICAgICAgICByZXR1cm4gbWF0Y2hlc1xuICAgIH1cblxuICAgIHRoaXMuaW1wbG9kZV9wYXJhbXMgPVxuICAgIHRoaXMuaW1wbG9kZVBhcmFtcyA9IGZ1bmN0aW9uIChzdHJpbmcsIHBhcmFtcykge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwYXJhbXMpXG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSAoJ3snICsgcHJvcGVydHkgKyAnfScsIHBhcmFtc1twcm9wZXJ0eV0pXG4gICAgICAgIHJldHVybiBzdHJpbmdcbiAgICB9XG5cbiAgICB0aGlzLnVybCA9IGZ1bmN0aW9uIChwYXRoLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSlcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgcmVzdWx0ICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSlcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIHRoaXMucGFyc2VCaWRBc2sgPSBmdW5jdGlvbiAoYmlkYXNrLCBwcmljZUtleSA9IDAsIGFtb3VudEtleSA9IDEpIHtcbiAgICAgICAgbGV0IHByaWNlID0gcGFyc2VGbG9hdCAoYmlkYXNrW3ByaWNlS2V5XSlcbiAgICAgICAgbGV0IGFtb3VudCA9IHBhcnNlRmxvYXQgKGJpZGFza1thbW91bnRLZXldKVxuICAgICAgICByZXR1cm4gWyBwcmljZSwgYW1vdW50IF1cbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlQmlkQXNrcyA9IGZ1bmN0aW9uIChiaWRhc2tzLCBwcmljZUtleSA9IDAsIGFtb3VudEtleSA9IDEpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMgKGJpZGFza3MpLm1hcCAoYmlkYXNrID0+IHRoaXMucGFyc2VCaWRBc2sgKGJpZGFzaywgcHJpY2VLZXksIGFtb3VudEtleSkpXG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZU9yZGVyQm9vayA9IGZ1bmN0aW9uIChvcmRlcmJvb2ssIHRpbWVzdGFtcCA9IHVuZGVmaW5lZCwgYmlkc0tleSA9ICdiaWRzJywgYXNrc0tleSA9ICdhc2tzJywgcHJpY2VLZXkgPSAwLCBhbW91bnRLZXkgPSAxKSB7XG4gICAgICAgIHRpbWVzdGFtcCA9IHRpbWVzdGFtcCB8fCB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdiaWRzJzogdGhpcy5wYXJzZUJpZEFza3MgKG9yZGVyYm9va1tiaWRzS2V5XSwgcHJpY2VLZXksIGFtb3VudEtleSksXG4gICAgICAgICAgICAnYXNrcyc6IHRoaXMucGFyc2VCaWRBc2tzIChvcmRlcmJvb2tbYXNrc0tleV0sIHByaWNlS2V5LCBhbW91bnRLZXkpLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgdGhpcy5wYXJzZVRyYWRlcyA9IGZ1bmN0aW9uICh0cmFkZXMsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyAodHJhZGVzKS5tYXAgKHRyYWRlID0+IHRoaXMucGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkpXG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZU9yZGVycyA9IGZ1bmN0aW9uIChvcmRlcnMsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyAob3JkZXJzKS5tYXAgKG9yZGVyID0+IHRoaXMucGFyc2VPcmRlciAob3JkZXIsIG1hcmtldCkpXG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZU9ITENWID0gZnVuY3Rpb24gKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gb2hsY3ZcbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlT0hMQ1ZzID0gZnVuY3Rpb24gKG9obGN2cywgbWFya2V0ID0gdW5kZWZpbmVkLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMgKG9obGN2cykubWFwIChvaGxjdiA9PiB0aGlzLnBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQsIHRpbWVmcmFtZSwgc2luY2UsIGxpbWl0KSlcbiAgICB9XG4gICAgXG4gICAgdGhpcy5jcmVhdGVMaW1pdEJ1eU9yZGVyID0gZnVuY3Rpb24gKG1hcmtldCwgYW1vdW50LCBwcmljZSwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlT3JkZXIgIChtYXJrZXQsICdsaW1pdCcsICdidXknLCBhbW91bnQsIHByaWNlLCBwYXJhbXMpXG4gICAgfVxuXG4gICAgdGhpcy5jcmVhdGVMaW1pdFNlbGxPcmRlciA9IGZ1bmN0aW9uIChtYXJrZXQsIGFtb3VudCwgcHJpY2UsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU9yZGVyIChtYXJrZXQsICdsaW1pdCcsICdzZWxsJywgYW1vdW50LCBwcmljZSwgcGFyYW1zKVxuICAgIH1cblxuICAgIHRoaXMuY3JlYXRlTWFya2V0QnV5T3JkZXIgPSBmdW5jdGlvbiAobWFya2V0LCBhbW91bnQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU9yZGVyIChtYXJrZXQsICdtYXJrZXQnLCAnYnV5JywgYW1vdW50LCB1bmRlZmluZWQsIHBhcmFtcylcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZU1hcmtldFNlbGxPcmRlciA9IGZ1bmN0aW9uIChtYXJrZXQsIGFtb3VudCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlT3JkZXIgKG1hcmtldCwgJ21hcmtldCcsICdzZWxsJywgYW1vdW50LCB1bmRlZmluZWQsIHBhcmFtcylcbiAgICB9XG5cbiAgICB0aGlzLmlzbzg2MDEgICAgICAgICA9IHRpbWVzdGFtcCA9PiBuZXcgRGF0ZSAodGltZXN0YW1wKS50b0lTT1N0cmluZyAoKVxuICAgIHRoaXMucGFyc2U4NjAxICAgICAgID0gRGF0ZS5wYXJzZVxuICAgIHRoaXMuc2Vjb25kcyAgICAgICAgID0gKCkgPT4gTWF0aC5mbG9vciAodGhpcy5taWxsaXNlY29uZHMgKCkgLyAxMDAwKVxuICAgIHRoaXMubWljcm9zZWNvbmRzICAgID0gKCkgPT4gTWF0aC5mbG9vciAodGhpcy5taWxsaXNlY29uZHMgKCkgKiAxMDAwKVxuICAgIHRoaXMubWlsbGlzZWNvbmRzICAgID0gRGF0ZS5ub3dcbiAgICB0aGlzLm5vbmNlICAgICAgICAgICA9IHRoaXMuc2Vjb25kc1xuICAgIHRoaXMuaWQgICAgICAgICAgICAgID0gdW5kZWZpbmVkXG4gICAgdGhpcy5yYXRlTGltaXQgICAgICAgPSAyMDAwICAvLyBtaWxsaXNlY29uZHMgPSBzZWNvbmRzICogMTAwMFxuICAgIHRoaXMudGltZW91dCAgICAgICAgID0gMTAwMDAgLy8gbWlsbGlzZWNvbmRzID0gc2Vjb25kcyAqIDEwMDBcbiAgICB0aGlzLnZlcmJvc2UgICAgICAgICA9IGZhbHNlXG4gICAgdGhpcy51c2VyQWdlbnQgICAgICAgPSBmYWxzZVxuICAgIHRoaXMudHdvZmEgICAgICAgICAgID0gZmFsc2UgLy8gdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvblxuICAgIHRoaXMuc3Vic3RpdHV0ZUNvbW1vbkN1cnJlbmN5Q29kZXMgPSB0cnVlXG4gICAgdGhpcy50aW1lZnJhbWVzICAgICAgPSB1bmRlZmluZWRcbiAgICB0aGlzLmhhc0ZldGNoVGlja2VycyA9IGZhbHNlXG4gICAgdGhpcy5oYXNGZXRjaE9ITENWICAgPSBmYWxzZVxuICAgIHRoaXMuaGFzRGVwb3NpdCAgICAgID0gZmFsc2VcbiAgICB0aGlzLmhhc1dpdGhkcmF3ICAgICA9IGZhbHNlXG4gICAgXG4gICAgdGhpcy55eXl5bW1kZGhobW1zcyA9IHRpbWVzdGFtcCA9PiB7XG4gICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUgKHRpbWVzdGFtcClcbiAgICAgICAgbGV0IHl5eXkgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyICgpXG4gICAgICAgIGxldCBNTSA9IGRhdGUuZ2V0VVRDTW9udGggKClcbiAgICAgICAgbGV0IGRkID0gZGF0ZS5nZXRVVENEYXkgKClcbiAgICAgICAgbGV0IGhoID0gZGF0ZS5nZXRVVENIb3VycyAoKVxuICAgICAgICBsZXQgbW0gPSBkYXRlLmdldFVUQ01pbnV0ZXMgKClcbiAgICAgICAgbGV0IHNzID0gZGF0ZS5nZXRVVENTZWNvbmRzICgpXG4gICAgICAgIE1NID0gTU0gPCAxMCA/ICgnMCcgKyBNTSkgOiBNTVxuICAgICAgICBkZCA9IGRkIDwgMTAgPyAoJzAnICsgZGQpIDogZGRcbiAgICAgICAgaGggPSBoaCA8IDEwID8gKCcwJyArIGhoKSA6IGhoXG4gICAgICAgIG1tID0gbW0gPCAxMCA/ICgnMCcgKyBtbSkgOiBtbVxuICAgICAgICBzcyA9IHNzIDwgMTAgPyAoJzAnICsgc3MpIDogc3NcbiAgICAgICAgcmV0dXJuIHl5eXkgKyAnLScgKyBNTSArICctJyArIGRkICsgJyAnICsgaGggKyAnOicgKyBtbSArICc6JyArIHNzXG4gICAgfVxuXG4gICAgaWYgKGlzTm9kZSlcbiAgICAgICAgdGhpcy51c2VyQWdlbnQgPSB7XG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdjY3h0LycgKyB2ZXJzaW9uICtcbiAgICAgICAgICAgICAgICAnICgraHR0cHM6Ly9naXRodWIuY29tL2tyb2l0b3IvY2N4dCknICtcbiAgICAgICAgICAgICAgICAnIE5vZGUuanMvJyArIHRoaXMubm9kZVZlcnNpb24gKyAnIChKYXZhU2NyaXB0KSdcbiAgICAgICAgfVxuXG4gICAgLy8gcHJlcGVuZGVkIHRvIFVSTCwgbGlrZSBodHRwczovL3Byb3h5LmNvbS9odHRwczovL2V4Y2hhbmdlLmNvbS9hcGkuLi5cbiAgICB0aGlzLnByb3h5ID0gJydcblxuICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZylcbiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBjb25maWdbcHJvcGVydHldXG5cbiAgICB0aGlzLmFjY291bnQgICAgICAgICAgICAgICAgICA9IHRoaXMuYWNjb3VudFxuICAgIHRoaXMuZmV0Y2hfYmFsYW5jZSAgICAgICAgICAgID0gdGhpcy5mZXRjaEJhbGFuY2VcbiAgICB0aGlzLmZldGNoX29yZGVyX2Jvb2sgICAgICAgICA9IHRoaXMuZmV0Y2hPcmRlckJvb2tcbiAgICB0aGlzLmZldGNoX3RpY2tlcnMgICAgICAgICAgICA9IHRoaXMuZmV0Y2hUaWNrZXJzXG4gICAgdGhpcy5mZXRjaF90aWNrZXIgICAgICAgICAgICAgPSB0aGlzLmZldGNoVGlja2VyXG4gICAgdGhpcy5mZXRjaF90cmFkZXMgICAgICAgICAgICAgPSB0aGlzLmZldGNoVHJhZGVzXG4gICAgdGhpcy5mZXRjaF9vcmRlciAgICAgICAgICAgICAgPSB0aGlzLmZldGNoT3JkZXJcbiAgICB0aGlzLmZldGNoX29yZGVyX3N0YXR1cyAgICAgICA9IHRoaXMuZmV0Y2hPcmRlclN0YXR1c1xuICAgIHRoaXMuZmV0Y2hfbWFya2V0cyAgICAgICAgICAgID0gdGhpcy5mZXRjaE1hcmtldHNcbiAgICB0aGlzLmxvYWRfbWFya2V0cyAgICAgICAgICAgICA9IHRoaXMubG9hZE1hcmtldHNcbiAgICB0aGlzLnNldF9tYXJrZXRzICAgICAgICAgICAgICA9IHRoaXMuc2V0TWFya2V0c1xuICAgIHRoaXMucGFyc2VfYmlkYXNrICAgICAgICAgICAgID0gdGhpcy5wYXJzZUJpZEFza1xuICAgIHRoaXMucGFyc2VfYmlkYXNrcyAgICAgICAgICAgID0gdGhpcy5wYXJzZUJpZEFza3NcbiAgICB0aGlzLnBhcnNlX29yZGVyX2Jvb2sgICAgICAgICA9IHRoaXMucGFyc2VPcmRlckJvb2tcbiAgICB0aGlzLnBhcnNlX3RyYWRlcyAgICAgICAgICAgICA9IHRoaXMucGFyc2VUcmFkZXNcbiAgICB0aGlzLnBhcnNlX29yZGVycyAgICAgICAgICAgICA9IHRoaXMucGFyc2VPcmRlcnNcbiAgICB0aGlzLnBhcnNlX29obGN2ICAgICAgICAgICAgICA9IHRoaXMucGFyc2VPSExDVlxuICAgIHRoaXMucGFyc2Vfb2hsY3ZzICAgICAgICAgICAgID0gdGhpcy5wYXJzZU9ITENWc1xuICAgIHRoaXMuY3JlYXRlX2xpbWl0X2J1eV9vcmRlciAgID0gdGhpcy5jcmVhdGVMaW1pdEJ1eU9yZGVyXG4gICAgdGhpcy5jcmVhdGVfbGltaXRfc2VsbF9vcmRlciAgPSB0aGlzLmNyZWF0ZUxpbWl0QnV5T3JkZXJcbiAgICB0aGlzLmNyZWF0ZV9tYXJrZXRfYnV5X29yZGVyICA9IHRoaXMuY3JlYXRlTGltaXRCdXlPcmRlclxuICAgIHRoaXMuY3JlYXRlX21hcmtldF9zZWxsX29yZGVyID0gdGhpcy5jcmVhdGVMaW1pdEJ1eU9yZGVyXG4gICAgdGhpcy5jcmVhdGVfb3JkZXIgICAgICAgICAgICAgPSB0aGlzLmNyZWF0ZU9yZGVyXG5cbiAgICB0aGlzLmluaXQgKClcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG52YXIgXzFicm9rZXIgPSB7XG5cbiAgICAnaWQnOiAnXzFicm9rZXInLFxuICAgICduYW1lJzogJzFCcm9rZXInLFxuICAgICdjb3VudHJpZXMnOiAnVVMnLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICd2ZXJzaW9uJzogJ3YyJyxcbiAgICAnaGFzRmV0Y2hPSExDVic6IHRydWUsXG4gICAgJ3RpbWVmcmFtZXMnOiB7XG4gICAgICAgICcxbSc6ICc2MCcsXG4gICAgICAgICcxNW0nOiAnOTAwJyxcbiAgICAgICAgJzFoJzogJzM2MDAnLFxuICAgICAgICAnMWQnOiAnODY0MDAnLFxuICAgIH0sXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjYwMjEtNDIwYmQ5ZmMtNWVjYi0xMWU3LThlZDYtNTZkMDA4MWVmZWQyLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly8xYnJva2VyLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vMWJyb2tlci5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vMWJyb2tlci5jb20vP2M9ZW4vY29udGVudC9hcGktZG9jdW1lbnRhdGlvbicsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ21hcmtldC9iYXJzJyxcbiAgICAgICAgICAgICAgICAnbWFya2V0L2NhdGVnb3JpZXMnLFxuICAgICAgICAgICAgICAgICdtYXJrZXQvZGV0YWlscycsXG4gICAgICAgICAgICAgICAgJ21hcmtldC9saXN0JyxcbiAgICAgICAgICAgICAgICAnbWFya2V0L3F1b3RlcycsXG4gICAgICAgICAgICAgICAgJ21hcmtldC90aWNrcycsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgJ29yZGVyL29wZW4nLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbi9jbG9zZScsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL2Nsb3NlX2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL2VkaXQnLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbi9oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAncG9zaXRpb24vb3BlbicsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL3NoYXJlZC9nZXQnLFxuICAgICAgICAgICAgICAgICdzb2NpYWwvcHJvZmlsZV9zdGF0aXN0aWNzJyxcbiAgICAgICAgICAgICAgICAnc29jaWFsL3Byb2ZpbGVfdHJhZGVzJyxcbiAgICAgICAgICAgICAgICAndXNlci9iaXRjb2luX2RlcG9zaXRfYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZGV0YWlscycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvb3ZlcnZpZXcnLFxuICAgICAgICAgICAgICAgICd1c2VyL3F1b3RhX3N0YXR1cycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvdHJhbnNhY3Rpb25fbG9nJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQ2F0ZWdvcmllcyAoKSB7XG4gICAgICAgIGxldCBjYXRlZ29yaWVzID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0TWFya2V0Q2F0ZWdvcmllcyAoKTtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXNbJ3Jlc3BvbnNlJ107XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCB0aGlzXyA9IHRoaXM7IC8vIHdvcmthcm91bmQgZm9yIEJhYmVsIGJ1ZyAobm90IHBhc3NpbmcgYHRoaXNgIHRvIF9yZWN1cnNpdmUoKSBjYWxsKVxuICAgICAgICBsZXQgY2F0ZWdvcmllcyA9IGF3YWl0IHRoaXMuZmV0Y2hDYXRlZ29yaWVzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY2F0ZWdvcmllcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGNhdGVnb3J5ID0gY2F0ZWdvcmllc1tjXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpc18ucHJpdmF0ZUdldE1hcmtldExpc3QgKHtcbiAgICAgICAgICAgICAgICAnY2F0ZWdvcnknOiBjYXRlZ29yeS50b0xvd2VyQ2FzZSAoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzWydyZXNwb25zZSddLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ3Jlc3BvbnNlJ11bcF07XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgICAgICBsZXQgc3ltYm9sID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCBiYXNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGxldCBxdW90ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAoKGNhdGVnb3J5ID09ICdGT1JFWCcpIHx8IChjYXRlZ29yeSA9PSAnQ1JZUFRPJykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbWFya2V0WyduYW1lJ107XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJ0cyA9IHN5bWJvbC5zcGxpdCAoJy8nKTtcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBxdW90ZSA9IHBhcnRzWzFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgcXVvdGUgPSAnVVNEJztcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiYXNlID0gdGhpc18uY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgICAgICBxdW90ZSA9IHRoaXNfLmNvbW1vbkN1cnJlbmN5Q29kZSAocXVvdGUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0VXNlck92ZXJ2aWV3ICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBiYWxhbmNlWydyZXNwb25zZSddO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvdGFsID0gcGFyc2VGbG9hdCAocmVzcG9uc2VbJ2JhbGFuY2UnXSk7XG4gICAgICAgIHJlc3VsdFsnQlRDJ11bJ2ZyZWUnXSA9IHRvdGFsO1xuICAgICAgICByZXN1bHRbJ0JUQyddWyd0b3RhbCddID0gdG90YWw7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldE1hcmtldFF1b3RlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2xzJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsncmVzcG9uc2UnXVswXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxIChvcmRlcmJvb2tbJ3VwZGF0ZWQnXSk7XG4gICAgICAgIGxldCBiaWRQcmljZSA9IHBhcnNlRmxvYXQgKG9yZGVyYm9va1snYmlkJ10pO1xuICAgICAgICBsZXQgYXNrUHJpY2UgPSBwYXJzZUZsb2F0IChvcmRlcmJvb2tbJ2FzayddKTtcbiAgICAgICAgbGV0IGJpZCA9IFsgYmlkUHJpY2UsIHVuZGVmaW5lZCBdO1xuICAgICAgICBsZXQgYXNrID0gWyBhc2tQcmljZSwgdW5kZWZpbmVkIF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2JpZHMnOiBbIGJpZCBdLFxuICAgICAgICAgICAgJ2Fza3MnOiBbIGFzayBdLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBmZXRjaFRyYWRlcyAoKSBtZXRob2Qgbm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRNYXJrZXRCYXJzICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdyZXNvbHV0aW9uJzogNjAsXG4gICAgICAgICAgICAnbGltaXQnOiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMuZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSByZXN1bHRbJ3Jlc3BvbnNlJ11bMF07XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodGlja2VyWydkYXRlJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbCddKSxcbiAgICAgICAgICAgICdiaWQnOiBvcmRlcmJvb2tbJ2JpZHMnXVswXVswXSxcbiAgICAgICAgICAgICdhc2snOiBvcmRlcmJvb2tbJ2Fza3MnXVswXVswXSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ28nXSksXG4gICAgICAgICAgICAnY2xvc2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2MnXSksXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5wYXJzZTg2MDEgKG9obGN2WydkYXRlJ10pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbJ28nXSksXG4gICAgICAgICAgICBwYXJzZUZsb2F0IChvaGxjdlsnaCddKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WydsJ10pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbJ2MnXSksXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT0hMQ1YgKHN5bWJvbCwgdGltZWZyYW1lID0gJzFtJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdyZXNvbHV0aW9uJzogdGhpcy50aW1lZnJhbWVzW3RpbWVmcmFtZV0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzaW5jZSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ2RhdGVfc3RhcnQnXSA9IHRoaXMuaXNvODYwMSAoc2luY2UpOyAvLyB0aGV5IGFsc28gc3VwcG9ydCBkYXRlX2VuZFxuICAgICAgICBpZiAobGltaXQpXG4gICAgICAgICAgICByZXF1ZXN0WydsaW1pdCddID0gbGltaXQ7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRNYXJrZXRCYXJzICh0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT0hMQ1ZzIChyZXN1bHRbJ3Jlc3BvbnNlJ10sIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdtYXJnaW4nOiBhbW91bnQsXG4gICAgICAgICAgICAnZGlyZWN0aW9uJzogKHNpZGUgPT0gJ3NlbGwnKSA/ICdzaG9ydCcgOiAnbG9uZycsXG4gICAgICAgICAgICAnbGV2ZXJhZ2UnOiAxLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKVxuICAgICAgICAgICAgb3JkZXJbJ3ByaWNlJ10gPSBwcmljZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgb3JkZXJbJ3R5cGUnXSArPSAnX21hcmtldCc7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRPcmRlckNyZWF0ZSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzdWx0LFxuICAgICAgICAgICAgJ2lkJzogcmVzdWx0WydyZXNwb25zZSddWydvcmRlcl9pZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RPcmRlckNhbmNlbCAoeyAnb3JkZXJfaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXRoaXMuYXBpS2V5KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGFwaUtleSBmb3IgYWxsIHJlcXVlc3RzJyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcGF0aCArICcucGhwJztcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5leHRlbmQgKHsgJ3Rva2VuJzogdGhpcy5hcGlLZXkgfSwgcGFyYW1zKTtcbiAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kKTtcbiAgICAgICAgaWYgKCd3YXJuaW5nJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnd2FybmluZyddKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBXYXJuaW5nOiAnICsgcmVzcG9uc2VbJ3dhcm5pbmdfbWVzc2FnZSddKTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ2Vycm9yJ10pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIEVycm9yOiAnICsgcmVzcG9uc2VbJ2Vycm9yX2NvZGUnXSArIHJlc3BvbnNlWydlcnJvcl9tZXNzYWdlJ10pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY3J5cHRvY2FwaXRhbCA9IHtcblxuICAgICdpZCc6ICdjcnlwdG9jYXBpdGFsJyxcbiAgICAnbmFtZSc6ICdDcnlwdG8gQ2FwaXRhbCcsXG4gICAgJ2NvbW1lbnQnOiAnQ3J5cHRvIENhcGl0YWwgQVBJJyxcbiAgICAnY291bnRyaWVzJzogJ1BBJywgLy8gUGFuYW1hXG4gICAgJ2hhc0ZldGNoT0hMQ1YnOiB0cnVlLFxuICAgICdoYXNXaXRoZHJhdyc6IHRydWUsXG4gICAgJ3RpbWVmcmFtZXMnOiB7XG4gICAgICAgICcxZCc6ICcxeWVhcicsXG4gICAgfSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzk5MzE1OC03YTEzZjE0MC02NGFjLTExZTctODljYy1hM2I0NDFmMGIwZjguanBnJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2NyeXB0b2NhcGl0YWwuY28nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jYXAnLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3N0YXRzJyxcbiAgICAgICAgICAgICAgICAnaGlzdG9yaWNhbC1wcmljZXMnLFxuICAgICAgICAgICAgICAgICdvcmRlci1ib29rJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2VzLWFuZC1pbmZvJyxcbiAgICAgICAgICAgICAgICAnb3Blbi1vcmRlcnMnLFxuICAgICAgICAgICAgICAgICd1c2VyLXRyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgJ2J0Yy1kZXBvc2l0LWFkZHJlc3MvZ2V0JyxcbiAgICAgICAgICAgICAgICAnYnRjLWRlcG9zaXQtYWRkcmVzcy9uZXcnLFxuICAgICAgICAgICAgICAgICdkZXBvc2l0cy9nZXQnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2Fscy9nZXQnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMvbmV3JyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL2VkaXQnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMvY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL3N0YXR1cycsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3YWxzL25ldycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlc0FuZEluZm8gKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gcmVzcG9uc2VbJ2JhbGFuY2VzLWFuZC1pbmZvJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZVsnYXZhaWxhYmxlJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnYXZhaWxhYmxlJ11bY3VycmVuY3ldKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiBiYWxhbmNlWydvbl9ob2xkJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnb25faG9sZCddW2N1cnJlbmN5XSk7XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChtYXJrZXQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0T3JkZXJCb29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHJlc3BvbnNlWydvcmRlci1ib29rJ107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZCcsICdhc2snLCAncHJpY2UnLCAnb3JkZXJfYW1vdW50Jyk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRTdGF0cyAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVsnc3RhdHMnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydtYXgnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydtaW4nXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3RfcHJpY2UnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogcGFyc2VGbG9hdCAodGlja2VyWydkYWlseV9jaGFuZ2UnXSksXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3RvdGFsX2J0Y190cmFkZWQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxZCcsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5wYXJzZTg2MDEgKG9obGN2WydkYXRlJ10gKyAnIDAwOjAwOjAwJyksXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBwYXJzZUZsb2F0IChvaGxjdlsncHJpY2UnXSksXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT0hMQ1YgKHN5bWJvbCwgdGltZWZyYW1lID0gJzFkJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0SGlzdG9yaWNhbFByaWNlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICd0aW1lZnJhbWUnOiB0aGlzLnRpbWVmcmFtZXNbdGltZWZyYW1lXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvaGxjdnMgPSB0aGlzLm9taXQgKHJlc3BvbnNlWydoaXN0b3JpY2FsLXByaWNlcyddLCAncmVxdWVzdF9jdXJyZW5jeScpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9ITENWcyAob2hsY3ZzLCBtYXJrZXQsIHRpbWVmcmFtZSwgc2luY2UsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKHRyYWRlWyd0aW1lc3RhbXAnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydtYWtlcl90eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYW5zYWN0aW9ucyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0cmFkZXMgPSB0aGlzLm9taXQgKHJlc3BvbnNlWyd0cmFuc2FjdGlvbnMnXSwgJ3JlcXVlc3RfY3VycmVuY3knKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHRyYWRlcywgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3R5cGUnOiB0eXBlLFxuICAgICAgICAgICAgJ2N1cnJlbmN5JzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsnbGltaXRfcHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVyc05ldyAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzdWx0LFxuICAgICAgICAgICAgJ2lkJzogcmVzdWx0LFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RPcmRlcnNDYW5jZWwgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHdpdGhkcmF3IChjdXJyZW5jeSwgYW1vdW50LCBhZGRyZXNzLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0V2l0aGRyYXdhbHNOZXcgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3knOiBjdXJyZW5jeSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0IChhbW91bnQpLFxuICAgICAgICAgICAgJ2FkZHJlc3MnOiBhZGRyZXNzLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsncmVzdWx0J11bJ3V1aWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodGhpcy5pZCA9PSAnY3J5cHRvY2FwaXRhbCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgaXMgYW4gYWJzdHJhY3QgYmFzZSBBUEkgZm9yIF8xYnRjeGUnKTtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ2FwaV9rZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiB0aGlzLm5vbmNlICgpLFxuICAgICAgICAgICAgfSwgcGFyYW1zKTtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBxdWVyeVsnc2lnbmF0dXJlJ10gPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChyZXF1ZXN0KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9ycycgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgcmVzcG9uc2VbJ2Vycm9ycyddLmxlbmd0aDsgZSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yID0gcmVzcG9uc2VbJ2Vycm9ycyddW2VdO1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoIChlcnJvclsnY29kZSddICsgJzogJyArIGVycm9yWydtZXNzYWdlJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzLmpvaW4gKCcgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIGVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfMWJ0Y3hlID0gZXh0ZW5kIChjcnlwdG9jYXBpdGFsLCB7XG5cbiAgICAnaWQnOiAnXzFidGN4ZScsXG4gICAgJ25hbWUnOiAnMUJUQ1hFJyxcbiAgICAnY291bnRyaWVzJzogJ1BBJywgLy8gUGFuYW1hXG4gICAgJ2NvbW1lbnQnOiAnQ3J5cHRvIENhcGl0YWwgQVBJJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjA0OS0yYjI5NDQwOC01ZWNjLTExZTctODVjYy1hZGFmZjAxM2RjMWEuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovLzFidGN4ZS5jb20vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovLzFidGN4ZS5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vMWJ0Y3hlLmNvbS9hcGktZG9jcy5waHAnLFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnVVNEJywgJ3N5bWJvbCc6ICdCVEMvVVNEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0JUQy9FVVInOiB7ICdpZCc6ICdFVVInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnQlRDL0NOWSc6IHsgJ2lkJzogJ0NOWScsICdzeW1ib2wnOiAnQlRDL0NOWScsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdCVEMvUlVCJzogeyAnaWQnOiAnUlVCJywgJ3N5bWJvbCc6ICdCVEMvUlVCJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1JVQicgfSxcbiAgICAgICAgJ0JUQy9DSEYnOiB7ICdpZCc6ICdDSEYnLCAnc3ltYm9sJzogJ0JUQy9DSEYnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQ0hGJyB9LFxuICAgICAgICAnQlRDL0pQWSc6IHsgJ2lkJzogJ0pQWScsICdzeW1ib2wnOiAnQlRDL0pQWScsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdKUFknIH0sXG4gICAgICAgICdCVEMvR0JQJzogeyAnaWQnOiAnR0JQJywgJ3N5bWJvbCc6ICdCVEMvR0JQJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0dCUCcgfSxcbiAgICAgICAgJ0JUQy9DQUQnOiB7ICdpZCc6ICdDQUQnLCAnc3ltYm9sJzogJ0JUQy9DQUQnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQ0FEJyB9LFxuICAgICAgICAnQlRDL0FVRCc6IHsgJ2lkJzogJ0FVRCcsICdzeW1ib2wnOiAnQlRDL0FVRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdBVUQnIH0sXG4gICAgICAgICdCVEMvQUVEJzogeyAnaWQnOiAnQUVEJywgJ3N5bWJvbCc6ICdCVEMvQUVEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0FFRCcgfSxcbiAgICAgICAgJ0JUQy9CR04nOiB7ICdpZCc6ICdCR04nLCAnc3ltYm9sJzogJ0JUQy9CR04nLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQkdOJyB9LFxuICAgICAgICAnQlRDL0NaSyc6IHsgJ2lkJzogJ0NaSycsICdzeW1ib2wnOiAnQlRDL0NaSycsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDWksnIH0sXG4gICAgICAgICdCVEMvREtLJzogeyAnaWQnOiAnREtLJywgJ3N5bWJvbCc6ICdCVEMvREtLJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0RLSycgfSxcbiAgICAgICAgJ0JUQy9IS0QnOiB7ICdpZCc6ICdIS0QnLCAnc3ltYm9sJzogJ0JUQy9IS0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnSEtEJyB9LFxuICAgICAgICAnQlRDL0hSSyc6IHsgJ2lkJzogJ0hSSycsICdzeW1ib2wnOiAnQlRDL0hSSycsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdIUksnIH0sXG4gICAgICAgICdCVEMvSFVGJzogeyAnaWQnOiAnSFVGJywgJ3N5bWJvbCc6ICdCVEMvSFVGJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0hVRicgfSxcbiAgICAgICAgJ0JUQy9JTFMnOiB7ICdpZCc6ICdJTFMnLCAnc3ltYm9sJzogJ0JUQy9JTFMnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnSUxTJyB9LFxuICAgICAgICAnQlRDL0lOUic6IHsgJ2lkJzogJ0lOUicsICdzeW1ib2wnOiAnQlRDL0lOUicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdJTlInIH0sXG4gICAgICAgICdCVEMvTVVSJzogeyAnaWQnOiAnTVVSJywgJ3N5bWJvbCc6ICdCVEMvTVVSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ01VUicgfSxcbiAgICAgICAgJ0JUQy9NWE4nOiB7ICdpZCc6ICdNWE4nLCAnc3ltYm9sJzogJ0JUQy9NWE4nLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnTVhOJyB9LFxuICAgICAgICAnQlRDL05PSyc6IHsgJ2lkJzogJ05PSycsICdzeW1ib2wnOiAnQlRDL05PSycsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdOT0snIH0sXG4gICAgICAgICdCVEMvTlpEJzogeyAnaWQnOiAnTlpEJywgJ3N5bWJvbCc6ICdCVEMvTlpEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ05aRCcgfSxcbiAgICAgICAgJ0JUQy9QTE4nOiB7ICdpZCc6ICdQTE4nLCAnc3ltYm9sJzogJ0JUQy9QTE4nLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnUExOJyB9LFxuICAgICAgICAnQlRDL1JPTic6IHsgJ2lkJzogJ1JPTicsICdzeW1ib2wnOiAnQlRDL1JPTicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdST04nIH0sXG4gICAgICAgICdCVEMvU0VLJzogeyAnaWQnOiAnU0VLJywgJ3N5bWJvbCc6ICdCVEMvU0VLJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1NFSycgfSxcbiAgICAgICAgJ0JUQy9TR0QnOiB7ICdpZCc6ICdTR0QnLCAnc3ltYm9sJzogJ0JUQy9TR0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnU0dEJyB9LFxuICAgICAgICAnQlRDL1RIQic6IHsgJ2lkJzogJ1RIQicsICdzeW1ib2wnOiAnQlRDL1RIQicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdUSEInIH0sXG4gICAgICAgICdCVEMvVFJZJzogeyAnaWQnOiAnVFJZJywgJ3N5bWJvbCc6ICdCVEMvVFJZJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1RSWScgfSxcbiAgICAgICAgJ0JUQy9aQVInOiB7ICdpZCc6ICdaQVInLCAnc3ltYm9sJzogJ0JUQy9aQVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnWkFSJyB9LFxuICAgIH0sXG59KVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBhbnhwcm8gPSB7XG5cbiAgICAnaWQnOiAnYW54cHJvJyxcbiAgICAnbmFtZSc6ICdBTlhQcm8nLFxuICAgICdjb3VudHJpZXMnOiBbICdKUCcsICdTRycsICdISycsICdOWicgXSxcbiAgICAndmVyc2lvbic6ICcyJyxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAnaGFzV2l0aGRyYXcnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY1OTgzLWZkODU5NWRhLTVlYzktMTFlNy04MmUzLWFkYjNhYjhjMjYxMi5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYW54cHJvLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYW54cHJvLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cDovL2RvY3MuYW54djIuYXBpYXJ5LmlvJyxcbiAgICAgICAgICAgICdodHRwczovL2FueHByby5jb20vcGFnZXMvYXBpJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd7Y3VycmVuY3lfcGFpcn0vbW9uZXkvdGlja2VyJyxcbiAgICAgICAgICAgICAgICAne2N1cnJlbmN5X3BhaXJ9L21vbmV5L2RlcHRoL2Z1bGwnLFxuICAgICAgICAgICAgICAgICd7Y3VycmVuY3lfcGFpcn0vbW9uZXkvdHJhZGUvZmV0Y2gnLCAvLyBkaXNhYmxlZCBieSBBTlhQcm9cbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3tjdXJyZW5jeV9wYWlyfS9tb25leS9vcmRlci9hZGQnLFxuICAgICAgICAgICAgICAgICd7Y3VycmVuY3lfcGFpcn0vbW9uZXkvb3JkZXIvY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAne2N1cnJlbmN5X3BhaXJ9L21vbmV5L29yZGVyL3F1b3RlJyxcbiAgICAgICAgICAgICAgICAne2N1cnJlbmN5X3BhaXJ9L21vbmV5L29yZGVyL3Jlc3VsdCcsXG4gICAgICAgICAgICAgICAgJ3tjdXJyZW5jeV9wYWlyfS9tb25leS9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdtb25leS97Y3VycmVuY3l9L2FkZHJlc3MnLFxuICAgICAgICAgICAgICAgICdtb25leS97Y3VycmVuY3l9L3NlbmRfc2ltcGxlJyxcbiAgICAgICAgICAgICAgICAnbW9uZXkvaW5mbycsXG4gICAgICAgICAgICAgICAgJ21vbmV5L3RyYWRlL2xpc3QnLFxuICAgICAgICAgICAgICAgICdtb25leS93YWxsZXQvaGlzdG9yeScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnQlRDVVNEJywgJ3N5bWJvbCc6ICdCVEMvVVNEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0JUQy9IS0QnOiB7ICdpZCc6ICdCVENIS0QnLCAnc3ltYm9sJzogJ0JUQy9IS0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnSEtEJyB9LFxuICAgICAgICAnQlRDL0VVUic6IHsgJ2lkJzogJ0JUQ0VVUicsICdzeW1ib2wnOiAnQlRDL0VVUicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdFVVInIH0sXG4gICAgICAgICdCVEMvQ0FEJzogeyAnaWQnOiAnQlRDQ0FEJywgJ3N5bWJvbCc6ICdCVEMvQ0FEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0NBRCcgfSxcbiAgICAgICAgJ0JUQy9BVUQnOiB7ICdpZCc6ICdCVENBVUQnLCAnc3ltYm9sJzogJ0JUQy9BVUQnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnQlRDL1NHRCc6IHsgJ2lkJzogJ0JUQ1NHRCcsICdzeW1ib2wnOiAnQlRDL1NHRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdTR0QnIH0sXG4gICAgICAgICdCVEMvSlBZJzogeyAnaWQnOiAnQlRDSlBZJywgJ3N5bWJvbCc6ICdCVEMvSlBZJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0pQWScgfSxcbiAgICAgICAgJ0JUQy9HQlAnOiB7ICdpZCc6ICdCVENHQlAnLCAnc3ltYm9sJzogJ0JUQy9HQlAnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnR0JQJyB9LFxuICAgICAgICAnQlRDL05aRCc6IHsgJ2lkJzogJ0JUQ05aRCcsICdzeW1ib2wnOiAnQlRDL05aRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdOWkQnIH0sXG4gICAgICAgICdMVEMvQlRDJzogeyAnaWQnOiAnTFRDQlRDJywgJ3N5bWJvbCc6ICdMVEMvQlRDJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0RPR0UvQlRDJzogeyAnaWQnOiAnRE9HRUJUQycsICdzeW1ib2wnOiAnRE9HRS9CVEMnLCAnYmFzZSc6ICdET0dFJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ1NUUi9CVEMnOiB7ICdpZCc6ICdTVFJCVEMnLCAnc3ltYm9sJzogJ1NUUi9CVEMnLCAnYmFzZSc6ICdTVFInLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnWFJQL0JUQyc6IHsgJ2lkJzogJ1hSUEJUQycsICdzeW1ib2wnOiAnWFJQL0JUQycsICdiYXNlJzogJ1hSUCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE1vbmV5SW5mbyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2UgPSByZXNwb25zZVsnZGF0YSddO1xuICAgICAgICBsZXQgY3VycmVuY2llcyA9IE9iamVjdC5rZXlzIChiYWxhbmNlWydXYWxsZXRzJ10pO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2UgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBjdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZVsnV2FsbGV0cyddKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdhbGxldCA9IGJhbGFuY2VbJ1dhbGxldHMnXVtjdXJyZW5jeV07XG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAod2FsbGV0WydBdmFpbGFibGVfQmFsYW5jZSddWyd2YWx1ZSddKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gcGFyc2VGbG9hdCAod2FsbGV0WydCYWxhbmNlJ11bJ3ZhbHVlJ10pO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEN1cnJlbmN5UGFpck1vbmV5RGVwdGhGdWxsICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5X3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHJlc3BvbnNlWydkYXRhJ107XG4gICAgICAgIGxldCB0ID0gcGFyc2VJbnQgKG9yZGVyYm9va1snZGF0YVVwZGF0ZVRpbWUnXSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodCAvIDEwMDApO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB0aW1lc3RhbXAsICdiaWRzJywgJ2Fza3MnLCAncHJpY2UnLCAnYW1vdW50Jyk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRDdXJyZW5jeVBhaXJNb25leVRpY2tlciAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5X3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWydkYXRhJ107XG4gICAgICAgIGxldCB0ID0gcGFyc2VJbnQgKHRpY2tlclsnZGF0YVVwZGF0ZVRpbWUnXSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodCAvIDEwMDApO1xuICAgICAgICBsZXQgYmlkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgYXNrID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGlja2VyWydidXknXVsndmFsdWUnXSlcbiAgICAgICAgICAgIGJpZCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J11bJ3ZhbHVlJ10pO1xuICAgICAgICBpZiAodGlja2VyWydzZWxsJ11bJ3ZhbHVlJ10pXG4gICAgICAgICAgICBhc2sgPSBwYXJzZUZsb2F0ICh0aWNrZXJbJ3NlbGwnXVsndmFsdWUnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXVsndmFsdWUnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXVsndmFsdWUnXSksXG4gICAgICAgICAgICAnYmlkJzogYmlkLFxuICAgICAgICAgICAgJ2Fzayc6IGFzayxcbiAgICAgICAgICAgICd2d2FwJzogcGFyc2VGbG9hdCAodGlja2VyWyd2d2FwJ11bJ3ZhbHVlJ10pLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddWyd2YWx1ZSddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogcGFyc2VGbG9hdCAodGlja2VyWydhdmcnXVsndmFsdWUnXSksXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ11bJ3ZhbHVlJ10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgZXJyb3IgPSB0aGlzLmlkICsgJyBzd2l0Y2hlZCBvZmYgdGhlIHRyYWRlcyBlbmRwb2ludCwgc2VlIHRoZWlyIGRvY3MgYXQgaHR0cDovL2RvY3MuYW54djIuYXBpYXJ5LmlvL3JlZmVyZW5jZS9tYXJrZXQtZGF0YS9jdXJyZW5jeXBhaXJtb25leXRyYWRlZmV0Y2gtZGlzYWJsZWQnO1xuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAoZXJyb3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNHZXRDdXJyZW5jeVBhaXJNb25leVRyYWRlRmV0Y2ggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lfcGFpcic6IHRoaXMubWFya2V0SWQgKG1hcmtldCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAobWFya2V0LCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY3VycmVuY3lfcGFpcic6IHRoaXMubWFya2V0SWQgKG1hcmtldCksXG4gICAgICAgICAgICAnYW1vdW50X2ludCc6IHBhcnNlSW50IChhbW91bnQgKiAxMDAwMDAwMDApLCAvLyAxMF44XG4gICAgICAgICAgICAndHlwZSc6IHNpZGUsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2VfaW50J10gPSBwYXJzZUludCAocHJpY2UgKiAxMDAwMDApOyAvLyAxMF41XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0Q3VycmVuY3lQYWlyT3JkZXJBZGQgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3VsdCxcbiAgICAgICAgICAgICdpZCc6IHJlc3VsdFsnZGF0YSddXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdEN1cnJlbmN5UGFpck9yZGVyQ2FuY2VsICh7ICdvaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgd2l0aGRyYXcgKGN1cnJlbmN5LCBhbW91bnQsIGFkZHJlc3MsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RNb25leUN1cnJlbmN5U2VuZFNpbXBsZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IGN1cnJlbmN5LFxuICAgICAgICAgICAgJ2Ftb3VudF9pbnQnOiBwYXJzZUludCAoYW1vdW50ICogMTAwMDAwMDAwKSwgLy8gMTBeOFxuICAgICAgICAgICAgJ2FkZHJlc3MnOiBhZGRyZXNzLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsncmVzdWx0J11bJ3V1aWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbm9uY2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyByZXF1ZXN0O1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBxdWVyeSkpO1xuICAgICAgICAgICAgbGV0IHNlY3JldCA9IHRoaXMuYmFzZTY0VG9CaW5hcnkgKHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gcmVxdWVzdCArIFwiXFwwXCIgKyBib2R5O1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ1Jlc3QtS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1Jlc3QtU2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCBzZWNyZXQsICdzaGE1MTInLCAnYmFzZTY0JyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdyZXN1bHQnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydyZXN1bHQnXSA9PSAnc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaW5hbmNlID0ge1xuXG4gICAgJ2lkJzogJ2JpbmFuY2UnLFxuICAgICduYW1lJzogJ0JpbmFuY2UnLFxuICAgICdjb3VudHJpZXMnOiAnQ04nLCAvLyBDaGluYVxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd2ZXJzaW9uJzogJ3YxJyxcbiAgICAnaGFzRmV0Y2hPSExDVic6IHRydWUsXG4gICAgJ3RpbWVmcmFtZXMnOiB7XG4gICAgICAgICcxbSc6ICcxbScsXG4gICAgICAgICczbSc6ICczbScsXG4gICAgICAgICc1bSc6ICc1bScsXG4gICAgICAgICcxNW0nOiAnMTVtJyxcbiAgICAgICAgJzMwbSc6ICczMG0nLFxuICAgICAgICAnMWgnOiAnMWgnLFxuICAgICAgICAnMmgnOiAnMmgnLFxuICAgICAgICAnNGgnOiAnNGgnLFxuICAgICAgICAnNmgnOiAnNmgnLFxuICAgICAgICAnOGgnOiAnOGgnLFxuICAgICAgICAnMTJoJzogJzEyaCcsXG4gICAgICAgICcxZCc6ICcxZCcsXG4gICAgICAgICczZCc6ICczZCcsXG4gICAgICAgICcxdyc6ICcxdycsXG4gICAgICAgICcxTSc6ICcxTScsXG4gICAgfSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yOTYwNDAyMC1kNTQ4M2NkYy04N2VlLTExZTctOTRjNy1kMWE4ZDkxNjkyOTMuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5iaW5hbmNlLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJpbmFuY2UuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy5iaW5hbmNlLmNvbS9yZXN0YXBpcHViLmh0bWwnLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3BpbmcnLFxuICAgICAgICAgICAgICAgICd0aW1lJyxcbiAgICAgICAgICAgICAgICAnZGVwdGgnLFxuICAgICAgICAgICAgICAgICdhZ2dUcmFkZXMnLFxuICAgICAgICAgICAgICAgICdrbGluZXMnLFxuICAgICAgICAgICAgICAgICd0aWNrZXIvMjRocicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ29yZGVyJyxcbiAgICAgICAgICAgICAgICAnb3Blbk9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2FsbE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2FjY291bnQnLFxuICAgICAgICAgICAgICAgICdteVRyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ29yZGVyJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvdGVzdCcsXG4gICAgICAgICAgICAgICAgJ3VzZXJEYXRhU3RyZWFtJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncHV0JzogW1xuICAgICAgICAgICAgICAgICd1c2VyRGF0YVN0cmVhbSdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ3VzZXJEYXRhU3RyZWFtJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JOQi9CVEMnOiB7ICdpZCc6ICdCTkJCVEMnLCAnc3ltYm9sJzogJ0JOQi9CVEMnLCAnYmFzZSc6ICdCTkInLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnTkVPL0JUQyc6IHsgJ2lkJzogJ05FT0JUQycsICdzeW1ib2wnOiAnTkVPL0JUQycsICdiYXNlJzogJ05FTycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFVEgvQlRDJzogeyAnaWQnOiAnRVRIQlRDJywgJ3N5bWJvbCc6ICdFVEgvQlRDJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0hTUi9CVEMnOiB7ICdpZCc6ICdIU1JCVEMnLCAnc3ltYm9sJzogJ0hTUi9CVEMnLCAnYmFzZSc6ICdIU1InLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ0xUQ0JUQycsICdzeW1ib2wnOiAnTFRDL0JUQycsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdHQVMvQlRDJzogeyAnaWQnOiAnR0FTQlRDJywgJ3N5bWJvbCc6ICdHQVMvQlRDJywgJ2Jhc2UnOiAnR0FTJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0hDQy9CVEMnOiB7ICdpZCc6ICdIQ0NCVEMnLCAnc3ltYm9sJzogJ0hDQy9CVEMnLCAnYmFzZSc6ICdIQ0MnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnQkNIL0JUQyc6IHsgJ2lkJzogJ0JDQ0JUQycsICdzeW1ib2wnOiAnQkNIL0JUQycsICdiYXNlJzogJ0JDSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdCTkIvRVRIJzogeyAnaWQnOiAnQk5CRVRIJywgJ3N5bWJvbCc6ICdCTkIvRVRIJywgJ2Jhc2UnOiAnQk5CJywgJ3F1b3RlJzogJ0VUSCcgfSxcbiAgICAgICAgJ0ROVC9FVEgnOiB7ICdpZCc6ICdETlRFVEgnLCAnc3ltYm9sJzogJ0ROVC9FVEgnLCAnYmFzZSc6ICdETlQnLCAncXVvdGUnOiAnRVRIJyB9LFxuICAgICAgICAnT0FYL0VUSCc6IHsgJ2lkJzogJ09BWEVUSCcsICdzeW1ib2wnOiAnT0FYL0VUSCcsICdiYXNlJzogJ09BWCcsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdNQ08vRVRIJzogeyAnaWQnOiAnTUNPRVRIJywgJ3N5bWJvbCc6ICdNQ08vRVRIJywgJ2Jhc2UnOiAnTUNPJywgJ3F1b3RlJzogJ0VUSCcgfSxcbiAgICAgICAgJ0JUTS9FVEgnOiB7ICdpZCc6ICdCVE1FVEgnLCAnc3ltYm9sJzogJ0JUTS9FVEgnLCAnYmFzZSc6ICdCVE0nLCAncXVvdGUnOiAnRVRIJyB9LFxuICAgICAgICAnU05UL0VUSCc6IHsgJ2lkJzogJ1NOVEVUSCcsICdzeW1ib2wnOiAnU05UL0VUSCcsICdiYXNlJzogJ1NOVCcsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdFT1MvRVRIJzogeyAnaWQnOiAnRU9TRVRIJywgJ3N5bWJvbCc6ICdFT1MvRVRIJywgJ2Jhc2UnOiAnRU9TJywgJ3F1b3RlJzogJ0VUSCcgfSxcbiAgICAgICAgJ0JOVC9FVEgnOiB7ICdpZCc6ICdCTlRFVEgnLCAnc3ltYm9sJzogJ0JOVC9FVEgnLCAnYmFzZSc6ICdCTlQnLCAncXVvdGUnOiAnRVRIJyB9LFxuICAgICAgICAnSUNOL0VUSCc6IHsgJ2lkJzogJ0lDTkVUSCcsICdzeW1ib2wnOiAnSUNOL0VUSCcsICdiYXNlJzogJ0lDTicsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdCVEMvVVNEVCc6IHsgJ2lkJzogJ0JUQ1VTRFQnLCAnc3ltYm9sJzogJ0JUQy9VU0RUJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRFQnIH0sXG4gICAgICAgICdFVEgvVVNEVCc6IHsgJ2lkJzogJ0VUSFVTRFQnLCAnc3ltYm9sJzogJ0VUSC9VU0RUJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ1VTRFQnIH0sXG4gICAgICAgICdRVFVNL0VUSCc6IHsgJ2lkJzogJ1FUVU1FVEgnLCAnc3ltYm9sJzogJ1FUVU0vRVRIJywgJ2Jhc2UnOiAnUVRVTScsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QWNjb3VudCAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsnYmFsYW5jZXMnXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWxhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tpXTtcbiAgICAgICAgICAgIGxldCBhc3NldCA9IGJhbGFuY2VbJ2Fzc2V0J107XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAoYXNzZXQpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydmcmVlJ10pLFxuICAgICAgICAgICAgICAgICd1c2VkJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnbG9ja2VkJ10pLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IDAuMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0RGVwdGggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ2xpbWl0JzogMTAwLCAvLyBkZWZhdWx0ID0gbWF4aW11bSA9IDEwMFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGlja2VyWydjbG9zZVRpbWUnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaFByaWNlJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93UHJpY2UnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWRQcmljZSddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Fza1ByaWNlJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3dlaWdodGVkQXZnUHJpY2UnXSksXG4gICAgICAgICAgICAnb3Blbic6IHBhcnNlRmxvYXQgKHRpY2tlclsnb3BlblByaWNlJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogcGFyc2VGbG9hdCAodGlja2VyWydwcmV2Q2xvc2VQcmljZSddKSxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0UHJpY2UnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogcGFyc2VGbG9hdCAodGlja2VyWydwcmljZUNoYW5nZVBlcmNlbnQnXSksXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIyNGhyICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZU9ITENWIChvaGxjdiwgbWFya2V0ID0gdW5kZWZpbmVkLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9obGN2WzBdLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbMV0pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbMl0pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbM10pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbNF0pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbNV0pLFxuICAgICAgICBdO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9ITENWIChzeW1ib2wsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnaW50ZXJ2YWwnOiB0aGlzLnRpbWVmcmFtZXNbdGltZWZyYW1lXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdFsnbGltaXQnXSA9IChsaW1pdCkgPyBsaW1pdCA6IDUwMDsgLy8gZGVmYXVsdCA9PSBtYXggPT0gNTAwXG4gICAgICAgIGlmIChzaW5jZSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ3N0YXJ0VGltZSddID0gc2luY2U7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0S2xpbmVzICh0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT0hMQ1ZzIChyZXNwb25zZSwgbWFya2V0LCB0aW1lZnJhbWUsIHNpbmNlLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcEZpZWxkID0gKCdUJyBpbiB0cmFkZSkgPyAnVCcgOiAndGltZSc7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVt0aW1lc3RhbXBGaWVsZF07XG4gICAgICAgIGxldCBwcmljZUZpZWxkID0gKCdwJyBpbiB0cmFkZSkgPyAncCcgOiAncHJpY2UnO1xuICAgICAgICBsZXQgcHJpY2UgPSBwYXJzZUZsb2F0ICh0cmFkZVtwcmljZUZpZWxkXSk7XG4gICAgICAgIGxldCBhbW91bnRGaWVsZCA9ICgncScgaW4gdHJhZGUpID8gJ3EnIDogJ3F0eSc7XG4gICAgICAgIGxldCBhbW91bnQgPSBwYXJzZUZsb2F0ICh0cmFkZVthbW91bnRGaWVsZF0pO1xuICAgICAgICBsZXQgaWRGaWVsZCA9ICgnYScgaW4gdHJhZGUpID8gJ2EnIDogJ2lkJztcbiAgICAgICAgbGV0IGlkID0gdHJhZGVbaWRGaWVsZF0udG9TdHJpbmcgKCk7XG4gICAgICAgIGxldCBzaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ20nIGluIHRyYWRlKSB7XG4gICAgICAgICAgICBzaWRlID0gJ3NlbGwnO1xuICAgICAgICAgICAgaWYgKHRyYWRlWydtJ10pXG4gICAgICAgICAgICAgICAgc2lkZSA9ICdidXknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGlzQnV5ZXIgPSB0cmFkZVsnaXNCdXllciddO1xuICAgICAgICAgICAgbGV0IGlzTWFrZXIgPSB0cmFkZVsnaXNNYWtlciddO1xuICAgICAgICAgICAgaWYgKGlzQnV5ZXIpIHtcbiAgICAgICAgICAgICAgICBzaWRlID0gaXNNYWtlciA/ICdzZWxsJyA6ICdidXknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaWRlID0gaXNNYWtlciA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEFnZ1RyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAvLyAnZnJvbUlkJzogMTIzLCAgICAvLyBJRCB0byBnZXQgYWdncmVnYXRlIHRyYWRlcyBmcm9tIElOQ0xVU0lWRS5cbiAgICAgICAgICAgIC8vICdzdGFydFRpbWUnOiA0NTYsIC8vIFRpbWVzdGFtcCBpbiBtcyB0byBnZXQgYWdncmVnYXRlIHRyYWRlcyBmcm9tIElOQ0xVU0lWRS5cbiAgICAgICAgICAgIC8vICdlbmRUaW1lJzogNzg5LCAgIC8vIFRpbWVzdGFtcCBpbiBtcyB0byBnZXQgYWdncmVnYXRlIHRyYWRlcyB1bnRpbCBJTkNMVVNJVkUuXG4gICAgICAgICAgICAnbGltaXQnOiA1MDAsICAgICAgICAvLyBkZWZhdWx0ID0gbWF4aW11bSA9IDUwMFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZU9yZGVyIChvcmRlciwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICBcInN5bWJvbFwiOiBcIkxUQ0JUQ1wiLFxuICAgICAgICAvLyAgIFwib3JkZXJJZFwiOiAxLFxuICAgICAgICAvLyAgIFwiY2xpZW50T3JkZXJJZFwiOiBcIm15T3JkZXIxXCIsXG4gICAgICAgIC8vICAgXCJwcmljZVwiOiBcIjAuMVwiLFxuICAgICAgICAvLyAgIFwib3JpZ1F0eVwiOiBcIjEuMFwiLFxuICAgICAgICAvLyAgIFwiZXhlY3V0ZWRRdHlcIjogXCIwLjBcIixcbiAgICAgICAgLy8gICBcInN0YXR1c1wiOiBcIk5FV1wiLFxuICAgICAgICAvLyAgIFwidGltZUluRm9yY2VcIjogXCJHVENcIixcbiAgICAgICAgLy8gICBcInR5cGVcIjogXCJMSU1JVFwiLFxuICAgICAgICAvLyAgIFwic2lkZVwiOiBcIkJVWVwiLFxuICAgICAgICAvLyAgIFwic3RvcFByaWNlXCI6IFwiMC4wXCIsXG4gICAgICAgIC8vICAgXCJpY2ViZXJnUXR5XCI6IFwiMC4wXCIsXG4gICAgICAgIC8vICAgXCJ0aW1lXCI6IDE0OTk4MjczMTk1NTlcbiAgICAgICAgLy8gfVxuICAgICAgICB0aHJvdyBuZXcgTm90U3VwcG9ydGVkICh0aGlzLmlkICsgJyBwYXJzZU9yZGVyIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAncXVhbnRpdHknOiAnJWYnLnNwcmludGYgKGFtb3VudCksXG4gICAgICAgICAgICAncHJpY2UnOiAnJWYnLnNwcmludGYgKHByaWNlKSxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgICd0aW1lSW5Gb3JjZSc6ICdHVEMnLCAvLyBHb29kIFRvIENhbmNlbFxuICAgICAgICAgICAgLy8gJ3RpbWVJbkZvcmNlJzogJ0lPQycsIC8vIEltbWVkaWF0ZSBPciBDYW5jZWxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVyICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydvcmRlcklkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgc3ltYm9sID0gKCdzeW1ib2wnIGluIHBhcmFtcyk7XG4gICAgICAgIGlmICghc3ltYm9sKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGZldGNoT3JkZXIgcmVxdWlyZXMgYSBzeW1ib2wgcGFyYW0nKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRPcmRlciAodGhpcy5leHRlbmQgKHBhcmFtcywge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdvcmRlcklkJzogaWQudG9TdHJpbmcgKCksXG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlciAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJzICgpIHtcbiAgICAgICAgLy8gc3ltYm9sICBTVFJJTkcgIFlFU1xuICAgICAgICAvLyBvcmRlcklkIExPTkcgICAgTk9cbiAgICAgICAgLy8gbGltaXQgICBJTlQgTk8gIERlZmF1bHQgNTAwOyBtYXggNTAwLlxuICAgICAgICAvLyByZWN2V2luZG93ICBMT05HICAgIE5PXG4gICAgICAgIC8vIHRpbWVzdGFtcCAgIExPTkcgICAgWUVTXG4gICAgICAgIC8vIElmIG9yZGVySWQgaXMgc2V0LCBpdCB3aWxsIGdldCBvcmRlcnMgPj0gdGhhdCBvcmRlcklkLiBPdGhlcndpc2UgbW9zdCByZWNlbnQgb3JkZXJzIGFyZSByZXR1cm5lZC5cbiAgICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZCAodGhpcy5pZCArICcgZmV0Y2hPcmRlcnMgbm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9wZW5PcmRlcnMgKHN5bWJvbCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYgKCFzeW1ib2wpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgZmV0Y2hPcGVuT3JkZXJzIHJlcXVpcmVzIGEgc3ltYm9sIHBhcmFtJyk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0T3Blbk9yZGVycyAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE9yZGVyQ2FuY2VsICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ29yZGVySWQnOiBwYXJzZUludCAoaWQpLFxuICAgICAgICAgICAgLy8gJ29yaWdDbGllbnRPcmRlcklkJzogaWQsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgIH0sXG5cbiAgICBub25jZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoeyAndGltZXN0YW1wJzogbm9uY2UgfSwgcGFyYW1zKSk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IHRoaXMuc2VjcmV0ICsgJ3wnICsgcXVlcnk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAoYXV0aCksICdzaGEyNTYnKTtcbiAgICAgICAgICAgIHF1ZXJ5ICs9ICcmJyArICdzaWduYXR1cmU9JyArIHNpZ25hdHVyZTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ1gtTUJYLUFQSUtFWSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ0dFVCcpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgcXVlcnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBxdWVyeTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdjb2RlJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydjb2RlJ10gPCAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaXQyYyA9IHtcblxuICAgICdpZCc6ICdiaXQyYycsXG4gICAgJ25hbWUnOiAnQml0MkMnLFxuICAgICdjb3VudHJpZXMnOiAnSUwnLCAvLyBJc3JhZWxcbiAgICAncmF0ZUxpbWl0JzogMzAwMCxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjExOS0zNTkzMjIwZS01ZWNlLTExZTctOGIzYS01YTA0MWY2YmNjM2YuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5iaXQyYy5jby5pbCcsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuYml0MmMuY28uaWwnLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LmJpdDJjLmNvLmlsL2hvbWUvYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vT2ZlckUvYml0MmMnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ0V4Y2hhbmdlcy97cGFpcn0vVGlja2VyJyxcbiAgICAgICAgICAgICAgICAnRXhjaGFuZ2VzL3twYWlyfS9vcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICdFeGNoYW5nZXMve3BhaXJ9L3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdBY2NvdW50L0JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdBY2NvdW50L0JhbGFuY2UvdjInLFxuICAgICAgICAgICAgICAgICdNZXJjaGFudC9DcmVhdGVDaGVja291dCcsXG4gICAgICAgICAgICAgICAgJ09yZGVyL0FjY291bnRIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnT3JkZXIvQWRkQ29pbkZ1bmRzUmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgJ09yZGVyL0FkZEZ1bmQnLFxuICAgICAgICAgICAgICAgICdPcmRlci9BZGRPcmRlcicsXG4gICAgICAgICAgICAgICAgJ09yZGVyL0FkZE9yZGVyTWFya2V0UHJpY2VCdXknLFxuICAgICAgICAgICAgICAgICdPcmRlci9BZGRPcmRlck1hcmtldFByaWNlU2VsbCcsXG4gICAgICAgICAgICAgICAgJ09yZGVyL0NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnT3JkZXIvTXlPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdQYXltZW50L0dldE15SWQnLFxuICAgICAgICAgICAgICAgICdQYXltZW50L1NlbmQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL05JUyc6IHsgJ2lkJzogJ0J0Y05pcycsICdzeW1ib2wnOiAnQlRDL05JUycsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdOSVMnIH0sXG4gICAgICAgICdMVEMvQlRDJzogeyAnaWQnOiAnTHRjQnRjJywgJ3N5bWJvbCc6ICdMVEMvQlRDJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0xUQy9OSVMnOiB7ICdpZCc6ICdMdGNOaXMnLCAnc3ltYm9sJzogJ0xUQy9OSVMnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnTklTJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBiYWxhbmNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEFjY291bnRCYWxhbmNlVjIgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgIGxldCBhdmFpbGFibGUgPSAnQVZBSUxBQkxFXycgKyBjdXJyZW5jeTtcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBiYWxhbmNlW2F2YWlsYWJsZV07XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IGJhbGFuY2VbY3VycmVuY3ldO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRFeGNoYW5nZXNQYWlyT3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VzUGFpclRpY2tlciAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbCddKSxcbiAgICAgICAgICAgICdiaWQnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXNrJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsbCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogcGFyc2VGbG9hdCAodGlja2VyWydhdiddKSxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydhJ10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodHJhZGVbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICBsZXQgc3ltYm9sID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAobWFya2V0KVxuICAgICAgICAgICAgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0aWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRFeGNoYW5nZXNQYWlyVHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtZXRob2QgPSAncHJpdmF0ZVBvc3RPcmRlckFkZE9yZGVyJztcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ0Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdQYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ21hcmtldCcpIHtcbiAgICAgICAgICAgIG1ldGhvZCArPSAnTWFya2V0UHJpY2UnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyWydQcmljZSddID0gcHJpY2U7XG4gICAgICAgICAgICBvcmRlclsnVG90YWwnXSA9IGFtb3VudCAqIHByaWNlO1xuICAgICAgICAgICAgb3JkZXJbJ0lzQmlkJ10gPSAoc2lkZSA9PSAnYnV5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzdWx0LFxuICAgICAgICAgICAgJ2lkJzogcmVzdWx0WydOZXdPcmRlciddWydpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RPcmRlckNhbmNlbE9yZGVyICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy5qc29uJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBwYXJhbXMpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAna2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ3NpZ24nOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChib2R5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTUxMicsICdiYXNlNjQnKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaXRiYXkgPSB7XG5cbiAgICAnaWQnOiAnYml0YmF5JyxcbiAgICAnbmFtZSc6ICdCaXRCYXknLFxuICAgICdjb3VudHJpZXMnOiBbICdQTCcsICdFVScgXSwgLy8gUG9sYW5kXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ2hhc1dpdGhkcmF3JzogdHJ1ZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjEzMi05NzhhN2JkOC01ZWNlLTExZTctOTU0MC1iYzk2ZDFlOWJiYjguanBnJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2JpdGJheS5uZXQnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL2JpdGJheS5uZXQvQVBJL1B1YmxpYycsXG4gICAgICAgICAgICAncHJpdmF0ZSc6ICdodHRwczovL2JpdGJheS5uZXQvQVBJL1RyYWRpbmcvdHJhZGluZ0FwaS5waHAnLFxuICAgICAgICB9LFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vYml0YmF5Lm5ldC9wdWJsaWMtYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL2JpdGJheS5uZXQvYWNjb3VudC90YWItYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vQml0QmF5TmV0L0FQSScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAne2lkfS9hbGwnLFxuICAgICAgICAgICAgICAgICd7aWR9L21hcmtldCcsXG4gICAgICAgICAgICAgICAgJ3tpZH0vb3JkZXJib29rJyxcbiAgICAgICAgICAgICAgICAne2lkfS90aWNrZXInLFxuICAgICAgICAgICAgICAgICd7aWR9L3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdpbmZvJyxcbiAgICAgICAgICAgICAgICAndHJhZGUnLFxuICAgICAgICAgICAgICAgICdjYW5jZWwnLFxuICAgICAgICAgICAgICAgICdvcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICd0cmFuc2ZlcicsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3JyxcbiAgICAgICAgICAgICAgICAnaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ3RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnQlRDVVNEJywgJ3N5bWJvbCc6ICdCVEMvVVNEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0JUQy9FVVInOiB7ICdpZCc6ICdCVENFVVInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnQlRDL1BMTic6IHsgJ2lkJzogJ0JUQ1BMTicsICdzeW1ib2wnOiAnQlRDL1BMTicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdQTE4nIH0sXG4gICAgICAgICdMVEMvVVNEJzogeyAnaWQnOiAnTFRDVVNEJywgJ3N5bWJvbCc6ICdMVEMvVVNEJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0xUQy9FVVInOiB7ICdpZCc6ICdMVENFVVInLCAnc3ltYm9sJzogJ0xUQy9FVVInLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnTFRDL1BMTic6IHsgJ2lkJzogJ0xUQ1BMTicsICdzeW1ib2wnOiAnTFRDL1BMTicsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdQTE4nIH0sXG4gICAgICAgICdMVEMvQlRDJzogeyAnaWQnOiAnTFRDQlRDJywgJ3N5bWJvbCc6ICdMVEMvQlRDJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0VUSC9VU0QnOiB7ICdpZCc6ICdFVEhVU0QnLCAnc3ltYm9sJzogJ0VUSC9VU0QnLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnVVNEJyB9LFxuICAgICAgICAnRVRIL0VVUic6IHsgJ2lkJzogJ0VUSEVVUicsICdzeW1ib2wnOiAnRVRIL0VVUicsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdFVVInIH0sXG4gICAgICAgICdFVEgvUExOJzogeyAnaWQnOiAnRVRIUExOJywgJ3N5bWJvbCc6ICdFVEgvUExOJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ1BMTicgfSxcbiAgICAgICAgJ0VUSC9CVEMnOiB7ICdpZCc6ICdFVEhCVEMnLCAnc3ltYm9sJzogJ0VUSC9CVEMnLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnTFNLL1VTRCc6IHsgJ2lkJzogJ0xTS1VTRCcsICdzeW1ib2wnOiAnTFNLL1VTRCcsICdiYXNlJzogJ0xTSycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdMU0svRVVSJzogeyAnaWQnOiAnTFNLRVVSJywgJ3N5bWJvbCc6ICdMU0svRVVSJywgJ2Jhc2UnOiAnTFNLJywgJ3F1b3RlJzogJ0VVUicgfSxcbiAgICAgICAgJ0xTSy9QTE4nOiB7ICdpZCc6ICdMU0tQTE4nLCAnc3ltYm9sJzogJ0xTSy9QTE4nLCAnYmFzZSc6ICdMU0snLCAncXVvdGUnOiAnUExOJyB9LFxuICAgICAgICAnTFNLL0JUQyc6IHsgJ2lkJzogJ0xTS0JUQycsICdzeW1ib2wnOiAnTFNLL0JUQycsICdiYXNlJzogJ0xTSycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEluZm8gKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gcmVzcG9uc2VbJ2JhbGFuY2VzJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbY3VycmVuY3ldWydhdmFpbGFibGUnXSk7XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVtjdXJyZW5jeV1bJ2xvY2tlZCddKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChtYXJrZXQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldElkT3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAobWFya2V0KSB7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldElkVGlja2VyICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydtYXgnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydtaW4nXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHBhcnNlRmxvYXQgKHRpY2tlclsndndhcCddKSxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXZlcmFnZSddKSxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWyd0eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRJZFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdFRyYWRlICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2N1cnJlbmN5JzogbWFya2V0WydiYXNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICAgICAgJ3BheW1lbnRfY3VycmVuY3knOiBtYXJrZXRbJ3F1b3RlJ10sXG4gICAgICAgICAgICAncmF0ZSc6IHByaWNlLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBpc0ZpYXRDdXJyZW5jeSAoY3VycmVuY3kpIHtcbiAgICAgICAgaWYgKGN1cnJlbmN5ID09ICdVU0QnKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChjdXJyZW5jeSA9PSAnRVVSJylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoY3VycmVuY3kgPT0gJ1BMTicpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBhc3luYyB3aXRoZHJhdyAoY3VycmVuY3ksIGFtb3VudCwgYWRkcmVzcywgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnY3VycmVuY3knOiBjdXJyZW5jeSxcbiAgICAgICAgICAgICdxdWFudGl0eSc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuaXNGaWF0Q3VycmVuY3kgKGN1cnJlbmN5KSkge1xuICAgICAgICAgICAgbWV0aG9kID0gJ3ByaXZhdGVQb3N0V2l0aGRyYXcnO1xuICAgICAgICAgICAgcmVxdWVzdFsnYWRkcmVzcyddID0gYWRkcmVzcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZCA9ICdwcml2YXRlUG9zdFRyYW5zZmVyJztcbiAgICAgICAgICAgIC8vIHJlcXVlc3RbJ2FjY291bnQnXSA9IHBhcmFtc1snYWNjb3VudCddOyAvLyB0aGV5IGRlbWFuZCBhbiBhY2NvdW50IG51bWJlclxuICAgICAgICAgICAgLy8gcmVxdWVzdFsnZXhwcmVzcyddID0gcGFyYW1zWydleHByZXNzJ107IC8vIHdoYXRldmVyIGl0IG1lYW5zLCB0aGV5IGRvbid0IGV4cGxhaW5cbiAgICAgICAgICAgIC8vIHJlcXVlc3RbJ2JpYyddID0gJ0JhbmsgSWRlbnRpZmllciBDb2RlIChCSUMpJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ11bYXBpXTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKSArICcuanNvbic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHBhdGgsXG4gICAgICAgICAgICAgICAgJ21vbWVudCc6IHRoaXMubm9uY2UgKCksXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdBUEktS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ0FQSS1IYXNoJzogdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYm9keSksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGE1MTInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaXRiYXlzID0ge1xuXG4gICAgJ2lkJzogJ2JpdGJheXMnLFxuICAgICduYW1lJzogJ0JpdEJheXMnLFxuICAgICdjb3VudHJpZXMnOiBbICdDTicsICdHQicsICdISycsICdBVScsICdDQScgXSxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc4MDg1OTktOTgzNjg3ZDItNjA1MS0xMWU3LThkOTUtODBkZmNiZTVjYmI0LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9iaXRiYXlzLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYml0YmF5cy5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vYml0YmF5cy5jb20vaGVscC9hcGkvJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd0aWNrZXInLFxuICAgICAgICAgICAgICAgICd0cmFkZXMnLFxuICAgICAgICAgICAgICAgICdkZXB0aCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdjYW5jZWwnLFxuICAgICAgICAgICAgICAgICdpbmZvJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXInLFxuICAgICAgICAgICAgICAgICd0cmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgICAgICd0cmFkZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnYnRjX3VzZCcsICdzeW1ib2wnOiAnQlRDL1VTRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdCVEMvQ05ZJzogeyAnaWQnOiAnYnRjX2NueScsICdzeW1ib2wnOiAnQlRDL0NOWScsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdPRFMvQlRDJzogeyAnaWQnOiAnb2RzX2J0YycsICdzeW1ib2wnOiAnT0RTL0JUQycsICdiYXNlJzogJ09EUycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMU0svQlRDJzogeyAnaWQnOiAnbHNrX2J0YycsICdzeW1ib2wnOiAnTFNLL0JUQycsICdiYXNlJzogJ0xTSycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMU0svQ05ZJzogeyAnaWQnOiAnbHNrX2NueScsICdzeW1ib2wnOiAnTFNLL0NOWScsICdiYXNlJzogJ0xTSycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEluZm8gKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gcmVzcG9uc2VbJ3Jlc3VsdCddWyd3YWxsZXQnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgbG93ZXJjYXNlID0gY3VycmVuY3kudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UgaW4gYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbbG93ZXJjYXNlXVsnYXZhaWwnXSk7XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVtsb3dlcmNhc2VdWydsb2NrJ10pO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXREZXB0aCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKHJlc3BvbnNlWydyZXN1bHQnXSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnc2VsbCddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodHJhZGVbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsnYW1vdW50J10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsncmVzdWx0J10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ29wJzogc2lkZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBvcmRlclsnb3JkZXJfdHlwZSddID0gMTtcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlclsnb3JkZXJfdHlwZSddID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3Jlc3VsdCddWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWwgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLnNlY3JldCwgJ3NoYTUxMicpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnc3RhdHVzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3RhdHVzJ10gPT0gMjAwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYml0Y29pbmNvaWQgPSB7XG5cbiAgICAnaWQnOiAnYml0Y29pbmNvaWQnLFxuICAgICduYW1lJzogJ0JpdGNvaW4uY28uaWQnLFxuICAgICdjb3VudHJpZXMnOiAnSUQnLCAvLyBJbmRvbmVzaWFcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjEzOC0wNDNjNzc4Ni01ZWNmLTExZTctODgyYi04MDljMTRmMzhiNTMuanBnJyxcbiAgICAgICAgJ2FwaSc6IHtcbiAgICAgICAgICAgICdwdWJsaWMnOiAnaHR0cHM6Ly92aXAuYml0Y29pbi5jby5pZC9hcGknLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly92aXAuYml0Y29pbi5jby5pZC90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5iaXRjb2luLmNvLmlkJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL3ZpcC5iaXRjb2luLmNvLmlkL2Rvd25sb2Fkcy9CSVRDT0lOQ09JRC1BUEktRE9DVU1FTlRBVElPTi5wZGYnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vdmlwLmJpdGNvaW4uY28uaWQvdHJhZGVfYXBpJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd7cGFpcn0vdGlja2VyJyxcbiAgICAgICAgICAgICAgICAne3BhaXJ9L3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3twYWlyfS9kZXB0aCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdnZXRJbmZvJyxcbiAgICAgICAgICAgICAgICAndHJhbnNIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAndHJhZGUnLFxuICAgICAgICAgICAgICAgICd0cmFkZUhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdvcGVuT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0lEUic6ICB7ICdpZCc6ICdidGNfaWRyJywgJ3N5bWJvbCc6ICdCVEMvSURSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0lEUicsICdiYXNlSWQnOiAnYnRjJywgJ3F1b3RlSWQnOiAnaWRyJyB9LFxuICAgICAgICAnQlRTL0JUQyc6ICB7ICdpZCc6ICdidHNfYnRjJywgJ3N5bWJvbCc6ICdCVFMvQlRDJywgJ2Jhc2UnOiAnQlRTJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnYnRzJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnREFTSC9CVEMnOiB7ICdpZCc6ICdkcmtfYnRjJywgJ3N5bWJvbCc6ICdEQVNIL0JUQycsICdiYXNlJzogJ0RBU0gnLCAncXVvdGUnOiAnQlRDJywgJ2Jhc2VJZCc6ICdkcmsnLCAncXVvdGVJZCc6ICdidGMnIH0sXG4gICAgICAgICdET0dFL0JUQyc6IHsgJ2lkJzogJ2RvZ2VfYnRjJywgJ3N5bWJvbCc6ICdET0dFL0JUQycsICdiYXNlJzogJ0RPR0UnLCAncXVvdGUnOiAnQlRDJywgJ2Jhc2VJZCc6ICdkb2dlJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnRVRIL0JUQyc6ICB7ICdpZCc6ICdldGhfYnRjJywgJ3N5bWJvbCc6ICdFVEgvQlRDJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnZXRoJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnTFRDL0JUQyc6ICB7ICdpZCc6ICdsdGNfYnRjJywgJ3N5bWJvbCc6ICdMVEMvQlRDJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnbHRjJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnTlhUL0JUQyc6ICB7ICdpZCc6ICdueHRfYnRjJywgJ3N5bWJvbCc6ICdOWFQvQlRDJywgJ2Jhc2UnOiAnTlhUJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnbnh0JywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnU1RSL0JUQyc6ICB7ICdpZCc6ICdzdHJfYnRjJywgJ3N5bWJvbCc6ICdTVFIvQlRDJywgJ2Jhc2UnOiAnU1RSJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnc3RyJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnTkVNL0JUQyc6ICB7ICdpZCc6ICduZW1fYnRjJywgJ3N5bWJvbCc6ICdORU0vQlRDJywgJ2Jhc2UnOiAnTkVNJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAnbmVtJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgICAgICAnWFJQL0JUQyc6ICB7ICdpZCc6ICd4cnBfYnRjJywgJ3N5bWJvbCc6ICdYUlAvQlRDJywgJ2Jhc2UnOiAnWFJQJywgJ3F1b3RlJzogJ0JUQycsICdiYXNlSWQnOiAneHJwJywgJ3F1b3RlSWQnOiAnYnRjJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RHZXRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZSA9IHJlc3BvbnNlWydyZXR1cm4nXVsnYmFsYW5jZSddO1xuICAgICAgICBsZXQgZnJvemVuID0gcmVzcG9uc2VbJ3JldHVybiddWydiYWxhbmNlX2hvbGQnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgbG93ZXJjYXNlID0gY3VycmVuY3kudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UgaW4gYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbbG93ZXJjYXNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlIGluIGZyb3plbikge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHBhcnNlRmxvYXQgKGZyb3plbltsb3dlcmNhc2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0UGFpckRlcHRoICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYnV5JywgJ3NlbGwnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0UGFpclRpY2tlciAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ3RpY2tlciddO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VGbG9hdCAodGlja2VyWydzZXJ2ZXJfdGltZSddKSAqIDEwMDA7XG4gICAgICAgIGxldCBiYXNlVm9sdW1lID0gJ3ZvbF8nICsgbWFya2V0WydiYXNlSWQnXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgbGV0IHF1b3RlVm9sdW1lID0gJ3ZvbF8nICsgbWFya2V0WydxdW90ZUlkJ10udG9Mb3dlckNhc2UgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlcltiYXNlVm9sdW1lXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbcXVvdGVWb2x1bWVdKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodHJhZGVbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsndHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQYWlyVHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAndHlwZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGJhc2UgPSBtYXJrZXRbJ2Jhc2UnXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgb3JkZXJbYmFzZV0gPSBhbW91bnQ7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnByaXZhdGVQb3N0VHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3VsdCxcbiAgICAgICAgICAgICdpZCc6IHJlc3VsdFsncmV0dXJuJ11bJ29yZGVyX2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxPcmRlciAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXVthcGldO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB1cmwgKz0gJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdtZXRob2QnOiBwYXRoLFxuICAgICAgICAgICAgICAgICdub25jZSc6IHRoaXMubm9uY2UgKCksXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHJlc3BvbnNlWydlcnJvciddKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJpdGZpbmV4ID0ge1xuXG4gICAgJ2lkJzogJ2JpdGZpbmV4JyxcbiAgICAnbmFtZSc6ICdCaXRmaW5leCcsXG4gICAgJ2NvdW50cmllcyc6ICdVUycsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiBmYWxzZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjI0NC1lMzI4YTUwYy01ZWQyLTExZTctOTQ3Yi0wNDE0MTY1NzliYjMuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5iaXRmaW5leC5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJpdGZpbmV4LmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9iaXRmaW5leC5yZWFkbWUuaW8vdjEvZG9jcycsXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2JpdGZpbmV4Y29tL2JpdGZpbmV4LWFwaS1ub2RlJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdib29rL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAvLyAnY2FuZGxlcy97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2xlbmRib29rL3tjdXJyZW5jeX0nLFxuICAgICAgICAgICAgICAgICdsZW5kcy97Y3VycmVuY3l9JyxcbiAgICAgICAgICAgICAgICAncHVidGlja2VyL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAnc3RhdHMve3N5bWJvbH0nLFxuICAgICAgICAgICAgICAgICdzeW1ib2xzJyxcbiAgICAgICAgICAgICAgICAnc3ltYm9sc19kZXRhaWxzJyxcbiAgICAgICAgICAgICAgICAndG9kYXknLFxuICAgICAgICAgICAgICAgICd0cmFkZXMve3N5bWJvbH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYWNjb3VudF9pbmZvcycsXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2VzJyxcbiAgICAgICAgICAgICAgICAnYmFza2V0X21hbmFnZScsXG4gICAgICAgICAgICAgICAgJ2NyZWRpdHMnLFxuICAgICAgICAgICAgICAgICdkZXBvc2l0L25ldycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRpbmcvY2xvc2UnLFxuICAgICAgICAgICAgICAgICdoaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnaGlzdG9yeS9tb3ZlbWVudHMnLFxuICAgICAgICAgICAgICAgICdrZXlfaW5mbycsXG4gICAgICAgICAgICAgICAgJ21hcmdpbl9pbmZvcycsXG4gICAgICAgICAgICAgICAgJ215dHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnbXl0cmFkZXNfZnVuZGluZycsXG4gICAgICAgICAgICAgICAgJ29mZmVyL2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ29mZmVyL25ldycsXG4gICAgICAgICAgICAgICAgJ29mZmVyL3N0YXR1cycsXG4gICAgICAgICAgICAgICAgJ29mZmVycycsXG4gICAgICAgICAgICAgICAgJ29mZmVycy9oaXN0JyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY2FuY2VsL2FsbCcsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NhbmNlbC9tdWx0aScsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NhbmNlbC9yZXBsYWNlJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvbmV3JyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvbmV3L211bHRpJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvc3RhdHVzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL2hpc3QnLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbi9jbGFpbScsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9ucycsXG4gICAgICAgICAgICAgICAgJ3N1bW1hcnknLFxuICAgICAgICAgICAgICAgICd0YWtlbl9mdW5kcycsXG4gICAgICAgICAgICAgICAgJ3RvdGFsX3Rha2VuX2Z1bmRzJyxcbiAgICAgICAgICAgICAgICAndHJhbnNmZXInLFxuICAgICAgICAgICAgICAgICd1bnVzZWRfdGFrZW5fZnVuZHMnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0U3ltYm9sc0RldGFpbHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1twXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsncGFpciddLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IGJhc2VJZCA9IGlkLnNsaWNlICgwLCAzKTtcbiAgICAgICAgICAgIGxldCBxdW90ZUlkID0gaWQuc2xpY2UgKDMsIDYpO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBiYXNlSWQ7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBxdW90ZUlkO1xuICAgICAgICAgICAgLy8gaXNzdWUgIzQgQml0ZmluZXggbmFtZXMgRGFzaCBhcyBEU0gsIGluc3RlYWQgb2YgREFTSFxuICAgICAgICAgICAgaWYgKGJhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgYmFzZSA9ICdEQVNIJztcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdiYXNlSWQnOiBiYXNlSWQsXG4gICAgICAgICAgICAgICAgJ3F1b3RlSWQnOiBxdW90ZUlkLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2VzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFsYW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbaV07XG4gICAgICAgICAgICBpZiAoYmFsYW5jZVsndHlwZSddID09ICdleGNoYW5nZScpIHtcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgICAgICAvLyBpc3N1ZSAjNCBCaXRmaW5leCBuYW1lcyBkYXNoIGFzIGRzaFxuICAgICAgICAgICAgICAgIGlmICh1cHBlcmNhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgICAgIHVwcGVyY2FzZSA9ICdEQVNIJztcbiAgICAgICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlWydhdmFpbGFibGUnXSk7XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2Ftb3VudCddKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBhY2NvdW50Wyd0b3RhbCddIC0gYWNjb3VudFsnZnJlZSddO1xuICAgICAgICAgICAgICAgIHJlc3VsdFt1cHBlcmNhc2VdID0gYWNjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRCb29rU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB1bmRlZmluZWQsICdiaWRzJywgJ2Fza3MnLCAncHJpY2UnLCAnYW1vdW50Jyk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0UHVidGlja2VyU3ltYm9sICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUZsb2F0ICh0aWNrZXJbJ3RpbWVzdGFtcCddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3RfcHJpY2UnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbWlkJ10pLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsndGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsndHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXNTeW1ib2wgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJUeXBlID0gdHlwZTtcbiAgICAgICAgaWYgKCh0eXBlID09ICdsaW1pdCcpIHx8ICh0eXBlID09ICdtYXJrZXQnKSlcbiAgICAgICAgICAgIG9yZGVyVHlwZSA9ICdleGNoYW5nZSAnICsgdHlwZTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3R5cGUnOiBvcmRlclR5cGUsXG4gICAgICAgICAgICAnb2Nvb3JkZXInOiBmYWxzZSxcbiAgICAgICAgICAgICdidXlfcHJpY2Vfb2NvJzogMCxcbiAgICAgICAgICAgICdzZWxsX3ByaWNlX29jbyc6IDAsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlLnRvU3RyaW5nICgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0T3JkZXJOZXcgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3VsdCxcbiAgICAgICAgICAgICdpZCc6IHJlc3VsdFsnb3JkZXJfaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0T3JkZXJDYW5jZWwgKHsgJ29yZGVyX2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIHBhcnNlT3JkZXIgKG9yZGVyLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHNpZGUgPSBvcmRlclsnc2lkZSddO1xuICAgICAgICBsZXQgb3BlbiA9IG9yZGVyWydpc19saXZlJ107XG4gICAgICAgIGxldCBjYW5jZWxlZCA9IG9yZGVyWydpc19jYW5jZWxsZWQnXTtcbiAgICAgICAgbGV0IHN0YXR1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdvcGVuJztcbiAgICAgICAgfSBlbHNlIGlmIChjYW5jZWxlZCkge1xuICAgICAgICAgICAgc3RhdHVzID0gJ2NhbmNlbGVkJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdjbG9zZWQnO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzeW1ib2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChtYXJrZXQpIHtcbiAgICAgICAgICAgIHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZXhjaGFuZ2UgPSBvcmRlclsnc3ltYm9sJ10udG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBpZiAoZXhjaGFuZ2UgaW4gdGhpcy5tYXJrZXRzX2J5X2lkKSB7XG4gICAgICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2V4Y2hhbmdlXTtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBvcmRlclR5cGUgPSBvcmRlclsndHlwZSddO1xuICAgICAgICBsZXQgZXhjaGFuZ2UgPSBvcmRlclR5cGUuaW5kZXhPZiAoJ2V4Y2hhbmdlICcpID49IDA7XG4gICAgICAgIGlmIChleGNoYW5nZSkge1xuICAgICAgICAgICAgbGV0IFsgcHJlZml4LCBvcmRlclR5cGUgXSA9IG9yZGVyWyd0eXBlJ10uc3BsaXQgKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IG9yZGVyWyd0aW1lc3RhbXAnXSAqIDEwMDA7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnaW5mbyc6IG9yZGVyLFxuICAgICAgICAgICAgJ2lkJzogb3JkZXJbJ2lkJ10sXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICd0eXBlJzogb3JkZXJUeXBlLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAob3JkZXJbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKG9yZGVyWydvcmlnaW5hbF9hbW91bnQnXSksXG4gICAgICAgICAgICAncmVtYWluaW5nJzogcGFyc2VGbG9hdCAob3JkZXJbJ3JlbWFpbmluZ19hbW91bnQnXSksXG4gICAgICAgICAgICAnc3RhdHVzJzogc3RhdHVzLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVyU3RhdHVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ29yZGVyX2lkJzogcGFyc2VJbnQgKGlkKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXIgKHJlc3BvbnNlKTtcbiAgICB9LFxuXG4gICAgZ2V0Q3VycmVuY3lOYW1lIChjdXJyZW5jeSkge1xuICAgICAgICBpZiAoY3VycmVuY3kgPT0gJ0JUQycpIHtcbiAgICAgICAgICAgIHJldHVybiAnYml0Y29pbic7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3kgPT0gJ0xUQycpIHtcbiAgICAgICAgICAgIHJldHVybiAnbGl0ZWNvaW4nO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5ID09ICdFVEgnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2V0aGVyZXVtJztcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW5jeSA9PSAnRVRDJykge1xuICAgICAgICAgICAgcmV0dXJuICdldGhlcmV1bWMnO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5ID09ICdPTU5JJykge1xuICAgICAgICAgICAgcmV0dXJuICdtYXN0ZXJjb2luJzsgLy8gPz8/XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3kgPT0gJ1pFQycpIHtcbiAgICAgICAgICAgIHJldHVybiAnemNhc2gnO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5ID09ICdYTVInKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbmVybyc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3kgPT0gJ1VTRCcpIHtcbiAgICAgICAgICAgIHJldHVybiAnd2lyZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3kgPT0gJ0RBU0gnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2Rhc2gnO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbmN5ID09ICdYUlAnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JpcHBsZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVuY3kgPT0gJ0VPUycpIHtcbiAgICAgICAgICAgIHJldHVybiAnZW9zJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgTm90U3VwcG9ydGVkICh0aGlzLmlkICsgJyAnICsgY3VycmVuY3kgKyAnIG5vdCBzdXBwb3J0ZWQgZm9yIHdpdGhkcmF3YWwnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgd2l0aGRyYXcgKGN1cnJlbmN5LCBhbW91bnQsIGFkZHJlc3MsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5nZXRDdXJyZW5jeU5hbWUgKGN1cnJlbmN5KTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFdpdGhkcmF3ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3dpdGhkcmF3X3R5cGUnOiBuYW1lLFxuICAgICAgICAgICAgJ3dhbGxldHNlbGVjdGVkJzogJ2V4Y2hhbmdlJyxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAnYWRkcmVzcyc6IGFkZHJlc3MsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWyd3aXRoZHJhd2FsX2lkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG5vbmNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCByZXF1ZXN0ID0gJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgcmVxdWVzdDtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICAgICAncmVxdWVzdCc6IHJlcXVlc3QsXG4gICAgICAgICAgICB9LCBxdWVyeSk7XG4gICAgICAgICAgICBxdWVyeSA9IHRoaXMuanNvbiAocXVlcnkpO1xuICAgICAgICAgICAgcXVlcnkgPSB0aGlzLmVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgbGV0IHBheWxvYWQgPSB0aGlzLnN0cmluZ1RvQmFzZTY0IChxdWVyeSk7XG4gICAgICAgICAgICBsZXQgc2VjcmV0ID0gdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHBheWxvYWQsIHNlY3JldCwgJ3NoYTM4NCcpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnWC1CRlgtQVBJS0VZJzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1gtQkZYLVBBWUxPQUQnOiB0aGlzLmRlY29kZSAocGF5bG9hZCksXG4gICAgICAgICAgICAgICAgJ1gtQkZYLVNJR05BVFVSRSc6IHNpZ25hdHVyZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ21lc3NhZ2UnXS5pbmRleE9mICgnbm90IGVub3VnaCBleGNoYW5nZSBiYWxhbmNlJykgPj0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW5zdWZmaWNpZW50RnVuZHMgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYml0ZmluZXgyID0gZXh0ZW5kIChiaXRmaW5leCwge1xuXG4gICAgJ2lkJzogJ2JpdGZpbmV4MicsXG4gICAgJ25hbWUnOiAnQml0ZmluZXggdjInLFxuICAgICdjb3VudHJpZXMnOiAnVVMnLFxuICAgICd2ZXJzaW9uJzogJ3YyJyxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogZmFsc2UsIC8vIHRydWUgYnV0IGF0IGxlYXN0IG9uZSBwYWlyIGlzIHJlcXVpcmVkXG4gICAgJ2hhc0ZldGNoT0hMQ1YnOiB0cnVlLFxuICAgICd0aW1lZnJhbWVzJzoge1xuICAgICAgICAnMW0nOiAnMW0nLFxuICAgICAgICAnNW0nOiAnNW0nLFxuICAgICAgICAnMTVtJzogJzE1bScsXG4gICAgICAgICczMG0nOiAnMzBtJyxcbiAgICAgICAgJzFoJzogJzFoJyxcbiAgICAgICAgJzNoJzogJzNoJyxcbiAgICAgICAgJzZoJzogJzZoJyxcbiAgICAgICAgJzEyaCc6ICcxMmgnLFxuICAgICAgICAnMWQnOiAnMUQnLFxuICAgICAgICAnMXcnOiAnN0QnLFxuICAgICAgICAnMncnOiAnMTREJyxcbiAgICAgICAgJzFNJzogJzFNJyxcbiAgICB9LFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2MjQ0LWUzMjhhNTBjLTVlZDItMTFlNy05NDdiLTA0MTQxNjU3OWJiMy5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmJpdGZpbmV4LmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuYml0ZmluZXguY29tJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL2JpdGZpbmV4LnJlYWRtZS5pby92Mi9kb2NzJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vYml0ZmluZXhjb20vYml0ZmluZXgtYXBpLW5vZGUnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3BsYXRmb3JtL3N0YXR1cycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcnMnLCAvLyByZXBsaWVzIHdpdGggYW4gZW1wdHkgbGlzdCA6XFxcbiAgICAgICAgICAgICAgICAndGlja2VyL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3tzeW1ib2x9L2hpc3QnLFxuICAgICAgICAgICAgICAgICdib29rL3tzeW1ib2x9L3twcmVjaXNpb259JyxcbiAgICAgICAgICAgICAgICAnYm9vay97c3ltYm9sfS9QMCcsXG4gICAgICAgICAgICAgICAgJ2Jvb2sve3N5bWJvbH0vUDEnLFxuICAgICAgICAgICAgICAgICdib29rL3tzeW1ib2x9L1AyJyxcbiAgICAgICAgICAgICAgICAnYm9vay97c3ltYm9sfS9QMycsXG4gICAgICAgICAgICAgICAgJ2Jvb2sve3N5bWJvbH0vUjAnLFxuICAgICAgICAgICAgICAgICdzeW1ib2xzX2RldGFpbHMnLFxuICAgICAgICAgICAgICAgICdzdGF0czEve2tleX06e3NpemV9OntzeW1ib2x9L3tzaWRlfS97c2VjdGlvbn0nLFxuICAgICAgICAgICAgICAgICdzdGF0czEve2tleX06e3NpemV9OntzeW1ib2x9L2xvbmcvbGFzdCcsXG4gICAgICAgICAgICAgICAgJ3N0YXRzMS97a2V5fTp7c2l6ZX06e3N5bWJvbH0vbG9uZy9oaXN0JyxcbiAgICAgICAgICAgICAgICAnc3RhdHMxL3trZXl9OntzaXplfTp7c3ltYm9sfS9zaG9ydC9sYXN0JyxcbiAgICAgICAgICAgICAgICAnc3RhdHMxL3trZXl9OntzaXplfTp7c3ltYm9sfS9zaG9ydC9oaXN0JyxcbiAgICAgICAgICAgICAgICAnY2FuZGxlcy90cmFkZTp7dGltZWZyYW1lfTp7c3ltYm9sfS97c2VjdGlvbn0nLFxuICAgICAgICAgICAgICAgICdjYW5kbGVzL3RyYWRlOnt0aW1lZnJhbWV9OntzeW1ib2x9L2xhc3QnLFxuICAgICAgICAgICAgICAgICdjYW5kbGVzL3RyYWRlOnt0aW1lZnJhbWV9OntzeW1ib2x9L2hpc3QnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdjYWxjL3RyYWRlL2F2ZycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhdXRoL3Ivd2FsbGV0cycsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9vcmRlcnMve3N5bWJvbH0nLFxuICAgICAgICAgICAgICAgICdhdXRoL3Ivb3JkZXJzL3tzeW1ib2x9L25ldycsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9vcmRlcnMve3N5bWJvbH0vaGlzdCcsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9vcmRlci97c3ltYm9sfTp7aWR9L3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci90cmFkZXMve3N5bWJvbH0vaGlzdCcsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9mdW5kaW5nL29mZmVycy97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9mdW5kaW5nL29mZmVycy97c3ltYm9sfS9oaXN0JyxcbiAgICAgICAgICAgICAgICAnYXV0aC9yL2Z1bmRpbmcvbG9hbnMve3N5bWJvbH0nLFxuICAgICAgICAgICAgICAgICdhdXRoL3IvZnVuZGluZy9sb2Fucy97c3ltYm9sfS9oaXN0JyxcbiAgICAgICAgICAgICAgICAnYXV0aC9yL2Z1bmRpbmcvY3JlZGl0cy97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9mdW5kaW5nL2NyZWRpdHMve3N5bWJvbH0vaGlzdCcsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9mdW5kaW5nL3RyYWRlcy97c3ltYm9sfS9oaXN0JyxcbiAgICAgICAgICAgICAgICAnYXV0aC9yL2luZm8vbWFyZ2luL3trZXl9JyxcbiAgICAgICAgICAgICAgICAnYXV0aC9yL2luZm8vZnVuZGluZy97a2V5fScsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9tb3ZlbWVudHMve2N1cnJlbmN5fS9oaXN0JyxcbiAgICAgICAgICAgICAgICAnYXV0aC9yL3N0YXRzL3BlcmY6e3RpbWVmcmFtZX0vaGlzdCcsXG4gICAgICAgICAgICAgICAgJ2F1dGgvci9hbGVydHMnLFxuICAgICAgICAgICAgICAgICdhdXRoL3cvYWxlcnQvc2V0JyxcbiAgICAgICAgICAgICAgICAnYXV0aC93L2FsZXJ0L3t0eXBlfTp7c3ltYm9sfTp7cHJpY2V9L2RlbCcsXG4gICAgICAgICAgICAgICAgJ2F1dGgvY2FsYy9vcmRlci9hdmFpbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCQ0MvQlRDJzogeyAnaWQnOiAndEJDQ0JUQycsICdzeW1ib2wnOiAnQkNDL0JUQycsICdiYXNlJzogJ0JDQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdCQ0MvVVNEJzogeyAnaWQnOiAndEJDQ1VTRCcsICdzeW1ib2wnOiAnQkNDL1VTRCcsICdiYXNlJzogJ0JDQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdCQ0gvQlRDJzogeyAnaWQnOiAndEJDSEJUQycsICdzeW1ib2wnOiAnQkNIL0JUQycsICdiYXNlJzogJ0JDSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdCQ0gvRVRIJzogeyAnaWQnOiAndEJDSEVUSCcsICdzeW1ib2wnOiAnQkNIL0VUSCcsICdiYXNlJzogJ0JDSCcsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdCQ0gvVVNEJzogeyAnaWQnOiAndEJDSFVTRCcsICdzeW1ib2wnOiAnQkNIL1VTRCcsICdiYXNlJzogJ0JDSCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdCQ1UvQlRDJzogeyAnaWQnOiAndEJDVUJUQycsICdzeW1ib2wnOiAnQkNVL0JUQycsICdiYXNlJzogJ0JDVScsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdCQ1UvVVNEJzogeyAnaWQnOiAndEJDVVVTRCcsICdzeW1ib2wnOiAnQkNVL1VTRCcsICdiYXNlJzogJ0JDVScsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAndEJUQ1VTRCcsICdzeW1ib2wnOiAnQlRDL1VTRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdEQVNIL0JUQyc6IHsgJ2lkJzogJ3REU0hCVEMnLCAnc3ltYm9sJzogJ0RBU0gvQlRDJywgJ2Jhc2UnOiAnREFTSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdEQVNIL1VTRCc6IHsgJ2lkJzogJ3REU0hVU0QnLCAnc3ltYm9sJzogJ0RBU0gvVVNEJywgJ2Jhc2UnOiAnREFTSCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdFT1MvQlRDJzogeyAnaWQnOiAndEVPU0JUQycsICdzeW1ib2wnOiAnRU9TL0JUQycsICdiYXNlJzogJ0VPUycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFT1MvRVRIJzogeyAnaWQnOiAndEVPU0VUSCcsICdzeW1ib2wnOiAnRU9TL0VUSCcsICdiYXNlJzogJ0VPUycsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdFT1MvVVNEJzogeyAnaWQnOiAndEVPU1VTRCcsICdzeW1ib2wnOiAnRU9TL1VTRCcsICdiYXNlJzogJ0VPUycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdFVEMvQlRDJzogeyAnaWQnOiAndEVUQ0JUQycsICdzeW1ib2wnOiAnRVRDL0JUQycsICdiYXNlJzogJ0VUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFVEMvVVNEJzogeyAnaWQnOiAndEVUQ1VTRCcsICdzeW1ib2wnOiAnRVRDL1VTRCcsICdiYXNlJzogJ0VUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdFVEgvQlRDJzogeyAnaWQnOiAndEVUSEJUQycsICdzeW1ib2wnOiAnRVRIL0JUQycsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFVEgvVVNEJzogeyAnaWQnOiAndEVUSFVTRCcsICdzeW1ib2wnOiAnRVRIL1VTRCcsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdJT1QvQlRDJzogeyAnaWQnOiAndElPVEJUQycsICdzeW1ib2wnOiAnSU9UL0JUQycsICdiYXNlJzogJ0lPVCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdJT1QvRVRIJzogeyAnaWQnOiAndElPVEVUSCcsICdzeW1ib2wnOiAnSU9UL0VUSCcsICdiYXNlJzogJ0lPVCcsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdJT1QvVVNEJzogeyAnaWQnOiAndElPVFVTRCcsICdzeW1ib2wnOiAnSU9UL1VTRCcsICdiYXNlJzogJ0lPVCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdMVEMvQlRDJzogeyAnaWQnOiAndExUQ0JUQycsICdzeW1ib2wnOiAnTFRDL0JUQycsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMVEMvVVNEJzogeyAnaWQnOiAndExUQ1VTRCcsICdzeW1ib2wnOiAnTFRDL1VTRCcsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdPTUcvQlRDJzogeyAnaWQnOiAndE9NR0JUQycsICdzeW1ib2wnOiAnT01HL0JUQycsICdiYXNlJzogJ09NRycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdPTUcvRVRIJzogeyAnaWQnOiAndE9NR0VUSCcsICdzeW1ib2wnOiAnT01HL0VUSCcsICdiYXNlJzogJ09NRycsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdPTUcvVVNEJzogeyAnaWQnOiAndE9NR1VTRCcsICdzeW1ib2wnOiAnT01HL1VTRCcsICdiYXNlJzogJ09NRycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdSUlQvQlRDJzogeyAnaWQnOiAndFJSVEJUQycsICdzeW1ib2wnOiAnUlJUL0JUQycsICdiYXNlJzogJ1JSVCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdSUlQvVVNEJzogeyAnaWQnOiAndFJSVFVTRCcsICdzeW1ib2wnOiAnUlJUL1VTRCcsICdiYXNlJzogJ1JSVCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdTQU4vQlRDJzogeyAnaWQnOiAndFNBTkJUQycsICdzeW1ib2wnOiAnU0FOL0JUQycsICdiYXNlJzogJ1NBTicsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdTQU4vRVRIJzogeyAnaWQnOiAndFNBTkVUSCcsICdzeW1ib2wnOiAnU0FOL0VUSCcsICdiYXNlJzogJ1NBTicsICdxdW90ZSc6ICdFVEgnIH0sXG4gICAgICAgICdTQU4vVVNEJzogeyAnaWQnOiAndFNBTlVTRCcsICdzeW1ib2wnOiAnU0FOL1VTRCcsICdiYXNlJzogJ1NBTicsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdYTVIvQlRDJzogeyAnaWQnOiAndFhNUkJUQycsICdzeW1ib2wnOiAnWE1SL0JUQycsICdiYXNlJzogJ1hNUicsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdYTVIvVVNEJzogeyAnaWQnOiAndFhNUlVTRCcsICdzeW1ib2wnOiAnWE1SL1VTRCcsICdiYXNlJzogJ1hNUicsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdYUlAvQlRDJzogeyAnaWQnOiAndFhSUEJUQycsICdzeW1ib2wnOiAnWFJQL0JUQycsICdiYXNlJzogJ1hSUCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdYUlAvVVNEJzogeyAnaWQnOiAndFhSUFVTRCcsICdzeW1ib2wnOiAnWFJQL1VTRCcsICdiYXNlJzogJ1hSUCcsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdaRUMvQlRDJzogeyAnaWQnOiAndFpFQ0JUQycsICdzeW1ib2wnOiAnWkVDL0JUQycsICdiYXNlJzogJ1pFQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdaRUMvVVNEJzogeyAnaWQnOiAndFpFQ1VTRCcsICdzeW1ib2wnOiAnWkVDL1VTRCcsICdiYXNlJzogJ1pFQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEF1dGhSV2FsbGV0cyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IHJlc3BvbnNlLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IHJlc3BvbnNlW2JdO1xuICAgICAgICAgICAgbGV0IFsgdHlwZSwgY3VycmVuY3ksIHRvdGFsLCBpbnRlcmVzdCwgYXZhaWxhYmxlIF0gPSBiYWxhbmNlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbmN5WzBdID09ICd0JylcbiAgICAgICAgICAgICAgICBjdXJyZW5jeSA9IGN1cnJlbmN5LnNsaWNlICgxKTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIC8vIGlzc3VlICM0IEJpdGZpbmV4IG5hbWVzIERhc2ggYXMgRFNILCBpbnN0ZWFkIG9mIERBU0hcbiAgICAgICAgICAgIGlmICh1cHBlcmNhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgdXBwZXJjYXNlID0gJ0RBU0gnO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBhdmFpbGFibGU7XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdG90YWw7XG4gICAgICAgICAgICBpZiAoYWNjb3VudFsnZnJlZSddKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICByZXN1bHRbdXBwZXJjYXNlXSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0Qm9va1N5bWJvbFByZWNpc2lvbiAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3ByZWNpc2lvbic6ICdSMCcsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnYmlkcyc6IFtdLFxuICAgICAgICAgICAgJ2Fza3MnOiBbXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJib29rLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgb3JkZXIgPSBvcmRlcmJvb2tbaV07XG4gICAgICAgICAgICBsZXQgWyB0aW1lc3RhbXAsIHByaWNlLCBhbW91bnQgXSA9IG9yZGVyO1xuICAgICAgICAgICAgbGV0IHNpZGUgPSAoYW1vdW50ID4gMCkgPyAnYmlkcycgOiAnYXNrcyc7XG4gICAgICAgICAgICBhbW91bnQgPSBNYXRoLmFicyAoYW1vdW50KTtcbiAgICAgICAgICAgIHJlc3VsdFtzaWRlXS5wdXNoIChbIHByaWNlLCBhbW91bnQsIHRpbWVzdGFtcCBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbJ2JpZHMnXSA9IHRoaXMuc29ydEJ5IChyZXN1bHRbJ2JpZHMnXSwgMCwgdHJ1ZSk7XG4gICAgICAgIHJlc3VsdFsnYXNrcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYXNrcyddLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJTeW1ib2wgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgWyBiaWQsIGJpZFNpemUsIGFzaywgYXNrU2l6ZSwgY2hhbmdlLCBwZXJjZW50YWdlLCBsYXN0LCB2b2x1bWUsIGhpZ2gsIGxvdyBdID0gdGlja2VyO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogaGlnaCxcbiAgICAgICAgICAgICdsb3cnOiBsb3csXG4gICAgICAgICAgICAnYmlkJzogYmlkLFxuICAgICAgICAgICAgJ2Fzayc6IGFzayxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IGxhc3QsXG4gICAgICAgICAgICAnY2hhbmdlJzogY2hhbmdlLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiBwZXJjZW50YWdlLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHZvbHVtZSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCBbIGlkLCB0aW1lc3RhbXAsIGFtb3VudCwgcHJpY2UgXSA9IHRyYWRlO1xuICAgICAgICBsZXQgc2lkZSA9IChhbW91bnQgPCAwKSA/ICdzZWxsJyA6ICdidXknO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogaWQudG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXNTeW1ib2xIaXN0ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3RpbWVmcmFtZSc6IHRoaXMudGltZWZyYW1lc1t0aW1lZnJhbWVdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAobGltaXQpXG4gICAgICAgICAgICByZXF1ZXN0WydsaW1pdCddID0gbGltaXQ7XG4gICAgICAgIGlmIChzaW5jZSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ3N0YXJ0J10gPSBzaW5jZTtcbiAgICAgICAgcmVxdWVzdCA9IHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBwYXJhbXMpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldENhbmRsZXNUcmFkZVRpbWVmcmFtZVN5bWJvbEhpc3QgKHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9ITENWcyAocmVzcG9uc2UsIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQgKHRoaXMuaWQgKyAnIGNyZWF0ZU9yZGVyIG5vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQgKHRoaXMuaWQgKyAnIGNhbmNlbE9yZGVyIG5vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQgKHRoaXMuaWQgKyAnIGZldGNoT3JkZXIgbm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH0sXG5cbiAgICBhc3luYyB3aXRoZHJhdyAoY3VycmVuY3ksIGFtb3VudCwgYWRkcmVzcywgcGFyYW1zID0ge30pIHtcbiAgICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZCAodGhpcy5pZCArICcgd2l0aGRyYXcgbm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgIH0sXG5cbiAgICBub25jZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHJlcXVlc3Q7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9ICcvYXBpJyArICcvJyArIHJlcXVlc3QgKyBub25jZSArIGJvZHk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGEzODQnKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ2JmeC1ub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgICAgICdiZngtYXBpa2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ2JmeC1zaWduYXR1cmUnOiBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ21lc3NhZ2UnXS5pbmRleE9mICgnbm90IGVub3VnaCBleGNoYW5nZSBiYWxhbmNlJykgPj0gMClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW5zdWZmaWNpZW50RnVuZHMgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn0pXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJpdGZseWVyID0ge1xuXG4gICAgJ2lkJzogJ2JpdGZseWVyJyxcbiAgICAnbmFtZSc6ICdiaXRGbHllcicsXG4gICAgJ2NvdW50cmllcyc6ICdKUCcsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICdyYXRlTGltaXQnOiA1MDAsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjgwNTE2NDItNTYxNTQxODItNjYwZS0xMWU3LTliMGQtNjA0MmQxZTZlZGQ4LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkuYml0Zmx5ZXIuanAnLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYml0Zmx5ZXIuanAnLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vYml0Zmx5ZXIuanAvQVBJJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdnZXRtYXJrZXRzJywgICAgLy8gb3IgJ21hcmtldHMnXG4gICAgICAgICAgICAgICAgJ2dldGJvYXJkJywgICAgICAvLyBvciAnYm9hcmQnXG4gICAgICAgICAgICAgICAgJ2dldHRpY2tlcicsICAgICAvLyBvciAndGlja2VyJ1xuICAgICAgICAgICAgICAgICdnZXRleGVjdXRpb25zJywgLy8gb3IgJ2V4ZWN1dGlvbnMnXG4gICAgICAgICAgICAgICAgJ2dldGhlYWx0aCcsXG4gICAgICAgICAgICAgICAgJ2dldGNoYXRzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnZ2V0cGVybWlzc2lvbnMnLFxuICAgICAgICAgICAgICAgICdnZXRiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnZ2V0Y29sbGF0ZXJhbCcsXG4gICAgICAgICAgICAgICAgJ2dldGNvbGxhdGVyYWxhY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2dldGFkZHJlc3NlcycsXG4gICAgICAgICAgICAgICAgJ2dldGNvaW5pbnMnLFxuICAgICAgICAgICAgICAgICdnZXRjb2lub3V0cycsXG4gICAgICAgICAgICAgICAgJ2dldGJhbmthY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2dldGRlcG9zaXRzJyxcbiAgICAgICAgICAgICAgICAnZ2V0d2l0aGRyYXdhbHMnLFxuICAgICAgICAgICAgICAgICdnZXRjaGlsZG9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldHBhcmVudG9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldHBhcmVudG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2V0ZXhlY3V0aW9ucycsXG4gICAgICAgICAgICAgICAgJ2dldHBvc2l0aW9ucycsXG4gICAgICAgICAgICAgICAgJ2dldHRyYWRpbmdjb21taXNzaW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnc2VuZGNvaW4nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICAgICAgJ3NlbmRjaGlsZG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsY2hpbGRvcmRlcicsXG4gICAgICAgICAgICAgICAgJ3NlbmRwYXJlbnRvcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbHBhcmVudG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsYWxsY2hpbGRvcmRlcnMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1twXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsncHJvZHVjdF9jb2RlJ107XG4gICAgICAgICAgICBsZXQgY3VycmVuY2llcyA9IGlkLnNwbGl0ICgnXycpO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gaWQ7XG4gICAgICAgICAgICBsZXQgbnVtQ3VycmVuY2llcyA9IGN1cnJlbmNpZXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKG51bUN1cnJlbmNpZXMgPT0gMikge1xuICAgICAgICAgICAgICAgIGJhc2UgPSBjdXJyZW5jaWVzWzBdO1xuICAgICAgICAgICAgICAgIHF1b3RlID0gY3VycmVuY2llc1sxXTtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRCYWxhbmNlICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCByZXNwb25zZS5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSByZXNwb25zZVtiXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGFjY291bnRbJ2N1cnJlbmN5X2NvZGUnXTtcbiAgICAgICAgICAgIGJhbGFuY2VzW2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZXMpIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gYmFsYW5jZXNbY3VycmVuY3ldWydhbW91bnQnXTtcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBiYWxhbmNlc1tjdXJyZW5jeV1bJ2F2YWlsYWJsZSddO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRCb2FyZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwcm9kdWN0X2NvZGUnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYmlkcycsICdhc2tzJywgJ3ByaWNlJywgJ3NpemUnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdwcm9kdWN0X2NvZGUnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0aWNrZXJbJ3RpbWVzdGFtcCddKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsb3cnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiZXN0X2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Jlc3RfYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsdHAnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWVfYnlfcHJvZHVjdCddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHNpZGUgPSB0cmFkZVsnc2lkZSddLnRvTG93ZXJDYXNlICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSBzaWRlICsgJ19jaGlsZF9vcmRlcl9hY2NlcHRhbmNlX2lkJztcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0cmFkZVsnZXhlY19kYXRlJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdHJhZGVbb3JkZXJdLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnc2l6ZSddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhlY3V0aW9ucyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwcm9kdWN0X2NvZGUnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdwcm9kdWN0X2NvZGUnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2NoaWxkX29yZGVyX3R5cGUnOiB0eXBlLnRvVXBwZXJDYXNlICgpLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLnRvVXBwZXJDYXNlICgpLFxuICAgICAgICAgICAgJ3ByaWNlJzogcHJpY2UsXG4gICAgICAgICAgICAnc2l6ZSc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RTZW5kY2hpbGRvcmRlciAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzdWx0LFxuICAgICAgICAgICAgJ2lkJzogcmVzdWx0WydjaGlsZF9vcmRlcl9hY2NlcHRhbmNlX2lkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxjaGlsZG9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhcmVudF9vcmRlcl9pZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcmVxdWVzdCA9ICcvJyArIHRoaXMudmVyc2lvbiArICcvJztcbiAgICAgICAgaWYgKGFwaSA9PSAncHJpdmF0ZScpXG4gICAgICAgICAgICByZXF1ZXN0ICs9ICdtZS8nO1xuICAgICAgICByZXF1ZXN0ICs9IHBhdGg7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgcmVxdWVzdDtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gWyBub25jZSwgbWV0aG9kLCByZXF1ZXN0LCBib2R5IF0uam9pbiAoJycpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQUNDRVNTLUtFWSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdBQ0NFU1MtVElNRVNUQU1QJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ0FDQ0VTUy1TSUdOJzogdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuc2VjcmV0KSxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJpdGxpc2ggPSB7XG5cbiAgICAnaWQnOiAnYml0bGlzaCcsXG4gICAgJ25hbWUnOiAnYml0bGlzaCcsXG4gICAgJ2NvdW50cmllcyc6IFsgJ0dCJywgJ0VVJywgJ1JVJyBdLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICd2ZXJzaW9uJzogJ3YxJyxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAnaGFzRmV0Y2hPSExDVic6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjYyNzUtZGNmYzZjMzAtNWVkMy0xMWU3LTgzOWQtMDBhODQ2Mzg1ZDBiLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9iaXRsaXNoLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYml0bGlzaC5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vYml0bGlzaC5jb20vYXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdpbnN0cnVtZW50cycsXG4gICAgICAgICAgICAgICAgJ29obGN2JyxcbiAgICAgICAgICAgICAgICAncGFpcnMnLFxuICAgICAgICAgICAgICAgICd0aWNrZXJzJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzX2RlcHRoJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzX2hpc3RvcnknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdpbnN0cnVtZW50cycsXG4gICAgICAgICAgICAgICAgJ29obGN2JyxcbiAgICAgICAgICAgICAgICAncGFpcnMnLFxuICAgICAgICAgICAgICAgICd0aWNrZXJzJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzX2RlcHRoJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzX2hpc3RvcnknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYWNjb3VudHNfb3BlcmF0aW9ucycsXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfdHJhZGUnLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfdHJhZGVzX2J5X2lkcycsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9hbGxfdHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnY3JlYXRlX2Jjb2RlJyxcbiAgICAgICAgICAgICAgICAnY3JlYXRlX3RlbXBsYXRlX3dhbGxldCcsXG4gICAgICAgICAgICAgICAgJ2NyZWF0ZV90cmFkZScsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICdsaXN0X2FjY291bnRzX29wZXJhdGlvbnNfZnJvbV90cycsXG4gICAgICAgICAgICAgICAgJ2xpc3RfYWN0aXZlX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2xpc3RfYmNvZGVzJyxcbiAgICAgICAgICAgICAgICAnbGlzdF9teV9tYXRjaGVzX2Zyb21fdHMnLFxuICAgICAgICAgICAgICAgICdsaXN0X215X3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2xpc3RfbXlfdHJhZHNfZnJvbV90cycsXG4gICAgICAgICAgICAgICAgJ2xpc3RfcGF5bWVudF9tZXRob2RzJyxcbiAgICAgICAgICAgICAgICAnbGlzdF9wYXltZW50cycsXG4gICAgICAgICAgICAgICAgJ3JlZGVlbV9jb2RlJyxcbiAgICAgICAgICAgICAgICAncmVzaWduJyxcbiAgICAgICAgICAgICAgICAnc2lnbmluJyxcbiAgICAgICAgICAgICAgICAnc2lnbm91dCcsXG4gICAgICAgICAgICAgICAgJ3RyYWRlX2RldGFpbHMnLFxuICAgICAgICAgICAgICAgICd0cmFkZV9vcHRpb25zJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd19ieV9pZCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0UGFpcnMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyAobWFya2V0cyk7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwga2V5cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNba2V5c1twXV07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ2lkJ107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WyduYW1lJ107XG4gICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gc3ltYm9sLnNwbGl0ICgnLycpO1xuICAgICAgICAgICAgLy8gaXNzdWUgIzQgYml0bGlzaCBuYW1lcyBEYXNoIGFzIERTSCwgaW5zdGVhZCBvZiBEQVNIXG4gICAgICAgICAgICBpZiAoYmFzZSA9PSAnRFNIJylcbiAgICAgICAgICAgICAgICBiYXNlID0gJ0RBU0gnO1xuICAgICAgICAgICAgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ21heCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ21pbiddKSxcbiAgICAgICAgICAgICdiaWQnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXNrJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnZmlyc3QnXSksXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlcnMgKCk7XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlcnMgKCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW21hcmtldFsnaWQnXV07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT0hMQ1YgKHN5bWJvbCwgdGltZWZyYW1lID0gJzFtJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkgeyAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG5vdyA9IHRoaXMuc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gbm93IC0gODY0MDAgKiAzMDsgLy8gbGFzdCAzMCBkYXlzXG4gICAgICAgIGxldCBpbnRlcnZhbCA9IFsgc3RhcnQudG9TdHJpbmcgKCksIHVuZGVmaW5lZCBdO1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNQb3N0T2hsY3YgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAndGltZV9yYW5nZSc6IGludGVydmFsLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzRGVwdGggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcl9pZCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKHBhcnNlSW50IChvcmRlcmJvb2tbJ2xhc3QnXSkgLyAxMDAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdGltZXN0YW1wLCAnYmlkJywgJ2FzaycsICdwcmljZScsICd2b2x1bWUnKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc2lkZSA9ICh0cmFkZVsnZGlyJ10gPT0gJ2JpZCcpID8gJ2J1eScgOiAnc2VsbCc7XG4gICAgICAgIGxldCBzeW1ib2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodHJhZGVbJ2NyZWF0ZWQnXSAvIDEwMDApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ2Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzSGlzdG9yeSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyX2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWydsaXN0J10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgbGV0IGN1cnJlbmNpZXMgPSBPYmplY3Qua2V5cyAocmVzcG9uc2UpO1xuICAgICAgICBsZXQgYmFsYW5jZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHJlc3BvbnNlW2N1cnJlbmN5XTtcbiAgICAgICAgICAgIGN1cnJlbmN5ID0gY3VycmVuY3kudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICAvLyBpc3N1ZSAjNCBiaXRsaXNoIG5hbWVzIERhc2ggYXMgRFNILCBpbnN0ZWFkIG9mIERBU0hcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSA9PSAnRFNIJylcbiAgICAgICAgICAgICAgICBjdXJyZW5jeSA9ICdEQVNIJztcbiAgICAgICAgICAgIGJhbGFuY2VbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZSkge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbY3VycmVuY3ldWydmdW5kcyddKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlW2N1cnJlbmN5XVsnaG9sZGVkJ10pO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgc2lnbkluICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RTaWduaW4gKHtcbiAgICAgICAgICAgICdsb2dpbic6IHRoaXMubG9naW4sXG4gICAgICAgICAgICAncGFzc3dkJzogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdwYWlyX2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdkaXInOiAoc2lkZSA9PSAnYnV5JykgPyAnYmlkJyA6ICdhc2snLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2xpbWl0JylcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0Q3JlYXRlVHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3VsdCxcbiAgICAgICAgICAgICdpZCc6IHJlc3VsdFsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsVHJhZGUgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAobWV0aG9kID09ICdHRVQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocGFyYW1zKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uICh0aGlzLmV4dGVuZCAoeyAndG9rZW4nOiB0aGlzLmFwaUtleSB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJpdG1hcmtldCA9IHtcblxuICAgICdpZCc6ICdiaXRtYXJrZXQnLFxuICAgICduYW1lJzogJ0JpdE1hcmtldCcsXG4gICAgJ2NvdW50cmllcyc6IFsgJ1BMJywgJ0VVJyBdLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzkwbSc6ICc5MG0nLFxuICAgICAgICAnNmgnOiAnNmgnLFxuICAgICAgICAnMWQnOiAnMWQnLFxuICAgICAgICAnMXcnOiAnN2QnLFxuICAgICAgICAnMU0nOiAnMW0nLFxuICAgICAgICAnM00nOiAnM20nLFxuICAgICAgICAnNk0nOiAnNm0nLFxuICAgICAgICAnMXknOiAnMXknLFxuICAgIH0sXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjcyNTYtYTg1NTUyMDAtNWVmOS0xMWU3LTk2ZmQtNDY5YTY1ZTJiMGJkLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vd3d3LmJpdG1hcmtldC5uZXQnLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly93d3cuYml0bWFya2V0LnBsL2FwaTIvJywgLy8gbGFzdCBzbGFzaCBpcyBjcml0aWNhbFxuICAgICAgICB9LFxuICAgICAgICAnd3d3JzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LmJpdG1hcmtldC5wbCcsXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cuYml0bWFya2V0Lm5ldCcsXG4gICAgICAgIF0sXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cuYml0bWFya2V0Lm5ldC9kb2NzLnBocD9maWxlPWFwaV9wdWJsaWMuaHRtbCcsXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cuYml0bWFya2V0Lm5ldC9kb2NzLnBocD9maWxlPWFwaV9wcml2YXRlLmh0bWwnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9iaXRtYXJrZXQtbmV0L2FwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnanNvbi97bWFya2V0fS90aWNrZXInLFxuICAgICAgICAgICAgICAgICdqc29uL3ttYXJrZXR9L29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ2pzb24ve21hcmtldH0vdHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnanNvbi9jdHJhbnNmZXInLFxuICAgICAgICAgICAgICAgICdncmFwaHMve21hcmtldH0vOTBtJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzZoJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzFkJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzdkJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzFtJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzNtJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzZtJyxcbiAgICAgICAgICAgICAgICAnZ3JhcGhzL3ttYXJrZXR9LzF5JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2luZm8nLFxuICAgICAgICAgICAgICAgICd0cmFkZScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ29yZGVycycsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2hpc3RvcnknLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2FscycsXG4gICAgICAgICAgICAgICAgJ3RyYWRpbmdkZXNrJyxcbiAgICAgICAgICAgICAgICAndHJhZGluZ2Rlc2tTdGF0dXMnLFxuICAgICAgICAgICAgICAgICd0cmFkaW5nZGVza0NvbmZpcm0nLFxuICAgICAgICAgICAgICAgICdjcnlwdG90cmFkaW5nZGVzaycsXG4gICAgICAgICAgICAgICAgJ2NyeXB0b3RyYWRpbmdkZXNrU3RhdHVzJyxcbiAgICAgICAgICAgICAgICAnY3J5cHRvdHJhZGluZ2Rlc2tDb25maXJtJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd0ZpYXQnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd1BMTlBQJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdGaWF0RmFzdCcsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICd0cmFuc2ZlcicsXG4gICAgICAgICAgICAgICAgJ3RyYW5zZmVycycsXG4gICAgICAgICAgICAgICAgJ21hcmdpbkxpc3QnLFxuICAgICAgICAgICAgICAgICdtYXJnaW5PcGVuJyxcbiAgICAgICAgICAgICAgICAnbWFyZ2luQ2xvc2UnLFxuICAgICAgICAgICAgICAgICdtYXJnaW5DYW5jZWwnLFxuICAgICAgICAgICAgICAgICdtYXJnaW5Nb2RpZnknLFxuICAgICAgICAgICAgICAgICdtYXJnaW5CYWxhbmNlQWRkJyxcbiAgICAgICAgICAgICAgICAnbWFyZ2luQmFsYW5jZVJlbW92ZScsXG4gICAgICAgICAgICAgICAgJ3N3YXBMaXN0JyxcbiAgICAgICAgICAgICAgICAnc3dhcE9wZW4nLFxuICAgICAgICAgICAgICAgICdzd2FwQ2xvc2UnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1BMTic6IHsgJ2lkJzogJ0JUQ1BMTicsICdzeW1ib2wnOiAnQlRDL1BMTicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdQTE4nIH0sXG4gICAgICAgICdCVEMvRVVSJzogeyAnaWQnOiAnQlRDRVVSJywgJ3N5bWJvbCc6ICdCVEMvRVVSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0VVUicgfSxcbiAgICAgICAgJ0xUQy9QTE4nOiB7ICdpZCc6ICdMVENQTE4nLCAnc3ltYm9sJzogJ0xUQy9QTE4nLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnUExOJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ0xUQ0JUQycsICdzeW1ib2wnOiAnTFRDL0JUQycsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMaXRlTWluZVgvQlRDJzogeyAnaWQnOiAnTGl0ZU1pbmVYQlRDJywgJ3N5bWJvbCc6ICdMaXRlTWluZVgvQlRDJywgJ2Jhc2UnOiAnTGl0ZU1pbmVYJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ1BsblgvQlRDJzogeyAnaWQnOiAnUGxueEJUQycsICdzeW1ib2wnOiAnUGxuWC9CVEMnLCAnYmFzZSc6ICdQbG5YJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0SW5mbyAoKTtcbiAgICAgICAgbGV0IGRhdGEgPSByZXNwb25zZVsnZGF0YSddO1xuICAgICAgICBsZXQgYmFsYW5jZSA9IGRhdGFbJ2JhbGFuY2VzJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogZGF0YSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZVsnYXZhaWxhYmxlJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gYmFsYW5jZVsnYXZhaWxhYmxlJ11bY3VycmVuY3ldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbmN5IGluIGJhbGFuY2VbJ2Jsb2NrZWQnXSlcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBiYWxhbmNlWydibG9ja2VkJ11bY3VycmVuY3ldO1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRKc29uTWFya2V0T3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnYmlkcyc6IG9yZGVyYm9va1snYmlkcyddLFxuICAgICAgICAgICAgJ2Fza3MnOiBvcmRlcmJvb2tbJ2Fza3MnXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0SnNvbk1hcmtldFRpY2tlciAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHBhcnNlRmxvYXQgKHRpY2tlclsndndhcCddKSxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc2lkZSA9ICh0cmFkZVsndHlwZSddID09ICdiaWQnKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRKc29uTWFya2V0VHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPSExDViAob2hsY3YsIG1hcmtldCA9IHVuZGVmaW5lZCwgdGltZWZyYW1lID0gJzkwbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb2hsY3ZbJ3RpbWUnXSAqIDEwMDAsXG4gICAgICAgICAgICBwYXJzZUZsb2F0IChvaGxjdlsnb3BlbiddKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WydoaWdoJ10pLFxuICAgICAgICAgICAgcGFyc2VGbG9hdCAob2hsY3ZbJ2xvdyddKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WydjbG9zZSddKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2Wyd2b2wnXSksXG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT0hMQ1YgKHN5bWJvbCwgdGltZWZyYW1lID0gJzkwbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwdWJsaWNHZXRHcmFwaHNNYXJrZXQnICsgdGhpcy50aW1lZnJhbWVzW3RpbWVmcmFtZV07XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT0hMQ1ZzIChyZXNwb25zZSwgbWFya2V0LCB0aW1lZnJhbWUsIHNpbmNlLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RUcmFkZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCdpZCcgaW4gcmVzcG9uc2VbJ29yZGVyJ10pXG4gICAgICAgICAgICByZXN1bHRbJ2lkJ10gPSByZXNwb25zZVsnaWQnXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV07XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGggKyAnLmpzb24nLCBwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ3RvbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHBhdGgsXG4gICAgICAgICAgICB9LCBwYXJhbXMpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdBUEktS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ0FQSS1IYXNoJzogdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYm9keSksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGE1MTInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaXRtZXggPSB7XG5cbiAgICAnaWQnOiAnYml0bWV4JyxcbiAgICAnbmFtZSc6ICdCaXRNRVgnLFxuICAgICdjb3VudHJpZXMnOiAnU0MnLCAvLyBTZXljaGVsbGVzXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFtJzogJzFtJyxcbiAgICAgICAgJzVtJzogJzVtJyxcbiAgICAgICAgJzFoJzogJzFoJyxcbiAgICAgICAgJzFkJzogJzFkJyxcbiAgICB9LFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2MzE5LWY2NTNjNmU2LTVlZDQtMTFlNy05MzNkLWYwYmMzNjk5YWU4Zi5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vd3d3LmJpdG1leC5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJpdG1leC5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LmJpdG1leC5jb20vYXBwL2FwaU92ZXJ2aWV3JyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vQml0TUVYL2FwaS1jb25uZWN0b3JzL3RyZWUvbWFzdGVyL29mZmljaWFsLWh0dHAnLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2Fubm91bmNlbWVudCcsXG4gICAgICAgICAgICAgICAgJ2Fubm91bmNlbWVudC91cmdlbnQnLFxuICAgICAgICAgICAgICAgICdmdW5kaW5nJyxcbiAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgJ2luc3RydW1lbnQvYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudC9hY3RpdmVBbmRJbmRpY2VzJyxcbiAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudC9hY3RpdmVJbnRlcnZhbHMnLFxuICAgICAgICAgICAgICAgICdpbnN0cnVtZW50L2NvbXBvc2l0ZUluZGV4JyxcbiAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudC9pbmRpY2VzJyxcbiAgICAgICAgICAgICAgICAnaW5zdXJhbmNlJyxcbiAgICAgICAgICAgICAgICAnbGVhZGVyYm9hcmQnLFxuICAgICAgICAgICAgICAgICdsaXF1aWRhdGlvbicsXG4gICAgICAgICAgICAgICAgJ29yZGVyQm9vaycsXG4gICAgICAgICAgICAgICAgJ29yZGVyQm9vay9MMicsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJyxcbiAgICAgICAgICAgICAgICAncXVvdGUvYnVja2V0ZWQnLFxuICAgICAgICAgICAgICAgICdzY2hlbWEnLFxuICAgICAgICAgICAgICAgICdzY2hlbWEvd2Vic29ja2V0SGVscCcsXG4gICAgICAgICAgICAgICAgJ3NldHRsZW1lbnQnLFxuICAgICAgICAgICAgICAgICdzdGF0cycsXG4gICAgICAgICAgICAgICAgJ3N0YXRzL2hpc3RvcnknLFxuICAgICAgICAgICAgICAgICd0cmFkZScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlL2J1Y2tldGVkJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYXBpS2V5JyxcbiAgICAgICAgICAgICAgICAnY2hhdCcsXG4gICAgICAgICAgICAgICAgJ2NoYXQvY2hhbm5lbHMnLFxuICAgICAgICAgICAgICAgICdjaGF0L2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICAgICAgJ2V4ZWN1dGlvbicsXG4gICAgICAgICAgICAgICAgJ2V4ZWN1dGlvbi90cmFkZUhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdub3RpZmljYXRpb24nLFxuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICAndXNlcicsXG4gICAgICAgICAgICAgICAgJ3VzZXIvYWZmaWxpYXRlU3RhdHVzJyxcbiAgICAgICAgICAgICAgICAndXNlci9jaGVja1JlZmVycmFsQ29kZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvY29tbWlzc2lvbicsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZGVwb3NpdEFkZHJlc3MnLFxuICAgICAgICAgICAgICAgICd1c2VyL21hcmdpbicsXG4gICAgICAgICAgICAgICAgJ3VzZXIvbWluV2l0aGRyYXdhbEZlZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvd2FsbGV0JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXRIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXRTdW1tYXJ5JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYXBpS2V5JyxcbiAgICAgICAgICAgICAgICAnYXBpS2V5L2Rpc2FibGUnLFxuICAgICAgICAgICAgICAgICdhcGlLZXkvZW5hYmxlJyxcbiAgICAgICAgICAgICAgICAnY2hhdCcsXG4gICAgICAgICAgICAgICAgJ29yZGVyJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvYnVsaycsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NhbmNlbEFsbEFmdGVyJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY2xvc2VQb3NpdGlvbicsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL2lzb2xhdGUnLFxuICAgICAgICAgICAgICAgICdwb3NpdGlvbi9sZXZlcmFnZScsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL3Jpc2tMaW1pdCcsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uL3RyYW5zZmVyTWFyZ2luJyxcbiAgICAgICAgICAgICAgICAndXNlci9jYW5jZWxXaXRoZHJhd2FsJyxcbiAgICAgICAgICAgICAgICAndXNlci9jb25maXJtRW1haWwnLFxuICAgICAgICAgICAgICAgICd1c2VyL2NvbmZpcm1FbmFibGVURkEnLFxuICAgICAgICAgICAgICAgICd1c2VyL2NvbmZpcm1XaXRoZHJhd2FsJyxcbiAgICAgICAgICAgICAgICAndXNlci9kaXNhYmxlVEZBJyxcbiAgICAgICAgICAgICAgICAndXNlci9sb2dvdXQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2xvZ291dEFsbCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvcHJlZmVyZW5jZXMnLFxuICAgICAgICAgICAgICAgICd1c2VyL3JlcXVlc3RFbmFibGVURkEnLFxuICAgICAgICAgICAgICAgICd1c2VyL3JlcXVlc3RXaXRoZHJhd2FsJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncHV0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2J1bGsnLFxuICAgICAgICAgICAgICAgICd1c2VyJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICdhcGlLZXknLFxuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2FsbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRJbnN0cnVtZW50QWN0aXZlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgbWFya2V0cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbcF07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBtYXJrZXRbJ3VuZGVybHlpbmcnXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsncXVvdGVDdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IGlzRnV0dXJlc0NvbnRyYWN0ID0gaWQgIT0gKGJhc2UgKyBxdW90ZSk7XG4gICAgICAgICAgICBiYXNlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGJhc2UpO1xuICAgICAgICAgICAgcXVvdGUgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAocXVvdGUpO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGlzRnV0dXJlc0NvbnRyYWN0ID8gaWQgOiAoYmFzZSArICcvJyArIHF1b3RlKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldFVzZXJNYXJnaW4gKHsgJ2N1cnJlbmN5JzogJ2FsbCcgfSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCByZXNwb25zZS5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSByZXNwb25zZVtiXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGJhbGFuY2VbJ2N1cnJlbmN5J10udG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBjdXJyZW5jeSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChjdXJyZW5jeSk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAnZnJlZSc6IGJhbGFuY2VbJ2F2YWlsYWJsZU1hcmdpbiddLFxuICAgICAgICAgICAgICAgICd1c2VkJzogMC4wLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2VbJ2Ftb3VudCddLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSA9PSAnQlRDJykge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IGFjY291bnRbJ2ZyZWUnXSAqIDAuMDAwMDAwMDE7XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IGFjY291bnRbJ3RvdGFsJ10gKiAwLjAwMDAwMDAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyQm9va0wyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnYmlkcyc6IFtdLFxuICAgICAgICAgICAgJ2Fza3MnOiBbXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IG8gPSAwOyBvIDwgb3JkZXJib29rLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICBsZXQgb3JkZXIgPSBvcmRlcmJvb2tbb107XG4gICAgICAgICAgICBsZXQgc2lkZSA9IChvcmRlclsnc2lkZSddID09ICdTZWxsJykgPyAnYXNrcycgOiAnYmlkcyc7XG4gICAgICAgICAgICBsZXQgYW1vdW50ID0gb3JkZXJbJ3NpemUnXTtcbiAgICAgICAgICAgIGxldCBwcmljZSA9IG9yZGVyWydwcmljZSddO1xuICAgICAgICAgICAgcmVzdWx0W3NpZGVdLnB1c2ggKFsgcHJpY2UsIGFtb3VudCBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbJ2JpZHMnXSA9IHRoaXMuc29ydEJ5IChyZXN1bHRbJ2JpZHMnXSwgMCwgdHJ1ZSk7XG4gICAgICAgIHJlc3VsdFsnYXNrcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYXNrcyddLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2JpblNpemUnOiAnMWQnLFxuICAgICAgICAgICAgJ3BhcnRpYWwnOiB0cnVlLFxuICAgICAgICAgICAgJ2NvdW50JzogMSxcbiAgICAgICAgICAgICdyZXZlcnNlJzogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHF1b3RlcyA9IGF3YWl0IHRoaXMucHVibGljR2V0UXVvdGVCdWNrZXRlZCAocmVxdWVzdCk7XG4gICAgICAgIGxldCBxdW90ZXNMZW5ndGggPSBxdW90ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgcXVvdGUgPSBxdW90ZXNbcXVvdGVzTGVuZ3RoIC0gMV07XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZUJ1Y2tldGVkIChyZXF1ZXN0KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbMF07XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0IChxdW90ZVsnYmlkUHJpY2UnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAocXVvdGVbJ2Fza1ByaWNlJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3Z3YXAnXSksXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnY2xvc2UnXSksXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hvbWVOb3Rpb25hbCddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnZm9yZWlnbk5vdGlvbmFsJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKG9obGN2Wyd0aW1lc3RhbXAnXSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICBvaGxjdlsnb3BlbiddLFxuICAgICAgICAgICAgb2hsY3ZbJ2hpZ2gnXSxcbiAgICAgICAgICAgIG9obGN2Wydsb3cnXSxcbiAgICAgICAgICAgIG9obGN2WydjbG9zZSddLFxuICAgICAgICAgICAgb2hsY3ZbJ3ZvbHVtZSddLFxuICAgICAgICBdO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9ITENWIChzeW1ib2wsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgLy8gc2VuZCBKU09OIGtleS92YWx1ZSBwYWlycywgc3VjaCBhcyB7XCJrZXlcIjogXCJ2YWx1ZVwifVxuICAgICAgICAvLyBmaWx0ZXIgYnkgaW5kaXZpZHVhbCBmaWVsZHMgYW5kIGRvIGFkdmFuY2VkIHF1ZXJpZXMgb24gdGltZXN0YW1wc1xuICAgICAgICBsZXQgZmlsdGVyID0geyAna2V5JzogJ3ZhbHVlJyB9O1xuICAgICAgICAvLyBzZW5kIGEgYmFyZSBzZXJpZXMgKGUuZy4gWEJVKSB0byBuZWFyZXN0IGV4cGlyaW5nIGNvbnRyYWN0IGluIHRoYXQgc2VyaWVzXG4gICAgICAgIC8vIHlvdSBjYW4gYWxzbyBzZW5kIGEgdGltZWZyYW1lLCBlLmcuIFhCVTptb250aGx5XG4gICAgICAgIC8vIHRpbWVmcmFtZXM6IGRhaWx5LCB3ZWVrbHksIG1vbnRobHksIHF1YXJ0ZXJseSwgYW5kIGJpcXVhcnRlcmx5XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ2JpblNpemUnOiB0aGlzLnRpbWVmcmFtZXNbdGltZWZyYW1lXSxcbiAgICAgICAgICAgICdwYXJ0aWFsJzogdHJ1ZSwgICAgIC8vIHRydWUgPT0gaW5jbHVkZSB5ZXQtaW5jb21wbGV0ZSBjdXJyZW50IGJpbnNcbiAgICAgICAgICAgIC8vICdmaWx0ZXInOiBmaWx0ZXIsIC8vIGZpbHRlciBieSBpbmRpdmlkdWFsIGZpZWxkcyBhbmQgZG8gYWR2YW5jZWQgcXVlcmllc1xuICAgICAgICAgICAgLy8gJ2NvbHVtbnMnOiBbXSwgICAgLy8gd2lsbCByZXR1cm4gYWxsIGNvbHVtbnMgaWYgb21pdHRlZFxuICAgICAgICAgICAgLy8gJ3N0YXJ0JzogMCwgICAgICAgLy8gc3RhcnRpbmcgcG9pbnQgZm9yIHJlc3VsdHMgKHd0Zj8pXG4gICAgICAgICAgICAvLyAncmV2ZXJzZSc6IGZhbHNlLCAvLyB0cnVlID09IG5ld2VzdCBmaXJzdFxuICAgICAgICAgICAgLy8gJ2VuZFRpbWUnOiAnJywgICAgLy8gZW5kaW5nIGRhdGUgZmlsdGVyIGZvciByZXN1bHRzXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzaW5jZSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ3N0YXJ0VGltZSddID0gc2luY2U7IC8vIHN0YXJ0aW5nIGRhdGUgZmlsdGVyIGZvciByZXN1bHRzXG4gICAgICAgIGlmIChsaW1pdClcbiAgICAgICAgICAgIHJlcXVlc3RbJ2NvdW50J10gPSBsaW1pdDsgLy8gZGVmYXVsdCAxMDBcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZUJ1Y2tldGVkICh0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT0hMQ1ZzIChyZXNwb25zZSwgbWFya2V0LCB0aW1lZnJhbWUsIHNpbmNlLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0cmFkZVsndGltZXN0YW1wJ10pO1xuICAgICAgICBsZXQgc3ltYm9sID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIW1hcmtldCkge1xuICAgICAgICAgICAgaWYgKCdzeW1ib2wnIGluIHRyYWRlKVxuICAgICAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFt0cmFkZVsnc3ltYm9sJ11dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJkTWF0Y2hJRCddLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsnc2lkZSddLnRvTG93ZXJDYXNlICgpLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ3NpemUnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnc2lkZSc6IHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSksXG4gICAgICAgICAgICAnb3JkZXJRdHknOiBhbW91bnQsXG4gICAgICAgICAgICAnb3JkVHlwZSc6IHRoaXMuY2FwaXRhbGl6ZSAodHlwZSksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncmF0ZSddID0gcHJpY2U7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlciAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJJRCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZURlbGV0ZU9yZGVyICh7ICdvcmRlcklEJzogaWQgfSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gJy9hcGknICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcGF0aDtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgIHF1ZXJ5ICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArIHF1ZXJ5O1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ1BPU1QnKVxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHBhcmFtcyk7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdCA9IFsgbWV0aG9kLCBxdWVyeSwgbm9uY2UsIGJvZHkgfHwgJyddLmpvaW4gKCcnKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBpLW5vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ2FwaS1rZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnYXBpLXNpZ25hdHVyZSc6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKHJlcXVlc3QpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBiaXRzbyA9IHtcblxuICAgICdpZCc6ICdiaXRzbycsXG4gICAgJ25hbWUnOiAnQml0c28nLFxuICAgICdjb3VudHJpZXMnOiAnTVgnLCAvLyBNZXhpY29cbiAgICAncmF0ZUxpbWl0JzogMjAwMCwgLy8gMzAgcmVxdWVzdHMgcGVyIG1pbnV0ZVxuICAgICd2ZXJzaW9uJzogJ3YzJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjMzNS03MTVjZTdhYS01ZWQ1LTExZTctODhhOC0xNzNhMjdiYjMwZmUuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5iaXRzby5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYml0c28uY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2JpdHNvLmNvbS9hcGlfaW5mbycsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYXZhaWxhYmxlX2Jvb2tzJyxcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJfYm9vaycsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2FjY291bnRfc3RhdHVzJyxcbiAgICAgICAgICAgICAgICAnYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ2ZlZXMnLFxuICAgICAgICAgICAgICAgICdmdW5kaW5ncycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRpbmdzL3tmaWR9JyxcbiAgICAgICAgICAgICAgICAnZnVuZGluZ19kZXN0aW5hdGlvbicsXG4gICAgICAgICAgICAgICAgJ2t5Y19kb2N1bWVudHMnLFxuICAgICAgICAgICAgICAgICdsZWRnZXInLFxuICAgICAgICAgICAgICAgICdsZWRnZXIvdHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnbGVkZ2VyL2ZlZXMnLFxuICAgICAgICAgICAgICAgICdsZWRnZXIvZnVuZGluZ3MnLFxuICAgICAgICAgICAgICAgICdsZWRnZXIvd2l0aGRyYXdhbHMnLFxuICAgICAgICAgICAgICAgICdteF9iYW5rX2NvZGVzJyxcbiAgICAgICAgICAgICAgICAnb3Blbl9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdvcmRlcl90cmFkZXMve29pZH0nLFxuICAgICAgICAgICAgICAgICdvcmRlcnMve29pZH0nLFxuICAgICAgICAgICAgICAgICd1c2VyX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3VzZXJfdHJhZGVzL3t0aWR9JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbHMvJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbHMve3dpZH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdiaXRjb2luX3dpdGhkcmF3YWwnLFxuICAgICAgICAgICAgICAgICdkZWJpdF9jYXJkX3dpdGhkcmF3YWwnLFxuICAgICAgICAgICAgICAgICdldGhlcl93aXRoZHJhd2FsJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAncGhvbmVfbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAncGhvbmVfdmVyaWZpY2F0aW9uJyxcbiAgICAgICAgICAgICAgICAncGhvbmVfd2l0aGRyYXdhbCcsXG4gICAgICAgICAgICAgICAgJ3NwZWlfd2l0aGRyYXdhbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICAgICAnb3JkZXJzL3tvaWR9JyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL2FsbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRBdmFpbGFibGVCb29rcyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHNbJ3BheWxvYWQnXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ3BheWxvYWQnXVtwXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnYm9vayddO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGlkLnRvVXBwZXJDYXNlICgpLnJlcGxhY2UgKCdfJywgJy8nKTtcbiAgICAgICAgICAgIGxldCBbIGJhc2UsIHF1b3RlIF0gPSBzeW1ib2wuc3BsaXQgKCcvJyk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRCYWxhbmNlICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncGF5bG9hZCddWydiYWxhbmNlcyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHJlc3BvbnNlIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydhdmFpbGFibGUnXSksXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydsb2NrZWQnXSksXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsndG90YWwnXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPcmRlckJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnYm9vayc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gcmVzcG9uc2VbJ3BheWxvYWQnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxIChvcmRlcmJvb2tbJ3VwZGF0ZWRfYXQnXSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICdhbW91bnQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoe1xuICAgICAgICAgICAgJ2Jvb2snOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWydwYXlsb2FkJ107XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodGlja2VyWydjcmVhdGVkX2F0J10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3Z3YXAnXSksXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0cmFkZVsnY3JlYXRlZF9hdCddKTtcbiAgICAgICAgbGV0IHN5bWJvbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCFtYXJrZXQpIHtcbiAgICAgICAgICAgIGlmICgnYm9vaycgaW4gdHJhZGUpXG4gICAgICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW3RyYWRlWydib29rJ11dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydtYWtlcl9zaWRlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdib29rJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsncGF5bG9hZCddLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnYm9vayc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAndHlwZSc6IHR5cGUsXG4gICAgICAgICAgICAnbWFqb3InOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0T3JkZXJzICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydwYXlsb2FkJ11bJ29pZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZURlbGV0ZU9yZGVycyAoeyAnb2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArIHF1ZXJ5O1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdCA9IFsgbm9uY2UsIG1ldGhvZCwgcXVlcnksIGJvZHkgfHwgJycgXS5qb2luICgnJyk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAocmVxdWVzdCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB0aGlzLmFwaUtleSArICc6JyArIG5vbmNlICsgJzonICsgc2lnbmF0dXJlO1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ0F1dGhvcml6YXRpb24nOiBcIkJpdHNvIFwiICsgYXV0aCB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYml0c3RhbXAgPSB7XG5cbiAgICAnaWQnOiAnYml0c3RhbXAnLFxuICAgICduYW1lJzogJ0JpdHN0YW1wJyxcbiAgICAnY291bnRyaWVzJzogJ0dCJyxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAndmVyc2lvbic6ICd2MicsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3ODYzNzctOGM4YWI1N2UtNWZlOS0xMWU3LThlYTQtMmIwNWI2YmNjZWVjLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly93d3cuYml0c3RhbXAubmV0L2FwaScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuYml0c3RhbXAubmV0JyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy5iaXRzdGFtcC5uZXQvYXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcl9ib29rL3tpZH0vJyxcbiAgICAgICAgICAgICAgICAndGlja2VyX2hvdXIve2lkfS8nLFxuICAgICAgICAgICAgICAgICd0aWNrZXIve2lkfS8nLFxuICAgICAgICAgICAgICAgICd0cmFuc2FjdGlvbnMve2lkfS8nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYmFsYW5jZS8nLFxuICAgICAgICAgICAgICAgICdiYWxhbmNlL3tpZH0vJyxcbiAgICAgICAgICAgICAgICAnYnV5L3tpZH0vJyxcbiAgICAgICAgICAgICAgICAnYnV5L21hcmtldC97aWR9LycsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlci8nLFxuICAgICAgICAgICAgICAgICdsaXF1aWRhdGlvbl9hZGRyZXNzL2luZm8vJyxcbiAgICAgICAgICAgICAgICAnbGlxdWlkYXRpb25fYWRkcmVzcy9uZXcvJyxcbiAgICAgICAgICAgICAgICAnb3Blbl9vcmRlcnMvYWxsLycsXG4gICAgICAgICAgICAgICAgJ29wZW5fb3JkZXJzL3tpZH0vJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJfc3RhdHVzLycsXG4gICAgICAgICAgICAgICAgJ3NlbGwve2lkfS8nLFxuICAgICAgICAgICAgICAgICdzZWxsL21hcmtldC97aWR9LycsXG4gICAgICAgICAgICAgICAgJ3RyYW5zZmVyLWZyb20tbWFpbi8nLFxuICAgICAgICAgICAgICAgICd0cmFuc2Zlci10by1tYWluLycsXG4gICAgICAgICAgICAgICAgJ3VzZXJfdHJhbnNhY3Rpb25zLycsXG4gICAgICAgICAgICAgICAgJ3VzZXJfdHJhbnNhY3Rpb25zL3tpZH0vJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbC9jYW5jZWwvJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbC9vcGVuLycsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3YWwvc3RhdHVzLycsXG4gICAgICAgICAgICAgICAgJ3hycF9hZGRyZXNzLycsXG4gICAgICAgICAgICAgICAgJ3hycF93aXRoZHJhd2FsLycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnYnRjdXNkJywgJ3N5bWJvbCc6ICdCVEMvVVNEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0JUQy9FVVInOiB7ICdpZCc6ICdidGNldXInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnRVVSL1VTRCc6IHsgJ2lkJzogJ2V1cnVzZCcsICdzeW1ib2wnOiAnRVVSL1VTRCcsICdiYXNlJzogJ0VVUicsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdYUlAvVVNEJzogeyAnaWQnOiAneHJwdXNkJywgJ3N5bWJvbCc6ICdYUlAvVVNEJywgJ2Jhc2UnOiAnWFJQJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ1hSUC9FVVInOiB7ICdpZCc6ICd4cnBldXInLCAnc3ltYm9sJzogJ1hSUC9FVVInLCAnYmFzZSc6ICdYUlAnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnWFJQL0JUQyc6IHsgJ2lkJzogJ3hycGJ0YycsICdzeW1ib2wnOiAnWFJQL0JUQycsICdiYXNlJzogJ1hSUCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMVEMvVVNEJzogeyAnaWQnOiAnbHRjdXNkJywgJ3N5bWJvbCc6ICdMVEMvVVNEJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0xUQy9FVVInOiB7ICdpZCc6ICdsdGNldXInLCAnc3ltYm9sJzogJ0xUQy9FVVInLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ2x0Y2J0YycsICdzeW1ib2wnOiAnTFRDL0JUQycsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFVEgvVVNEJzogeyAnaWQnOiAnZXRodXNkJywgJ3N5bWJvbCc6ICdFVEgvVVNEJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0VUSC9FVVInOiB7ICdpZCc6ICdldGhldXInLCAnc3ltYm9sJzogJ0VUSC9FVVInLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnRVRIL0JUQyc6IHsgJ2lkJzogJ2V0aGJ0YycsICdzeW1ib2wnOiAnRVRIL0JUQycsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyQm9va0lkICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAob3JkZXJib29rWyd0aW1lc3RhbXAnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB0aW1lc3RhbXApO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlcklkICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0aWNrZXJbJ3RpbWVzdGFtcCddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHBhcnNlRmxvYXQgKHRpY2tlclsndndhcCddKSxcbiAgICAgICAgICAgICdvcGVuJzogcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ2RhdGUnIGluIHRyYWRlKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXAgPSBwYXJzZUludCAodHJhZGVbJ2RhdGUnXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoJ2RhdGV0aW1lJyBpbiB0cmFkZSkge1xuICAgICAgICAgICAgLy8gdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKHRyYWRlWydkYXRldGltZSddKTtcbiAgICAgICAgICAgIHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZXRpbWUnXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNpZGUgPSAodHJhZGVbJ3R5cGUnXSA9PSAwKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICBsZXQgb3JkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnb3JkZXJfaWQnIGluIHRyYWRlKVxuICAgICAgICAgICAgb3JkZXIgPSB0cmFkZVsnb3JkZXJfaWQnXS50b1N0cmluZyAoKTtcbiAgICAgICAgaWYgKCdjdXJyZW5jeV9wYWlyJyBpbiB0cmFkZSkge1xuICAgICAgICAgICAgaWYgKHRyYWRlWydjdXJyZW5jeV9wYWlyJ10gaW4gdGhpcy5tYXJrZXRzX2J5X2lkKVxuICAgICAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFt0cmFkZVsnY3VycmVuY3lfcGFpciddXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdvcmRlcic6IG9yZGVyLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYW5zYWN0aW9uc0lkICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3RpbWUnOiAnbWludXRlJyxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgYmFsYW5jZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2UgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IGxvd2VyY2FzZSArICdfYmFsYW5jZSc7XG4gICAgICAgICAgICBsZXQgZnJlZSA9IGxvd2VyY2FzZSArICdfYXZhaWxhYmxlJztcbiAgICAgICAgICAgIGxldCB1c2VkID0gbG93ZXJjYXNlICsgJ19yZXNlcnZlZCc7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChmcmVlIGluIGJhbGFuY2UpXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVtmcmVlXSk7XG4gICAgICAgICAgICBpZiAodXNlZCBpbiBiYWxhbmNlKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbdXNlZF0pO1xuICAgICAgICAgICAgaWYgKHRvdGFsIGluIGJhbGFuY2UpXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbdG90YWxdKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtZXRob2QgPSAncHJpdmF0ZVBvc3QnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgbWV0aG9kICs9ICdNYXJrZXQnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBtZXRob2QgKz0gJ0lkJztcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxPcmRlciAoeyAnaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPcmRlclN0YXR1cyAob3JkZXIpIHtcbiAgICAgICAgaWYgKChvcmRlclsnc3RhdHVzJ10gPT0gJ1F1ZXVlJykgfHwgKG9yZGVyWydzdGF0dXMnXSA9PSAnT3BlbicpKVxuICAgICAgICAgICAgcmV0dXJuICdvcGVuJztcbiAgICAgICAgaWYgKG9yZGVyWydzdGF0dXMnXSA9PSAnRmluaXNoZWQnKVxuICAgICAgICAgICAgcmV0dXJuICdjbG9zZWQnO1xuICAgICAgICByZXR1cm4gb3JkZXJbJ3N0YXR1cyddO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyU3RhdHVzIChpZCwgc3ltYm9sID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlclN0YXR1cyAoeyAnaWQnOiBpZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlclN0YXR1cyAocmVzcG9uc2UpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE15VHJhZGVzIChzeW1ib2wgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzeW1ib2wpXG4gICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHBhaXIgPSBtYXJrZXQgPyBtYXJrZXRbJ2lkJ10gOiAnYWxsJztcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB0aGlzLmV4dGVuZCAoeyAnaWQnOiBwYWlyIH0sIHBhcmFtcyk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcGVuT3JkZXJzSWQgKHJlcXVlc3QpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXIgKGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQgKHRoaXMuaWQgKyAnIGZldGNoT3JkZXIgaXMgbm90IGltcGxlbWVudGVkIHlldCcpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51aWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGAnICsgdGhpcy5pZCArICcudWlkYCBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IG5vbmNlICsgdGhpcy51aWQgKyB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmVuY29kZSAodGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpKTtcbiAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAna2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ3NpZ25hdHVyZSc6IHNpZ25hdHVyZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgIH0sIHF1ZXJ5KTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgudG9TdHJpbmcgKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdzdGF0dXMnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydzdGF0dXMnXSA9PSAnZXJyb3InKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYml0dHJleCA9IHtcblxuICAgICdpZCc6ICdiaXR0cmV4JyxcbiAgICAnbmFtZSc6ICdCaXR0cmV4JyxcbiAgICAnY291bnRyaWVzJzogJ1VTJyxcbiAgICAndmVyc2lvbic6ICd2MS4xJyxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjM1Mi1jZjBiM2MyNi01ZWQ1LTExZTctODJiNy1mMzgyNmI3YTk3ZDguanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2JpdHRyZXguY29tL2FwaScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9iaXR0cmV4LmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9iaXR0cmV4LmNvbS9Ib21lL0FwaScsXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cubnBtanMub3JnL3BhY2thZ2Uvbm9kZS5iaXR0cmV4LmFwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnY3VycmVuY2llcycsXG4gICAgICAgICAgICAgICAgJ21hcmtldGhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdtYXJrZXRzJyxcbiAgICAgICAgICAgICAgICAnbWFya2V0c3VtbWFyaWVzJyxcbiAgICAgICAgICAgICAgICAnbWFya2V0c3VtbWFyeScsXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAnYWNjb3VudCc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdiYWxhbmNlcycsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRhZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnZGVwb3NpdGhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ29yZGVyaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3YWxoaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ21hcmtldCc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2J1eWxpbWl0JyxcbiAgICAgICAgICAgICAgICAnYnV5bWFya2V0JyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnb3Blbm9yZGVycycsXG4gICAgICAgICAgICAgICAgJ3NlbGxsaW1pdCcsXG4gICAgICAgICAgICAgICAgJ3NlbGxtYXJrZXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzWydyZXN1bHQnXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ3Jlc3VsdCddW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydNYXJrZXROYW1lJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnTWFya2V0Q3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsnQmFzZUN1cnJlbmN5J107XG4gICAgICAgICAgICBiYXNlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGJhc2UpO1xuICAgICAgICAgICAgcXVvdGUgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAocXVvdGUpO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWNjb3VudEdldEJhbGFuY2VzICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncmVzdWx0J107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgbGV0IGluZGV4ZWQgPSB0aGlzLmluZGV4QnkgKGJhbGFuY2VzLCAnQ3VycmVuY3knKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbmN5IGluIGluZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGluZGV4ZWRbY3VycmVuY3ldO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IGJhbGFuY2VbJ0F2YWlsYWJsZSddO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGJhbGFuY2VbJ0JhbGFuY2UnXSAtIGJhbGFuY2VbJ0F2YWlsYWJsZSddO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSBiYWxhbmNlWydCYWxhbmNlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyYm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICAgICAgJ3R5cGUnOiAnYm90aCcsXG4gICAgICAgICAgICAnZGVwdGgnOiA1MCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsncmVzdWx0J107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2J1eScsICdzZWxsJywgJ1JhdGUnLCAnUXVhbnRpdHknKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodGlja2VyWydUaW1lU3RhbXAnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ0hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydMb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydCaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydBc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ0xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydCYXNlVm9sdW1lJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydWb2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRzdW1tYXJpZXMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gcmVzcG9uc2VbJ3Jlc3VsdCddO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGlja2Vycy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbdF07XG4gICAgICAgICAgICBsZXQgaWQgPSB0aWNrZXJbJ01hcmtldE5hbWUnXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gaWQ7XG4gICAgICAgICAgICBpZiAoaWQgaW4gdGhpcy5tYXJrZXRzX2J5X2lkKSB7XG4gICAgICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgWyBxdW90ZSwgYmFzZSBdID0gaWQuc3BsaXQgKCctJyk7XG4gICAgICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0c3VtbWFyeSAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVsncmVzdWx0J11bMF07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0cmFkZVsnVGltZVN0YW1wJ10pO1xuICAgICAgICBsZXQgc2lkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRyYWRlWydPcmRlclR5cGUnXSA9PSAnQlVZJykge1xuICAgICAgICAgICAgc2lkZSA9ICdidXknO1xuICAgICAgICB9IGVsc2UgaWYgKHRyYWRlWydPcmRlclR5cGUnXSA9PSAnU0VMTCcpIHtcbiAgICAgICAgICAgIHNpZGUgPSAnc2VsbCc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsnSWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydQcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydRdWFudGl0eSddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0aGlzdG9yeSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2VbJ3Jlc3VsdCddLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9wZW5PcmRlcnMgKHN5bWJvbCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7fTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHN5bWJvbCkge1xuICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgICAgICByZXF1ZXN0WydtYXJrZXQnXSA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1hcmtldEdldE9wZW5vcmRlcnMgKHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlcnMgKHJlc3BvbnNlWydyZXN1bHQnXSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdtYXJrZXRHZXQnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKSArIHR5cGU7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3F1YW50aXR5JzogYW1vdW50LFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKVxuICAgICAgICAgICAgb3JkZXJbJ3JhdGUnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3Jlc3VsdCddWyd1dWlkJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXRHZXRDYW5jZWwgKHsgJ3V1aWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPcmRlciAob3JkZXIsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc2lkZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdPcmRlclR5cGUnIGluIG9yZGVyKVxuICAgICAgICAgICAgc2lkZSA9IChvcmRlclsnT3JkZXJUeXBlJ10gPT0gJ0xJTUlUX0JVWScpID8gJ2J1eScgOiAnc2VsbCc7XG4gICAgICAgIGlmICgnVHlwZScgaW4gb3JkZXIpXG4gICAgICAgICAgICBzaWRlID0gKG9yZGVyWydUeXBlJ10gPT0gJ0xJTUlUX0JVWScpID8gJ2J1eScgOiAnc2VsbCc7XG4gICAgICAgIGxldCBzdGF0dXMgPSAnb3Blbic7XG4gICAgICAgIGlmIChvcmRlclsnQ2xvc2VkJ10pIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdjbG9zZWQnO1xuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyWydDYW5jZWxJbml0aWF0ZWQnXSkge1xuICAgICAgICAgICAgc3RhdHVzID0gJ2NhbmNlbGVkJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3ltYm9sID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAobWFya2V0KSB7XG4gICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGV4Y2hhbmdlID0gb3JkZXJbJ0V4Y2hhbmdlJ107XG4gICAgICAgICAgICBpZiAoZXhjaGFuZ2UgaW4gdGhpcy5tYXJrZXRzX2J5X2lkKSB7XG4gICAgICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2V4Y2hhbmdlXTtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBbJ3N5bWJvbCddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAob3JkZXJbJ09wZW5lZCddKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICdpbmZvJzogb3JkZXIsXG4gICAgICAgICAgICAnaWQnOiBvcmRlclsnT3JkZXJVdWlkJ10sXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICd0eXBlJzogJ2xpbWl0JyxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IG9yZGVyWydQcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IG9yZGVyWydRdWFudGl0eSddLFxuICAgICAgICAgICAgJ3JlbWFpbmluZyc6IG9yZGVyWydRdWFudGl0eVJlbWFpbmluZyddLFxuICAgICAgICAgICAgJ3N0YXR1cyc6IHN0YXR1cyxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hY2NvdW50R2V0T3JkZXIgKHsgJ3V1aWQnOiBpZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlciAocmVzcG9uc2VbJ3Jlc3VsdCddKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgd2l0aGRyYXcgKGN1cnJlbmN5LCBhbW91bnQsIGFkZHJlc3MsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWNjb3VudEdldFdpdGhkcmF3ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogY3VycmVuY3ksXG4gICAgICAgICAgICAncXVhbnRpdHknOiBhbW91bnQsXG4gICAgICAgICAgICAnYWRkcmVzcyc6IGFkZHJlc3MsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydyZXN1bHQnXVsndXVpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB1cmwgKz0gYXBpICsgJy8nICsgbWV0aG9kLnRvTG93ZXJDYXNlICgpICsgcGF0aDtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIHVybCArPSBhcGkgKyAnLyc7XG4gICAgICAgICAgICBpZiAoKChhcGkgPT0gJ2FjY291bnQnKSAmJiAocGF0aCAhPSAnd2l0aGRyYXcnKSkgfHwgKHBhdGggPT0gJ29wZW5vcmRlcnMnKSlcbiAgICAgICAgICAgICAgICB1cmwgKz0gbWV0aG9kLnRvTG93ZXJDYXNlICgpO1xuICAgICAgICAgICAgdXJsICs9IHBhdGggKyAnPycgKyB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnYXBpa2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlICh1cmwpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyk7XG4gICAgICAgICAgICBoZWFkZXJzID0geyAnYXBpc2lnbic6IHNpZ25hdHVyZSB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnbWVzc2FnZSddID09IFwiSU5TVUZGSUNJRU5UX0ZVTkRTXCIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluc3VmZmljaWVudEZ1bmRzICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBibGlua3RyYWRlID0ge1xuXG4gICAgJ2lkJzogJ2JsaW5rdHJhZGUnLFxuICAgICduYW1lJzogJ0JsaW5rVHJhZGUnLFxuICAgICdjb3VudHJpZXMnOiBbICdVUycsICdWRScsICdWTicsICdCUicsICdQSycsICdDTCcgXSxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTA5NjgtNzVkOWM4ODQtNjQ3MC0xMWU3LTkwNzMtNDY3NTZjOGU3ZThjLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vYXBpLmJsaW5rdHJhZGUuY29tL2FwaScsXG4gICAgICAgICAgICAncHJpdmF0ZSc6ICdodHRwczovL2FwaS5ibGlua3RyYWRlLmNvbS90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2JsaW5rdHJhZGUuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2JsaW5rdHJhZGUuY29tL2RvY3MnLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3tjdXJyZW5jeX0vdGlja2VyJywgICAgLy8gP2NyeXB0b19jdXJyZW5jeT1CVENcbiAgICAgICAgICAgICAgICAne2N1cnJlbmN5fS9vcmRlcmJvb2snLCAvLyA/Y3J5cHRvX2N1cnJlbmN5PUJUQ1xuICAgICAgICAgICAgICAgICd7Y3VycmVuY3l9L3RyYWRlcycsICAgIC8vID9jcnlwdG9fY3VycmVuY3k9QlRDJnNpbmNlPTxUSU1FU1RBTVA+JmxpbWl0PTxOVU1CRVI+XG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdEJywgICAvLyBvcmRlclxuICAgICAgICAgICAgICAgICdGJywgICAvLyBjYW5jZWwgb3JkZXJcbiAgICAgICAgICAgICAgICAnVTInLCAgLy8gYmFsYW5jZVxuICAgICAgICAgICAgICAgICdVNCcsICAvLyBteSBvcmRlcnNcbiAgICAgICAgICAgICAgICAnVTYnLCAgLy8gd2l0aGRyYXdcbiAgICAgICAgICAgICAgICAnVTE4JywgLy8gZGVwb3NpdFxuICAgICAgICAgICAgICAgICdVMjQnLCAvLyBjb25maXJtIHdpdGhkcmF3YWxcbiAgICAgICAgICAgICAgICAnVTI2JywgLy8gbGlzdCB3aXRoZHJhd2Fsc1xuICAgICAgICAgICAgICAgICdVMzAnLCAvLyBsaXN0IGRlcG9zaXRzXG4gICAgICAgICAgICAgICAgJ1UzNCcsIC8vIGxlZGdlclxuICAgICAgICAgICAgICAgICdVNzAnLCAvLyBjYW5jZWwgd2l0aGRyYXdhbFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1ZFRic6IHsgJ2lkJzogJ0JUQ1ZFRicsICdzeW1ib2wnOiAnQlRDL1ZFRicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdWRUYnLCAnYnJva2VySWQnOiAxLCAnYnJva2VyJzogJ1N1ckJpdGNvaW4nIH0sXG4gICAgICAgICdCVEMvVk5EJzogeyAnaWQnOiAnQlRDVk5EJywgJ3N5bWJvbCc6ICdCVEMvVk5EJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1ZORCcsICdicm9rZXJJZCc6IDMsICdicm9rZXInOiAnVkJUQycgfSxcbiAgICAgICAgJ0JUQy9CUkwnOiB7ICdpZCc6ICdCVENCUkwnLCAnc3ltYm9sJzogJ0JUQy9CUkwnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQlJMJywgJ2Jyb2tlcklkJzogNCwgJ2Jyb2tlcic6ICdGb3hCaXQnIH0sXG4gICAgICAgICdCVEMvUEtSJzogeyAnaWQnOiAnQlRDUEtSJywgJ3N5bWJvbCc6ICdCVEMvUEtSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1BLUicsICdicm9rZXJJZCc6IDgsICdicm9rZXInOiAnVXJkdUJpdCcgfSxcbiAgICAgICAgJ0JUQy9DTFAnOiB7ICdpZCc6ICdCVENDTFAnLCAnc3ltYm9sJzogJ0JUQy9DTFAnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQ0xQJywgJ2Jyb2tlcklkJzogOSwgJ2Jyb2tlcic6ICdDaGlsZUJpdCcgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdFUyICh7XG4gICAgICAgICAgICAnQmFsYW5jZVJlcUlEJzogdGhpcy5ub25jZSAoKSxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0Q3VycmVuY3lPcmRlcmJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3knOiBtYXJrZXRbJ3F1b3RlJ10sXG4gICAgICAgICAgICAnY3J5cHRvX2N1cnJlbmN5JzogbWFya2V0WydiYXNlJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEN1cnJlbmN5VGlja2VyICh7XG4gICAgICAgICAgICAnY3VycmVuY3knOiBtYXJrZXRbJ3F1b3RlJ10sXG4gICAgICAgICAgICAnY3J5cHRvX2N1cnJlbmN5JzogbWFya2V0WydiYXNlJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIGxldCBsb3dlcmNhc2VRdW90ZSA9IG1hcmtldFsncXVvdGUnXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgbGV0IHF1b3RlVm9sdW1lID0gJ3ZvbF8nICsgbG93ZXJjYXNlUXVvdGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyW3F1b3RlVm9sdW1lXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydzaWRlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRDdXJyZW5jeVRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsncXVvdGUnXSxcbiAgICAgICAgICAgICdjcnlwdG9fY3VycmVuY3knOiBtYXJrZXRbJ2Jhc2UnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ21hcmtldCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgYWxsb3dzIGxpbWl0IG9yZGVycyBvbmx5Jyk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ0NsT3JkSUQnOiB0aGlzLm5vbmNlICgpLFxuICAgICAgICAgICAgJ1N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdTaWRlJzogdGhpcy5jYXBpdGFsaXplIChzaWRlKSxcbiAgICAgICAgICAgICdPcmRUeXBlJzogJzInLFxuICAgICAgICAgICAgJ1ByaWNlJzogcHJpY2UsXG4gICAgICAgICAgICAnT3JkZXJRdHknOiBhbW91bnQsXG4gICAgICAgICAgICAnQnJva2VySUQnOiBtYXJrZXRbJ2Jyb2tlcklkJ10sXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3REICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICBsZXQgaW5kZXhlZCA9IHRoaXMuaW5kZXhCeSAocmVzcG9uc2VbJ1Jlc3BvbnNlcyddLCAnTXNnVHlwZScpO1xuICAgICAgICBsZXQgZXhlY3V0aW9uID0gaW5kZXhlZFsnOCddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IGV4ZWN1dGlvblsnT3JkZXJJRCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0RiAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdDbE9yZElEJzogaWQsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV0gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gdGhpcy5leHRlbmQgKHsgJ01zZ1R5cGUnOiBwYXRoIH0sIHF1ZXJ5KTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHJlcXVlc3QpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQVBJS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ05vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ1NpZ25hdHVyZSc6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKG5vbmNlKSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSksXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ1N0YXR1cycgaW4gcmVzcG9uc2UpIFxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydTdGF0dXMnXSAhPSAyMDApXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBibDNwID0ge1xuXG4gICAgJ2lkJzogJ2JsM3AnLFxuICAgICduYW1lJzogJ0JMM1AnLFxuICAgICdjb3VudHJpZXMnOiBbICdOTCcsICdFVScgXSwgLy8gTmV0aGVybGFuZHMsIEVVXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3ZlcnNpb24nOiAnMScsXG4gICAgJ2NvbW1lbnQnOiAnQW4gZXhjaGFuZ2UgbWFya2V0IGJ5IEJpdG9uaWNOTCcsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjg1MDE3NTItNjBjMjFiODItNmZlYi0xMWU3LTgxOGItMDU1ZWU2ZDBlNzU0LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkuYmwzcC5ldScsXG4gICAgICAgICd3d3cnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9ibDNwLmV1JyxcbiAgICAgICAgICAgICdodHRwczovL2JpdG9uaWMubmwnLFxuICAgICAgICBdLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9CaXRvbmljTkwvYmwzcC1hcGkvdHJlZS9tYXN0ZXIvZG9jcycsXG4gICAgICAgICAgICAnaHR0cHM6Ly9ibDNwLmV1L2FwaScsXG4gICAgICAgICAgICAnaHR0cHM6Ly9iaXRvbmljLm5sL2VuL2FwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAne21hcmtldH0vdGlja2VyJyxcbiAgICAgICAgICAgICAgICAne21hcmtldH0vb3JkZXJib29rJyxcbiAgICAgICAgICAgICAgICAne21hcmtldH0vdHJhZGVzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3ttYXJrZXR9L21vbmV5L2RlcHRoL2Z1bGwnLFxuICAgICAgICAgICAgICAgICd7bWFya2V0fS9tb25leS9vcmRlci9hZGQnLFxuICAgICAgICAgICAgICAgICd7bWFya2V0fS9tb25leS9vcmRlci9jYW5jZWwnLFxuICAgICAgICAgICAgICAgICd7bWFya2V0fS9tb25leS9vcmRlci9yZXN1bHQnLFxuICAgICAgICAgICAgICAgICd7bWFya2V0fS9tb25leS9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICd7bWFya2V0fS9tb25leS9vcmRlcnMvaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ3ttYXJrZXR9L21vbmV5L3RyYWRlcy9mZXRjaCcsXG4gICAgICAgICAgICAgICAgJ0dFTk1LVC9tb25leS9pbmZvJyxcbiAgICAgICAgICAgICAgICAnR0VOTUtUL21vbmV5L2RlcG9zaXRfYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ0dFTk1LVC9tb25leS9uZXdfZGVwb3NpdF9hZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnR0VOTUtUL21vbmV5L3dhbGxldC9oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnR0VOTUtUL21vbmV5L3dpdGhkcmF3JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9FVVInOiB7ICdpZCc6ICdCVENFVVInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnTFRDL0VVUic6IHsgJ2lkJzogJ0xUQ0VVUicsICdzeW1ib2wnOiAnTFRDL0VVUicsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdFVVInIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdFTk1LVE1vbmV5SW5mbyAoKTtcbiAgICAgICAgbGV0IGRhdGEgPSByZXNwb25zZVsnZGF0YSddO1xuICAgICAgICBsZXQgYmFsYW5jZSA9IGRhdGFbJ3dhbGxldHMnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBkYXRhIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiBiYWxhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdhdmFpbGFibGUnIGluIGJhbGFuY2VbY3VycmVuY3ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbY3VycmVuY3ldWydhdmFpbGFibGUnXVsndmFsdWUnXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbmN5IGluIGJhbGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoJ2JhbGFuY2UnIGluIGJhbGFuY2VbY3VycmVuY3ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlW2N1cnJlbmN5XVsnYmFsYW5jZSddWyd2YWx1ZSddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWNjb3VudFsndG90YWwnXSkge1xuICAgICAgICAgICAgICAgIGlmIChhY2NvdW50WydmcmVlJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBwYXJzZUJpZEFzayAoYmlkYXNrLCBwcmljZUtleSA9IDAsIGFtb3VudEtleSA9IDApIHtcbiAgICAgICAgcmV0dXJuIFsgXG4gICAgICAgICAgICBiaWRhc2tbJ3ByaWNlX2ludCddIC8gMTAwMDAwLjAsXG4gICAgICAgICAgICBiaWRhc2tbJ2Ftb3VudF9pbnQnXSAvIDEwMDAwMDAwMC4wLFxuICAgICAgICBdO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0T3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsnZGF0YSddO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ11bJzI0aCddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJhZGVfaWQnXSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdHJhZGVbJ2RhdGUnXSxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodHJhZGVbJ2RhdGUnXSksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2VfaW50J10gLyAxMDAwMDAuMCxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50X2ludCddIC8gMTAwMDAwMDAwLjAsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnbWFya2V0JzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWydkYXRhJ11bJ3RyYWRlcyddLCBtYXJrZXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnYW1vdW50X2ludCc6IGFtb3VudCxcbiAgICAgICAgICAgICdmZWVfY3VycmVuY3knOiBtYXJrZXRbJ3F1b3RlJ10sXG4gICAgICAgICAgICAndHlwZSc6IChzaWRlID09ICdidXknKSA/ICdiaWQnIDogJ2FzaycsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2VfaW50J10gPSBwcmljZTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE1hcmtldE1vbmV5T3JkZXJBZGQgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ29yZGVyX2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE1hcmtldE1vbmV5T3JkZXJDYW5jZWwgKHsgJ29yZGVyX2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcmVxdWVzdDtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBxdWVyeSkpO1xuICAgICAgICAgICAgbGV0IHNlY3JldCA9IHRoaXMuYmFzZTY0VG9CaW5hcnkgKHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gcmVxdWVzdCArIFwiXFwwXCIgKyBib2R5O1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCBzZWNyZXQsICdzaGE1MTInLCAnYmFzZTY0Jyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAnUmVzdC1LZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnUmVzdC1TaWduJzogc2lnbmF0dXJlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJ0Y2NoaW5hID0ge1xuXG4gICAgJ2lkJzogJ2J0Y2NoaW5hJyxcbiAgICAnbmFtZSc6ICdCVENDaGluYScsXG4gICAgJ2NvdW50cmllcyc6ICdDTicsXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2MzY4LTQ2NWIzMjg2LTVlZDYtMTFlNy05YTExLTBmNjQ2N2UxZDgyYi5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL2RhdGEuYnRjY2hpbmEuY29tL2RhdGEnLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly9hcGkuYnRjY2hpbmEuY29tL2FwaV90cmFkZV92MS5waHAnLFxuICAgICAgICB9LFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJ0Y2NoaW5hLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly93d3cuYnRjY2hpbmEuY29tL2FwaWRvY3MnXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnaGlzdG9yeWRhdGEnLFxuICAgICAgICAgICAgICAgICdvcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICd0aWNrZXInLFxuICAgICAgICAgICAgICAgICd0cmFkZXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQnV5SWNlYmVyZ09yZGVyJyxcbiAgICAgICAgICAgICAgICAnQnV5T3JkZXInLFxuICAgICAgICAgICAgICAgICdCdXlPcmRlcjInLFxuICAgICAgICAgICAgICAgICdCdXlTdG9wT3JkZXInLFxuICAgICAgICAgICAgICAgICdDYW5jZWxJY2ViZXJnT3JkZXInLFxuICAgICAgICAgICAgICAgICdDYW5jZWxPcmRlcicsXG4gICAgICAgICAgICAgICAgJ0NhbmNlbFN0b3BPcmRlcicsXG4gICAgICAgICAgICAgICAgJ0dldEFjY291bnRJbmZvJyxcbiAgICAgICAgICAgICAgICAnZ2V0QXJjaGl2ZWRPcmRlcicsXG4gICAgICAgICAgICAgICAgJ2dldEFyY2hpdmVkT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnR2V0RGVwb3NpdHMnLFxuICAgICAgICAgICAgICAgICdHZXRJY2ViZXJnT3JkZXInLFxuICAgICAgICAgICAgICAgICdHZXRJY2ViZXJnT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnR2V0TWFya2V0RGVwdGgnLFxuICAgICAgICAgICAgICAgICdHZXRNYXJrZXREZXB0aDInLFxuICAgICAgICAgICAgICAgICdHZXRPcmRlcicsXG4gICAgICAgICAgICAgICAgJ0dldE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ0dldFN0b3BPcmRlcicsXG4gICAgICAgICAgICAgICAgJ0dldFN0b3BPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdHZXRUcmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgICAgICdHZXRXaXRoZHJhd2FsJyxcbiAgICAgICAgICAgICAgICAnR2V0V2l0aGRyYXdhbHMnLFxuICAgICAgICAgICAgICAgICdSZXF1ZXN0V2l0aGRyYXdhbCcsXG4gICAgICAgICAgICAgICAgJ1NlbGxJY2ViZXJnT3JkZXInLFxuICAgICAgICAgICAgICAgICdTZWxsT3JkZXInLFxuICAgICAgICAgICAgICAgICdTZWxsT3JkZXIyJyxcbiAgICAgICAgICAgICAgICAnU2VsbFN0b3BPcmRlcicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvQ05ZJzogeyAnaWQnOiAnYnRjY255JywgJ3N5bWJvbCc6ICdCVEMvQ05ZJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0NOWScgfSxcbiAgICAgICAgJ0xUQy9DTlknOiB7ICdpZCc6ICdsdGNjbnknLCAnc3ltYm9sJzogJ0xUQy9DTlknLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQ05ZJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ2x0Y2J0YycsICdzeW1ib2wnOiAnTFRDL0JUQycsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdCQ0gvQ05ZJzogeyAnaWQnOiAnYmNjY255JywgJ3N5bWJvbCc6ICdCQ0gvQ05ZJywgJ2Jhc2UnOiAnQkNIJywgJ3F1b3RlJzogJ0NOWScgfSxcbiAgICAgICAgJ0VUSC9DTlknOiB7ICdpZCc6ICdldGhjbnknLCAnc3ltYm9sJzogJ0VUSC9DTlknLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnQ05ZJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyICh7XG4gICAgICAgICAgICAnbWFya2V0JzogJ2FsbCcsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMgKG1hcmtldHMpO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGtleXMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSBrZXlzW3BdO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNba2V5XTtcbiAgICAgICAgICAgIGxldCBwYXJ0cyA9IGtleS5zcGxpdCAoJ18nKTtcbiAgICAgICAgICAgIGxldCBpZCA9IHBhcnRzWzFdO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBpZC5zbGljZSAoMCwgMyk7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBpZC5zbGljZSAoMywgNik7XG4gICAgICAgICAgICBiYXNlID0gYmFzZS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIHF1b3RlID0gcXVvdGUudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdldEFjY291bnRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncmVzdWx0J107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcblxuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGxvd2VyY2FzZSA9IGN1cnJlbmN5LnRvTG93ZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlIGluIGJhbGFuY2VzWydiYWxhbmNlJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VzWydiYWxhbmNlJ11bbG93ZXJjYXNlXVsnYW1vdW50J10pO1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZSBpbiBiYWxhbmNlc1snZnJvemVuJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbJ2Zyb3plbiddW2xvd2VyY2FzZV1bJ2Ftb3VudCddKTtcbiAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50Wyd1c2VkJ107XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPcmRlcmJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnbWFya2V0JzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBvcmRlcmJvb2tbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCk7XG4gICAgICAgIHJlc3VsdFsnYXNrcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYXNrcyddLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1sndGlja2VyJ107XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3Z3YXAnXSksXG4gICAgICAgICAgICAnb3Blbic6IHBhcnNlRmxvYXQgKHRpY2tlclsnb3BlbiddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsncHJldl9jbG9zZSddKSxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdCcgKyB0aGlzLmNhcGl0YWxpemUgKHNpZGUpICsgJ09yZGVyMic7XG4gICAgICAgIGxldCBvcmRlciA9IHt9O1xuICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ2lkJ10udG9VcHBlckNhc2UgKCk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBvcmRlclsncGFyYW1zJ10gPSBbIHVuZGVmaW5lZCwgYW1vdW50LCBpZCBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3JkZXJbJ3BhcmFtcyddID0gWyBwcmljZSwgYW1vdW50LCBpZCBdO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gcGFyYW1zWydtYXJrZXQnXTsgLy8gVE9ETyBmaXhtZVxuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhcmFtcyc6IFsgaWQsIG1hcmtldCBdLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgbm9uY2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWNyb3NlY29uZHMgKCk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ11bYXBpXSArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFwaUtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvciAodGhpcy5pZCArICcgcmVxdWlyZXMgYCcgKyB0aGlzLmlkICsgJy5hcGlLZXlgIHByb3BlcnR5IGZvciBhdXRoZW50aWNhdGlvbicpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNlY3JldClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvciAodGhpcy5pZCArICcgcmVxdWlyZXMgYCcgKyB0aGlzLmlkICsgJy5zZWNyZXRgIHByb3BlcnR5IGZvciBhdXRoZW50aWNhdGlvbicpO1xuICAgICAgICAgICAgbGV0IHAgPSBbXTtcbiAgICAgICAgICAgIGlmICgncGFyYW1zJyBpbiBwYXJhbXMpXG4gICAgICAgICAgICAgICAgcCA9IHBhcmFtc1sncGFyYW1zJ107XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHBhdGgsXG4gICAgICAgICAgICAgICAgJ2lkJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ3BhcmFtcyc6IHAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcCA9IHAuam9pbiAoJywnKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHJlcXVlc3QpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gKFxuICAgICAgICAgICAgICAgICd0b25jZT0nICsgbm9uY2UgK1xuICAgICAgICAgICAgICAgICcmYWNjZXNza2V5PScgKyB0aGlzLmFwaUtleSArXG4gICAgICAgICAgICAgICAgJyZyZXF1ZXN0bWV0aG9kPScgKyBtZXRob2QudG9Mb3dlckNhc2UgKCkgK1xuICAgICAgICAgICAgICAgICcmaWQ9JyArIG5vbmNlICtcbiAgICAgICAgICAgICAgICAnJm1ldGhvZD0nICsgcGF0aCArXG4gICAgICAgICAgICAgICAgJyZwYXJhbXM9JyArIHBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAocXVlcnkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhMScpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB0aGlzLmFwaUtleSArICc6JyArIHNpZ25hdHVyZTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIHRoaXMuc3RyaW5nVG9CYXNlNjQgKGF1dGgpLFxuICAgICAgICAgICAgICAgICdKc29uLVJwYy1Ub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJ0Y2UgPSB7XG5cbiAgICAnaWQnOiAnYnRjZScsXG4gICAgJ25hbWUnOiAnQlRDLWUnLFxuICAgICdjb3VudHJpZXMnOiBbICdCRycsICdSVScgXSwgLy8gQnVsZ2FyaWEsIFJ1c3NpYVxuICAgICd2ZXJzaW9uJzogJzMnLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODQzMjI1LTFiNTcxNTE0LTYxMWEtMTFlNy05MjA4LTI2NDFhNTYwYjU2MS5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL2J0Yy1lLmNvbS9hcGknLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly9idGMtZS5jb20vdGFwaScsXG4gICAgICAgIH0sXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9idGMtZS5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vYnRjLWUuY29tL2FwaS8zL2RvY3MnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vYnRjLWUuY29tL3RhcGkvZG9jcycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnaW5mbycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlci97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdkZXB0aC97cGFpcn0nLFxuICAgICAgICAgICAgICAgICd0cmFkZXMve3BhaXJ9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2dldEluZm8nLFxuICAgICAgICAgICAgICAgICdUcmFkZScsXG4gICAgICAgICAgICAgICAgJ0FjdGl2ZU9yZGVycycsXG4gICAgICAgICAgICAgICAgJ09yZGVySW5mbycsXG4gICAgICAgICAgICAgICAgJ0NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnVHJhZGVIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnVHJhbnNIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnQ29pbkRlcG9zaXRBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnV2l0aGRyYXdDb2luJyxcbiAgICAgICAgICAgICAgICAnQ3JlYXRlQ291cG9uJyxcbiAgICAgICAgICAgICAgICAnUmVkZWVtQ291cG9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRJbmZvICgpO1xuICAgICAgICBsZXQgbWFya2V0cyA9IHJlc3BvbnNlWydwYWlycyddO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChtYXJrZXRzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGtleXMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGtleXNbcF07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1tpZF07XG4gICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gaWQuc3BsaXQgKCdfJyk7XG4gICAgICAgICAgICBiYXNlID0gYmFzZS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIHF1b3RlID0gcXVvdGUudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBpZiAoYmFzZSA9PSAnRFNIJylcbiAgICAgICAgICAgICAgICBiYXNlID0gJ0RBU0gnO1xuICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgIHF1b3RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKHF1b3RlKTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0R2V0SW5mbyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ3JldHVybiddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGxldCBmdW5kcyA9IGJhbGFuY2VzWydmdW5kcyddO1xuICAgICAgICBsZXQgY3VycmVuY2llcyA9IE9iamVjdC5rZXlzIChmdW5kcyk7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIC8vIHRoZXkgbWlzc3BlbGwgREFTSCBhcyBkc2ggOi9cbiAgICAgICAgICAgIGlmICh1cHBlcmNhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgdXBwZXJjYXNlID0gJ0RBU0gnO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBmdW5kc1tjdXJyZW5jeV0sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogZnVuZHNbY3VycmVuY3ldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdFt1cHBlcmNhc2VdID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RGVwdGhQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBpZiAobWFya2V0WydpZCddIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBsZXQgb3JkZXJib29rID0gcmVzcG9uc2VbbWFya2V0WydpZCddXTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgICAgICAgICAgcmVzdWx0WydiaWRzJ10gPSB0aGlzLnNvcnRCeSAocmVzdWx0WydiaWRzJ10sIDAsIHRydWUpO1xuICAgICAgICAgICAgcmVzdWx0Wydhc2tzJ10gPSB0aGlzLnNvcnRCeSAocmVzdWx0Wydhc2tzJ10sIDApO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIG1hcmtldFsnc3ltYm9sJ10gKyAnIG9yZGVyIGJvb2sgaXMgZW1wdHkgb3Igbm90IGF2YWlsYWJsZScpO1xuICAgIH0sXG4gICAgXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3VwZGF0ZWQnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiB0aWNrZXJbJ2hpZ2gnXSA/IHRpY2tlclsnaGlnaCddIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHRpY2tlclsnbG93J10gPyB0aWNrZXJbJ2xvdyddIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2JpZCc6IHRpY2tlclsnc2VsbCddID8gdGlja2VyWydidXknXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhc2snOiB0aWNrZXJbJ2J1eSddID8gdGlja2VyWydzZWxsJ10gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiB0aWNrZXJbJ2xhc3QnXSA/IHRpY2tlclsnbGFzdCddIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB0aWNrZXJbJ2F2ZyddID8gdGlja2VyWydhdmcnXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdGlja2VyWyd2b2xfY3VyJ10gPyB0aWNrZXJbJ3ZvbF9jdXInXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHRpY2tlclsndm9sJ10gPyB0aWNrZXJbJ3ZvbCddIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcbiAgICBhc3luYyBmZXRjaFRpY2tlcnMgKHN5bWJvbHMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGlkcyA9IChzeW1ib2xzKSA/IHRoaXMubWFya2V0SWRzIChzeW1ib2xzKSA6IHRoaXMuaWRzO1xuICAgICAgICBsZXQgdGlja2VycyA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyUGFpciAoe1xuICAgICAgICAgICAgJ3BhaXInOiBpZHMuam9pbiAoJy0nKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwga2V5cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgbGV0IGlkID0ga2V5c1trXTtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IGlkID0gbWFya2V0WydpZCddO1xuICAgICAgICBsZXQgdGlja2VycyA9IGF3YWl0IHRoaXMuZmV0Y2hUaWNrZXJzIChbIGlkIF0pO1xuICAgICAgICByZXR1cm4gdGlja2Vyc1tzeW1ib2xdO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsndGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICBsZXQgc2lkZSA9ICh0cmFkZVsndHlwZSddID09ICdhc2snKSA/ICdzZWxsJyA6ICdidXknO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ2Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBpZCA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXNQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVtpZF0sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdwYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICd0eXBlJzogc2lkZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAncmF0ZSc6IHByaWNlLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3JldHVybiddWydvcmRlcl9pZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxPcmRlciAoeyAnb3JkZXJfaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPcmRlciAob3JkZXIpIHtcbiAgICAgICAgbGV0IHN0YXR1c0NvZGUgPSBvcmRlclsnc3RhdHVzJ107XG4gICAgICAgIGxldCBzdGF0dXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzdGF0dXNDb2RlID09IDApIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdvcGVuJztcbiAgICAgICAgfSBlbHNlIGlmICgoc3RhdHVzQ29kZSA9PSAyKSB8fCAoc3RhdHVzQ29kZSA9PSAzKSkge1xuICAgICAgICAgICAgc3RhdHVzID0gJ2NhbmNlbGVkJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICdjbG9zZWQnO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBvcmRlclsndGltZXN0YW1wX2NyZWF0ZWQnXSAqIDEwMDA7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbb3JkZXJbJ3BhaXInXV07XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnaW5mbyc6IG9yZGVyLFxuICAgICAgICAgICAgJ2lkJzogb3JkZXJbJ2lkJ10sXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAndHlwZSc6ICdsaW1pdCcsXG4gICAgICAgICAgICAnc2lkZSc6IG9yZGVyWyd0eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBvcmRlclsncmF0ZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IG9yZGVyWydzdGFydF9hbW91bnQnXSxcbiAgICAgICAgICAgICdyZW1haW5pbmcnOiBvcmRlclsnYW1vdW50J10sXG4gICAgICAgICAgICAnc3RhdHVzJzogc3RhdHVzLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0T3JkZXJJbmZvICh7ICdvcmRlcl9pZCc6IGlkIH0pO1xuICAgICAgICBsZXQgb3JkZXIgPSByZXNwb25zZVsncmV0dXJuJ11baWRdO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyICh0aGlzLmV4dGVuZCAoeyAnaWQnOiBpZCB9LCBvcmRlcikpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZU5vdEF2YWlsYWJsZSAodGhpcy5pZCArICcgb3BlcmF0aW9uIHdhcyBzaHV0IGRvd24gaW4gSnVseSAyMDE3Jyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV0gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnbWV0aG9kJzogcGF0aCxcbiAgICAgICAgICAgIH0sIHF1ZXJ5KSk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAnS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1NpZ24nOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChib2R5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTUxMicpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnc3VjY2VzcycgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlWydzdWNjZXNzJ10pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBidGNtYXJrZXRzID0ge1xuXG4gICAgJ2lkJzogJ2J0Y21hcmtldHMnLFxuICAgICduYW1lJzogJ0JUQyBNYXJrZXRzJyxcbiAgICAnY291bnRyaWVzJzogJ0FVJywgLy8gQXVzdHJhbGlhXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsIC8vIG1hcmtldCBkYXRhIGNhY2hlZCBmb3IgMSBzZWNvbmQgKHRyYWRlcyBjYWNoZWQgZm9yIDIgc2Vjb25kcylcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yOTE0MjkxMS0wZTFhY2ZjMi03ZDVjLTExZTctOThjNC0wN2Q5NTMyYjI5ZDcuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5idGNtYXJrZXRzLm5ldCcsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9idGNtYXJrZXRzLm5ldC8nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9CVENNYXJrZXRzL0FQSScsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnbWFya2V0L3tpZH0vdGljaycsXG4gICAgICAgICAgICAgICAgJ21hcmtldC97aWR9L29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ21hcmtldC97aWR9L3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2FjY291bnQvYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ2FjY291bnQve2lkfS90cmFkaW5nZmVlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnZnVuZHRyYW5zZmVyL3dpdGhkcmF3Q3J5cHRvJyxcbiAgICAgICAgICAgICAgICAnZnVuZHRyYW5zZmVyL3dpdGhkcmF3RUZUJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ29yZGVyL29wZW4nLFxuICAgICAgICAgICAgICAgICdvcmRlci90cmFkZS9oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnb3JkZXIvY3JlYXRlQmF0Y2gnLCAvLyB0aGV5IHByb21pc2UgaXQncyBjb21pbmcgc29vbi4uLlxuICAgICAgICAgICAgICAgICdvcmRlci9kZXRhaWwnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0FVRCc6IHsgJ2lkJzogJ0JUQy9BVUQnLCAnc3ltYm9sJzogJ0JUQy9BVUQnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnTFRDL0FVRCc6IHsgJ2lkJzogJ0xUQy9BVUQnLCAnc3ltYm9sJzogJ0xUQy9BVUQnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnRVRIL0FVRCc6IHsgJ2lkJzogJ0VUSC9BVUQnLCAnc3ltYm9sJzogJ0VUSC9BVUQnLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnRVRDL0FVRCc6IHsgJ2lkJzogJ0VUQy9BVUQnLCAnc3ltYm9sJzogJ0VUQy9BVUQnLCAnYmFzZSc6ICdFVEMnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnWFJQL0FVRCc6IHsgJ2lkJzogJ1hSUC9BVUQnLCAnc3ltYm9sJzogJ1hSUC9BVUQnLCAnYmFzZSc6ICdYUlAnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnQkNIL0FVRCc6IHsgJ2lkJzogJ0JDSC9BVUQnLCAnc3ltYm9sJzogJ0JDSC9BVUQnLCAnYmFzZSc6ICdCQ0gnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ0xUQy9CVEMnLCAnc3ltYm9sJzogJ0xUQy9CVEMnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnRVRIL0JUQyc6IHsgJ2lkJzogJ0VUSC9CVEMnLCAnc3ltYm9sJzogJ0VUSC9CVEMnLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnRVRDL0JUQyc6IHsgJ2lkJzogJ0VUQy9CVEMnLCAnc3ltYm9sJzogJ0VUQy9CVEMnLCAnYmFzZSc6ICdFVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnWFJQL0JUQyc6IHsgJ2lkJzogJ1hSUC9CVEMnLCAnc3ltYm9sJzogJ1hSUC9CVEMnLCAnYmFzZSc6ICdYUlAnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnQkNIL0JUQyc6IHsgJ2lkJzogJ0JDSC9CVEMnLCAnc3ltYm9sJzogJ0JDSC9CVEMnLCAnYmFzZSc6ICdCQ0gnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldEFjY291bnRCYWxhbmNlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IG11bHRpcGxpZXIgPSAxMDAwMDAwMDA7XG4gICAgICAgICAgICBsZXQgZnJlZSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2JhbGFuY2UnXSAvIG11bHRpcGxpZXIpO1xuICAgICAgICAgICAgbGV0IHVzZWQgPSBwYXJzZUZsb2F0IChiYWxhbmNlWydwZW5kaW5nRnVuZHMnXSAvIG11bHRpcGxpZXIpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBmcmVlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogdXNlZCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiB0aGlzLnN1bSAoZnJlZSwgdXNlZCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRJZE9yZGVyYm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBvcmRlcmJvb2tbJ3RpbWVzdGFtcCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdGltZXN0YW1wKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3RpbWVzdGFtcCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsb3cnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiZXN0QmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmVzdEFzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdFByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lMjRoJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRJZFRpY2sgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWydkYXRlJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0aWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRJZFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgIC8vICdzaW5jZSc6IDU5ODY4MzQ1MjMxLFxuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBtdWx0aXBsaWVyID0gMTAwMDAwMDAwOyAvLyBmb3IgcHJpY2UgYW5kIHZvbHVtZVxuICAgICAgICAvLyBkb2VzIEJUQyBNYXJrZXRzIHN1cHBvcnQgbWFya2V0IG9yZGVycyBhdCBhbGw/XG4gICAgICAgIGxldCBvcmRlclNpZGUgPSAoc2lkZSA9PSAnYnV5JykgPyAnQmlkJyA6ICdBc2snO1xuICAgICAgICBsZXQgb3JkZXIgPSB0aGlzLm9yZGVyZWQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsncXVvdGUnXSxcbiAgICAgICAgICAgICdpbnN0cnVtZW50JzogbWFya2V0WydiYXNlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgICAndm9sdW1lJzogYW1vdW50ICogbXVsdGlwbGllcixcbiAgICAgICAgICAgICdvcmRlclNpZGUnOiBvcmRlclNpZGUsXG4gICAgICAgICAgICAnb3JkZXJ0eXBlJzogdGhpcy5jYXBpdGFsaXplICh0eXBlKSxcbiAgICAgICAgICAgICdjbGllbnRSZXF1ZXN0SWQnOiB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVyQ3JlYXRlICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlcnMgKGlkcykge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE9yZGVyQ2FuY2VsICh7ICdvcmRlcl9pZHMnOiBpZHMgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxPcmRlcnMgKFsgaWQgXSk7XG4gICAgfSxcblxuICAgIG5vbmNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmkgPSAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgdXJpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gdXJpICsgXCJcXG5cIiArIG5vbmNlICsgXCJcXG5cIjtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnYXBpa2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IG5vbmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ1BPU1QnKSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSA9IGJvZHkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGF1dGggKz0gYm9keTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzZWNyZXQgPSB0aGlzLmJhc2U2NFRvQmluYXJ5ICh0aGlzLnNlY3JldCk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHNlY3JldCwgJ3NoYTUxMicsICdiYXNlNjQnKTtcbiAgICAgICAgICAgIGhlYWRlcnNbJ3NpZ25hdHVyZSddID0gc2lnbmF0dXJlO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHJpdmF0ZScpIHtcbiAgICAgICAgICAgIGlmICgnc3VjY2VzcycgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYnRjdHJhZGVyID0ge1xuXG4gICAgJ2lkJzogJ2J0Y3RyYWRlcicsXG4gICAgJ25hbWUnOiAnQlRDVHJhZGVyJyxcbiAgICAnY291bnRyaWVzJzogWyAnVFInLCAnR1InLCAnUEgnIF0sIC8vIFR1cmtleSwgR3JlZWNlLCBQaGlsaXBwaW5lc1xuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFkJzogJzFkJyxcbiAgICB9LFxuICAgICdjb21tZW50JzogJ2Jhc2UgQVBJIGZvciBCVENFeGNoYW5nZSwgQlRDVHVyaycsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTI0MDQtY2RhMWUzODYtNjQ5Yy0xMWU3LThkYzEtNDBiYmQyODk3NzY4LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly93d3cuYnRjdHJhZGVyLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJ0Y3RyYWRlci5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9CVENUcmFkZXIvYnJva2VyLWFwaS1kb2NzJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdvaGxjZGF0YScsIC8vID9sYXN0PUNPVU5UXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsICAgLy8gP2xhc3Q9Q09VTlQgKG1heCA1MClcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ29wZW5PcmRlcnMnLFxuICAgICAgICAgICAgICAgICd1c2VyVHJhbnNhY3Rpb25zJywgLy8gP29mZnNldD0wJmxpbWl0PTI1JnNvcnQ9YXNjXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2J1eScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnc2VsbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgbGV0IGJhc2UgPSB7XG4gICAgICAgICAgICAnZnJlZSc6IHJlc3BvbnNlWydiaXRjb2luX2F2YWlsYWJsZSddLFxuICAgICAgICAgICAgJ3VzZWQnOiByZXNwb25zZVsnYml0Y29pbl9yZXNlcnZlZCddLFxuICAgICAgICAgICAgJ3RvdGFsJzogcmVzcG9uc2VbJ2JpdGNvaW5fYmFsYW5jZSddLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcXVvdGUgPSB7XG4gICAgICAgICAgICAnZnJlZSc6IHJlc3BvbnNlWydtb25leV9hdmFpbGFibGUnXSxcbiAgICAgICAgICAgICd1c2VkJzogcmVzcG9uc2VbJ21vbmV5X3Jlc2VydmVkJ10sXG4gICAgICAgICAgICAndG90YWwnOiByZXNwb25zZVsnbW9uZXlfYmFsYW5jZSddLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgc3ltYm9sID0gdGhpcy5zeW1ib2xzWzBdO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzW3N5bWJvbF07XG4gICAgICAgIHJlc3VsdFttYXJrZXRbJ2Jhc2UnXV0gPSBiYXNlO1xuICAgICAgICByZXN1bHRbbWFya2V0WydxdW90ZSddXSA9IHF1b3RlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPcmRlcmJvb2sgKHBhcmFtcyk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAob3JkZXJib29rWyd0aW1lc3RhbXAnXSAqIDEwMDApO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB0aW1lc3RhbXApO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoKTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0aWNrZXJbJ3RpbWVzdGFtcCddICogMTAwMCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXZlcmFnZSddKSxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgbWF4Q291bnQgPSA1MDtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXMgKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPSExDViAob2hsY3YsIG1hcmtldCA9IHVuZGVmaW5lZCwgdGltZWZyYW1lID0gJzFkJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAob2hsY3ZbJ0RhdGUnXSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICBvaGxjdlsnT3BlbiddLFxuICAgICAgICAgICAgb2hsY3ZbJ0hpZ2gnXSxcbiAgICAgICAgICAgIG9obGN2WydMb3cnXSxcbiAgICAgICAgICAgIG9obGN2WydDbG9zZSddLFxuICAgICAgICAgICAgb2hsY3ZbJ1ZvbHVtZSddLFxuICAgICAgICBdO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9ITENWIChzeW1ib2wsIHRpbWVmcmFtZSA9ICcxZCcsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHt9O1xuICAgICAgICBpZiAobGltaXQpXG4gICAgICAgICAgICByZXF1ZXN0WydsYXN0J10gPSBsaW1pdDtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPaGxjZGF0YSAodGhpcy5leHRlbmQgKHJlcXVlc3QsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9ITENWcyAocmVzcG9uc2UsIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdUeXBlJzogKHNpZGUgPT0gJ2J1eScpID8gJ0J1eUJ0YycgOiAnU2VsQnRjJyxcbiAgICAgICAgICAgICdJc01hcmtldE9yZGVyJzogKHR5cGUgPT0gJ21hcmtldCcpID8gMSA6IDAsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBpZiAoc2lkZSA9PSAnYnV5JylcbiAgICAgICAgICAgICAgICBvcmRlclsnVG90YWwnXSA9IGFtb3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvcmRlclsnQW1vdW50J10gPSBhbW91bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlclsnUHJpY2UnXSA9IHByaWNlO1xuICAgICAgICAgICAgb3JkZXJbJ0Ftb3VudCddID0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaWQgPT0gJ2J0Y3RyYWRlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgaXMgYW4gYWJzdHJhY3QgYmFzZSBBUEkgZm9yIEJUQ0V4Y2hhbmdlLCBCVENUdXJrJyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgcGF0aDtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICAgICAgbGV0IHNlY3JldCA9IHRoaXMuYmFzZTY0VG9TdHJpbmcgKHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gdGhpcy5hcGlLZXkgKyBub25jZTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ1gtUENLJzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1gtU3RhbXAnOiBub25jZS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICAgICAnWC1TaWduYXR1cmUnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgc2VjcmV0LCAnc2hhMjU2JywgJ2Jhc2U2NCcpLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBidGNleGNoYW5nZSA9IGV4dGVuZCAoYnRjdHJhZGVyLCB7XG5cbiAgICAnaWQnOiAnYnRjZXhjaGFuZ2UnLFxuICAgICduYW1lJzogJ0JUQ0V4Y2hhbmdlJyxcbiAgICAnY291bnRyaWVzJzogJ1BIJywgLy8gUGhpbGlwcGluZXNcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzk5MzA1Mi00YzkyOTExYS02NGFhLTExZTctOTZkOC1lYzZhYzM0MzU3NTcuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5idGNleGNoYW5nZS5waC9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJ0Y2V4Y2hhbmdlLnBoJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2dpdGh1Yi5jb20vQlRDVHJhZGVyL2Jyb2tlci1hcGktZG9jcycsXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9QSFAnOiB7ICdpZCc6ICdCVEMvUEhQJywgJ3N5bWJvbCc6ICdCVEMvUEhQJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1BIUCcgfSxcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYnRjdHJhZGV1YSA9IHtcblxuICAgICdpZCc6ICdidGN0cmFkZXVhJyxcbiAgICAnbmFtZSc6ICdCVEMgVHJhZGUgVUEnLFxuICAgICdjb3VudHJpZXMnOiAnVUEnLCAvLyBVa3JhaW5lLFxuICAgICdyYXRlTGltaXQnOiAzMDAwLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3OTQxNDgzLTc5ZmM3MzUwLTYyZDktMTFlNy05ZjYxLWFjNDdmMjhmY2Q5Ni5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYnRjLXRyYWRlLmNvbS51YS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYnRjLXRyYWRlLmNvbS51YScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xb2NZQTB5TXlfUlhkNTYxc2ZHM3FFUFo4MGt5bGwzNkhVeHZDUmU1R2JoRS9lZGl0JyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdkZWFscy97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcy9zZWxsL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL2J1eS97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2phcGFuX3N0YXQvaGlnaC97c3ltYm9sfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhdXRoJyxcbiAgICAgICAgICAgICAgICAnYXNrL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAnYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ2JpZC97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2J1eS97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ215X29yZGVycy97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ29yZGVyL3N0YXR1cy97aWR9JyxcbiAgICAgICAgICAgICAgICAncmVtb3ZlL29yZGVyL3tpZH0nLFxuICAgICAgICAgICAgICAgICdzZWxsL3tzeW1ib2x9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9VQUgnOiB7ICdpZCc6ICdidGNfdWFoJywgJ3N5bWJvbCc6ICdCVEMvVUFIJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VBSCcgfSxcbiAgICAgICAgJ0VUSC9VQUgnOiB7ICdpZCc6ICdldGhfdWFoJywgJ3N5bWJvbCc6ICdFVEgvVUFIJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ1VBSCcgfSxcbiAgICAgICAgJ0xUQy9VQUgnOiB7ICdpZCc6ICdsdGNfdWFoJywgJ3N5bWJvbCc6ICdMVEMvVUFIJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ1VBSCcgfSxcbiAgICAgICAgJ0RPR0UvVUFIJzogeyAnaWQnOiAnZG9nZV91YWgnLCAnc3ltYm9sJzogJ0RPR0UvVUFIJywgJ2Jhc2UnOiAnRE9HRScsICdxdW90ZSc6ICdVQUgnIH0sXG4gICAgICAgICdEQVNIL1VBSCc6IHsgJ2lkJzogJ2Rhc2hfdWFoJywgJ3N5bWJvbCc6ICdEQVNIL1VBSCcsICdiYXNlJzogJ0RBU0gnLCAncXVvdGUnOiAnVUFIJyB9LFxuICAgICAgICAnU0lCL1VBSCc6IHsgJ2lkJzogJ3NpYl91YWgnLCAnc3ltYm9sJzogJ1NJQi9VQUgnLCAnYmFzZSc6ICdTSUInLCAncXVvdGUnOiAnVUFIJyB9LFxuICAgICAgICAnS1JCL1VBSCc6IHsgJ2lkJzogJ2tyYl91YWgnLCAnc3ltYm9sJzogJ0tSQi9VQUgnLCAnYmFzZSc6ICdLUkInLCAncXVvdGUnOiAnVUFIJyB9LFxuICAgICAgICAnTlZDL1VBSCc6IHsgJ2lkJzogJ252Y191YWgnLCAnc3ltYm9sJzogJ05WQy9VQUgnLCAnYmFzZSc6ICdOVkMnLCAncXVvdGUnOiAnVUFIJyB9LFxuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ2x0Y19idGMnLCAnc3ltYm9sJzogJ0xUQy9CVEMnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnTlZDL0JUQyc6IHsgJ2lkJzogJ252Y19idGMnLCAnc3ltYm9sJzogJ05WQy9CVEMnLCAnYmFzZSc6ICdOVkMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnSVRJL1VBSCc6IHsgJ2lkJzogJ2l0aV91YWgnLCAnc3ltYm9sJzogJ0lUSS9VQUgnLCAnYmFzZSc6ICdJVEknLCAncXVvdGUnOiAnVUFIJyB9LFxuICAgICAgICAnRE9HRS9CVEMnOiB7ICdpZCc6ICdkb2dlX2J0YycsICdzeW1ib2wnOiAnRE9HRS9CVEMnLCAnYmFzZSc6ICdET0dFJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0RBU0gvQlRDJzogeyAnaWQnOiAnZGFzaF9idGMnLCAnc3ltYm9sJzogJ0RBU0gvQlRDJywgJ2Jhc2UnOiAnREFTSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgfSxcblxuICAgIHNpZ25JbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0QXV0aCAoKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0QmFsYW5jZSAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBpZiAoJ2FjY291bnRzJyBpbiByZXN1bHQpIHtcbiAgICAgICAgICAgIGxldCBhY2NvdW50cyA9IHJlc3BvbnNlWydhY2NvdW50cyddO1xuICAgICAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCBhY2NvdW50cy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgICAgIGxldCBhY2NvdW50ID0gYWNjb3VudHNbYl07XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYWNjb3VudFsnY3VycmVuY3knXTtcbiAgICAgICAgICAgICAgICBsZXQgYmFsYW5jZSA9IHBhcnNlRmxvYXQgKGFjY291bnRbJ2JhbGFuY2UnXSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlLFxuICAgICAgICAgICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvdGFsJzogYmFsYW5jZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IGJpZHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlc0J1eVN5bWJvbCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgYXNrcyA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzU2VsbFN5bWJvbCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0ge1xuICAgICAgICAgICAgJ2JpZHMnOiBbXSxcbiAgICAgICAgICAgICdhc2tzJzogW10sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChiaWRzKSB7XG4gICAgICAgICAgICBpZiAoJ2xpc3QnIGluIGJpZHMpXG4gICAgICAgICAgICAgICAgb3JkZXJib29rWydiaWRzJ10gPSBiaWRzWydsaXN0J107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFza3MpIHtcbiAgICAgICAgICAgIGlmICgnbGlzdCcgaW4gYXNrcylcbiAgICAgICAgICAgICAgICBvcmRlcmJvb2tbJ2Fza3MnXSA9IGFza3NbJ2xpc3QnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB1bmRlZmluZWQsICdiaWRzJywgJ2Fza3MnLCAncHJpY2UnLCAnY3VycmVuY3lfdHJhZGUnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEphcGFuU3RhdEhpZ2hTeW1ib2wgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWyd0cmFkZXMnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiaWQnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXNrJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgdGlja2VyTGVuZ3RoID0gdGlja2VyLmxlbmd0aDtcbiAgICAgICAgaWYgKHRpY2tlckxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IE1hdGgubWF4ICh0aWNrZXJMZW5ndGggLSA0OCwgMCk7XG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gc3RhcnQ7IHQgPCB0aWNrZXIubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2FuZGxlID0gdGlja2VyW3RdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0WydvcGVuJ10gPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFsnb3BlbiddID0gY2FuZGxlWzFdO1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIHJlc3VsdFsnaGlnaCddID09ICd1bmRlZmluZWQnKSB8fCAocmVzdWx0WydoaWdoJ10gPCBjYW5kbGVbMl0pKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ2hpZ2gnXSA9IGNhbmRsZVsyXTtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiByZXN1bHRbJ2xvdyddID09ICd1bmRlZmluZWQnKSB8fCAocmVzdWx0Wydsb3cnXSA+IGNhbmRsZVszXSkpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFsnbG93J10gPSBjYW5kbGVbM107XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHRbJ3F1b3RlVm9sdW1lJ10gPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFsncXVvdGVWb2x1bWUnXSA9IC1jYW5kbGVbNV07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbJ3F1b3RlVm9sdW1lJ10gLT0gY2FuZGxlWzVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGxhc3QgPSB0aWNrZXJMZW5ndGggLSAxO1xuICAgICAgICAgICAgcmVzdWx0WydjbG9zZSddID0gdGlja2VyW2xhc3RdWzRdO1xuICAgICAgICAgICAgcmVzdWx0WydxdW90ZVZvbHVtZSddID0gLTEgKiByZXN1bHRbJ3F1b3RlVm9sdW1lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7IC8vIHVudGlsIHdlIGhhdmUgYSBiZXR0ZXIgc29sdXRpb24gZm9yIHB5dGhvblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWyd0eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2FtbnRfYmFzZSddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldERlYWxzU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ21hcmtldCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgYWxsb3dzIGxpbWl0IG9yZGVycyBvbmx5Jyk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdCcgKyB0aGlzLmNhcGl0YWxpemUgKHNpZGUpICsgJ0lkJztcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ2NvdW50JzogYW1vdW50LFxuICAgICAgICAgICAgJ2N1cnJlbmN5MSc6IG1hcmtldFsncXVvdGUnXSxcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsnYmFzZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcHJpY2UsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdFJlbW92ZU9yZGVySWQgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ291dF9vcmRlcl9pZCc6IG5vbmNlLFxuICAgICAgICAgICAgICAgICdub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfSwgcXVlcnkpKTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gYm9keSArIHRoaXMuc2VjcmV0O1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAncHVibGljLWtleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdhcGktc2lnbic6IHRoaXMuaGFzaCAodGhpcy5lbmNvZGUgKGF1dGgpLCAnc2hhMjU2JyksXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGJ0Y3R1cmsgPSBleHRlbmQgKGJ0Y3RyYWRlciwge1xuXG4gICAgJ2lkJzogJ2J0Y3R1cmsnLFxuICAgICduYW1lJzogJ0JUQ1R1cmsnLFxuICAgICdjb3VudHJpZXMnOiAnVFInLCAvLyBUdXJrZXlcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzk5MjcwOS0xOGUxNTY0Ni02NGEzLTExZTctOWZhMi1iMDk1MGVjNzcxMmYuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5idGN0dXJrLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmJ0Y3R1cmsuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2dpdGh1Yi5jb20vQlRDVHJhZGVyL2Jyb2tlci1hcGktZG9jcycsXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9UUlknOiB7ICdpZCc6ICdCVEMvVFJZJywgJ3N5bWJvbCc6ICdCVEMvVFJZJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1RSWScgfSxcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYnRjeCA9IHtcblxuICAgICdpZCc6ICdidGN4JyxcbiAgICAnbmFtZSc6ICdCVENYJyxcbiAgICAnY291bnRyaWVzJzogWyAnSVMnLCAnVVMnLCAnRVUnIF0sXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsIC8vIHN1cHBvcnQgaW4gZW5nbGlzaCBpcyB2ZXJ5IHBvb3IsIHVuYWJsZSB0byB0ZWxsIHJhdGUgbGltaXRzXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2Mzg1LTlmZGNjOThjLTVlZDYtMTFlNy04ZjE0LTY2ZDVlNWNkNDdlNi5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYnRjLXguaXMvYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2J0Yy14LmlzJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2J0Yy14LmlzL2N1c3RvbS9hcGktZG9jdW1lbnQuaHRtbCcsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnZGVwdGgve2lkfS97bGltaXR9JyxcbiAgICAgICAgICAgICAgICAndGlja2VyL3tpZH0nLFxuICAgICAgICAgICAgICAgICd0cmFkZS97aWR9L3tsaW1pdH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ2hpc3RvcnknLFxuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ3JlZGVlbScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1VTRCc6IHsgJ2lkJzogJ2J0Yy91c2QnLCAnc3ltYm9sJzogJ0JUQy9VU0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnVVNEJyB9LFxuICAgICAgICAnQlRDL0VVUic6IHsgJ2lkJzogJ2J0Yy9ldXInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGxldCBjdXJyZW5jaWVzID0gT2JqZWN0LmtleXMgKGJhbGFuY2VzKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBjdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IHVwcGVyY2FzZSA9IGN1cnJlbmN5LnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlc1tjdXJyZW5jeV0sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogYmFsYW5jZXNbY3VycmVuY3ldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdFt1cHBlcmNhc2VdID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXREZXB0aElkTGltaXQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2xpbWl0JzogMTAwMCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICdhbW91bnQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJJZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3RpbWUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZSddKSAqIDEwMDA7XG4gICAgICAgIGxldCBzaWRlID0gKHRyYWRlWyd0eXBlJ10gPT0gJ2FzaycpID8gJ3NlbGwnIDogJ2J1eSc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsnaWQnXSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlSWRMaW1pdCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdsaW1pdCc6IDEwMDAsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RUcmFkZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICd0eXBlJzogc2lkZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgICdtYXJrZXQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXInXVsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsICh7ICdvcmRlcic6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB1cmwgKz0gdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIHVybCArPSBhcGk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ01ldGhvZCc6IHBhdGgudG9VcHBlckNhc2UgKCksXG4gICAgICAgICAgICAgICAgJ05vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbmF0dXJlJzogdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYm9keSksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGE1MTInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZVsnZXJyb3InXSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgYnRlciA9IHtcbiAgICAnaWQnOiAnYnRlcicsXG4gICAgJ25hbWUnOiAnQnRlcicsXG4gICAgJ2NvdW50cmllcyc6IFsgJ1ZHJywgJ0NOJyBdLCAvLyBCcml0aXNoIFZpcmdpbiBJc2xhbmRzLCBDaGluYVxuICAgICd2ZXJzaW9uJzogJzInLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3OTgwNDc5LWNmYTMxODhjLTYzODctMTFlNy04MTkxLTkzZmM0MTg0YmE1Yy5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL2RhdGEuYnRlci5jb20vYXBpJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vYXBpLmJ0ZXIuY29tL2FwaScsXG4gICAgICAgIH0sXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9idGVyLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9idGVyLmNvbS9hcGkyJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdwYWlycycsXG4gICAgICAgICAgICAgICAgJ21hcmtldGluZm8nLFxuICAgICAgICAgICAgICAgICdtYXJrZXRsaXN0JyxcbiAgICAgICAgICAgICAgICAndGlja2VycycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlci97aWR9JyxcbiAgICAgICAgICAgICAgICAnb3JkZXJCb29rL3tpZH0nLFxuICAgICAgICAgICAgICAgICd0cmFkZS97aWR9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVIaXN0b3J5L3tpZH0nLFxuICAgICAgICAgICAgICAgICd0cmFkZUhpc3Rvcnkve2lkfS97dGlkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdiYWxhbmNlcycsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnbmV3QWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRzV2l0aGRyYXdhbHMnLFxuICAgICAgICAgICAgICAgICdidXknLFxuICAgICAgICAgICAgICAgICdzZWxsJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdjYW5jZWxBbGxPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdnZXRPcmRlcicsXG4gICAgICAgICAgICAgICAgJ29wZW5PcmRlcnMnLFxuICAgICAgICAgICAgICAgICd0cmFkZUhpc3RvcnknLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldGxpc3QgKCk7XG4gICAgICAgIGxldCBtYXJrZXRzID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydwYWlyJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnY3Vycl9hJ107XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBtYXJrZXRbJ2N1cnJfYiddO1xuICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgIHF1b3RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKHF1b3RlKTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgYmFsYW5jZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlcyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgY29kZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChjdXJyZW5jeSk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmICgnYXZhaWxhYmxlJyBpbiBiYWxhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbmN5IGluIGJhbGFuY2VbJ2F2YWlsYWJsZSddKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2F2YWlsYWJsZSddW2N1cnJlbmN5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdsb2NrZWQnIGluIGJhbGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZVsnbG9ja2VkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnbG9ja2VkJ11bY3VycmVuY3ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjb2RlXSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0T3JkZXJCb29rSWQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgICAgIHJlc3VsdFsnYXNrcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYXNrcyddLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaDI0aHInXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cyNGhyJ10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaGVzdEJpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvd2VzdEFzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3BlcmNlbnRDaGFuZ2UnXSksXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Jhc2VWb2x1bWUnXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3F1b3RlVm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgWyBiYXNlSWQsIHF1b3RlSWQgXSA9IGlkLnNwbGl0ICgnXycpO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBiYXNlSWQudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBxdW90ZUlkLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgIHF1b3RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKHF1b3RlKTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHN5bWJvbCBpbiB0aGlzLm1hcmtldHMpXG4gICAgICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzW3N5bWJvbF07XG4gICAgICAgICAgICBpZiAoaWQgaW4gdGhpcy5tYXJrZXRzX2J5X2lkKVxuICAgICAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VySWQgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsndGltZXN0YW1wJ10pICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0cmFkZUlEJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWyd0eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncmF0ZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlSGlzdG9yeUlkICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWydkYXRhJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdjdXJyZW5jeVBhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3JhdGUnOiBwcmljZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJOdW1iZXInXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHsgJ29yZGVyTnVtYmVyJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHByZWZpeCA9IChhcGkgPT0gJ3ByaXZhdGUnKSA/IChhcGkgKyAnLycpIDogJyc7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV0gKyB0aGlzLnZlcnNpb24gKyAnLzEvJyArIHByZWZpeCArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7ICdub25jZSc6IG5vbmNlIH07XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBxdWVyeSkpO1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgudG9TdHJpbmcgKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdyZXN1bHQnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydyZXN1bHQnXSAhPSAndHJ1ZScpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBieGludGggPSB7XG5cbiAgICAnaWQnOiAnYnhpbnRoJyxcbiAgICAnbmFtZSc6ICdCWC5pbi50aCcsXG4gICAgJ2NvdW50cmllcyc6ICdUSCcsIC8vIFRoYWlsYW5kXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY0MTItNTY3YjFlYjQtNWVkNy0xMWU3LTk0YTgtZmY2YTM4ODRmNmM1LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9ieC5pbi50aC9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYnguaW4udGgnLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vYnguaW4udGgvaW5mby9hcGknLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJycsIC8vIHRpY2tlclxuICAgICAgICAgICAgICAgICdvcHRpb25zJyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uYm9vaycsXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ3BhaXJpbmcnLFxuICAgICAgICAgICAgICAgICd0cmFkZScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlaGlzdG9yeScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnYmlsbGVyJyxcbiAgICAgICAgICAgICAgICAnYmlsbGdyb3VwJyxcbiAgICAgICAgICAgICAgICAnYmlsbHBheScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICdnZXRvcmRlcnMnLFxuICAgICAgICAgICAgICAgICdoaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uLWlzc3VlJyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uLWJpZCcsXG4gICAgICAgICAgICAgICAgJ29wdGlvbi1zZWxsJyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uLW15aXNzdWUnLFxuICAgICAgICAgICAgICAgICdvcHRpb24tbXliaWQnLFxuICAgICAgICAgICAgICAgICdvcHRpb24tbXlvcHRpb25zJyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uLWV4ZXJjaXNlJyxcbiAgICAgICAgICAgICAgICAnb3B0aW9uLWNhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ29wdGlvbi1oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnb3JkZXInLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2FsJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbC1oaXN0b3J5JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQYWlyaW5nICgpO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChtYXJrZXRzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGtleXMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW2tleXNbcF1dO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydwYWlyaW5nX2lkJ10udG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsncHJpbWFyeV9jdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gbWFya2V0WydzZWNvbmRhcnlfY3VycmVuY3knXTtcbiAgICAgICAgICAgIGJhc2UgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAoYmFzZSk7XG4gICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGNvbW1vbkN1cnJlbmN5Q29kZSAoY3VycmVuY3kpIHtcbiAgICAgICAgLy8gd2h5IHdvdWxkIHRoZXkgdXNlIHRocmVlIGxldHRlcnMgaW5zdGVhZCBvZiBmb3VyIGZvciBjdXJyZW5jeSBjb2Rlc1xuICAgICAgICBpZiAoY3VycmVuY3kgPT0gJ0RBUycpXG4gICAgICAgICAgICByZXR1cm4gJ0RBU0gnO1xuICAgICAgICBpZiAoY3VycmVuY3kgPT0gJ0RPRycpXG4gICAgICAgICAgICByZXR1cm4gJ0RPR0UnO1xuICAgICAgICByZXR1cm4gY3VycmVuY3k7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gcmVzcG9uc2VbJ2JhbGFuY2UnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlIH07XG4gICAgICAgIGxldCBjdXJyZW5jaWVzID0gT2JqZWN0LmtleXMgKGJhbGFuY2UpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgY29kZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChjdXJyZW5jeSk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAnZnJlZSc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbY3VycmVuY3ldWydhdmFpbGFibGUnXSksXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogcGFyc2VGbG9hdCAoYmFsYW5jZVtjdXJyZW5jeV1bJ3RvdGFsJ10pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICByZXN1bHRbY29kZV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyYm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyaW5nJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29yZGVyYm9vayddWydiaWRzJ11bJ2hpZ2hiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydvcmRlcmJvb2snXVsnYXNrcyddWydoaWdoYmlkJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0X3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnY2hhbmdlJ10pLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWVfMjRob3VycyddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlcnMgKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgdGlja2VycyA9IGF3YWl0IHRoaXMucHVibGljR2V0ICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXQgKHsgJ3BhaXJpbmcnOiBtYXJrZXRbJ2lkJ10gfSk7XG4gICAgICAgIGxldCBpZCA9IG1hcmtldFsnaWQnXS50b1N0cmluZyAoKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbaWRdO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodHJhZGVbJ3RyYWRlX2RhdGUnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJhZGVfaWQnXSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAnb3JkZXInOiB0cmFkZVsnb3JkZXJfaWQnXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsndHJhZGVfdHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3JhdGUnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ2Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcmluZyc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsndHJhZGVzJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlciAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyaW5nJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICd0eXBlJzogc2lkZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAncmF0ZSc6IHByaWNlLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJfaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBwYWlyaW5nID0gdW5kZWZpbmVkOyAvLyBUT0RPIGZpeG1lXG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsICh7XG4gICAgICAgICAgICAnb3JkZXJfaWQnOiBpZCxcbiAgICAgICAgICAgICdwYWlyaW5nJzogcGFpcmluZyxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLyc7XG4gICAgICAgIGlmIChwYXRoKVxuICAgICAgICAgICAgdXJsICs9IHBhdGggKyAnLyc7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHBhcmFtcyk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB0aGlzLmFwaUtleSArIG5vbmNlLnRvU3RyaW5nICgpICsgdGhpcy5zZWNyZXQ7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAoYXV0aCksICdzaGEyNTYnKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAna2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ3NpZ25hdHVyZSc6IHNpZ25hdHVyZSxcbiAgICAgICAgICAgICAgICAvLyB0d29mYTogdGhpcy50d29mYSxcbiAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY2NleCA9IHtcblxuICAgICdpZCc6ICdjY2V4JyxcbiAgICAnbmFtZSc6ICdDLUNFWCcsXG4gICAgJ2NvdW50cmllcyc6IFsgJ0RFJywgJ0VVJyBdLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NDMzLTE2ODgxZjkwLTVlZDgtMTFlNy05MmY4LTNkOTJjYzc0N2E2Yy5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3RpY2tlcnMnOiAnaHR0cHM6Ly9jLWNleC5jb20vdCcsXG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vYy1jZXguY29tL3QvYXBpX3B1Yi5odG1sJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vYy1jZXguY29tL3QvYXBpLmh0bWwnLFxuICAgICAgICB9LFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vYy1jZXguY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2MtY2V4LmNvbS8/aWQ9YXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICd0aWNrZXJzJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnY29pbm5hbWVzJyxcbiAgICAgICAgICAgICAgICAne21hcmtldH0nLFxuICAgICAgICAgICAgICAgICdwYWlycycsXG4gICAgICAgICAgICAgICAgJ3ByaWNlcycsXG4gICAgICAgICAgICAgICAgJ3ZvbHVtZV97Y29pbn0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2VkaXN0cmlidXRpb24nLFxuICAgICAgICAgICAgICAgICdtYXJrZXRoaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnbWFya2V0cycsXG4gICAgICAgICAgICAgICAgJ21hcmtldHN1bW1hcmllcycsXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vaycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2J1eWxpbWl0JyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnZ2V0YmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ2dldGJhbGFuY2VzJyxcbiAgICAgICAgICAgICAgICAnZ2V0b3Blbm9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2V0b3JkZXJoaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnbXl0cmFkZXMnLFxuICAgICAgICAgICAgICAgICdzZWxsbGltaXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzWydyZXN1bHQnXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ3Jlc3VsdCddW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydNYXJrZXROYW1lJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnTWFya2V0Q3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsnQmFzZUN1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYmFsYW5jZVsnQ3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogYmFsYW5jZVsnQXZhaWxhYmxlJ10sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBiYWxhbmNlWydQZW5kaW5nJ10sXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogYmFsYW5jZVsnQmFsYW5jZSddLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0T3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ21hcmtldCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAndHlwZSc6ICdib3RoJyxcbiAgICAgICAgICAgICdkZXB0aCc6IDEwMCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsncmVzdWx0J107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2J1eScsICdzZWxsJywgJ1JhdGUnLCAnUXVhbnRpdHknKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3VwZGF0ZWQnXSAqIDEwMDA7XG4gICAgICAgIGxldCB2b2x1bWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnYnV5c3VwcG9ydCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgdm9sdW1lID0gcGFyc2VGbG9hdCAodGlja2VyWydidXlzdXBwb3J0J10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnc2VsbCddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdHByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2F2ZyddKSxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogdm9sdW1lLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy50aWNrZXJzR2V0UHJpY2VzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHRpY2tlcnMgfTtcbiAgICAgICAgbGV0IGlkcyA9IE9iamVjdC5rZXlzICh0aWNrZXJzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBpZC50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHVwcGVyY2FzZSBpbiB0aGlzLm1hcmtldHNfYnlfaWQpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbdXBwZXJjYXNlXTtcbiAgICAgICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gdXBwZXJjYXNlLnNwbGl0ICgnLScpO1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnRpY2tlcnNHZXRNYXJrZXQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10udG9Mb3dlckNhc2UgKCksXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ3RpY2tlciddO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodHJhZGVbJ1RpbWVTdGFtcCddKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWydJZCddLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsnT3JkZXJUeXBlJ10udG9Mb3dlckNhc2UgKCksXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsnUHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnUXVhbnRpdHknXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldGhpc3RvcnkgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnbWFya2V0JzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgICAgICd0eXBlJzogJ2JvdGgnLFxuICAgICAgICAgICAgJ2RlcHRoJzogMTAwLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWydyZXN1bHQnXSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlR2V0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSkgKyB0eXBlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnbWFya2V0JzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdxdWFudGl0eSc6IGFtb3VudCxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydyZXN1bHQnXVsndXVpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZUdldENhbmNlbCAoeyAndXVpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV07XG4gICAgICAgIGlmIChhcGkgPT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5rZXlzb3J0ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdhJzogcGF0aCxcbiAgICAgICAgICAgICAgICAnYXBpa2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ2FwaXNpZ24nOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlICh1cmwpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJykgfTtcbiAgICAgICAgfSBlbHNlIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnYSc6ICdnZXQnICsgcGF0aCxcbiAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKSArICcuanNvbic7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoYXBpID09ICd0aWNrZXJzJylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY2V4ID0ge1xuXG4gICAgJ2lkJzogJ2NleCcsXG4gICAgJ25hbWUnOiAnQ0VYLklPJyxcbiAgICAnY291bnRyaWVzJzogWyAnR0InLCAnRVUnLCAnQ1knLCAnUlUnIF0sXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY0NDItOGRkYzMzYjAtNWVkOC0xMWU3LThiOTgtZjc4NmFlZjBmM2M5LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9jZXguaW8vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2NleC5pbycsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9jZXguaW8vY2V4LWFwaScsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnY3VycmVuY3lfbGltaXRzJyxcbiAgICAgICAgICAgICAgICAnbGFzdF9wcmljZS97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdsYXN0X3ByaWNlcy97Y3VycmVuY2llc30nLFxuICAgICAgICAgICAgICAgICdvaGxjdi9oZC97eXl5eW1tZGR9L3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2Jvb2sve3BhaXJ9JyxcbiAgICAgICAgICAgICAgICAndGlja2VyL3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcnMve2N1cnJlbmNpZXN9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVfaGlzdG9yeS97cGFpcn0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdjb252ZXJ0L3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ3ByaWNlX3N0YXRzL3twYWlyfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhY3RpdmVfb3JkZXJzX3N0YXR1cy8nLFxuICAgICAgICAgICAgICAgICdhcmNoaXZlZF9vcmRlcnMve3BhaXJ9JyxcbiAgICAgICAgICAgICAgICAnYmFsYW5jZS8nLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfb3JkZXIvJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsX29yZGVycy97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfcmVwbGFjZV9vcmRlci97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdjbG9zZV9wb3NpdGlvbi97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdnZXRfYWRkcmVzcy8nLFxuICAgICAgICAgICAgICAgICdnZXRfbXlmZWUvJyxcbiAgICAgICAgICAgICAgICAnZ2V0X29yZGVyLycsXG4gICAgICAgICAgICAgICAgJ2dldF9vcmRlcl90eC8nLFxuICAgICAgICAgICAgICAgICdvcGVuX29yZGVycy97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdvcGVuX29yZGVycy8nLFxuICAgICAgICAgICAgICAgICdvcGVuX3Bvc2l0aW9uL3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ29wZW5fcG9zaXRpb25zL3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ3BsYWNlX29yZGVyL3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ3BsYWNlX29yZGVyL3twYWlyfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRDdXJyZW5jeUxpbWl0cyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHNbJ2RhdGEnXVsncGFpcnMnXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ2RhdGEnXVsncGFpcnMnXVtwXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnc3ltYm9sMSddICsgJy8nICsgbWFya2V0WydzeW1ib2wyJ107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gaWQ7XG4gICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gc3ltYm9sLnNwbGl0ICgnLycpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZXNbY3VycmVuY3ldWydhdmFpbGFibGUnXSksXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBwYXJzZUZsb2F0IChiYWxhbmNlc1tjdXJyZW5jeV1bJ29yZGVycyddKSxcbiAgICAgICAgICAgICAgICAndG90YWwnOiAwLjAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgIHRoaXMucHVibGljR2V0T3JkZXJCb29rUGFpciAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBvcmRlcmJvb2tbJ3RpbWVzdGFtcCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdGltZXN0YW1wKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodGlja2VyWyd0aW1lc3RhbXAnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBjdXJyZW5jaWVzID0gdGhpcy5jdXJyZW5jaWVzLmpvaW4gKCcvJyk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2Vyc0N1cnJlbmNpZXMgKHtcbiAgICAgICAgICAgICdjdXJyZW5jaWVzJzogY3VycmVuY2llcyxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRpY2tlcnMubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW3RdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IHRpY2tlclsncGFpciddLnJlcGxhY2UgKCc6JywgJy8nKTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNbc3ltYm9sXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJQYWlyICh7XG4gICAgICAgICAgICAncGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWyd0eXBlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlSGlzdG9yeVBhaXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2xpbWl0JylcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9yZGVyWydvcmRlcl90eXBlJ10gPSB0eXBlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UGxhY2VPcmRlclBhaXIgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51aWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGAnICsgdGhpcy5pZCArICcudWlkYCBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IG5vbmNlICsgdGhpcy51aWQgKyB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdzaWduYXR1cmUnOiBzaWduYXR1cmUudG9VcHBlckNhc2UgKCksXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBxdWVyeSkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKCdvaycgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydvayddID09ICdvaycpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBjaGJ0YyA9IHtcbiAgICAnaWQnOiAnY2hidGMnLFxuICAgICduYW1lJzogJ0NIQlRDJyxcbiAgICAnY291bnRyaWVzJzogJ0NOJyxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjg1NTU2NTktZjAwNDBkYzItNzEwOS0xMWU3LTlkOTktNjg4YTQzOGJmOWY0LmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHA6Ly9hcGkuY2hidGMuY29tL2RhdGEnLCAvLyBubyBodHRwcyBmb3IgcHVibGljIEFQSVxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly90cmFkZS5jaGJ0Yy5jb20vYXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3RyYWRlLmNoYnRjLmNvbS9hcGknLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3LmNoYnRjLmNvbS9pL2RldmVsb3BlcicsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAnZGVwdGgnLFxuICAgICAgICAgICAgICAgICd0cmFkZXMnLFxuICAgICAgICAgICAgICAgICdrbGluZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2V0T3JkZXInLFxuICAgICAgICAgICAgICAgICdnZXRPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdnZXRPcmRlcnNOZXcnLFxuICAgICAgICAgICAgICAgICdnZXRPcmRlcnNJZ25vcmVUcmFkZVR5cGUnLFxuICAgICAgICAgICAgICAgICdnZXRVbmZpbmlzaGVkT3JkZXJzSWdub3JlVHJhZGVUeXBlJyxcbiAgICAgICAgICAgICAgICAnZ2V0QWNjb3VudEluZm8nLFxuICAgICAgICAgICAgICAgICdnZXRVc2VyQWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2dldFdpdGhkcmF3QWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2dldFdpdGhkcmF3UmVjb3JkJyxcbiAgICAgICAgICAgICAgICAnZ2V0Q2hhcmdlUmVjb3JkJyxcbiAgICAgICAgICAgICAgICAnZ2V0Q255V2l0aGRyYXdSZWNvcmQnLFxuICAgICAgICAgICAgICAgICdnZXRDbnlDaGFyZ2VSZWNvcmQnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvQ05ZJzogeyAnaWQnOiAnYnRjX2NueScsICdzeW1ib2wnOiAnQlRDL0NOWScsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdMVEMvQ05ZJzogeyAnaWQnOiAnbHRjX2NueScsICdzeW1ib2wnOiAnTFRDL0NOWScsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdFVEgvQ05ZJzogeyAnaWQnOiAnZXRoX2NueScsICdzeW1ib2wnOiAnRVRIL0NOWScsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdFVEMvQ05ZJzogeyAnaWQnOiAnZXRjX2NueScsICdzeW1ib2wnOiAnRVRDL0NOWScsICdiYXNlJzogJ0VUQycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdCVFMvQ05ZJzogeyAnaWQnOiAnYnRzX2NueScsICdzeW1ib2wnOiAnQlRTL0NOWScsICdiYXNlJzogJ0JUUycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgICAgICdFT1MvQ05ZJzogeyAnaWQnOiAnZW9zX2NueScsICdzeW1ib2wnOiAnRU9TL0NOWScsICdiYXNlJzogJ0VPUycsICdxdW90ZSc6ICdDTlknIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdldEFjY291bnRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncmVzdWx0J107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbmN5IGluIGJhbGFuY2VzWydiYWxhbmNlJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbJ2JhbGFuY2UnXVtjdXJyZW5jeV1bJ2Ftb3VudCddKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiBiYWxhbmNlc1snZnJvemVuJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbJ2Zyb3plbiddW2N1cnJlbmN5XVsnYW1vdW50J10pO1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldERlcHRoICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgYmlkcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGFza3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnYmlkcycgaW4gb3JkZXJib29rKVxuICAgICAgICAgICAgYmlkcyA9IG9yZGVyYm9va1snYmlkcyddO1xuICAgICAgICBpZiAoJ2Fza3MnIGluIG9yZGVyYm9vaylcbiAgICAgICAgICAgIGFza3MgPSBvcmRlcmJvb2tbJ2Fza3MnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICdiaWRzJzogYmlkcyxcbiAgICAgICAgICAgICdhc2tzJzogYXNrcyxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXN1bHRbJ2JpZHMnXSlcbiAgICAgICAgICAgIHJlc3VsdFsnYmlkcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYmlkcyddLCAwLCB0cnVlKTtcbiAgICAgICAgaWYgKHJlc3VsdFsnYXNrcyddKVxuICAgICAgICAgICAgcmVzdWx0Wydhc2tzJ10gPSB0aGlzLnNvcnRCeSAocmVzdWx0Wydhc2tzJ10sIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyICh7XG4gICAgICAgICAgICAnY3VycmVuY3knOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWyd0aWNrZXInXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnc2VsbCddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsnZGF0ZSddICogMTAwMDtcbiAgICAgICAgbGV0IHNpZGUgPSAodHJhZGVbJ3RyYWRlX3R5cGUnXSA9PSAnYmlkJykgPyAnYnV5JyA6ICdzZWxsJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHBhcmFtU3RyaW5nID0gJyZwcmljZT0nICsgcHJpY2UudG9TdHJpbmcgKCk7XG4gICAgICAgIHBhcmFtU3RyaW5nICs9ICcmYW1vdW50PScgKyBhbW91bnQudG9TdHJpbmcgKCk7XG4gICAgICAgIGxldCB0cmFkZVR5cGUgPSAoc2lkZSA9PSAnYnV5JykgPyAnMScgOiAnMCc7XG4gICAgICAgIHBhcmFtU3RyaW5nICs9ICcmdHJhZGVUeXBlPScgKyB0cmFkZVR5cGU7XG4gICAgICAgIHBhcmFtU3RyaW5nICs9ICcmY3VycmVuY3k9JyArIHRoaXMubWFya2V0SWQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlciAocGFyYW1TdHJpbmcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBwYXJhbVN0cmluZyA9ICcmaWQ9JyArIGlkLnRvU3RyaW5nICgpO1xuICAgICAgICBpZiAoJ2N1cnJlbmN5JyBpbiBwYXJhbXMpXG4gICAgICAgICAgICBwYXJhbVN0cmluZyArPSAnJmN1cnJlbmN5PScgKyBwYXJhbXNbJ2N1cnJlbmN5J107XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHBhcmFtU3RyaW5nKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBwYXJhbVN0cmluZyA9ICcmaWQ9JyArIGlkLnRvU3RyaW5nICgpO1xuICAgICAgICBpZiAoJ2N1cnJlbmN5JyBpbiBwYXJhbXMpXG4gICAgICAgICAgICBwYXJhbVN0cmluZyArPSAnJmN1cnJlbmN5PScgKyBwYXJhbXNbJ2N1cnJlbmN5J107XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0R2V0T3JkZXIgKHBhcmFtU3RyaW5nKTtcbiAgICB9LFxuXG4gICAgbm9uY2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ11bYXBpXTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHBhdGg7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYXJhbXNMZW5ndGggPSBwYXJhbXMubGVuZ3RoOyAvLyBwYXJhbXMgc2hvdWxkIGJlIGEgc3RyaW5nIGhlcmVcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9ICdtZXRob2Q9JyArIHBhdGg7XG4gICAgICAgICAgICBhdXRoICs9ICcmYWNjZXNza2V5PScgKyB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIGF1dGggKz0gcGFyYW1zTGVuZ3RoID8gcGFyYW1zIDogJyc7XG4gICAgICAgICAgICBsZXQgc2VjcmV0ID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhMScpO1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCB0aGlzLmVuY29kZSAoc2VjcmV0KSwgJ21kNScpO1xuICAgICAgICAgICAgbGV0IHN1ZmZpeCA9ICdzaWduPScgKyBzaWduYXR1cmUgKyAnJnJlcVRpbWU9JyArIG5vbmNlLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIHBhdGggKyAnPycgKyBhdXRoICsgJyYnICsgc3VmZml4O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHJpdmF0ZScpXG4gICAgICAgICAgICBpZiAoJ2NvZGUnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY2hpbGViaXQgPSBleHRlbmQgKGJsaW5rdHJhZGUsIHtcbiAgICAnaWQnOiAnY2hpbGViaXQnLFxuICAgICduYW1lJzogJ0NoaWxlQml0JyxcbiAgICAnY291bnRyaWVzJzogJ0NMJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzk5MTQxNC0xMjk4ZjBkOC02NDdmLTExZTctOWM0MC1kNTY0MDkyNjYzMzYuanBnJyxcbiAgICAgICAgJ2FwaSc6IHtcbiAgICAgICAgICAgICdwdWJsaWMnOiAnaHR0cHM6Ly9hcGkuYmxpbmt0cmFkZS5jb20vYXBpJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vYXBpLmJsaW5rdHJhZGUuY29tL3RhcGknLFxuICAgICAgICB9LFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vY2hpbGViaXQubmV0JyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2JsaW5rdHJhZGUuY29tL2RvY3MnLFxuICAgIH0sXG4gICAgJ2NvbW1lbnQnOiAnQmxpbmt0cmFkZSBBUEknLFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0NMUCc6IHsgJ2lkJzogJ0JUQ0NMUCcsICdzeW1ib2wnOiAnQlRDL0NMUCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDTFAnLCAnYnJva2VySWQnOiA5LCAnYnJva2VyJzogJ0NoaWxlQml0JyB9LFxuICAgIH0sXG59KVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBjb2luY2hlY2sgPSB7XG5cbiAgICAnaWQnOiAnY29pbmNoZWNrJyxcbiAgICAnbmFtZSc6ICdjb2luY2hlY2snLFxuICAgICdjb3VudHJpZXMnOiBbICdKUCcsICdJRCcgXSxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjQ2NC0zYjVjM2M3NC01ZWQ5LTExZTctODQwZS0zMWIzMjk2OGUxZGEuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2NvaW5jaGVjay5jb20vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2NvaW5jaGVjay5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vY29pbmNoZWNrLmNvbS9kb2N1bWVudHMvZXhjaGFuZ2UvYXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdleGNoYW5nZS9vcmRlcnMvcmF0ZScsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2Jvb2tzJyxcbiAgICAgICAgICAgICAgICAncmF0ZS97cGFpcn0nLFxuICAgICAgICAgICAgICAgICd0aWNrZXInLFxuICAgICAgICAgICAgICAgICd0cmFkZXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdhY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2FjY291bnRzL2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdhY2NvdW50cy9sZXZlcmFnZV9iYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnYmFua19hY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRfbW9uZXknLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9vcmRlcnMvb3BlbnMnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9vcmRlcnMvdHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2Uvb3JkZXJzL3RyYW5zYWN0aW9uc19wYWdpbmF0aW9uJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvbGV2ZXJhZ2UvcG9zaXRpb25zJyxcbiAgICAgICAgICAgICAgICAnbGVuZGluZy9ib3Jyb3dzL21hdGNoZXMnLFxuICAgICAgICAgICAgICAgICdzZW5kX21vbmV5JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYmFua19hY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRfbW9uZXkve2lkfS9mYXN0JyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2Uvb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvdHJhbnNmZXJzL3RvX2xldmVyYWdlJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvdHJhbnNmZXJzL2Zyb21fbGV2ZXJhZ2UnLFxuICAgICAgICAgICAgICAgICdsZW5kaW5nL2JvcnJvd3MnLFxuICAgICAgICAgICAgICAgICdsZW5kaW5nL2JvcnJvd3Mve2lkfS9yZXBheScsXG4gICAgICAgICAgICAgICAgJ3NlbmRfbW9uZXknLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd3MnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdkZWxldGUnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbmtfYWNjb3VudHMve2lkfScsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL29yZGVycy97aWR9JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdzL3tpZH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0pQWSc6ICB7ICdpZCc6ICdidGNfanB5JywgICdzeW1ib2wnOiAnQlRDL0pQWScsICAnYmFzZSc6ICdCVEMnLCAgJ3F1b3RlJzogJ0pQWScgfSwgLy8gdGhlIG9ubHkgcmVhbCBwYWlyXG4gICAgICAgICdFVEgvSlBZJzogIHsgJ2lkJzogJ2V0aF9qcHknLCAgJ3N5bWJvbCc6ICdFVEgvSlBZJywgICdiYXNlJzogJ0VUSCcsICAncXVvdGUnOiAnSlBZJyB9LFxuICAgICAgICAnRVRDL0pQWSc6ICB7ICdpZCc6ICdldGNfanB5JywgICdzeW1ib2wnOiAnRVRDL0pQWScsICAnYmFzZSc6ICdFVEMnLCAgJ3F1b3RlJzogJ0pQWScgfSxcbiAgICAgICAgJ0RBTy9KUFknOiAgeyAnaWQnOiAnZGFvX2pweScsICAnc3ltYm9sJzogJ0RBTy9KUFknLCAgJ2Jhc2UnOiAnREFPJywgICdxdW90ZSc6ICdKUFknIH0sXG4gICAgICAgICdMU0svSlBZJzogIHsgJ2lkJzogJ2xza19qcHknLCAgJ3N5bWJvbCc6ICdMU0svSlBZJywgICdiYXNlJzogJ0xTSycsICAncXVvdGUnOiAnSlBZJyB9LFxuICAgICAgICAnRkNUL0pQWSc6ICB7ICdpZCc6ICdmY3RfanB5JywgICdzeW1ib2wnOiAnRkNUL0pQWScsICAnYmFzZSc6ICdGQ1QnLCAgJ3F1b3RlJzogJ0pQWScgfSxcbiAgICAgICAgJ1hNUi9KUFknOiAgeyAnaWQnOiAneG1yX2pweScsICAnc3ltYm9sJzogJ1hNUi9KUFknLCAgJ2Jhc2UnOiAnWE1SJywgICdxdW90ZSc6ICdKUFknIH0sXG4gICAgICAgICdSRVAvSlBZJzogIHsgJ2lkJzogJ3JlcF9qcHknLCAgJ3N5bWJvbCc6ICdSRVAvSlBZJywgICdiYXNlJzogJ1JFUCcsICAncXVvdGUnOiAnSlBZJyB9LFxuICAgICAgICAnWFJQL0pQWSc6ICB7ICdpZCc6ICd4cnBfanB5JywgICdzeW1ib2wnOiAnWFJQL0pQWScsICAnYmFzZSc6ICdYUlAnLCAgJ3F1b3RlJzogJ0pQWScgfSxcbiAgICAgICAgJ1pFQy9KUFknOiAgeyAnaWQnOiAnemVjX2pweScsICAnc3ltYm9sJzogJ1pFQy9KUFknLCAgJ2Jhc2UnOiAnWkVDJywgICdxdW90ZSc6ICdKUFknIH0sXG4gICAgICAgICdYRU0vSlBZJzogIHsgJ2lkJzogJ3hlbV9qcHknLCAgJ3N5bWJvbCc6ICdYRU0vSlBZJywgICdiYXNlJzogJ1hFTScsICAncXVvdGUnOiAnSlBZJyB9LFxuICAgICAgICAnTFRDL0pQWSc6ICB7ICdpZCc6ICdsdGNfanB5JywgICdzeW1ib2wnOiAnTFRDL0pQWScsICAnYmFzZSc6ICdMVEMnLCAgJ3F1b3RlJzogJ0pQWScgfSxcbiAgICAgICAgJ0RBU0gvSlBZJzogeyAnaWQnOiAnZGFzaF9qcHknLCAnc3ltYm9sJzogJ0RBU0gvSlBZJywgJ2Jhc2UnOiAnREFTSCcsICdxdW90ZSc6ICdKUFknIH0sXG4gICAgICAgICdFVEgvQlRDJzogIHsgJ2lkJzogJ2V0aF9idGMnLCAgJ3N5bWJvbCc6ICdFVEgvQlRDJywgICdiYXNlJzogJ0VUSCcsICAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnRVRDL0JUQyc6ICB7ICdpZCc6ICdldGNfYnRjJywgICdzeW1ib2wnOiAnRVRDL0JUQycsICAnYmFzZSc6ICdFVEMnLCAgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0xTSy9CVEMnOiAgeyAnaWQnOiAnbHNrX2J0YycsICAnc3ltYm9sJzogJ0xTSy9CVEMnLCAgJ2Jhc2UnOiAnTFNLJywgICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdGQ1QvQlRDJzogIHsgJ2lkJzogJ2ZjdF9idGMnLCAgJ3N5bWJvbCc6ICdGQ1QvQlRDJywgICdiYXNlJzogJ0ZDVCcsICAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnWE1SL0JUQyc6ICB7ICdpZCc6ICd4bXJfYnRjJywgICdzeW1ib2wnOiAnWE1SL0JUQycsICAnYmFzZSc6ICdYTVInLCAgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ1JFUC9CVEMnOiAgeyAnaWQnOiAncmVwX2J0YycsICAnc3ltYm9sJzogJ1JFUC9CVEMnLCAgJ2Jhc2UnOiAnUkVQJywgICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdYUlAvQlRDJzogIHsgJ2lkJzogJ3hycF9idGMnLCAgJ3N5bWJvbCc6ICdYUlAvQlRDJywgICdiYXNlJzogJ1hSUCcsICAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnWkVDL0JUQyc6ICB7ICdpZCc6ICd6ZWNfYnRjJywgICdzeW1ib2wnOiAnWkVDL0JUQycsICAnYmFzZSc6ICdaRUMnLCAgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ1hFTS9CVEMnOiAgeyAnaWQnOiAneGVtX2J0YycsICAnc3ltYm9sJzogJ1hFTS9CVEMnLCAgJ2Jhc2UnOiAnWEVNJywgICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdMVEMvQlRDJzogIHsgJ2lkJzogJ2x0Y19idGMnLCAgJ3N5bWJvbCc6ICdMVEMvQlRDJywgICdiYXNlJzogJ0xUQycsICAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnREFTSC9CVEMnOiB7ICdpZCc6ICdkYXNoX2J0YycsICdzeW1ib2wnOiAnREFTSC9CVEMnLCAnYmFzZSc6ICdEQVNIJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRBY2NvdW50c0JhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZSBpbiBiYWxhbmNlcylcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlc1tsb3dlcmNhc2VdKTtcbiAgICAgICAgICAgIGxldCByZXNlcnZlZCA9IGxvd2VyY2FzZSArICdfcmVzZXJ2ZWQnO1xuICAgICAgICAgICAgaWYgKHJlc2VydmVkIGluIGJhbGFuY2VzKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VzW3Jlc2VydmVkXSk7XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCAgdGhpcy5wdWJsaWNHZXRPcmRlckJvb2tzIChwYXJhbXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKCk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3RpbWVzdGFtcCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodHJhZGVbJ2NyZWF0ZWRfYXQnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsnaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ29yZGVyX3R5cGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydyYXRlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXMgKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHByZWZpeCA9ICcnO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAncGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBsZXQgb3JkZXJfdHlwZSA9IHR5cGUgKyAnXycgKyBzaWRlO1xuICAgICAgICAgICAgb3JkZXJbJ29yZGVyX3R5cGUnXSA9IG9yZGVyX3R5cGU7XG4gICAgICAgICAgICBsZXQgcHJlZml4ID0gKHNpZGUgPT0gJ2J1eScpID8gKG9yZGVyX3R5cGUgKyAnXycpIDogJyc7XG4gICAgICAgICAgICBvcmRlcltwcmVmaXggKyAnYW1vdW50J10gPSBhbW91bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcmRlclsnb3JkZXJfdHlwZSddID0gc2lkZTtcbiAgICAgICAgICAgIG9yZGVyWydyYXRlJ10gPSBwcmljZTtcbiAgICAgICAgICAgIG9yZGVyWydhbW91bnQnXSA9IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0RXhjaGFuZ2VPcmRlcnMgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlRGVsZXRlRXhjaGFuZ2VPcmRlcnNJZCAoeyAnaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMua2V5c29ydCAocXVlcnkpKTtcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhdXRoID0gbm9uY2UgKyB1cmwgKyAoYm9keSB8fCAnJyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBsZW5ndGgsXG4gICAgICAgICAgICAgICAgJ0FDQ0VTUy1LRVknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnQUNDRVNTLU5PTkNFJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ0FDQ0VTUy1TSUdOQVRVUkUnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY29pbmZsb29yID0ge1xuXG4gICAgJ2lkJzogJ2NvaW5mbG9vcicsXG4gICAgJ25hbWUnOiAnY29pbmZsb29yJyxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAnY291bnRyaWVzJzogJ1VLJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yODI0NjA4MS02MjNmYzE2NC02YTFjLTExZTctOTEzZi1iYWMwZDU1NzZjOTAuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3dlYmFwaS5jb2luZmxvb3IuY28udWs6ODA5MC9iaXN0JyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5jb2luZmxvb3IuY28udWsnLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jb2luZmxvb3IvYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5jb2luZmxvb3IuY28udWsvYXBpJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd7aWR9L3RpY2tlci8nLFxuICAgICAgICAgICAgICAgICd7aWR9L29yZGVyX2Jvb2svJyxcbiAgICAgICAgICAgICAgICAne2lkfS90cmFuc2FjdGlvbnMvJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3tpZH0vYmFsYW5jZS8nLFxuICAgICAgICAgICAgICAgICd7aWR9L3VzZXJfdHJhbnNhY3Rpb25zLycsXG4gICAgICAgICAgICAgICAgJ3tpZH0vb3Blbl9vcmRlcnMvJyxcbiAgICAgICAgICAgICAgICAne2lkfS9jYW5jZWxfb3JkZXIvJyxcbiAgICAgICAgICAgICAgICAne2lkfS9idXkvJyxcbiAgICAgICAgICAgICAgICAne2lkfS9zZWxsLycsXG4gICAgICAgICAgICAgICAgJ3tpZH0vYnV5X21hcmtldC8nLFxuICAgICAgICAgICAgICAgICd7aWR9L3NlbGxfbWFya2V0LycsXG4gICAgICAgICAgICAgICAgJ3tpZH0vZXN0aW1hdGVfc2VsbF9tYXJrZXQvJyxcbiAgICAgICAgICAgICAgICAne2lkfS9lc3RpbWF0ZV9idXlfbWFya2V0LycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvR0JQJzogeyAnaWQnOiAnWEJUL0dCUCcsICdzeW1ib2wnOiAnQlRDL0dCUCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdHQlAnIH0sXG4gICAgICAgICdCVEMvRVVSJzogeyAnaWQnOiAnWEJUL0VVUicsICdzeW1ib2wnOiAnQlRDL0VVUicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdFVVInIH0sXG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnWEJUL1VTRCcsICdzeW1ib2wnOiAnQlRDL1VTRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdCVEMvUExOJzogeyAnaWQnOiAnWEJUL1BMTicsICdzeW1ib2wnOiAnQlRDL1BMTicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdQTE4nIH0sXG4gICAgICAgICdCQ0gvR0JQJzogeyAnaWQnOiAnQkNIL0dCUCcsICdzeW1ib2wnOiAnQkNIL0dCUCcsICdiYXNlJzogJ0JDSCcsICdxdW90ZSc6ICdHQlAnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHN5bWJvbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdzeW1ib2wnIGluIHBhcmFtcylcbiAgICAgICAgICAgIHN5bWJvbCA9IHBhcmFtc1snc3ltYm9sJ107XG4gICAgICAgIGlmICgnaWQnIGluIHBhcmFtcylcbiAgICAgICAgICAgIHN5bWJvbCA9IHBhcmFtc1snaWQnXTtcbiAgICAgICAgaWYgKCFzeW1ib2wpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgZmV0Y2hCYWxhbmNlIHJlcXVpcmVzIGEgc3ltYm9sIHBhcmFtJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0SWRCYWxhbmNlICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRJZE9yZGVyQm9vayAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgLy8gcmV3cml0ZSB0byBnZXQgdGhlIHRpbWVzdGFtcCBmcm9tIEhUVFAgaGVhZGVyc1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIC8vIHRoZXkgc29tZXRpbWVzIHJldHVybiBudWxsIGZvciB2d2FwXG4gICAgICAgIGxldCB2d2FwID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ3Z3YXAnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ3Z3YXAnXSlcbiAgICAgICAgICAgICAgICB2d2FwID0gcGFyc2VGbG9hdCAodGlja2VyWyd2d2FwJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB2d2FwLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0SWRUaWNrZXIgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWydkYXRlJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0aWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldElkVHJhbnNhY3Rpb25zICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXIgPSB7ICdpZCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCkgfTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdElkJyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBvcmRlclsncXVhbnRpdHknXSA9IGFtb3VudDtcbiAgICAgICAgICAgIG1ldGhvZCArPSAnTWFya2V0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgICAgICBvcmRlclsnYW1vdW50J10gPSBhbW91bnQ7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RJZENhbmNlbE9yZGVyICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICByZXF1ZXN0IChwYXRoLCB0eXBlID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBjdXJsIC1rIC11ICdbVXNlciBJRF0vW0FQSSBrZXldOltQYXNzcGhyYXNlXScgaHR0cHM6Ly93ZWJhcGkuY29pbmZsb29yLmNvLnVrOjgwOTAvYmlzdC9YQlQvR0JQL2JhbGFuY2UvXG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmICh0eXBlID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBxdWVyeSkpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB0aGlzLnVpZCArICcvJyArIHRoaXMuYXBpS2V5ICsgJzonICsgdGhpcy5wYXNzd29yZDtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLnN0cmluZ1RvQmFzZTY0IChhdXRoKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0Jhc2ljICcgKyBzaWduYXR1cmUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY29pbmdpID0ge1xuXG4gICAgJ2lkJzogJ2NvaW5naScsXG4gICAgJ25hbWUnOiAnQ29pbmdpJyxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAnY291bnRyaWVzJzogWyAnUEEnLCAnQkcnLCAnQ04nLCAnVVMnIF0sIC8vIFBhbmFtYSwgQnVsZ2FyaWEsIENoaW5hLCBVU1xuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI4NjE5NzA3LTVjOTIzMmE4LTcyMTItMTFlNy04NmQ2LTk4ZmU1ZDE1Y2M2ZS5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmNvaW5naS5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vY29pbmdpLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cDovL2RvY3MuY29pbmdpLmFwaWFyeS5pby8nLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ2N1cnJlbnQnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlci1ib29rL3twYWlyfS97YXNrQ291bnR9L3tiaWRDb3VudH0ve2RlcHRofScsXG4gICAgICAgICAgICAgICAgJ3RyYW5zYWN0aW9ucy97cGFpcn0ve21heENvdW50fScsXG4gICAgICAgICAgICAgICAgJzI0aG91ci1yb2xsaW5nLWFnZ3JlZ2F0aW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICd1c2VyJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdhZGQtb3JkZXInLFxuICAgICAgICAgICAgICAgICdjYW5jZWwtb3JkZXInLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICd0cmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgICAgICdjcmVhdGUtY3J5cHRvLXdpdGhkcmF3YWwnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnTFRDL0JUQyc6IHsgJ2lkJzogJ2x0Yy1idGMnLCAnc3ltYm9sJzogJ0xUQy9CVEMnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnUFBDL0JUQyc6IHsgJ2lkJzogJ3BwYy1idGMnLCAnc3ltYm9sJzogJ1BQQy9CVEMnLCAnYmFzZSc6ICdQUEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAnRE9HRS9CVEMnOiB7ICdpZCc6ICdkb2dlLWJ0YycsICdzeW1ib2wnOiAnRE9HRS9CVEMnLCAnYmFzZSc6ICdET0dFJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ1ZUQy9CVEMnOiB7ICdpZCc6ICd2dGMtYnRjJywgJ3N5bWJvbCc6ICdWVEMvQlRDJywgJ2Jhc2UnOiAnVlRDJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0ZUQy9CVEMnOiB7ICdpZCc6ICdmdGMtYnRjJywgJ3N5bWJvbCc6ICdGVEMvQlRDJywgJ2Jhc2UnOiAnRlRDJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ05NQy9CVEMnOiB7ICdpZCc6ICdubWMtYnRjJywgJ3N5bWJvbCc6ICdOTUMvQlRDJywgJ2Jhc2UnOiAnTk1DJywgJ3F1b3RlJzogJ0JUQycgfSxcbiAgICAgICAgJ0RBU0gvQlRDJzogeyAnaWQnOiAnZGFzaC1idGMnLCAnc3ltYm9sJzogJ0RBU0gvQlRDJywgJ2Jhc2UnOiAnREFTSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IGN1cnJlbmNpZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGN1cnJlbmNpZXMucHVzaCAoY3VycmVuY3kpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMudXNlclBvc3RCYWxhbmNlICh7XG4gICAgICAgICAgICAnY3VycmVuY2llcyc6IGN1cnJlbmNpZXMuam9pbiAoJywnKVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYmFsYW5jZVsnY3VycmVuY3knXVsnbmFtZSddO1xuICAgICAgICAgICAgY3VycmVuY3kgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogYmFsYW5jZVsnYXZhaWxhYmxlJ10sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBiYWxhbmNlWydibG9ja2VkJ10gKyBiYWxhbmNlWydpbk9yZGVycyddICsgYmFsYW5jZVsnd2l0aGRyYXdpbmcnXSxcbiAgICAgICAgICAgICAgICAndG90YWwnOiAwLjAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLmN1cnJlbnRHZXRPcmRlckJvb2tQYWlyQXNrQ291bnRCaWRDb3VudERlcHRoICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnYXNrQ291bnQnOiA1MTIsIC8vIG1heGltdW0gcmV0dXJuZWQgbnVtYmVyIG9mIGFza3MgMS01MTJcbiAgICAgICAgICAgICdiaWRDb3VudCc6IDUxMiwgLy8gbWF4aW11bSByZXR1cm5lZCBudW1iZXIgb2YgYmlkcyAxLTUxMlxuICAgICAgICAgICAgJ2RlcHRoJzogMzIsIC8vIG1heGltdW0gbnVtYmVyIG9mIGRlcHRoIHJhbmdlIHN0ZXBzIDEtMzJcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICdiYXNlQW1vdW50Jyk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiB0aWNrZXJbJ2hpZ2gnXSxcbiAgICAgICAgICAgICdsb3cnOiB0aWNrZXJbJ2xvdyddLFxuICAgICAgICAgICAgJ2JpZCc6IHRpY2tlclsnaGlnaGVzdEJpZCddLFxuICAgICAgICAgICAgJ2Fzayc6IHRpY2tlclsnbG93ZXN0QXNrJ10sXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdGlja2VyWydiYXNlVm9sdW1lJ10sXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiB0aWNrZXJbJ2NvdW50ZXJWb2x1bWUnXSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGlja2VyO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlcnMgKHN5bWJvbHMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jdXJyZW50R2V0MjRob3VyUm9sbGluZ0FnZ3JlZ2F0aW9uICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgcmVzcG9uc2UubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVt0XTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gdGlja2VyWydjdXJyZW5jeVBhaXInXVsnYmFzZSddLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gdGlja2VyWydjdXJyZW5jeVBhaXInXVsnY291bnRlciddLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNbc3ltYm9sXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLmZldGNoVGlja2VycyAoc3ltYm9sKTtcbiAgICAgICAgcmV0dXJuIHRpY2tlcnNbc3ltYm9sXTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIW1hcmtldClcbiAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFt0cmFkZVsnY3VycmVuY3lQYWlyJ11dO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRyYWRlWyd0aW1lc3RhbXAnXSxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodHJhZGVbJ3RpbWVzdGFtcCddKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCwgLy8gdHlwZVxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ2Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY3VycmVudEdldFRyYW5zYWN0aW9uc1BhaXJNYXhDb3VudCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ21heENvdW50JzogMTI4LFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICd2b2x1bWUnOiBhbW91bnQsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSxcbiAgICAgICAgICAgICdvcmRlclR5cGUnOiAoc2lkZSA9PSAnYnV5JykgPyAwIDogMSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy51c2VyUG9zdEFkZE9yZGVyICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydyZXN1bHQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJQb3N0Q2FuY2VsT3JkZXIgKHsgJ29yZGVySWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIGFwaSArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdjdXJyZW50Jykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gdGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAndG9rZW4nOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgIH0sIHF1ZXJ5KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gbm9uY2UudG9TdHJpbmcgKCkgKyAnJCcgKyB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIHJlcXVlc3RbJ3NpZ25hdHVyZSddID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocmVxdWVzdCk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcnMnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBjb2lubWFya2V0Y2FwID0ge1xuXG4gICAgJ2lkJzogJ2NvaW5tYXJrZXRjYXAnLFxuICAgICduYW1lJzogJ0NvaW5NYXJrZXRDYXAnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwMCxcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ2NvdW50cmllcyc6ICdVUycsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjgyNDQyNDQtOWJlNjMxMmEtNjllZC0xMWU3LTk5YzEtN2MxNzk3Mjc1MjY1LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkuY29pbm1hcmtldGNhcC5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vY29pbm1hcmtldGNhcC5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vY29pbm1hcmtldGNhcC5jb20vYXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd0aWNrZXIvJyxcbiAgICAgICAgICAgICAgICAndGlja2VyL3tpZH0vJyxcbiAgICAgICAgICAgICAgICAnZ2xvYmFsLycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ2N1cnJlbmNpZXMnOiBbXG4gICAgICAgICdBVUQnLFxuICAgICAgICAnQlJMJyxcbiAgICAgICAgJ0NBRCcsXG4gICAgICAgICdDSEYnLFxuICAgICAgICAnQ05ZJyxcbiAgICAgICAgJ0VVUicsXG4gICAgICAgICdHQlAnLFxuICAgICAgICAnSEtEJyxcbiAgICAgICAgJ0lEUicsXG4gICAgICAgICdJTlInLFxuICAgICAgICAnSlBZJyxcbiAgICAgICAgJ0tSVycsXG4gICAgICAgICdNWE4nLFxuICAgICAgICAnUlVCJyxcbiAgICAgICAgJ1VTRCcsXG4gICAgXSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChtYXJrZXQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICgnRmV0Y2hpbmcgb3JkZXIgYm9va3MgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgQVBJIG9mICcgKyB0aGlzLmlkKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICAgICAgbGV0IGJhc2VJZCA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgICAgICAgICBsZXQgcXVvdGUgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICAgICAgbGV0IHF1b3RlSWQgPSBxdW90ZS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgICAgIGxldCBpZCA9IGJhc2VJZCArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICAgICAnYmFzZUlkJzogYmFzZUlkLFxuICAgICAgICAgICAgICAgICAgICAncXVvdGVJZCc6IHF1b3RlSWQsXG4gICAgICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoR2xvYmFsIChjdXJyZW5jeSA9ICdVU0QnKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXF1ZXN0ID0ge307XG4gICAgICAgIGlmIChjdXJyZW5jeSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ2NvbnZlcnQnXSA9IGN1cnJlbmN5O1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNHZXRHbG9iYWwgKHJlcXVlc3QpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBpZiAoJ2xhc3RfdXBkYXRlZCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnbGFzdF91cGRhdGVkJ10pXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wID0gcGFyc2VJbnQgKHRpY2tlclsnbGFzdF91cGRhdGVkJ10pICogMTAwMDtcbiAgICAgICAgbGV0IHZvbHVtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHZvbHVtZUtleSA9ICcyNGhfdm9sdW1lXycgKyBtYXJrZXRbJ3F1b3RlSWQnXTtcbiAgICAgICAgaWYgKHRpY2tlclt2b2x1bWVLZXldKVxuICAgICAgICAgICAgdm9sdW1lID0gcGFyc2VGbG9hdCAodGlja2VyW3ZvbHVtZUtleV0pO1xuICAgICAgICBsZXQgcHJpY2UgPSAncHJpY2VfJyArIG1hcmtldFsncXVvdGVJZCddO1xuICAgICAgICBsZXQgY2hhbmdlID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2hhbmdlS2V5ID0gJ3BlcmNlbnRfY2hhbmdlXzI0aCc7XG4gICAgICAgIGlmICh0aWNrZXJbY2hhbmdlS2V5XSlcbiAgICAgICAgICAgIGNoYW5nZSA9IHBhcnNlRmxvYXQgKHRpY2tlcltjaGFuZ2VLZXldKTtcbiAgICAgICAgbGV0IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChwcmljZSBpbiB0aWNrZXIpXG4gICAgICAgICAgICBpZiAodGlja2VyW3ByaWNlXSlcbiAgICAgICAgICAgICAgICBsYXN0ID0gcGFyc2VGbG9hdCAodGlja2VyW3ByaWNlXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbG93JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2JpZCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhc2snOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBsYXN0LFxuICAgICAgICAgICAgJ2NoYW5nZSc6IGNoYW5nZSxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHZvbHVtZSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlcnMgKGN1cnJlbmN5ID0gJ1VTRCcpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7fTtcbiAgICAgICAgaWYgKGN1cnJlbmN5KVxuICAgICAgICAgICAgcmVxdWVzdFsnY29udmVydCddID0gY3VycmVuY3k7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyIChyZXF1ZXN0KTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCByZXNwb25zZS5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlW3RdO1xuICAgICAgICAgICAgbGV0IGlkID0gdGlja2VyWydpZCddICsgJy8nICsgY3VycmVuY3k7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgdGlja2Vyc1tzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWNrZXJzO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnY29udmVydCc6IG1hcmtldFsncXVvdGUnXSxcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnYmFzZUlkJ10sXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VySWQgKHJlcXVlc3QpO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbMF07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY29pbm1hdGUgPSB7XG5cbiAgICAnaWQnOiAnY29pbm1hdGUnLFxuICAgICduYW1lJzogJ0NvaW5NYXRlJyxcbiAgICAnY291bnRyaWVzJzogWyAnR0InLCAnQ1onIF0sIC8vIFVLLCBDemVjaCBSZXB1YmxpY1xuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODExMjI5LWMxZWZiNTEwLTYwNmMtMTFlNy05YTM2LTg0YmEyY2U0MTJkOC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vY29pbm1hdGUuaW8vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2NvaW5tYXRlLmlvJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwOi8vZG9jcy5jb2lubWF0ZS5hcGlhcnkuaW8nLFxuICAgICAgICAgICAgJ2h0dHBzOi8vY29pbm1hdGUuaW8vZGV2ZWxvcGVycycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnb3JkZXJCb29rJyxcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2VzJyxcbiAgICAgICAgICAgICAgICAnYml0Y29pbldpdGhkcmF3YWwnLFxuICAgICAgICAgICAgICAgICdiaXRjb2luRGVwb3NpdEFkZHJlc3NlcycsXG4gICAgICAgICAgICAgICAgJ2J1eUluc3RhbnQnLFxuICAgICAgICAgICAgICAgICdidXlMaW1pdCcsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsT3JkZXJXaXRoSW5mbycsXG4gICAgICAgICAgICAgICAgJ2NyZWF0ZVZvdWNoZXInLFxuICAgICAgICAgICAgICAgICdvcGVuT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAncmVkZWVtVm91Y2hlcicsXG4gICAgICAgICAgICAgICAgJ3NlbGxJbnN0YW50JyxcbiAgICAgICAgICAgICAgICAnc2VsbExpbWl0JyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25IaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAndW5jb25maXJtZWRCaXRjb2luRGVwb3NpdHMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0VVUic6IHsgJ2lkJzogJ0JUQ19FVVInLCAnc3ltYm9sJzogJ0JUQy9FVVInLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnRVVSJyB9LFxuICAgICAgICAnQlRDL0NaSyc6IHsgJ2lkJzogJ0JUQ19DWksnLCAnc3ltYm9sJzogJ0JUQy9DWksnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQ1pLJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlcyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gYmFsYW5jZXMpIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBiYWxhbmNlc1tjdXJyZW5jeV1bJ2F2YWlsYWJsZSddO1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGJhbGFuY2VzW2N1cnJlbmN5XVsncmVzZXJ2ZWQnXTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gYmFsYW5jZXNbY3VycmVuY3ldWydiYWxhbmNlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyQm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeVBhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2dyb3VwQnlQcmljZUxpbWl0JzogJ0ZhbHNlJyxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsnZGF0YSddO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gb3JkZXJib29rWyd0aW1lc3RhbXAnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICdhbW91bnQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5UGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYW1vdW50J10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWyd0aW1lc3RhbXAnXSAqIDEwMDA7XG4gICAgICAgIGlmICghbWFya2V0KVxuICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW3RyYWRlWydjdXJyZW5jeVBhaXInXV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJhbnNhY3Rpb25JZCddLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0cmFkZVsndGltZXN0YW1wJ10sXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRyYWRlWyd0aW1lc3RhbXAnXSksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFuc2FjdGlvbnMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ21pbnV0ZXNJbnRvSGlzdG9yeSc6IDEwLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWydkYXRhJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtZXRob2QgPSAncHJpdmF0ZVBvc3QnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ2N1cnJlbmN5UGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBpZiAoc2lkZSA9PSAnYnV5JylcbiAgICAgICAgICAgICAgICBvcmRlclsndG90YWwnXSA9IGFtb3VudDsgLy8gYW1vdW50IGluIGZpYXRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvcmRlclsnYW1vdW50J10gPSBhbW91bnQ7IC8vIGFtb3VudCBpbiBmaWF0XG4gICAgICAgICAgICBtZXRob2QgKz0gJ0luc3RhbnQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3JkZXJbJ2Ftb3VudCddID0gYW1vdW50OyAvLyBhbW91bnQgaW4gY3J5cHRvXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICAgICAgbWV0aG9kICs9IHRoaXMuY2FwaXRhbGl6ZSAodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdIChzZWxmLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydkYXRhJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh7ICdvcmRlcklkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51aWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGAnICsgdGhpcy5pZCArICcudWlkYCBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IG5vbmNlICsgdGhpcy51aWQgKyB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ2NsaWVudElkJzogdGhpcy51aWQsXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ3B1YmxpY0tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdzaWduYXR1cmUnOiBzaWduYXR1cmUudG9VcHBlckNhc2UgKCksXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnZXJyb3InXSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGNvaW5zZWN1cmUgPSB7XG5cbiAgICAnaWQnOiAnY29pbnNlY3VyZScsXG4gICAgJ25hbWUnOiAnQ29pbnNlY3VyZScsXG4gICAgJ2NvdW50cmllcyc6ICdJTicsIC8vIEluZGlhXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NDcyLTljYmQyMDBhLTVlZDktMTFlNy05NTUxLTIyNjdhZDdiYWMwOC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmNvaW5zZWN1cmUuaW4nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vY29pbnNlY3VyZS5pbicsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9hcGkuY29pbnNlY3VyZS5pbicsXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NvaW5zZWN1cmUvcGx1Z2lucycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYml0Y29pbi9zZWFyY2gvY29uZmlybWF0aW9uL3t0eGlkfScsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL2Fzay9sb3cnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9hc2svb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvYmlkL2hpZ2gnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9iaWQvb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvbGFzdFRyYWRlJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvbWF4MjRIcicsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL21pbjI0SHInLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS90aWNrZXInLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS90cmFkZXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdtZmEvYXV0aHkvY2FsbCcsXG4gICAgICAgICAgICAgICAgJ21mYS9hdXRoeS9zbXMnLFxuICAgICAgICAgICAgICAgICduZXRraS9zZWFyY2gve25ldGtpTmFtZX0nLFxuICAgICAgICAgICAgICAgICd1c2VyL2Jhbmsvb3RwL3tudW1iZXJ9JyxcbiAgICAgICAgICAgICAgICAndXNlci9reWMvb3RwL3tudW1iZXJ9JyxcbiAgICAgICAgICAgICAgICAndXNlci9wcm9maWxlL3Bob25lL290cC97bnVtYmVyfScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvd2FsbGV0L2NvaW4vYWRkcmVzcy97aWR9JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXQvY29pbi9kZXBvc2l0L2NvbmZpcm1lZC9hbGwnLFxuICAgICAgICAgICAgICAgICd1c2VyL3dhbGxldC9jb2luL2RlcG9zaXQvY29uZmlybWVkL3tpZH0nLFxuICAgICAgICAgICAgICAgICd1c2VyL3dhbGxldC9jb2luL2RlcG9zaXQvdW5jb25maXJtZWQvYWxsJyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXQvY29pbi9kZXBvc2l0L3VuY29uZmlybWVkL3tpZH0nLFxuICAgICAgICAgICAgICAgICd1c2VyL3dhbGxldC9jb2luL3dhbGxldHMnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvZmlhdC9hY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L2JhbGFuY2UvYXZhaWxhYmxlJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2ZpYXQvYmFsYW5jZS9wZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2ZpYXQvYmFsYW5jZS90b3RhbCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L2RlcG9zaXQvY2FuY2VsbGVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2ZpYXQvZGVwb3NpdC91bnZlcmlmaWVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2ZpYXQvZGVwb3NpdC92ZXJpZmllZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L3dpdGhkcmF3L2NhbmNlbGxlZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L3dpdGhkcmF3L2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L3dpdGhkcmF3L3VudmVyaWZpZWQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvZmlhdC93aXRoZHJhdy92ZXJpZmllZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYXNrL2NhbmNlbGxlZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYXNrL2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYXNrL3BlbmRpbmcnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JpZC9jYW5jZWxsZWQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JpZC9jb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JpZC9wZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vYWRkcmVzc2VzJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vYmFsYW5jZS9hdmFpbGFibGUnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvY29pbi9iYWxhbmNlL3BlbmRpbmcnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvY29pbi9iYWxhbmNlL3RvdGFsJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vZGVwb3NpdC9jYW5jZWxsZWQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvY29pbi9kZXBvc2l0L3VudmVyaWZpZWQnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvY29pbi9kZXBvc2l0L3ZlcmlmaWVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vd2l0aGRyYXcvY2FuY2VsbGVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vd2l0aGRyYXcvY29tcGxldGVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2NvaW4vd2l0aGRyYXcvdW52ZXJpZmllZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9jb2luL3dpdGhkcmF3L3ZlcmlmaWVkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL3N1bW1hcnknLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2NvaW4vZmVlJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9maWF0L2ZlZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2Uva3ljcycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvcmVmZXJyYWwvY29pbi9wYWlkJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9yZWZlcnJhbC9jb2luL3N1Y2Nlc3NmdWwnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL3JlZmVycmFsL2ZpYXQvcGFpZCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvcmVmZXJyYWxzJyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS90cmFkZS9zdW1tYXJ5JyxcbiAgICAgICAgICAgICAgICAndXNlci9sb2dpbi90b2tlbi97dG9rZW59JyxcbiAgICAgICAgICAgICAgICAndXNlci9zdW1tYXJ5JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXQvc3VtbWFyeScsXG4gICAgICAgICAgICAgICAgJ3dhbGxldC9jb2luL3dpdGhkcmF3L2NhbmNlbGxlZCcsXG4gICAgICAgICAgICAgICAgJ3dhbGxldC9jb2luL3dpdGhkcmF3L2NvbXBsZXRlZCcsXG4gICAgICAgICAgICAgICAgJ3dhbGxldC9jb2luL3dpdGhkcmF3L3VudmVyaWZpZWQnLFxuICAgICAgICAgICAgICAgICd3YWxsZXQvY29pbi93aXRoZHJhdy92ZXJpZmllZCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2xvZ2luJyxcbiAgICAgICAgICAgICAgICAnbG9naW4vaW5pdGlhdGUnLFxuICAgICAgICAgICAgICAgICdsb2dpbi9wYXNzd29yZC9mb3Jnb3QnLFxuICAgICAgICAgICAgICAgICdtZmEvYXV0aHkvaW5pdGlhdGUnLFxuICAgICAgICAgICAgICAgICdtZmEvZ2EvaW5pdGlhdGUnLFxuICAgICAgICAgICAgICAgICdzaWdudXAnLFxuICAgICAgICAgICAgICAgICd1c2VyL25ldGtpL3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvcHJvZmlsZS9pbWFnZS91cGRhdGUnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvY29pbi93aXRoZHJhdy9pbml0aWF0ZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9jb2luL3dpdGhkcmF3L25ld1ZlcmlmeWNvZGUnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvZmlhdC93aXRoZHJhdy9pbml0aWF0ZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L3dpdGhkcmF3L25ld1ZlcmlmeWNvZGUnLFxuICAgICAgICAgICAgICAgICd1c2VyL3Bhc3N3b3JkL2NoYW5nZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvcGFzc3dvcmQvcmVzZXQnLFxuICAgICAgICAgICAgICAgICd1c2VyL3dhbGxldC9jb2luL3dpdGhkcmF3L2luaXRpYXRlJyxcbiAgICAgICAgICAgICAgICAnd2FsbGV0L2NvaW4vd2l0aGRyYXcvbmV3VmVyaWZ5Y29kZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3B1dCc6IFtcbiAgICAgICAgICAgICAgICAnc2lnbnVwL3ZlcmlmeS97dG9rZW59JyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9reWMnLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvZmlhdC9kZXBvc2l0L25ldycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYXNrL25ldycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmlkL25ldycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvaW5zdGFudC9idXknLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2luc3RhbnQvc2VsbCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9jb2luL3dpdGhkcmF3L3ZlcmlmeScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L2FjY291bnQvbmV3JyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9iYW5rL2ZpYXQvd2l0aGRyYXcvdmVyaWZ5JyxcbiAgICAgICAgICAgICAgICAndXNlci9tZmEvYXV0aHkvaW5pdGlhdGUvZW5hYmxlJyxcbiAgICAgICAgICAgICAgICAndXNlci9tZmEvZ2EvaW5pdGlhdGUvZW5hYmxlJyxcbiAgICAgICAgICAgICAgICAndXNlci9uZXRraS9jcmVhdGUnLFxuICAgICAgICAgICAgICAgICd1c2VyL3Byb2ZpbGUvcGhvbmUvbmV3JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXQvY29pbi9hZGRyZXNzL25ldycsXG4gICAgICAgICAgICAgICAgJ3VzZXIvd2FsbGV0L2NvaW4vbmV3JyxcbiAgICAgICAgICAgICAgICAndXNlci93YWxsZXQvY29pbi93aXRoZHJhdy9zZW5kVG9FeGNoYW5nZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvd2FsbGV0L2NvaW4vd2l0aGRyYXcvdmVyaWZ5JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICd1c2VyL2djbS97Y29kZX0nLFxuICAgICAgICAgICAgICAgICd1c2VyL2xvZ291dCcsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9jb2luL3dpdGhkcmF3L3VudmVyaWZpZWQvY2FuY2VsL3t3aXRoZHJhd0lEfScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmFuay9maWF0L2RlcG9zaXQvY2FuY2VsL3tkZXBvc2l0SUR9JyxcbiAgICAgICAgICAgICAgICAndXNlci9leGNoYW5nZS9hc2svY2FuY2VsL3tvcmRlcklEfScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvZXhjaGFuZ2UvYmlkL2NhbmNlbC97b3JkZXJJRH0nLFxuICAgICAgICAgICAgICAgICd1c2VyL2V4Y2hhbmdlL2JhbmsvZmlhdC93aXRoZHJhdy91bnZlcmlmaWVkL2NhbmNlbC97d2l0aGRyYXdJRH0nLFxuICAgICAgICAgICAgICAgICd1c2VyL21mYS9hdXRoeS9kaXNhYmxlL3tjb2RlfScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvbWZhL2dhL2Rpc2FibGUve2NvZGV9JyxcbiAgICAgICAgICAgICAgICAndXNlci9wcm9maWxlL3Bob25lL2RlbGV0ZScsXG4gICAgICAgICAgICAgICAgJ3VzZXIvcHJvZmlsZS9pbWFnZS9kZWxldGUve25ldGtpTmFtZX0nLFxuICAgICAgICAgICAgICAgICd1c2VyL3dhbGxldC9jb2luL3dpdGhkcmF3L3VudmVyaWZpZWQvY2FuY2VsL3t3aXRoZHJhd0lEfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvSU5SJzogeyAnaWQnOiAnQlRDL0lOUicsICdzeW1ib2wnOiAnQlRDL0lOUicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdJTlInIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0VXNlckV4Y2hhbmdlQmFua1N1bW1hcnkgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlID0gcmVzcG9uc2VbJ21lc3NhZ2UnXTtcbiAgICAgICAgbGV0IGNvaW4gPSB7XG4gICAgICAgICAgICAnZnJlZSc6IGJhbGFuY2VbJ2F2YWlsYWJsZUNvaW5CYWxhbmNlJ10sXG4gICAgICAgICAgICAndXNlZCc6IGJhbGFuY2VbJ3BlbmRpbmdDb2luQmFsYW5jZSddLFxuICAgICAgICAgICAgJ3RvdGFsJzogYmFsYW5jZVsndG90YWxDb2luQmFsYW5jZSddLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgZmlhdCA9IHtcbiAgICAgICAgICAgICdmcmVlJzogYmFsYW5jZVsnYXZhaWxhYmxlRmlhdEJhbGFuY2UnXSxcbiAgICAgICAgICAgICd1c2VkJzogYmFsYW5jZVsncGVuZGluZ0ZpYXRCYWxhbmNlJ10sXG4gICAgICAgICAgICAndG90YWwnOiBiYWxhbmNlWyd0b3RhbEZpYXRCYWxhbmNlJ10sXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAnaW5mbyc6IGJhbGFuY2UsXG4gICAgICAgICAgICAnQlRDJzogY29pbixcbiAgICAgICAgICAgICdJTlInOiBmaWF0LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgYmlkcyA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VCaWRPcmRlcnMgKHBhcmFtcyk7XG4gICAgICAgIGxldCBhc2tzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRFeGNoYW5nZUFza09yZGVycyAocGFyYW1zKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHtcbiAgICAgICAgICAgICdiaWRzJzogYmlkc1snbWVzc2FnZSddLFxuICAgICAgICAgICAgJ2Fza3MnOiBhc2tzWydtZXNzYWdlJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdyYXRlJywgJ3ZvbCcpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAobWFya2V0KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VUaWNrZXIgKCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVsnbWVzc2FnZSddO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGlja2VyWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29wZW4nXSksXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdFByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnY29pbnZvbHVtZSddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnZmlhdHZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNHZXRFeGNoYW5nZVRyYWRlcyAocGFyYW1zKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKG1hcmtldCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUHV0VXNlckV4Y2hhbmdlJztcbiAgICAgICAgbGV0IG9yZGVyID0ge307XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKSB7XG4gICAgICAgICAgICBtZXRob2QgKz0gJ0luc3RhbnQnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKTtcbiAgICAgICAgICAgIGlmIChzaWRlID09ICdidXknKVxuICAgICAgICAgICAgICAgIG9yZGVyWydtYXhGaWF0J10gPSBhbW91bnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb3JkZXJbJ21heFZvbCddID0gYW1vdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRpcmVjdGlvbiA9IChzaWRlID09ICdidXknKSA/ICdCaWQnIDogJ0Fzayc7XG4gICAgICAgICAgICBtZXRob2QgKz0gZGlyZWN0aW9uICsgJ05ldyc7XG4gICAgICAgICAgICBvcmRlclsncmF0ZSddID0gcHJpY2U7XG4gICAgICAgICAgICBvcmRlclsndm9sJ10gPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdIChzZWxmLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydtZXNzYWdlJ11bJ29yZGVySUQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBjYW5jZWxPcmRlciAoKSBpcyBub3QgZnVsbHkgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gICAgICAgIGxldCBtZXRob2QgPSAncHJpdmF0ZURlbGV0ZVVzZXJFeGNoYW5nZUFza0NhbmNlbE9yZGVySWQnOyAvLyBUT0RPIGZpeG1lLCBoYXZlIHRvIHNwZWNpZnkgb3JkZXIgc2lkZSBoZXJlXG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZF0gKHsgJ29yZGVySUQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ0F1dGhvcml6YXRpb24nOiB0aGlzLmFwaUtleSB9O1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocXVlcnkpO1xuICAgICAgICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY29pbnNwb3QgPSB7XG5cbiAgICAnaWQnOiAnY29pbnNwb3QnLFxuICAgICduYW1lJzogJ0NvaW5TcG90JyxcbiAgICAnY291bnRyaWVzJzogJ0FVJywgLy8gQXVzdHJhbGlhXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjgyMDg0MjktM2NhY2RmOWEtNjg5Ni0xMWU3LTg1NGUtNGM3OWE3NzJhMzBmLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vd3d3LmNvaW5zcG90LmNvbS5hdS9wdWJhcGknLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly93d3cuY29pbnNwb3QuY29tLmF1L2FwaScsXG4gICAgICAgIH0sXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuY29pbnNwb3QuY29tLmF1JyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy5jb2luc3BvdC5jb20uYXUvYXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdsYXRlc3QnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL2hpc3RvcnknLFxuICAgICAgICAgICAgICAgICdteS9jb2luL2RlcG9zaXQnLFxuICAgICAgICAgICAgICAgICdteS9jb2luL3NlbmQnLFxuICAgICAgICAgICAgICAgICdxdW90ZS9idXknLFxuICAgICAgICAgICAgICAgICdxdW90ZS9zZWxsJyxcbiAgICAgICAgICAgICAgICAnbXkvYmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdteS9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdteS9idXknLFxuICAgICAgICAgICAgICAgICdteS9zZWxsJyxcbiAgICAgICAgICAgICAgICAnbXkvYnV5L2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ215L3NlbGwvY2FuY2VsJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9BVUQnOiB7ICdpZCc6ICdCVEMnLCAnc3ltYm9sJzogJ0JUQy9BVUQnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQVVEJyB9LFxuICAgICAgICAnTFRDL0FVRCc6IHsgJ2lkJzogJ0xUQycsICdzeW1ib2wnOiAnTFRDL0FVRCcsICdiYXNlJzogJ0xUQycsICdxdW90ZSc6ICdBVUQnIH0sXG4gICAgICAgICdET0dFL0FVRCc6IHsgJ2lkJzogJ0RPR0UnLCAnc3ltYm9sJzogJ0RPR0UvQVVEJywgJ2Jhc2UnOiAnRE9HRScsICdxdW90ZSc6ICdBVUQnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE15QmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgaWYgKCdiYWxhbmNlJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ2JhbGFuY2UnXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jaWVzID0gT2JqZWN0LmtleXMgKGJhbGFuY2VzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICAgICAgbGV0IHVwcGVyY2FzZSA9IGN1cnJlbmN5LnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAnZnJlZSc6IGJhbGFuY2VzW2N1cnJlbmN5XSxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2VzW2N1cnJlbmN5XSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh1cHBlcmNhc2UgPT0gJ0RSSycpXG4gICAgICAgICAgICAgICAgICAgIHVwcGVyY2FzZSA9ICdEQVNIJztcbiAgICAgICAgICAgICAgICByZXN1bHRbdXBwZXJjYXNlXSA9IGFjY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVycyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjb2ludHlwZSc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYnV5b3JkZXJzJywgJ3NlbGxvcmRlcnMnLCAncmF0ZScsICdhbW91bnQnKTtcbiAgICAgICAgcmVzdWx0WydiaWRzJ10gPSB0aGlzLnNvcnRCeSAocmVzdWx0WydiaWRzJ10sIDAsIHRydWUpO1xuICAgICAgICByZXN1bHRbJ2Fza3MnXSA9IHRoaXMuc29ydEJ5IChyZXN1bHRbJ2Fza3MnXSwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRMYXRlc3QgKCk7XG4gICAgICAgIGxldCBpZCA9IHRoaXMubWFya2V0SWQgKG1hcmtldCk7XG4gICAgICAgIGlkID0gaWQudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVsncHJpY2VzJ11baWRdO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbG93JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE9yZGVyc0hpc3RvcnkgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY29pbnR5cGUnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKG1hcmtldCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdE15JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY29pbnR5cGUnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGNhbmNlbE9yZGVyICgpIGlzIG5vdCBmdWxseSBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdE15QnV5JztcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kXSAoeyAnaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXRoaXMuYXBpS2V5KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGFwaUtleSBmb3IgYWxsIHJlcXVlc3RzJyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV0gKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHRoaXMuZXh0ZW5kICh7ICdub25jZSc6IG5vbmNlIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdrZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnc2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgY3J5cHRvcGlhID0ge1xuXG4gICAgJ2lkJzogJ2NyeXB0b3BpYScsXG4gICAgJ25hbWUnOiAnQ3J5cHRvcGlhJyxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAnY291bnRyaWVzJzogJ05aJywgLy8gTmV3IFplYWxhbmRcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yOTQ4NDM5NC03YjRlYTZlMi04NGM2LTExZTctODNlNS0xZmNjZjRiMmRjODEuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5jcnlwdG9waWEuY28ubnovYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5jcnlwdG9waWEuY28ubnonLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LmNyeXB0b3BpYS5jby5uei9Gb3J1bS9UaHJlYWQvMjU1JyxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5jcnlwdG9waWEuY28ubnovRm9ydW0vVGhyZWFkLzI1NicsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnR2V0Q3VycmVuY2llcycsXG4gICAgICAgICAgICAgICAgJ0dldFRyYWRlUGFpcnMnLFxuICAgICAgICAgICAgICAgICdHZXRNYXJrZXRzJyxcbiAgICAgICAgICAgICAgICAnR2V0TWFya2V0cy97aWR9JyxcbiAgICAgICAgICAgICAgICAnR2V0TWFya2V0cy97aG91cnN9JyxcbiAgICAgICAgICAgICAgICAnR2V0TWFya2V0cy97aWR9L3tob3Vyc30nLFxuICAgICAgICAgICAgICAgICdHZXRNYXJrZXQve2lkfScsXG4gICAgICAgICAgICAgICAgJ0dldE1hcmtldC97aWR9L3tob3Vyc30nLFxuICAgICAgICAgICAgICAgICdHZXRNYXJrZXRIaXN0b3J5L3tpZH0nLFxuICAgICAgICAgICAgICAgICdHZXRNYXJrZXRIaXN0b3J5L3tpZH0ve2hvdXJzfScsXG4gICAgICAgICAgICAgICAgJ0dldE1hcmtldE9yZGVycy97aWR9JyxcbiAgICAgICAgICAgICAgICAnR2V0TWFya2V0T3JkZXJzL3tpZH0ve2NvdW50fScsXG4gICAgICAgICAgICAgICAgJ0dldE1hcmtldE9yZGVyR3JvdXBzL3tpZHN9L3tjb3VudH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQ2FuY2VsVHJhZGUnLFxuICAgICAgICAgICAgICAgICdHZXRCYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnR2V0RGVwb3NpdEFkZHJlc3MnLFxuICAgICAgICAgICAgICAgICdHZXRPcGVuT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnR2V0VHJhZGVIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnR2V0VHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAnU3VibWl0VGlwJyxcbiAgICAgICAgICAgICAgICAnU3VibWl0VHJhZGUnLFxuICAgICAgICAgICAgICAgICdTdWJtaXRUcmFuc2ZlcicsXG4gICAgICAgICAgICAgICAgJ1N1Ym1pdFdpdGhkcmF3JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgbWFya2V0cyA9IHJlc3BvbnNlWydEYXRhJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbaV07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ1RyYWRlUGFpcklkJ107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydMYWJlbCddO1xuICAgICAgICAgICAgbGV0IFsgYmFzZSwgcXVvdGUgXSA9IHN5bWJvbC5zcGxpdCAoJy8nKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldE9yZGVyc0lkICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVsnRGF0YSddO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB1bmRlZmluZWQsICdCdXknLCAnU2VsbCcsICdQcmljZScsICdUb3RhbCcpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ0hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydMb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydCaWRQcmljZSddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ0Fza1ByaWNlJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHBhcnNlRmxvYXQgKHRpY2tlclsnT3BlbiddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnQ2xvc2UnXSksXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnTGFzdFByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnQ2hhbmdlJ10pLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydCYXNlVm9sdW1lJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydWb2x1bWUnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldElkICh7XG4gICAgICAgICAgICAnaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ0RhdGEnXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGxldCB0aWNrZXJzID0gcmVzcG9uc2VbJ0RhdGEnXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpXTtcbiAgICAgICAgICAgIGxldCBpZCA9IHRpY2tlclsnVHJhZGVQYWlySWQnXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsnVGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsnVHlwZSddLnRvTG93ZXJDYXNlICgpLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ1ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ0Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0SGlzdG9yeUlkSG91cnMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnaG91cnMnOiAyNCwgLy8gZGVmYXVsdFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHRyYWRlcyA9IHJlc3BvbnNlWydEYXRhJ107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzICh0cmFkZXMsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdldEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydEYXRhJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWxhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tpXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGJhbGFuY2VbJ1N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlWydBdmFpbGFibGUnXSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiBiYWxhbmNlWydUb3RhbCddLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAobWFya2V0LCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnTWFya2V0JzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgICAgICdUeXBlJzogdGhpcy5jYXBpdGFsaXplIChzaWRlKSxcbiAgICAgICAgICAgICdSYXRlJzogcHJpY2UsXG4gICAgICAgICAgICAnQW1vdW50JzogYW1vdW50LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0U3VibWl0VHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ0RhdGEnXVsnT3JkZXJJZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxUcmFkZSAoe1xuICAgICAgICAgICAgJ1R5cGUnOiAnVHJhZGUnLFxuICAgICAgICAgICAgJ09yZGVySWQnOiBpZCxcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHF1ZXJ5KTtcbiAgICAgICAgICAgIGxldCBoYXNoID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAoYm9keSksICdtZDUnLCAnYmFzZTY0Jyk7XG4gICAgICAgICAgICBsZXQgc2VjcmV0ID0gdGhpcy5iYXNlNjRUb0JpbmFyeSAodGhpcy5zZWNyZXQpO1xuICAgICAgICAgICAgbGV0IHVyaSA9IHRoaXMuZW5jb2RlVVJJQ29tcG9uZW50ICh1cmwpO1xuICAgICAgICAgICAgbGV0IGxvd2VyY2FzZSA9IHVyaS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBwYXlsb2FkID0gdGhpcy5hcGlLZXkgKyBtZXRob2QgKyBsb3dlcmNhc2UgKyBub25jZSArIHRoaXMuYmluYXJ5VG9TdHJpbmcgKGhhc2gpO1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKHBheWxvYWQpLCBzZWNyZXQsICdzaGEyNTYnLCAnYmFzZTY0Jyk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9ICdhbXggJyArIHRoaXMuYXBpS2V5ICsgJzonICsgdGhpcy5iaW5hcnlUb1N0cmluZyAoc2lnbmF0dXJlKSArICc6JyArIG5vbmNlO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAocmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAoJ1N1Y2Nlc3MnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZVsnU3VjY2VzcyddKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGRzeCA9IHtcblxuICAgICdpZCc6ICdkc3gnLFxuICAgICduYW1lJzogJ0RTWCcsXG4gICAgJ2NvdW50cmllcyc6ICdVSycsXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTAyNzUtMTQxMzE1OGEtNjQ1YS0xMWU3LTkzMWMtOTQ3MTdmNzUxMGUzLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAnbWFwaSc6ICdodHRwczovL2RzeC51ay9tYXBpJywgIC8vIG1hcmtldCBkYXRhXG4gICAgICAgICAgICAndGFwaSc6ICdodHRwczovL2RzeC51ay90YXBpJywgIC8vIHRyYWRpbmdcbiAgICAgICAgICAgICdkd2FwaSc6ICdodHRwczovL2RzeC51ay9kd2FwaScsIC8vIGRlcG9zaXQvd2l0aGRyYXdcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2RzeC51aycsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9hcGkuZHN4LnVrJyxcbiAgICAgICAgICAgICdodHRwczovL2RzeC51ay9hcGlfZG9jcy9wdWJsaWMnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vZHN4LnVrL2FwaV9kb2NzL3ByaXZhdGUnLFxuICAgICAgICAgICAgJycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAnbWFwaSc6IHsgLy8gbWFya2V0IGRhdGEgKHB1YmxpYylcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2JhcnNGcm9tTW9tZW50L3tpZH0ve3BlcmlvZH0ve3N0YXJ0fScsIC8vIGVtcHR5IHJlcGx5IDpcXFxuICAgICAgICAgICAgICAgICdkZXB0aC97aWR9JyxcbiAgICAgICAgICAgICAgICAnaW5mbycsXG4gICAgICAgICAgICAgICAgJ2xhc3RCYXJzL3tpZH0ve3BlcmlvZH0ve2Ftb3VudH0nLCAvLyBwZXJpb2QgaXMgKG0sIGggb3IgZClcbiAgICAgICAgICAgICAgICAncGVyaW9kQmFycy97aWR9L3twZXJpb2R9L3tzdGFydH0ve2VuZH0nLFxuICAgICAgICAgICAgICAgICd0aWNrZXIve2lkfScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcy97aWR9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICd0YXBpJzogeyAvLyB0cmFkaW5nIChwcml2YXRlKVxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2dldEluZm8nLFxuICAgICAgICAgICAgICAgICdUcmFuc0hpc3RvcnknLFxuICAgICAgICAgICAgICAgICdUcmFkZUhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdPcmRlckhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdBY3RpdmVPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdUcmFkZScsXG4gICAgICAgICAgICAgICAgJ0NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdkd2FwaSc6IHsgLy8gZGVwb3NpdCAvIHdpdGhkcmF3IChwcml2YXRlKVxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2dldENyeXB0b0RlcG9zaXRBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnY3J5cHRvV2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICdmaWF0V2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICdnZXRUcmFuc2FjdGlvblN0YXR1cycsXG4gICAgICAgICAgICAgICAgJ2dldFRyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1hcGlHZXRJbmZvICgpO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChyZXNwb25zZVsncGFpcnMnXSk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBrZXlzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBrZXlzW3BdO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IHJlc3BvbnNlWydwYWlycyddW2lkXTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gaWQuc2xpY2UgKDAsIDMpO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gaWQuc2xpY2UgKDMsIDYpO1xuICAgICAgICAgICAgYmFzZSA9IGJhc2UudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBxdW90ZSA9IHF1b3RlLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMudGFwaVBvc3RHZXRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncmV0dXJuJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgbGV0IGN1cnJlbmNpZXMgPSBPYmplY3Qua2V5cyAoYmFsYW5jZXNbJ3RvdGFsJ10pO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAnZnJlZSc6IGJhbGFuY2VzWydmdW5kcyddW2N1cnJlbmN5XSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiBiYWxhbmNlc1sndG90YWwnXVtjdXJyZW5jeV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYXBpR2V0RGVwdGhJZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVttYXJrZXRbJ2lkJ11dO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFwaUdldFRpY2tlcklkICh7XG4gICAgICAgICAgICAnaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbbWFya2V0WydpZCddXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndXBkYXRlZCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2J1eSddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3NlbGwnXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXZnJ10pLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sX2N1ciddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXBpR2V0VHJhZGVzSWQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ21hcmtldCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgYWxsb3dzIGxpbWl0IG9yZGVycyBvbmx5Jyk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdwYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICd0eXBlJzogc2lkZSxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnRhcGlQb3N0VHJhZGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3JldHVybiddWydvcmRlcklkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy50YXBpUG9zdENhbmNlbE9yZGVyICh7ICdvcmRlcklkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdtYXBpJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV07XG4gICAgICAgIGlmICgoYXBpID09ICdtYXBpJykgfHwgKGFwaSA9PSAnZHdhcGknKSlcbiAgICAgICAgICAgIHVybCArPSAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAnbWFwaScpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBsZXQgbWV0aG9kID0gcGF0aDtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbWV0aG9kJzogcGF0aCxcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgIH0sIHF1ZXJ5KSk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAnS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1NpZ24nOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChib2R5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTUxMicsICdiYXNlNjQnKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoYXBpID09ICdtYXBpJylcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZXhtbyA9IHtcblxuICAgICdpZCc6ICdleG1vJyxcbiAgICAnbmFtZSc6ICdFWE1PJyxcbiAgICAnY291bnRyaWVzJzogWyAnRVMnLCAnUlUnIF0sIC8vIFNwYWluLCBSdXNzaWFcbiAgICAncmF0ZUxpbWl0JzogMTAwMCwgLy8gb25jZSBldmVyeSAzNTAgbXMg4omIIDE4MCByZXF1ZXN0cyBwZXIgbWludXRlIOKJiCAzIHJlcXVlc3RzIHBlciBzZWNvbmRcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY0OTEtMWIwZWE5NTYtNWVkYS0xMWU3LTkyMjUtNDBkNjdiNDgxYjhkLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkuZXhtby5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vZXhtby5tZScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9leG1vLm1lL3J1L2FwaV9kb2MnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9leG1vLWRldi9leG1vX2FwaV9saWIvdHJlZS9tYXN0ZXIvbm9kZWpzJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdjdXJyZW5jeScsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2Jvb2snLFxuICAgICAgICAgICAgICAgICdwYWlyX3NldHRpbmdzJyxcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3VzZXJfaW5mbycsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ3VzZXJfb3Blbl9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICd1c2VyX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3VzZXJfY2FuY2VsbGVkX29yZGVycycsXG4gICAgICAgICAgICAgICAgJ29yZGVyX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3JlcXVpcmVkX2Ftb3VudCcsXG4gICAgICAgICAgICAgICAgJ2RlcG9zaXRfYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3X2NyeXB0JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdfZ2V0X3R4aWQnLFxuICAgICAgICAgICAgICAgICdleGNvZGVfY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAnZXhjb2RlX2xvYWQnLFxuICAgICAgICAgICAgICAgICd3YWxsZXRfaGlzdG9yeScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0UGFpclNldHRpbmdzICgpO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChtYXJrZXRzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGtleXMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGtleXNbcF07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1tpZF07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gaWQucmVwbGFjZSAoJ18nLCAnLycpO1xuICAgICAgICAgICAgbGV0IFsgYmFzZSwgcXVvdGUgXSA9IHN5bWJvbC5zcGxpdCAoJy8nKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RVc2VySW5mbyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB0aGlzLmFjY291bnQgKCk7XG4gICAgICAgICAgICBpZiAoY3VycmVuY3kgaW4gcmVzcG9uc2VbJ2JhbGFuY2VzJ10pXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAocmVzcG9uc2VbJ2JhbGFuY2VzJ11bY3VycmVuY3ldKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiByZXNwb25zZVsncmVzZXJ2ZWQnXSlcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBwYXJzZUZsb2F0IChyZXNwb25zZVsncmVzZXJ2ZWQnXVtjdXJyZW5jeV0pO1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0T3JkZXJCb29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gcmVzcG9uc2VbbWFya2V0WydpZCddXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYmlkJywgJ2FzaycpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndXBkYXRlZCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2J1eV9wcmljZSddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3NlbGxfcHJpY2UnXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3RfdHJhZGUnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXZnJ10pLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sX2N1cnInXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzIChjdXJyZW5jeSA9ICdVU0QnKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAocmVzcG9uc2UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGlkID0gaWRzW2ldO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSByZXNwb25zZVtpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyIChyZXNwb25zZVttYXJrZXRbJ2lkJ11dLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsnZGF0ZSddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0cmFkZV9pZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsndHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVttYXJrZXRbJ2lkJ11dLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcHJlZml4ID0gJyc7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgcHJlZml4ID0gJ21hcmtldF8nO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAncGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAncXVhbnRpdHknOiBhbW91bnQsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSB8fCAwLFxuICAgICAgICAgICAgJ3R5cGUnOiBwcmVmaXggKyBzaWRlLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0T3JkZXJDcmVhdGUgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ29yZGVyX2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE9yZGVyQ2FuY2VsICh7ICdvcmRlcl9pZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcGF0aDtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMudXJsZW5jb2RlICh0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdyZXN1bHQnIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ3Jlc3VsdCddKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBmbG93YnRjID0ge1xuXG4gICAgJ2lkJzogJ2Zsb3didGMnLFxuICAgICduYW1lJzogJ2Zsb3dCVEMnLFxuICAgICdjb3VudHJpZXMnOiAnQlInLCAvLyBCcmF6aWxcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjgxNjI0NjUtY2Q4MTVkNGMtNjdjZi0xMWU3LThlNTctNDM4YmVhMDUyM2EyLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkuZmxvd2J0Yy5jb206ODQwMC9hamF4JyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3RyYWRlci5mbG93YnRjLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cDovL3d3dy5mbG93YnRjLmNvbS5ici9hcGkvJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnR2V0VGlja2VyJyxcbiAgICAgICAgICAgICAgICAnR2V0VHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnR2V0VHJhZGVzQnlEYXRlJyxcbiAgICAgICAgICAgICAgICAnR2V0T3JkZXJCb29rJyxcbiAgICAgICAgICAgICAgICAnR2V0UHJvZHVjdFBhaXJzJyxcbiAgICAgICAgICAgICAgICAnR2V0UHJvZHVjdHMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQ3JlYXRlQWNjb3VudCcsXG4gICAgICAgICAgICAgICAgJ0dldFVzZXJJbmZvJyxcbiAgICAgICAgICAgICAgICAnU2V0VXNlckluZm8nLFxuICAgICAgICAgICAgICAgICdHZXRBY2NvdW50SW5mbycsXG4gICAgICAgICAgICAgICAgJ0dldEFjY291bnRUcmFkZXMnLFxuICAgICAgICAgICAgICAgICdHZXREZXBvc2l0QWRkcmVzc2VzJyxcbiAgICAgICAgICAgICAgICAnV2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICdDcmVhdGVPcmRlcicsXG4gICAgICAgICAgICAgICAgJ01vZGlmeU9yZGVyJyxcbiAgICAgICAgICAgICAgICAnQ2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdDYW5jZWxBbGxPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdHZXRBY2NvdW50T3Blbk9yZGVycycsXG4gICAgICAgICAgICAgICAgJ0dldE9yZGVyRmVlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljUG9zdEdldFByb2R1Y3RQYWlycyAoKTtcbiAgICAgICAgbGV0IG1hcmtldHMgPSByZXNwb25zZVsncHJvZHVjdFBhaXJzJ107XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1twXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnbmFtZSddO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBtYXJrZXRbJ3Byb2R1Y3QxTGFiZWwnXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsncHJvZHVjdDJMYWJlbCddO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RHZXRBY2NvdW50SW5mbyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ2N1cnJlbmNpZXMnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYmFsYW5jZVsnbmFtZSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlWydiYWxhbmNlJ10sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBiYWxhbmNlWydob2xkJ10sXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogMC4wLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNQb3N0R2V0T3JkZXJCb29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3Byb2R1Y3RQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYmlkcycsICdhc2tzJywgJ3B4JywgJ3F0eScpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljUG9zdEdldFRpY2tlciAoe1xuICAgICAgICAgICAgJ3Byb2R1Y3RQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lMjRociddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lMjRoclByb2R1Y3QyJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWyd1bml4dGltZSddICogMTAwMDtcbiAgICAgICAgbGV0IHNpZGUgPSAodHJhZGVbJ2luY29taW5nT3JkZXJTaWRlJ10gPT0gMCkgPyAnYnV5JyA6ICdzZWxsJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydweCddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydxdHknXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY1Bvc3RHZXRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaW5zJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3N0YXJ0SW5kZXgnOiAtMSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsndHJhZGVzJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlclR5cGUgPSAodHlwZSA9PSAnbWFya2V0JykgPyAxIDogMDtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ2lucyc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAnb3JkZXJUeXBlJzogb3JkZXJUeXBlLFxuICAgICAgICAgICAgJ3F0eSc6IGFtb3VudCxcbiAgICAgICAgICAgICdweCc6IHByaWNlLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0Q3JlYXRlT3JkZXIgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3NlcnZlck9yZGVySWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBpZiAoJ2lucycgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdzZXJ2ZXJPcmRlcklkJzogaWQsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgcmVxdWlyZXMgYGluc2Agc3ltYm9sIHBhcmFtZXRlciBmb3IgY2FuY2VsbGluZyBhbiBvcmRlcicpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcGF0aDtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChwYXJhbXMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudWlkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkVycm9yICh0aGlzLmlkICsgJyByZXF1aXJlcyBgJyArIHRoaXMuaWQgKyAnLnVpZGAgcHJvcGVydHkgZm9yIGF1dGhlbnRpY2F0aW9uJyk7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSBub25jZS50b1N0cmluZyAoKSArIHRoaXMudWlkICsgdGhpcy5hcGlLZXk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnYXBpS2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ2FwaU5vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ2FwaVNpZyc6IHNpZ25hdHVyZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnaXNBY2NlcHRlZCcgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ2lzQWNjZXB0ZWQnXSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGZveGJpdCA9IGV4dGVuZCAoYmxpbmt0cmFkZSwge1xuICAgICdpZCc6ICdmb3hiaXQnLFxuICAgICduYW1lJzogJ0ZveEJpdCcsXG4gICAgJ2NvdW50cmllcyc6ICdCUicsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTE0MTMtMTFiNDBkNDItNjQ3Zi0xMWU3LTkxZWUtNzhjZWQ4NzRkZDA5LmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vYXBpLmJsaW5rdHJhZGUuY29tL2FwaScsXG4gICAgICAgICAgICAncHJpdmF0ZSc6ICdodHRwczovL2FwaS5ibGlua3RyYWRlLmNvbS90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2ZveGJpdC5leGNoYW5nZScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9ibGlua3RyYWRlLmNvbS9kb2NzJyxcbiAgICB9LFxuICAgICdjb21tZW50JzogJ0JsaW5rdHJhZGUgQVBJJyxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9CUkwnOiB7ICdpZCc6ICdCVENCUkwnLCAnc3ltYm9sJzogJ0JUQy9CUkwnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQlJMJywgJ2Jyb2tlcklkJzogNCwgJ2Jyb2tlcic6ICdGb3hCaXQnIH0sXG4gICAgfSxcbn0pXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGZ5YiA9IHtcblxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd0aWNrZXInLFxuICAgICAgICAgICAgICAgICd0aWNrZXJkZXRhaWxlZCcsXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICd0ZXN0JyxcbiAgICAgICAgICAgICAgICAnZ2V0YWNjaW5mbycsXG4gICAgICAgICAgICAgICAgJ2dldHBlbmRpbmdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICdnZXRvcmRlcmhpc3RvcnknLFxuICAgICAgICAgICAgICAgICdjYW5jZWxwZW5kaW5nb3JkZXInLFxuICAgICAgICAgICAgICAgICdwbGFjZW9yZGVyJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgYmFsYW5jZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RHZXRhY2NpbmZvICgpO1xuICAgICAgICBsZXQgYnRjID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnYnRjQmFsJ10pO1xuICAgICAgICBsZXQgc3ltYm9sID0gdGhpcy5zeW1ib2xzWzBdO1xuICAgICAgICBsZXQgcXVvdGUgPSB0aGlzLm1hcmtldHNbc3ltYm9sXVsncXVvdGUnXTtcbiAgICAgICAgbGV0IGxvd2VyY2FzZSA9IHF1b3RlLnRvTG93ZXJDYXNlICgpICsgJ0JhbCc7XG4gICAgICAgIGxldCBmaWF0ID0gcGFyc2VGbG9hdCAoYmFsYW5jZVtsb3dlcmNhc2VdKTtcbiAgICAgICAgbGV0IGNyeXB0byA9IHtcbiAgICAgICAgICAgICdmcmVlJzogYnRjLFxuICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAndG90YWwnOiBidGMsXG4gICAgICAgIH07XG4gICAgICAgIGxldCBhY2NvdW50cyA9IHsgJ0JUQyc6IGNyeXB0byB9O1xuICAgICAgICBhY2NvdW50c1txdW90ZV0gPSB7XG4gICAgICAgICAgICAnZnJlZSc6IGZpYXQsXG4gICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICd0b3RhbCc6IGZpYXQsXG4gICAgICAgIH07XG4gICAgICAgIGFjY291bnRzWydpbmZvJ10gPSBiYWxhbmNlO1xuICAgICAgICByZXR1cm4gYWNjb3VudHM7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyYm9vayAocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyZGV0YWlsZWQgKCk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCB2b2x1bWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnbGFzdCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgbGFzdCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKTtcbiAgICAgICAgaWYgKCd2b2wnIGluIHRpY2tlcilcbiAgICAgICAgICAgIHZvbHVtZSA9IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IGxhc3QsXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogdm9sdW1lLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsnYW1vdW50J10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzIChwYXJhbXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RQbGFjZW9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3F0eSc6IGFtb3VudCxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlWzBdLnRvVXBwZXJDYXNlICgpXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydwZW5kaW5nX29pZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxwZW5kaW5nb3JkZXIgKHsgJ29yZGVyTm8nOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSAnLmpzb24nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHsgJ3RpbWVzdGFtcCc6IG5vbmNlIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdzaWcnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChib2R5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTEnKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3ByaXZhdGUnKVxuICAgICAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydlcnJvciddKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGZ5YnNlID0gZXh0ZW5kIChmeWIsIHtcbiAgICAnaWQnOiAnZnlic2UnLFxuICAgICduYW1lJzogJ0ZZQi1TRScsXG4gICAgJ2NvdW50cmllcyc6ICdTRScsIC8vIFN3ZWRlblxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NTEyLTMxMDE5NzcyLTVlZGItMTFlNy04MjQxLTJlNjc1ZTY3OTdmMS5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vd3d3LmZ5YnNlLnNlL2FwaS9TRUsnLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LmZ5YnNlLnNlJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwOi8vZG9jcy5meWIuYXBpYXJ5LmlvJyxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1NFSyc6IHsgJ2lkJzogJ1NFSycsICdzeW1ib2wnOiAnQlRDL1NFSycsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdTRUsnIH0sXG4gICAgfSxcbn0pXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGZ5YnNnID0gZXh0ZW5kIChmeWIsIHtcbiAgICAnaWQnOiAnZnlic2cnLFxuICAgICduYW1lJzogJ0ZZQi1TRycsXG4gICAgJ2NvdW50cmllcyc6ICdTRycsIC8vIFNpbmdhcG9yZVxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NTEzLTMzNjRkNTZhLTVlZGItMTFlNy05ZTZiLWQ1ODk4YmI4OWM4MS5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vd3d3LmZ5YnNnLmNvbS9hcGkvU0dEJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5meWJzZy5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHA6Ly9kb2NzLmZ5Yi5hcGlhcnkuaW8nLFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvU0dEJzogeyAnaWQnOiAnU0dEJywgJ3N5bWJvbCc6ICdCVEMvU0dEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1NHRCcgfSxcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZ2F0ZWNvaW4gPSB7XG5cbiAgICAnaWQnOiAnZ2F0ZWNvaW4nLFxuICAgICduYW1lJzogJ0dhdGVjb2luJyxcbiAgICAncmF0ZUxpbWl0JzogMjAwMCxcbiAgICAnY291bnRyaWVzJzogJ0hLJywgLy8gSG9uZyBLb25nXG4gICAgJ2NvbW1lbnQnOiAnYSByZWd1bGF0ZWQvbGljZW5zZWQgZXhjaGFuZ2UnLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFtJzogJzFtJyxcbiAgICAgICAgJzE1bSc6ICcxNW0nLFxuICAgICAgICAnMWgnOiAnMWgnLFxuICAgICAgICAnNmgnOiAnNmgnLFxuICAgICAgICAnMWQnOiAnMjRoJyxcbiAgICB9LFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI4NjQ2ODE3LTUwODQ1N2YyLTcyNmMtMTFlNy05ZWViLTM1MjhkMjQxM2E1OC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmdhdGVjb2luLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9nYXRlY29pbi5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2F0ZWNvaW4uY29tL2FwaScsXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL0dhdGVjb2luL1JFU1RmdWwtQVBJLUltcGxlbWVudGF0aW9uJyxcbiAgICAgICAgICAgICdodHRwczovL2FwaS5nYXRlY29pbi5jb20vc3dhZ2dlci11aS9pbmRleC5odG1sJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdQdWJsaWMvRXhjaGFuZ2VSYXRlJywgLy8gR2V0IHRoZSBleGNoYW5nZSByYXRlc1xuICAgICAgICAgICAgICAgICdQdWJsaWMvTGl2ZVRpY2tlcicsIC8vIEdldCBsaXZlIHRpY2tlciBmb3IgYWxsIGN1cnJlbmN5XG4gICAgICAgICAgICAgICAgJ1B1YmxpYy9MaXZlVGlja2VyL3tDdXJyZW5jeVBhaXJ9JywgLy8gR2V0IGxpdmUgdGlja2VyIGJ5IGN1cnJlbmN5XG4gICAgICAgICAgICAgICAgJ1B1YmxpYy9MaXZlVGlja2VycycsIC8vIEdldCBsaXZlIHRpY2tlciBmb3IgYWxsIGN1cnJlbmN5XG4gICAgICAgICAgICAgICAgJ1B1YmxpYy9NYXJrZXREZXB0aC97Q3VycmVuY3lQYWlyfScsIC8vIEdldHMgcHJpY2VzIGFuZCBtYXJrZXQgZGVwdGggZm9yIHRoZSBjdXJyZW5jeSBwYWlyLlxuICAgICAgICAgICAgICAgICdQdWJsaWMvTmV0d29ya1N0YXRpc3RpY3Mve0RpZ2lDdXJyZW5jeX0nLCAvLyBHZXQgdGhlIG5ldHdvcmsgc3RhdHVzIG9mIGEgc3BlY2lmaWMgZGlnaXRhbCBjdXJyZW5jeVxuICAgICAgICAgICAgICAgICdQdWJsaWMvU3RhdGlzdGljSGlzdG9yeS97RGlnaUN1cnJlbmN5fS97VHlwZW9mZGF0YX0nLCAvLyBHZXQgdGhlIGhpc3RvcmljYWwgZGF0YSBvZiBhIHNwZWNpZmljIGRpZ2l0YWwgY3VycmVuY3lcbiAgICAgICAgICAgICAgICAnUHVibGljL1RpY2tlckhpc3Rvcnkve0N1cnJlbmN5UGFpcn0ve1RpbWVmcmFtZX0nLCAvLyBHZXQgdGlja2VyIGhpc3RvcnlcbiAgICAgICAgICAgICAgICAnUHVibGljL1RyYW5zYWN0aW9ucy97Q3VycmVuY3lQYWlyfScsIC8vIEdldHMgcmVjZW50IHRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgICAgICdQdWJsaWMvVHJhbnNhY3Rpb25zSGlzdG9yeS97Q3VycmVuY3lQYWlyfScsIC8vIEdldHMgYWxsIHRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgICAgICdSZWZlcmVuY2UvQnVzaW5lc3NOYXR1cmVMaXN0JywgLy8gR2V0IHRoZSBidXNpbmVzcyBuYXR1cmUgbGlzdC5cbiAgICAgICAgICAgICAgICAnUmVmZXJlbmNlL0NvdW50cmllcycsIC8vIEdldCB0aGUgY291bnRyeSBsaXN0LlxuICAgICAgICAgICAgICAgICdSZWZlcmVuY2UvQ3VycmVuY2llcycsIC8vIEdldCB0aGUgY3VycmVuY3kgbGlzdC5cbiAgICAgICAgICAgICAgICAnUmVmZXJlbmNlL0N1cnJlbmN5UGFpcnMnLCAvLyBHZXQgdGhlIGN1cnJlbmN5IHBhaXIgbGlzdC5cbiAgICAgICAgICAgICAgICAnUmVmZXJlbmNlL0N1cnJlbnRTdGF0dXNMaXN0JywgLy8gR2V0IHRoZSBjdXJyZW50IHN0YXR1cyBsaXN0LlxuICAgICAgICAgICAgICAgICdSZWZlcmVuY2UvSWRlbnR5ZG9jdW1lbnRUeXBlcycsIC8vIEdldCB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGlkZW50aXR5IGRvY3VtZW50cyBwb3NzaWJsZS5cbiAgICAgICAgICAgICAgICAnUmVmZXJlbmNlL0luY29tZVJhbmdlTGlzdCcsIC8vIEdldCB0aGUgaW5jb21lIHJhbmdlIGxpc3QuXG4gICAgICAgICAgICAgICAgJ1JlZmVyZW5jZS9JbmNvbWVTb3VyY2VMaXN0JywgLy8gR2V0IHRoZSBpbmNvbWUgc291cmNlIGxpc3QuXG4gICAgICAgICAgICAgICAgJ1JlZmVyZW5jZS9WZXJpZmljYXRpb25MZXZlbExpc3QnLCAvLyBHZXQgdGhlIHZlcmlmIGxldmVsIGxpc3QuXG4gICAgICAgICAgICAgICAgJ1N0cmVhbS9QdWJsaWNDaGFubmVsJywgLy8gR2V0IHRoZSBwdWJsaWMgcHVibnViIGNoYW5uZWwgbGlzdFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdFeHBvcnQvVHJhbnNhY3Rpb25zJywgLy8gUmVxdWVzdCBhIGV4cG9ydCBvZiBhbGwgdHJhZGVzIGZyb20gYmFzZWQgb24gY3VycmVuY3lwYWlyLCBzdGFydCBkYXRlIGFuZCBlbmQgZGF0ZVxuICAgICAgICAgICAgICAgICdQaW5nJywgLy8gUG9zdCBhIHN0cmluZywgdGhlbiBnZXQgaXQgYmFjay5cbiAgICAgICAgICAgICAgICAnUHVibGljL1Vuc3Vic2NyaWJlL3tFbWFpbENvZGV9JywgLy8gTGV0cyB0aGUgdXNlciB1bnN1YnNjcmliZSBmcm9tIGVtYWlsc1xuICAgICAgICAgICAgICAgICdSZWdpc3RlclVzZXInLCAvLyBJbml0aWFsIHRyYWRlciByZWdpc3RyYXRpb24uXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvQ29ycG9yYXRlRGF0YScsIC8vIEdldCBjb3Jwb3JhdGUgYWNjb3VudCBkYXRhXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvRG9jdW1lbnRBZGRyZXNzJywgLy8gQ2hlY2sgaWYgcmVzaWRlbmNlIHByb29mIHVwbG9hZGVkXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvRG9jdW1lbnRDb3Jwb3JhdGlvbicsIC8vIENoZWNrIGlmIHJlZ2lzdGVyZWQgZG9jdW1lbnQgdXBsb2FkZWRcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9Eb2N1bWVudElEJywgLy8gQ2hlY2sgaWYgSUQgZG9jdW1lbnQgY29weSB1cGxvYWRlZFxuICAgICAgICAgICAgICAgICdBY2NvdW50L0RvY3VtZW50SW5mb3JtYXRpb24nLCAvLyBHZXQgU3RlcDMgRGF0YVxuICAgICAgICAgICAgICAgICdBY2NvdW50L0VtYWlsJywgLy8gR2V0IHVzZXIgZW1haWxcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9GZWVSYXRlJywgLy8gR2V0IGZlZSByYXRlIG9mIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvTGV2ZWwnLCAvLyBHZXQgdmVyaWYgbGV2ZWwgb2YgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9QZXJzb25hbEluZm9ybWF0aW9uJywgLy8gR2V0IFN0ZXAxIERhdGFcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9QaG9uZScsIC8vIEdldCB1c2VyIHBob25lIG51bWJlclxuICAgICAgICAgICAgICAgICdBY2NvdW50L1Byb2ZpbGUnLCAvLyBHZXQgdHJhZGVyIHByb2ZpbGVcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9RdWVzdGlvbm5haXJlJywgLy8gRmlsbCB0aGUgcXVlc3Rpb25uYWlyZVxuICAgICAgICAgICAgICAgICdBY2NvdW50L1JlZmVycmFsJywgLy8gR2V0IHJlZmVycmFsIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUmVmZXJyYWxDb2RlJywgLy8gR2V0IHRoZSByZWZlcnJhbCBjb2RlIG9mIHRoZSBsb2dnZWQgaW4gdXNlclxuICAgICAgICAgICAgICAgICdBY2NvdW50L1JlZmVycmFsTmFtZXMnLCAvLyBHZXQgbmFtZXMgb2YgcmVmZXJyZWQgdHJhZGVyc1xuICAgICAgICAgICAgICAgICdBY2NvdW50L1JlZmVycmFsUmV3YXJkJywgLy8gR2V0IHJlZmVycmFsIHJld2FyZCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICdBY2NvdW50L1JlZmVycmVkQ29kZScsIC8vIEdldCByZWZlcnJhbCBjb2RlXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUmVzaWRlbnRJbmZvcm1hdGlvbicsIC8vIEdldCBTdGVwMiBEYXRhXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvU2VjdXJpdHlTZXR0aW5ncycsIC8vIEdldCB2ZXJpZiBkZXRhaWxzIG9mIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvVXNlcicsIC8vIEdldCBhbGwgdXNlciBpbmZvXG4gICAgICAgICAgICAgICAgJ0FQSUtleS9BUElLZXknLCAvLyBHZXQgQVBJIEtleSBmb3IgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQXV0aC9Db25uZWN0aW9uSGlzdG9yeScsIC8vIEdldHMgY29ubmVjdGlvbiBoaXN0b3J5IG9mIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0JhbGFuY2UvQmFsYW5jZXMnLCAvLyBHZXRzIHRoZSBhdmFpbGFibGUgYmFsYW5jZSBmb3IgZWFjaCBjdXJyZW5jeSBmb3IgdGhlIGxvZ2dlZCBpbiBhY2NvdW50LlxuICAgICAgICAgICAgICAgICdCYWxhbmNlL0JhbGFuY2VzL3tDdXJyZW5jeX0nLCAvLyBHZXRzIHRoZSBhdmFpbGFibGUgYmFsYW5jZSBmb3IgcyBjdXJyZW5jeSBmb3IgdGhlIGxvZ2dlZCBpbiBhY2NvdW50LlxuICAgICAgICAgICAgICAgICdCYWxhbmNlL0RlcG9zaXRzJywgLy8gR2V0IGFsbCBhY2NvdW50IGRlcG9zaXRzLCBpbmNsdWRpbmcgd2lyZSBhbmQgZGlnaXRhbCBjdXJyZW5jeSwgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0JhbGFuY2UvV2l0aGRyYXdhbHMnLCAvLyBHZXQgYWxsIGFjY291bnQgd2l0aGRyYXdhbHMsIGluY2x1ZGluZyB3aXJlIGFuZCBkaWdpdGFsIGN1cnJlbmN5LCBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQmFuay9BY2NvdW50cy97Q3VycmVuY3l9L3tMb2NhdGlvbn0nLCAvLyBHZXQgaW50ZXJuYWwgYmFuayBhY2NvdW50IGZvciBkZXBvc2l0XG4gICAgICAgICAgICAgICAgJ0JhbmsvVHJhbnNhY3Rpb25zJywgLy8gR2V0IGFsbCBhY2NvdW50IHRyYW5zYWN0aW9ucyBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQmFuay9Vc2VyQWNjb3VudHMnLCAvLyBHZXRzIGFsbCB0aGUgYmFuayBhY2NvdW50cyByZWxhdGVkIHRvIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICAgICAgICAnQmFuay9Vc2VyQWNjb3VudHMve0N1cnJlbmN5fScsIC8vIEdldHMgYWxsIHRoZSBiYW5rIGFjY291bnRzIHJlbGF0ZWQgdG8gdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgICAgICAgICAgICAgICdFbGVjdHJvbmljV2FsbGV0L0RlcG9zaXRXYWxsZXRzJywgLy8gR2V0cyBhbGwgY3J5cHRvIGN1cnJlbmN5IGFkZHJlc3NlcyByZWxhdGVkIGRlcG9zaXRzIHRvIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9EZXBvc2l0V2FsbGV0cy97RGlnaUN1cnJlbmN5fScsIC8vIEdldHMgYWxsIGNyeXB0byBjdXJyZW5jeSBhZGRyZXNzZXMgcmVsYXRlZCBkZXBvc2l0cyB0byB0aGUgbG9nZ2VkIGluIHVzZXIgYnkgY3VycmVuY3kuXG4gICAgICAgICAgICAgICAgJ0VsZWN0cm9uaWNXYWxsZXQvVHJhbnNhY3Rpb25zJywgLy8gR2V0IGFsbCBkaWdpdGFsIGN1cnJlbmN5IHRyYW5zYWN0aW9ucyBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9UcmFuc2FjdGlvbnMve0RpZ2lDdXJyZW5jeX0nLCAvLyBHZXQgYWxsIGRpZ2l0YWwgY3VycmVuY3kgdHJhbnNhY3Rpb25zIG9mIHRoZSBsb2dnZWQgaW4gdXNlclxuICAgICAgICAgICAgICAgICdFbGVjdHJvbmljV2FsbGV0L1VzZXJXYWxsZXRzJywgLy8gR2V0cyBhbGwgZXh0ZXJuYWwgZGlnaXRhbCBjdXJyZW5jeSBhZGRyZXNzZXMgcmVsYXRlZCB0byB0aGUgbG9nZ2VkIGluIHVzZXIuXG4gICAgICAgICAgICAgICAgJ0VsZWN0cm9uaWNXYWxsZXQvVXNlcldhbGxldHMve0RpZ2lDdXJyZW5jeX0nLCAvLyBHZXRzIGFsbCBleHRlcm5hbCBkaWdpdGFsIGN1cnJlbmN5IGFkZHJlc3NlcyByZWxhdGVkIHRvIHRoZSBsb2dnZWQgaW4gdXNlciBieSBjdXJyZW5jeS5cbiAgICAgICAgICAgICAgICAnSW5mby9SZWZlcmVuY2VDdXJyZW5jeScsIC8vIEdldCB1c2VyJ3MgcmVmZXJlbmNlIGN1cnJlbmN5XG4gICAgICAgICAgICAgICAgJ0luZm8vUmVmZXJlbmNlTGFuZ3VhZ2UnLCAvLyBHZXQgdXNlcidzIHJlZmVyZW5jZSBsYW5ndWFnZVxuICAgICAgICAgICAgICAgICdOb3RpZmljYXRpb24vTWVzc2FnZXMnLCAvLyBHZXQgZnJvbSBvbGRlc3QgdW5yZWFkICsgMyByZWFkIG1lc3NhZ2UgdG8gbmV3ZXN0IG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgJ1RyYWRlL09yZGVycycsIC8vIEdldHMgb3BlbiBvcmRlcnMgZm9yIHRoZSBsb2dnZWQgaW4gdHJhZGVyLlxuICAgICAgICAgICAgICAgICdUcmFkZS9PcmRlcnMve09yZGVySUR9JywgLy8gR2V0cyBhbiBvcmRlciBmb3IgdGhlIGxvZ2dlZCBpbiB0cmFkZXIuXG4gICAgICAgICAgICAgICAgJ1RyYWRlL1N0b3BPcmRlcnMnLCAvLyBHZXRzIGFsbCBzdG9wIG9yZGVycyBmb3IgdGhlIGxvZ2dlZCBpbiB0cmFkZXIuIE1heCAxMDAwIHJlY29yZC5cbiAgICAgICAgICAgICAgICAnVHJhZGUvU3RvcE9yZGVyc0hpc3RvcnknLCAvLyBHZXRzIGFsbCBzdG9wIG9yZGVycyBmb3IgdGhlIGxvZ2dlZCBpbiB0cmFkZXIuIE1heCAxMDAwIHJlY29yZC5cbiAgICAgICAgICAgICAgICAnVHJhZGUvVHJhZGVzJywgLy8gR2V0cyBhbGwgdHJhbnNhY3Rpb25zIG9mIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ1RyYWRlL1VzZXJUcmFkZXMnLCAvLyBHZXRzIGFsbCB0cmFuc2FjdGlvbnMgb2YgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9Eb2N1bWVudEFkZHJlc3MnLCAvLyBVcGxvYWQgYWRkcmVzcyBwcm9vZiBkb2N1bWVudFxuICAgICAgICAgICAgICAgICdBY2NvdW50L0RvY3VtZW50Q29ycG9yYXRpb24nLCAvLyBVcGxvYWQgcmVnaXN0ZXJlZCBkb2N1bWVudCBkb2N1bWVudFxuICAgICAgICAgICAgICAgICdBY2NvdW50L0RvY3VtZW50SUQnLCAvLyBVcGxvYWQgSUQgZG9jdW1lbnQgY29weVxuICAgICAgICAgICAgICAgICdBY2NvdW50L0VtYWlsL1JlcXVlc3RWZXJpZnknLCAvLyBSZXF1ZXN0IGZvciB2ZXJpZmljYXRpb24gZW1haWxcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9FbWFpbC9WZXJpZnknLCAvLyBWZXJpZmljYXRpb24gZW1haWxcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9Hb29nbGVBdXRoJywgLy8gRW5hYmxlIGdvb2dsZSBhdXRoXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvTGV2ZWwnLCAvLyBSZXF1ZXN0IHZlcmlmIGxldmVsIG9mIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUXVlc3Rpb25uYWlyZScsIC8vIEZpbGwgdGhlIHF1ZXN0aW9ubmFpcmVcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9SZWZlcnJhbCcsIC8vIFBvc3QgYSByZWZlcnJhbCBlbWFpbFxuICAgICAgICAgICAgICAgICdBUElLZXkvQVBJS2V5JywgLy8gQ3JlYXRlIGEgbmV3IEFQSSBrZXkgZm9yIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0F1dGgvQ2hhbmdlUGFzc3dvcmQnLCAvLyBDaGFuZ2UgcGFzc3dvcmQuXG4gICAgICAgICAgICAgICAgJ0F1dGgvRm9yZ290UGFzc3dvcmQnLCAvLyBSZXF1ZXN0IHJlc2V0IHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgJ0F1dGgvRm9yZ290VXNlcklEJywgLy8gUmVxdWVzdCB1c2VyIGlkXG4gICAgICAgICAgICAgICAgJ0F1dGgvTG9naW4nLCAvLyBUcmFkZXIgc2Vzc2lvbiBsb2cgaW4uXG4gICAgICAgICAgICAgICAgJ0F1dGgvTG9nb3V0JywgLy8gTG9nb3V0IGZyb20gdGhlIGN1cnJlbnQgc2Vzc2lvbi5cbiAgICAgICAgICAgICAgICAnQXV0aC9Mb2dvdXRPdGhlclNlc3Npb25zJywgLy8gTG9nb3V0IG90aGVyIHNlc3Npb25zLlxuICAgICAgICAgICAgICAgICdBdXRoL1Jlc2V0UGFzc3dvcmQnLCAvLyBSZXNldCBwYXNzd29yZFxuICAgICAgICAgICAgICAgICdCYW5rL1RyYW5zYWN0aW9ucycsIC8vIFJlcXVlc3QgYSB0cmFuc2ZlciBmcm9tIHRoZSB0cmFkZXJzIGFjY291bnQgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyLiBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBiYW5rIGFjY291bnRcbiAgICAgICAgICAgICAgICAnQmFuay9Vc2VyQWNjb3VudHMnLCAvLyBBZGQgYW4gYWNjb3VudCB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9EZXBvc2l0V2FsbGV0cy97RGlnaUN1cnJlbmN5fScsIC8vIEFkZCBhbiBkaWdpdGFsIGN1cnJlbmN5IGFkZHJlc3NlcyB0byB0aGUgbG9nZ2VkIGluIHVzZXIuXG4gICAgICAgICAgICAgICAgJ0VsZWN0cm9uaWNXYWxsZXQvVHJhbnNhY3Rpb25zL0RlcG9zaXRzL3tEaWdpQ3VycmVuY3l9JywgLy8gR2V0IGFsbCBpbnRlcm5hbCBkaWdpdGFsIGN1cnJlbmN5IHRyYW5zYWN0aW9ucyBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9UcmFuc2FjdGlvbnMvV2l0aGRyYXdhbHMve0RpZ2lDdXJyZW5jeX0nLCAvLyBHZXQgYWxsIGV4dGVybmFsIGRpZ2l0YWwgY3VycmVuY3kgdHJhbnNhY3Rpb25zIG9mIHRoZSBsb2dnZWQgaW4gdXNlclxuICAgICAgICAgICAgICAgICdFbGVjdHJvbmljV2FsbGV0L1VzZXJXYWxsZXRzL3tEaWdpQ3VycmVuY3l9JywgLy8gQWRkIGFuIGV4dGVybmFsIGRpZ2l0YWwgY3VycmVuY3kgYWRkcmVzc2VzIHRvIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9XaXRoZHJhd2Fscy97RGlnaUN1cnJlbmN5fScsIC8vIFJlcXVlc3QgYSB0cmFuc2ZlciBmcm9tIHRoZSB0cmFkZXJzIGFjY291bnQgdG8gYW4gZXh0ZXJuYWwgYWRkcmVzcy4gVGhpcyBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgY3J5cHRvIGN1cnJlbmNpZXMuXG4gICAgICAgICAgICAgICAgJ05vdGlmaWNhdGlvbi9NZXNzYWdlcycsIC8vIE1hcmsgYWxsIGFzIHJlYWRcbiAgICAgICAgICAgICAgICAnTm90aWZpY2F0aW9uL01lc3NhZ2VzL3tJRH0nLCAvLyBNYXJrIGFzIHJlYWRcbiAgICAgICAgICAgICAgICAnVHJhZGUvT3JkZXJzJywgLy8gUGxhY2UgYW4gb3JkZXIgYXQgdGhlIGV4Y2hhbmdlLlxuICAgICAgICAgICAgICAgICdUcmFkZS9TdG9wT3JkZXJzJywgLy8gUGxhY2UgYSBzdG9wIG9yZGVyIGF0IHRoZSBleGNoYW5nZS5cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncHV0JzogW1xuICAgICAgICAgICAgICAgICdBY2NvdW50L0NvcnBvcmF0ZURhdGEnLCAvLyBVcGRhdGUgdXNlciBjb21wYW55IGRhdGEgZm9yIGNvcnBvcmF0ZSBhY2NvdW50XG4gICAgICAgICAgICAgICAgJ0FjY291bnQvRG9jdW1lbnRJRCcsIC8vIFVwZGF0ZSBJRCBkb2N1bWVudCBtZXRhIGRhdGFcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9Eb2N1bWVudEluZm9ybWF0aW9uJywgLy8gVXBkYXRlIFN0ZXAzIERhdGFcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9FbWFpbCcsIC8vIFVwZGF0ZSB1c2VyIGVtYWlsXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUGVyc29uYWxJbmZvcm1hdGlvbicsIC8vIFVwZGF0ZSBTdGVwMSBEYXRhXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUGhvbmUnLCAvLyBVcGRhdGUgdXNlciBwaG9uZSBudW1iZXJcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9RdWVzdGlvbm5haXJlJywgLy8gdXBkYXRlIHRoZSBxdWVzdGlvbm5haXJlXG4gICAgICAgICAgICAgICAgJ0FjY291bnQvUmVmZXJyZWRDb2RlJywgLy8gVXBkYXRlIHJlZmVycmFsIGNvZGVcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9SZXNpZGVudEluZm9ybWF0aW9uJywgLy8gVXBkYXRlIFN0ZXAyIERhdGFcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9TZWN1cml0eVNldHRpbmdzJywgLy8gVXBkYXRlIHZlcmlmIGRldGFpbHMgb2YgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQWNjb3VudC9Vc2VyJywgLy8gVXBkYXRlIGFsbCB1c2VyIGluZm9cbiAgICAgICAgICAgICAgICAnQmFuay9Vc2VyQWNjb3VudHMnLCAvLyBVcGRhdGUgdGhlIGxhYmVsIG9mIGV4aXN0aW5nIHVzZXIgYmFuayBhY2NvdW5udFxuICAgICAgICAgICAgICAgICdFbGVjdHJvbmljV2FsbGV0L0RlcG9zaXRXYWxsZXRzL3tEaWdpQ3VycmVuY3l9L3tBZGRyZXNzTmFtZX0nLCAvLyBVcGRhdGUgdGhlIG5hbWUgb2YgYW4gYWRkcmVzc1xuICAgICAgICAgICAgICAgICdFbGVjdHJvbmljV2FsbGV0L1VzZXJXYWxsZXRzL3tEaWdpQ3VycmVuY3l9JywgLy8gVXBkYXRlIHRoZSBuYW1lIG9mIGFuIGV4dGVybmFsIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAnSW5mby9SZWZlcmVuY2VDdXJyZW5jeScsIC8vIFVzZXIncyByZWZlcmVuY2UgY3VycmVuY3lcbiAgICAgICAgICAgICAgICAnSW5mby9SZWZlcmVuY2VMYW5ndWFnZScsIC8vIFVwZGF0ZSB1c2VyJ3MgcmVmZXJlbmNlIGxhbmd1YWdlXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICAgICAnQVBJS2V5L0FQSUtleS97UHVibGljS2V5fScsIC8vIFJlbW92ZSBhbiBBUEkga2V5XG4gICAgICAgICAgICAgICAgJ0JhbmsvVHJhbnNhY3Rpb25zL3tSZXF1ZXN0SUR9JywgLy8gRGVsZXRlIHBlbmRpbmcgYWNjb3VudCB3aXRoZHJhdyBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICAgICAgICAgICAgICAnQmFuay9Vc2VyQWNjb3VudHMve0N1cnJlbmN5fS97TGFiZWx9JywgLy8gRGVsZXRlIGFuIGFjY291bnQgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyXG4gICAgICAgICAgICAgICAgJ0VsZWN0cm9uaWNXYWxsZXQvRGVwb3NpdFdhbGxldHMve0RpZ2lDdXJyZW5jeX0ve0FkZHJlc3NOYW1lfScsIC8vIERlbGV0ZSBhbiBkaWdpdGFsIGN1cnJlbmN5IGFkZHJlc3NlcyByZWxhdGVkIHRvIHRoZSBsb2dnZWQgaW4gdXNlci5cbiAgICAgICAgICAgICAgICAnRWxlY3Ryb25pY1dhbGxldC9Vc2VyV2FsbGV0cy97RGlnaUN1cnJlbmN5fS97QWRkcmVzc05hbWV9JywgLy8gRGVsZXRlIGFuIGV4dGVybmFsIGRpZ2l0YWwgY3VycmVuY3kgYWRkcmVzc2VzIHJlbGF0ZWQgdG8gdGhlIGxvZ2dlZCBpbiB1c2VyLlxuICAgICAgICAgICAgICAgICdUcmFkZS9PcmRlcnMnLCAvLyBDYW5jZWxzIGFsbCBleGlzdGluZyBvcmRlclxuICAgICAgICAgICAgICAgICdUcmFkZS9PcmRlcnMve09yZGVySUR9JywgLy8gQ2FuY2VscyBhbiBleGlzdGluZyBvcmRlclxuICAgICAgICAgICAgICAgICdUcmFkZS9TdG9wT3JkZXJzJywgLy8gQ2FuY2VscyBhbGwgZXhpc3Rpbmcgc3RvcCBvcmRlcnNcbiAgICAgICAgICAgICAgICAnVHJhZGUvU3RvcE9yZGVycy97SUR9JywgLy8gQ2FuY2VscyBhbiBleGlzdGluZyBzdG9wIG9yZGVyXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFB1YmxpY0xpdmVUaWNrZXJzICgpO1xuICAgICAgICBsZXQgbWFya2V0cyA9IHJlc3BvbnNlWyd0aWNrZXJzJ107XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1twXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnY3VycmVuY3lQYWlyJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IGlkLnNsaWNlICgwLCAzKTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IGlkLnNsaWNlICgzLCA2KTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRCYWxhbmNlQmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydiYWxhbmNlcyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlWydhdmFpbGFibGVCYWxhbmNlJ10sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiB0aGlzLnN1bSAoXG4gICAgICAgICAgICAgICAgICAgIGJhbGFuY2VbJ3BlbmRpbmdJbmNvbWluZyddLFxuICAgICAgICAgICAgICAgICAgICBiYWxhbmNlWydwZW5kaW5nT3V0Z29pbmcnXSxcbiAgICAgICAgICAgICAgICAgICAgYmFsYW5jZVsnb3Blbk9yZGVyJ10pLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2VbJ2JhbGFuY2UnXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFB1YmxpY01hcmtldERlcHRoQ3VycmVuY3lQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ0N1cnJlbmN5UGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICd2b2x1bWUnKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodGlja2VyWydjcmVhdGVEYXRlVGltZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHBhcnNlRmxvYXQgKHRpY2tlclsndndhcCddKSxcbiAgICAgICAgICAgICdvcGVuJzogcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQdWJsaWNMaXZlVGlja2VycyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSByZXNwb25zZVsndGlja2VycyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGlja2Vycy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbdF07XG4gICAgICAgICAgICBsZXQgaWQgPSB0aWNrZXJbJ2N1cnJlbmN5UGFpciddO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFB1YmxpY0xpdmVUaWNrZXJDdXJyZW5jeVBhaXIgKHtcbiAgICAgICAgICAgICdDdXJyZW5jeVBhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ3RpY2tlciddO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBzaWRlID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgb3JkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnd2F5JyBpbiB0cmFkZSkge1xuICAgICAgICAgICAgc2lkZSA9ICh0cmFkZVsnd2F5J10gPT0gJ2JpZCcpID8gJ2J1eScgOiAnc2VsbCc7XG4gICAgICAgICAgICBsZXQgb3JkZXJJZCA9IHRyYWRlWyd3YXknXSArICdPcmRlcklkJztcbiAgICAgICAgICAgIG9yZGVyID0gdHJhZGVbb3JkZXJJZF07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsndHJhbnNhY3Rpb25UaW1lJ10pICogMTAwMDtcbiAgICAgICAgaWYgKCFtYXJrZXQpXG4gICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbdHJhZGVbJ2N1cnJlbmN5UGFpciddXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJhbnNhY3Rpb25JZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ29yZGVyJzogb3JkZXIsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydxdWFudGl0eSddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0UHVibGljVHJhbnNhY3Rpb25zQ3VycmVuY3lQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ0N1cnJlbmN5UGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsndHJhbnNhY3Rpb25zJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgcGFyc2VJbnQgKG9obGN2WydjcmVhdGVEYXRlVGltZSddKSAqIDEwMDAsXG4gICAgICAgICAgICBvaGxjdlsnb3BlbiddLFxuICAgICAgICAgICAgb2hsY3ZbJ2hpZ2gnXSxcbiAgICAgICAgICAgIG9obGN2Wydsb3cnXSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG9obGN2Wyd2b2x1bWUnXSxcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnQ3VycmVuY3lQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ1RpbWVmcmFtZSc6IHRoaXMudGltZWZyYW1lc1t0aW1lZnJhbWVdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAobGltaXQpXG4gICAgICAgICAgICByZXF1ZXN0WydDb3VudCddID0gbGltaXQ7XG4gICAgICAgIHJlcXVlc3QgPSB0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQdWJsaWNUaWNrZXJIaXN0b3J5Q3VycmVuY3lQYWlyVGltZWZyYW1lIChyZXF1ZXN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPSExDVnMgKHJlc3BvbnNlWyd0aWNrZXJzJ10sIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnQ29kZSc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnV2F5JzogKHNpZGUgPT0gJ2J1eScpID8gJ0JpZCcgOiAnQXNrJyxcbiAgICAgICAgICAgICdBbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsnUHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBpZiAodGhpcy50d29mYSkge1xuICAgICAgICAgICAgaWYgKCdWYWxpZGF0aW9uQ29kZScgaW4gcGFyYW1zKVxuICAgICAgICAgICAgICAgIG9yZGVyWydWYWxpZGF0aW9uQ29kZSddID0gcGFyYW1zWydWYWxpZGF0aW9uQ29kZSddO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkVycm9yICh0aGlzLmlkICsgJyB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVzIGEgbWlzc2luZyBWYWxpZGF0aW9uQ29kZSBwYXJhbWV0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VHJhZGVPcmRlcnMgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2NsT3JkZXJJZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZURlbGV0ZVRyYWRlT3JkZXJzT3JkZXJJRCAoeyAnT3JkZXJJRCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBsZXQgY29udGVudFR5cGUgPSAobWV0aG9kID09ICdHRVQnKSA/ICcnIDogJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgbGV0IGF1dGggPSBtZXRob2QgKyB1cmwgKyBjb250ZW50VHlwZSArIG5vbmNlLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgYXV0aCA9IGF1dGgudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGEyNTYnLCAnYmFzZTY0Jyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdBUElfUFVCTElDX0tFWSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdBUElfUkVRVUVTVF9TSUdOQVRVUkUnOiBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgJ0FQSV9SRVFVRVNUX0RBVEUnOiBub25jZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobWV0aG9kICE9ICdHRVQnKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSBjb250ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uICh0aGlzLmV4dGVuZCAoeyAnbm9uY2UnOiBub25jZSB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgncmVzcG9uc2VTdGF0dXMnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiByZXNwb25zZVsncmVzcG9uc2VTdGF0dXMnXSlcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VbJ3Jlc3BvbnNlU3RhdHVzJ11bJ21lc3NhZ2UnXSA9PSAnT0snKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGdkYXggPSB7XG4gICAgJ2lkJzogJ2dkYXgnLFxuICAgICduYW1lJzogJ0dEQVgnLFxuICAgICdjb3VudHJpZXMnOiAnVVMnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFtJzogNjAsXG4gICAgICAgICc1bSc6IDMwMCxcbiAgICAgICAgJzE1bSc6IDkwMCxcbiAgICAgICAgJzMwbSc6IDE4MDAsXG4gICAgICAgICcxaCc6IDM2MDAsXG4gICAgICAgICcyaCc6IDcyMDAsXG4gICAgICAgICc0aCc6IDE0NDAwLFxuICAgICAgICAnMTJoJzogNDMyMDAsXG4gICAgICAgICcxZCc6IDg2NDAwLFxuICAgICAgICAnMXcnOiA2MDQ4MDAsXG4gICAgICAgICcxTSc6IDI1OTIwMDAsXG4gICAgICAgICcxeSc6IDMxNTM2MDAwLFxuICAgIH0sXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICd0ZXN0JzogJ2h0dHBzOi8vYXBpLXB1YmxpYy5zYW5kYm94LmdkYXguY29tJyxcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjUyNy1iMWJlNDFjNi01ZWRiLTExZTctOTVmNi01YjQ5NmM0NjllMmMuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5nZGF4LmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuZ2RheC5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vZG9jcy5nZGF4LmNvbScsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnY3VycmVuY2llcycsXG4gICAgICAgICAgICAgICAgJ3Byb2R1Y3RzJyxcbiAgICAgICAgICAgICAgICAncHJvZHVjdHMve2lkfS9ib29rJyxcbiAgICAgICAgICAgICAgICAncHJvZHVjdHMve2lkfS9jYW5kbGVzJyxcbiAgICAgICAgICAgICAgICAncHJvZHVjdHMve2lkfS9zdGF0cycsXG4gICAgICAgICAgICAgICAgJ3Byb2R1Y3RzL3tpZH0vdGlja2VyJyxcbiAgICAgICAgICAgICAgICAncHJvZHVjdHMve2lkfS90cmFkZXMnLFxuICAgICAgICAgICAgICAgICd0aW1lJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYWNjb3VudHMnLFxuICAgICAgICAgICAgICAgICdhY2NvdW50cy97aWR9JyxcbiAgICAgICAgICAgICAgICAnYWNjb3VudHMve2lkfS9ob2xkcycsXG4gICAgICAgICAgICAgICAgJ2FjY291bnRzL3tpZH0vbGVkZ2VyJyxcbiAgICAgICAgICAgICAgICAnY29pbmJhc2UtYWNjb3VudHMnLFxuICAgICAgICAgICAgICAgICdmaWxscycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRpbmcnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMve2lkfScsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQtbWV0aG9kcycsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICAncmVwb3J0cy97aWR9JyxcbiAgICAgICAgICAgICAgICAndXNlcnMvc2VsZi90cmFpbGluZy12b2x1bWUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdkZXBvc2l0cy9jb2luYmFzZS1hY2NvdW50JyxcbiAgICAgICAgICAgICAgICAnZGVwb3NpdHMvcGF5bWVudC1tZXRob2QnLFxuICAgICAgICAgICAgICAgICdmdW5kaW5nL3JlcGF5JyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAncG9zaXRpb24vY2xvc2UnLFxuICAgICAgICAgICAgICAgICdwcm9maWxlcy9tYXJnaW4tdHJhbnNmZXInLFxuICAgICAgICAgICAgICAgICdyZXBvcnRzJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbHMvY29pbmJhc2UnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2Fscy9jcnlwdG8nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2Fscy9wYXltZW50LW1ldGhvZCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL3tpZH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFByb2R1Y3RzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgbWFya2V0cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbcF07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ2lkJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnYmFzZV9jdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gbWFya2V0WydxdW90ZV9jdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldEFjY291bnRzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydhdmFpbGFibGUnXSksXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydob2xkJ10pLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2JhbGFuY2UnXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0UHJvZHVjdHNJZEJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICAgICAgJ2xldmVsJzogMiwgLy8gMSBiZXN0IGJpZGFzaywgMiBhZ2dyZWdhdGVkLCAzIGZ1bGxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0UHJvZHVjdHNJZFRpY2tlciAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHF1b3RlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQcm9kdWN0c0lkU3RhdHMgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodGlja2VyWyd0aW1lJ10pO1xuICAgICAgICBsZXQgYmlkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgYXNrID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ2JpZCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgYmlkID0gcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSk7XG4gICAgICAgIGlmICgnYXNrJyBpbiB0aWNrZXIpXG4gICAgICAgICAgICBhc2sgPSBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHF1b3RlWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHF1b3RlWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogYmlkLFxuICAgICAgICAgICAgJ2Fzayc6IGFzayxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0IChxdW90ZVsnb3BlbiddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAocXVvdGVbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKFsndGltZSddKTtcbiAgICAgICAgbGV0IHR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndHJhZGVfaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3NpZGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsnc2l6ZSddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljR2V0UHJvZHVjdHNJZFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IHRoaXMubWFya2V0SWQgKG1hcmtldCksIC8vIGZpeGVzIGlzc3VlICMyXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgIH0sXG5cbiAgICBwYXJzZU9ITENWIChvaGxjdiwgbWFya2V0ID0gdW5kZWZpbmVkLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9obGN2WzBdICogMTAwMCxcbiAgICAgICAgICAgIG9obGN2WzNdLFxuICAgICAgICAgICAgb2hsY3ZbMl0sXG4gICAgICAgICAgICBvaGxjdlsxXSxcbiAgICAgICAgICAgIG9obGN2WzRdLFxuICAgICAgICAgICAgb2hsY3ZbNV0sXG4gICAgICAgIF07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT0hMQ1YgKHN5bWJvbCwgdGltZWZyYW1lID0gJzFtJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0UHJvZHVjdHNJZENhbmRsZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnZ3JhbnVsYXJpdHknOiB0aGlzLnRpbWVmcmFtZXNbdGltZWZyYW1lXSxcbiAgICAgICAgICAgICdzdGFydCc6IHNpbmNlLFxuICAgICAgICAgICAgJ2VuZCc6IGxpbWl0LFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPSExDVnMgKHJlc3BvbnNlLCBtYXJrZXQsIHRpbWVmcmFtZSwgc2luY2UsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaW1lICgpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wdWJsaWNHZXRUaW1lICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZTg2MDEgKHJlc3BvbnNlWydpc28nXSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChtYXJrZXQsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvaWQgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAncHJvZHVjdF9pZCc6IHRoaXMubWFya2V0SWQgKG1hcmtldCksXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAnc2l6ZSc6IGFtb3VudCxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2xpbWl0JylcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlcnMgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlRGVsZXRlT3JkZXJzSWQgKHsgJ2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGdldFBheW1lbnRNZXRob2RzICgpIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0UGF5bWVudE1ldGhvZHMgKCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxuXG4gICAgYXN5bmMgd2l0aGRyYXcgKGN1cnJlbmN5LCBhbW91bnQsIGFkZHJlc3MsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGlmICgncGF5bWVudF9tZXRob2RfaWQnIGluIHBhcmFtcykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RXaXRoZHJhdyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnY3VycmVuY3knOiBjdXJyZW5jeSxcbiAgICAgICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICAgICAgICAgIC8vICdhZGRyZXNzJzogYWRkcmVzcywgLy8gdGhleSBkb24ndCBhbGxvdyB3aXRoZHJhd2FscyB0byBkaXJlY3QgYWRkcmVzc2VzXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAnaWQnOiByZXNwb25zZVsncmVzdWx0J10sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgXCIgd2l0aGRyYXcgcmVxdWlyZXMgYSAncGF5bWVudF9tZXRob2RfaWQnIHBhcmFtZXRlclwiKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcmVxdWVzdCA9ICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyByZXF1ZXN0O1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hcGlLZXkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGFwaUtleSBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24gYW5kIHRyYWRpbmcnKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZWNyZXQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIHNlY3JldCBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24gYW5kIHRyYWRpbmcnKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5wYXNzd29yZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvciAodGhpcy5pZCArICcgcmVxdWlyZXMgcGFzc3dvcmQgcHJvcGVydHkgZm9yIGF1dGhlbnRpY2F0aW9uIGFuZCB0cmFkaW5nJyk7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHF1ZXJ5KTtcbiAgICAgICAgICAgIGxldCB3aGF0ID0gbm9uY2UgKyBtZXRob2QgKyByZXF1ZXN0ICsgKGJvZHkgfHwgJycpO1xuICAgICAgICAgICAgbGV0IHNlY3JldCA9IHRoaXMuYmFzZTY0VG9CaW5hcnkgKHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlICh3aGF0KSwgc2VjcmV0LCAnc2hhMjU2JywgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ0ItQUNDRVNTLUtFWSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdDQi1BQ0NFU1MtU0lHTic6IHRoaXMuZGVjb2RlIChzaWduYXR1cmUpLFxuICAgICAgICAgICAgICAgICdDQi1BQ0NFU1MtVElNRVNUQU1QJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ0NCLUFDQ0VTUy1QQVNTUEhSQVNFJzogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnbWVzc2FnZScgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGdlbWluaSA9IHtcbiAgICAnaWQnOiAnZ2VtaW5pJyxcbiAgICAnbmFtZSc6ICdHZW1pbmknLFxuICAgICdjb3VudHJpZXMnOiAnVVMnLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLCAvLyAyMDAgZm9yIHByaXZhdGUgQVBJXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODE2ODU3LWNlN2JlNjQ0LTYwOTYtMTFlNy04MmQ2LTNjMjU3MjYzMjI5Yy5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmdlbWluaS5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vZ2VtaW5pLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9kb2NzLmdlbWluaS5jb20vcmVzdC1hcGknLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3N5bWJvbHMnLFxuICAgICAgICAgICAgICAgICdwdWJ0aWNrZXIve3N5bWJvbH0nLFxuICAgICAgICAgICAgICAgICdib29rL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAnYXVjdGlvbi97c3ltYm9sfScsXG4gICAgICAgICAgICAgICAgJ2F1Y3Rpb24ve3N5bWJvbH0vaGlzdG9yeScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlci9uZXcnLFxuICAgICAgICAgICAgICAgICdvcmRlci9jYW5jZWwnLFxuICAgICAgICAgICAgICAgICdvcmRlci9jYW5jZWwvc2Vzc2lvbicsXG4gICAgICAgICAgICAgICAgJ29yZGVyL2NhbmNlbC9hbGwnLFxuICAgICAgICAgICAgICAgICdvcmRlci9zdGF0dXMnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICdteXRyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3RyYWRldm9sdW1lJyxcbiAgICAgICAgICAgICAgICAnYmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdkZXBvc2l0L3tjdXJyZW5jeX0vbmV3QWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3L3tjdXJyZW5jeX0nLFxuICAgICAgICAgICAgICAgICdoZWFydGJlYXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFN5bWJvbHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IGlkO1xuICAgICAgICAgICAgbGV0IHVwcGVyY2FzZSA9IG1hcmtldC50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gdXBwZXJjYXNlLnNsaWNlICgwLCAzKTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IHVwcGVyY2FzZS5zbGljZSAoMywgNik7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChtYXJrZXQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEJvb2tTeW1ib2wgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdwcmljZScsICdhbW91bnQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFB1YnRpY2tlclN5bWJvbCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aWNrZXJbJ3ZvbHVtZSddWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgbGV0IGJhc2VWb2x1bWUgPSBtYXJrZXRbJ2Jhc2UnXTtcbiAgICAgICAgbGV0IHF1b3RlVm9sdW1lID0gbWFya2V0WydxdW90ZSddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddW2Jhc2VWb2x1bWVdKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ11bcXVvdGVWb2x1bWVdKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsndGltZXN0YW1wbXMnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0aWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3R5cGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsnYW1vdW50J10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0QmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCBiYWxhbmNlcy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tiXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGJhbGFuY2VbJ2N1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAnZnJlZSc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2F2YWlsYWJsZSddKSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydhbW91bnQnXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY2xpZW50X29yZGVyX2lkJzogdGhpcy5ub25jZSAoKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudC50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3R5cGUnOiAnZXhjaGFuZ2UgbGltaXQnLCAvLyBnZW1pbmkgYWxsb3dzIGxpbWl0IG9yZGVycyBvbmx5XG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlck5ldyAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJfaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHsgJ29yZGVyX2lkJzogaWQgfSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9ICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdyZXF1ZXN0JzogdXJsLFxuICAgICAgICAgICAgICAgICdub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfSwgcXVlcnkpO1xuICAgICAgICAgICAgbGV0IHBheWxvYWQgPSB0aGlzLmpzb24gKHJlcXVlc3QpO1xuICAgICAgICAgICAgcGF5bG9hZCA9IHRoaXMuc3RyaW5nVG9CYXNlNjQgKHRoaXMuZW5jb2RlIChwYXlsb2FkKSk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjIChwYXlsb2FkLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhMzg0Jyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogMCxcbiAgICAgICAgICAgICAgICAnWC1HRU1JTkktQVBJS0VZJzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ1gtR0VNSU5JLVBBWUxPQUQnOiBwYXlsb2FkLFxuICAgICAgICAgICAgICAgICdYLUdFTUlOSS1TSUdOQVRVUkUnOiBzaWduYXR1cmUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyB1cmw7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdyZXN1bHQnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlWydyZXN1bHQnXSA9PSAnZXJyb3InKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgaGl0YnRjID0ge1xuXG4gICAgJ2lkJzogJ2hpdGJ0YycsXG4gICAgJ25hbWUnOiAnSGl0QlRDJyxcbiAgICAnY291bnRyaWVzJzogJ0hLJywgLy8gSG9uZyBLb25nXG4gICAgJ3JhdGVMaW1pdCc6IDE1MDAsXG4gICAgJ3ZlcnNpb24nOiAnMScsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY1NTUtOGVhZWMyMGUtNWVkYy0xMWU3LTljNWItNmRjNjlmYzQyZjVlLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cDovL2FwaS5oaXRidGMuY29tJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL2hpdGJ0Yy5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vaGl0YnRjLmNvbS9hcGknLFxuICAgICAgICAgICAgJ2h0dHA6Ly9oaXRidGMtY29tLmdpdGh1Yi5pby9oaXRidGMtYXBpJyxcbiAgICAgICAgICAgICdodHRwOi8vanNmaWRkbGUubmV0L2Jta25pZ2h0L1JxYllCJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICd7c3ltYm9sfS9vcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICd7c3ltYm9sfS90aWNrZXInLFxuICAgICAgICAgICAgICAgICd7c3ltYm9sfS90cmFkZXMnLFxuICAgICAgICAgICAgICAgICd7c3ltYm9sfS90cmFkZXMvcmVjZW50JyxcbiAgICAgICAgICAgICAgICAnc3ltYm9scycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ3RpbWUsJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3RyYWRpbmcnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL2FjdGl2ZScsXG4gICAgICAgICAgICAgICAgJ29yZGVycy9yZWNlbnQnLFxuICAgICAgICAgICAgICAgICdvcmRlcicsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcy9ieS9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ25ld19vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcnMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3BheW1lbnQnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnYWRkcmVzcy97Y3VycmVuY3l9JyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zL3t0cmFuc2FjdGlvbn0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICd0cmFuc2Zlcl90b190cmFkaW5nJyxcbiAgICAgICAgICAgICAgICAndHJhbnNmZXJfdG9fbWFpbicsXG4gICAgICAgICAgICAgICAgJ2FkZHJlc3Mve2N1cnJlbmN5fScsXG4gICAgICAgICAgICAgICAgJ3BheW91dCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRTeW1ib2xzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgbWFya2V0c1snc3ltYm9scyddLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1snc3ltYm9scyddW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gbWFya2V0Wydjb21tb2RpdHknXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsnY3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBsb3QgPSBwYXJzZUZsb2F0IChtYXJrZXRbJ2xvdCddKTtcbiAgICAgICAgICAgIGxldCBzdGVwID0gcGFyc2VGbG9hdCAobWFya2V0WydzdGVwJ10pO1xuICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgIHF1b3RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKHF1b3RlKTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdsb3QnOiBsb3QsXG4gICAgICAgICAgICAgICAgJ3N0ZXAnOiBzdGVwLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnRyYWRpbmdHZXRCYWxhbmNlICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsnYmFsYW5jZSddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY29kZSA9IGJhbGFuY2VbJ2N1cnJlbmN5X2NvZGUnXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChjb2RlKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnY2FzaCddKSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ3Jlc2VydmVkJ10pLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IDAuMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFN5bWJvbE9yZGVyYm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGlja2VyWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29wZW4nXSksXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZSddKSxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lX3F1b3RlJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKCk7XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0U3ltYm9sVGlja2VyICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiB0aWNrZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRpY2tlclsnbWVzc2FnZSddKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWzBdLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRyYWRlWzNdLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0cmFkZVszXSksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVs0XSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWzFdKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsyXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRTeW1ib2xUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgLy8gJ2Zyb20nOiAwLFxuICAgICAgICAgICAgLy8gJ3RpbGwnOiAxMDAsXG4gICAgICAgICAgICAvLyAnYnknOiAndHMnLCAvLyBvciBieSB0cmFkZV9pZFxuICAgICAgICAgICAgLy8gJ3NvcnQnOiAnZGVzYycsIC8vIG9yIGFzY1xuICAgICAgICAgICAgLy8gJ3N0YXJ0X2luZGV4JzogMCxcbiAgICAgICAgICAgIC8vICdtYXhfcmVzdWx0cyc6IDEwMDAsXG4gICAgICAgICAgICAvLyAnZm9ybWF0X2l0ZW0nOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIC8vICdmb3JtYXRfcHJpY2UnOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIC8vICdmb3JtYXRfYW1vdW50JzogJ251bWJlcicsXG4gICAgICAgICAgICAvLyAnZm9ybWF0X3RpZCc6ICdzdHJpbmcnLFxuICAgICAgICAgICAgLy8gJ2Zvcm1hdF90aW1lc3RhbXAnOiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgLy8gJ2Zvcm1hdF93cmFwJzogZmFsc2UsXG4gICAgICAgICAgICAnc2lkZSc6ICd0cnVlJyxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsndHJhZGVzJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgLy8gY2hlY2sgaWYgYW1vdW50IGNhbiBiZSBldmVubHkgZGl2aWRlZCBpbnRvIGxvdHNcbiAgICAgICAgLy8gdGhleSB3YW50IGludGVnZXIgcXVhbnRpdHkgaW4gbG90IHVuaXRzXG4gICAgICAgIGxldCBxdWFudGl0eSA9IHBhcnNlRmxvYXQgKGFtb3VudCkgLyBtYXJrZXRbJ2xvdCddO1xuICAgICAgICBsZXQgd2hvbGVMb3RzID0gTWF0aC5yb3VuZCAocXVhbnRpdHkpO1xuICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IHF1YW50aXR5IC0gd2hvbGVMb3RzO1xuICAgICAgICBpZiAoTWF0aC5hYnMgKGRpZmZlcmVuY2UpID4gbWFya2V0WydzdGVwJ10pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgb3JkZXIgYW1vdW50IHNob3VsZCBiZSBldmVubHkgZGl2aXNpYmxlIGJ5IGxvdCB1bml0IHNpemUgb2YgJyArIG1hcmtldFsnbG90J10udG9TdHJpbmcgKCkpO1xuICAgICAgICBsZXQgY2xpZW50T3JkZXJJZCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY2xpZW50T3JkZXJJZCc6IGNsaWVudE9yZGVySWQudG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3F1YW50aXR5Jzogd2hvbGVMb3RzLnRvU3RyaW5nICgpLCAvLyBxdWFudGl0eSBpbiBpbnRlZ2VyIGxvdCB1bml0c1xuICAgICAgICAgICAgJ3R5cGUnOiB0eXBlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKVxuICAgICAgICAgICAgb3JkZXJbJ3ByaWNlJ10gPSAnJS4xMGYnLnNwcmludGYgKHByaWNlKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy50cmFkaW5nUG9zdE5ld09yZGVyICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydFeGVjdXRpb25SZXBvcnQnXVsnY2xpZW50T3JkZXJJZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWRpbmdQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY2xpZW50T3JkZXJJZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgd2l0aGRyYXcgKGN1cnJlbmN5LCBhbW91bnQsIGFkZHJlc3MsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucGF5bWVudFBvc3RQYXlvdXQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lfY29kZSc6IGN1cnJlbmN5LFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdhZGRyZXNzJzogYWRkcmVzcyxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3RyYW5zYWN0aW9uJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9ICcvJyArICdhcGknICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgYXBpICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBxdWVyeSA9IHRoaXMuZXh0ZW5kICh7ICdub25jZSc6IG5vbmNlLCAnYXBpa2V5JzogdGhpcy5hcGlLZXkgfSwgcXVlcnkpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSAnUE9TVCcpXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB1cmwgKyAoYm9keSB8fCAnJyk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAnWC1TaWduYXR1cmUnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTUxMicpLnRvTG93ZXJDYXNlICgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgdXJsO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnY29kZScgaW4gcmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmICgnRXhlY3V0aW9uUmVwb3J0JyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZVsnRXhlY3V0aW9uUmVwb3J0J11bJ29yZGVyUmVqZWN0UmVhc29uJ10gPT0gJ29yZGVyRXhjZWVkc0xpbWl0JylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluc3VmZmljaWVudEZ1bmRzICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGhpdGJ0YzIgPSBleHRlbmQgKGhpdGJ0Yywge1xuXG4gICAgJ2lkJzogJ2hpdGJ0YzInLFxuICAgICduYW1lJzogJ0hpdEJUQyB2MicsXG4gICAgJ2NvdW50cmllcyc6ICdISycsIC8vIEhvbmcgS29uZ1xuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICd2ZXJzaW9uJzogJzInLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NTU1LThlYWVjMjBlLTVlZGMtMTFlNy05YzViLTZkYzY5ZmM0MmY1ZS5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLmhpdGJ0Yy5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vaGl0YnRjLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9hcGkuaGl0YnRjLmNvbS9hcGkvMi9leHBsb3JlJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vaGl0YnRjLWNvbS9oaXRidGMtYXBpL2Jsb2IvbWFzdGVyL0FQSXYyLm1kJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdzeW1ib2wnLCAvLyBBdmFpbGFibGUgQ3VycmVuY3kgU3ltYm9sc1xuICAgICAgICAgICAgICAgICdzeW1ib2wve3N5bWJvbH0nLCAvLyBHZXQgc3ltYm9sIGluZm9cbiAgICAgICAgICAgICAgICAnY3VycmVuY3knLCAvLyBBdmFpbGFibGUgQ3VycmVuY2llc1xuICAgICAgICAgICAgICAgICdjdXJyZW5jeS97Y3VycmVuY3l9JywgLy8gR2V0IGN1cnJlbmN5IGluZm9cbiAgICAgICAgICAgICAgICAndGlja2VyJywgLy8gVGlja2VyIGxpc3QgZm9yIGFsbCBzeW1ib2xzXG4gICAgICAgICAgICAgICAgJ3RpY2tlci97c3ltYm9sfScsIC8vIFRpY2tlciBmb3Igc3ltYm9sXG4gICAgICAgICAgICAgICAgJ3RyYWRlcy97c3ltYm9sfScsIC8vIFRyYWRlc1xuICAgICAgICAgICAgICAgICdvcmRlcmJvb2sve3N5bWJvbH0nLCAvLyBPcmRlcmJvb2tcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnb3JkZXInLCAvLyBMaXN0IHlvdXIgY3VycmVudCBvcGVuIG9yZGVyc1xuICAgICAgICAgICAgICAgICdvcmRlci97Y2xpZW50T3JkZXJJZH0nLCAvLyBHZXQgYSBzaW5nbGUgb3JkZXIgYnkgY2xpZW50T3JkZXJJZFxuICAgICAgICAgICAgICAgICd0cmFkaW5nL2JhbGFuY2UnLCAvLyBHZXQgdHJhZGluZyBiYWxhbmNlXG4gICAgICAgICAgICAgICAgJ3RyYWRpbmcvZmVlL3tzeW1ib2x9JywgLy8gR2V0IHRyYWRpbmcgZmVlIHJhdGVcbiAgICAgICAgICAgICAgICAnaGlzdG9yeS90cmFkZXMnLCAvLyBHZXQgaGlzdG9yaWNhbCB0cmFkZXNcbiAgICAgICAgICAgICAgICAnaGlzdG9yeS9vcmRlcicsIC8vIEdldCBoaXN0b3JpY2FsIG9yZGVyc1xuICAgICAgICAgICAgICAgICdoaXN0b3J5L29yZGVyL3tpZH0vdHJhZGVzJywgLy8gR2V0IGhpc3RvcmljYWwgdHJhZGVzIGJ5IHNwZWNpZmllZCBvcmRlclxuICAgICAgICAgICAgICAgICdhY2NvdW50L2JhbGFuY2UnLCAvLyBHZXQgbWFpbiBhY2Njb3VudCBiYWxhbmNlXG4gICAgICAgICAgICAgICAgJ2FjY291bnQvdHJhbnNhY3Rpb25zJywgLy8gR2V0IGFjY291bnQgdHJhbnNhY3Rpb25zXG4gICAgICAgICAgICAgICAgJ2FjY291bnQvdHJhbnNhY3Rpb25zL3tpZH0nLCAvLyBHZXQgYWNjb3VudCB0cmFuc2FjdGlvbiBieSBpZFxuICAgICAgICAgICAgICAgICdhY2NvdW50L2NyeXB0by9hZGRyZXNzL3tjdXJyZW5jeX0nLCAvLyBHZXQgZGVwb3NpdCBjcnlwcm8gYWRkcmVzc1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcicsIC8vIENyZWF0ZSBuZXcgb3JkZXJcbiAgICAgICAgICAgICAgICAnYWNjb3VudC9jcnlwdG8vd2l0aGRyYXcnLCAvLyBXaXRoZHJhdyBjcnlwcm9cbiAgICAgICAgICAgICAgICAnYWNjb3VudC9jcnlwdG8vYWRkcmVzcy97Y3VycmVuY3l9JywgLy8gQ3JlYXRlIG5ldyBkZXBvc2l0IGNyeXBybyBhZGRyZXNzXG4gICAgICAgICAgICAgICAgJ2FjY291bnQvdHJhbnNmZXInLCAvLyBUcmFuc2ZlciBhbW91bnQgdG8gdHJhZGluZ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwdXQnOiBbXG4gICAgICAgICAgICAgICAgJ29yZGVyL3tjbGllbnRPcmRlcklkfScsIC8vIENyZWF0ZSBuZXcgb3JkZXJcbiAgICAgICAgICAgICAgICAnYWNjb3VudC9jcnlwdG8vd2l0aGRyYXcve2lkfScsIC8vIENvbW1pdCB3aXRoZHJhdyBjcnlwcm9cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICdvcmRlcicsIC8vIENhbmNlbCBhbGwgb3BlbiBvcmRlcnNcbiAgICAgICAgICAgICAgICAnb3JkZXIve2NsaWVudE9yZGVySWR9JywgLy8gQ2FuY2VsIG9yZGVyXG4gICAgICAgICAgICAgICAgJ2FjY291bnQvY3J5cHRvL3dpdGhkcmF3L3tpZH0nLCAvLyBSb2xsYmFjayB3aXRoZHJhdyBjcnlwcm9cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncGF0Y2gnOiBbXG4gICAgICAgICAgICAgICAgJ29yZGVyL3tjbGllbnRPcmRlcklkfScsIC8vIENhbmNlbCBSZXBsYWNlIG9yZGVyXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0U3ltYm9sICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbaV07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ2lkJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnYmFzZUN1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBtYXJrZXRbJ3F1b3RlQ3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBsb3QgPSBtYXJrZXRbJ3F1YW50aXR5SW5jcmVtZW50J107XG4gICAgICAgICAgICBsZXQgc3RlcCA9IG1hcmtldFsndGlja1NpemUnXTtcbiAgICAgICAgICAgIGJhc2UgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAoYmFzZSk7XG4gICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnbG90JzogbG90LFxuICAgICAgICAgICAgICAgICdzdGVwJzogc3RlcCxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QWNjb3VudEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCBiYWxhbmNlcy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tiXTtcbiAgICAgICAgICAgIGxldCBjb2RlID0gYmFsYW5jZVsnY3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChjb2RlKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnYXZhaWxhYmxlJ10pLFxuICAgICAgICAgICAgICAgICd1c2VkJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsncmVzZXJ2ZWQnXSksXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogMC4wLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0T3JkZXJib29rU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB1bmRlZmluZWQsICdiaWQnLCAnYXNrJywgJ3ByaWNlJywgJ3NpemUnKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodGlja2VyWyd0aW1lc3RhbXAnXSk7XG4gICAgICAgIGxldCBoaWdoID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ2hpZ2gnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ2hpZ2gnXSlcbiAgICAgICAgICAgICAgICBoaWdoID0gcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pO1xuICAgICAgICBsZXQgbG93ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ2xvdycgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnbG93J10pXG4gICAgICAgICAgICAgICAgbG93ID0gcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSk7XG4gICAgICAgIGxldCBvcGVuID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ29wZW4nIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ29wZW4nXSlcbiAgICAgICAgICAgICAgICBvcGVuID0gcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pO1xuICAgICAgICBsZXQgY2xvc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnY2xvc2UnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ2Nsb3NlJ10pXG4gICAgICAgICAgICAgICAgY2xvc2UgPSBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Nsb3NlJ10pO1xuICAgICAgICBsZXQgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdsYXN0JyBpbiB0aWNrZXIpXG4gICAgICAgICAgICBpZiAodGlja2VyWydsYXN0J10pXG4gICAgICAgICAgICAgICAgbGFzdCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKTtcbiAgICAgICAgbGV0IGJpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdiaWQnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ2JpZCddKVxuICAgICAgICAgICAgICAgIGJpZCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pO1xuICAgICAgICBsZXQgYXNrID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ2FzaycgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnYXNrJ10pXG4gICAgICAgICAgICAgICAgYXNrID0gcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBoaWdoLFxuICAgICAgICAgICAgJ2xvdyc6IGxvdyxcbiAgICAgICAgICAgICdiaWQnOiBiaWQsXG4gICAgICAgICAgICAnYXNrJzogYXNrLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IG9wZW4sXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IGxhc3QsXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZVF1b3RlJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpXTtcbiAgICAgICAgICAgIGxldCBpZCA9IHRpY2tlclsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlclN5bWJvbCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICgnbWVzc2FnZScgaW4gdGlja2VyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aWNrZXJbJ21lc3NhZ2UnXSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMucGFyc2U4NjAxICh0cmFkZVsndGltZXN0YW1wJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydzaWRlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ3F1YW50aXR5J10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgY2xpZW50T3JkZXJJZCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBhbW91bnQgPSBwYXJzZUZsb2F0IChhbW91bnQpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY2xpZW50T3JkZXJJZCc6IGNsaWVudE9yZGVySWQudG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3F1YW50aXR5JzogYW1vdW50LnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3R5cGUnOiB0eXBlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKSB7XG4gICAgICAgICAgICBwcmljZSA9IHBhcnNlRmxvYXQgKHByaWNlKTtcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gJyUuMTBmJy5zcHJpbnRmIChwcmljZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdE9yZGVyICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydjbGllbnRPcmRlcklkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZURlbGV0ZU9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2NsaWVudE9yZGVySWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHdpdGhkcmF3IChjdXJyZW5jeSwgYW1vdW50LCBhZGRyZXNzLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBhbW91bnQgPSBwYXJzZUZsb2F0IChhbW91bnQpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0QWNjb3VudENyeXB0b1dpdGhkcmF3ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogY3VycmVuY3ksXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ2FkZHJlc3MnOiBhZGRyZXNzLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gJy9hcGknICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSBhcGkgKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgKz0gdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpICsgJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgIT0gJ0dFVCcpXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBsZXQgcGF5bG9hZCA9IHRoaXMuZW5jb2RlICh0aGlzLmFwaUtleSArICc6JyArIHRoaXMuc2VjcmV0KTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gdGhpcy5zdHJpbmdUb0Jhc2U2NCAocGF5bG9hZCk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogXCJCYXNpYyBcIiArIHRoaXMuZGVjb2RlIChhdXRoKSxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgdXJsO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnZXJyb3InIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgaHVvYmkgPSB7XG5cbiAgICAnaWQnOiAnaHVvYmknLFxuICAgICduYW1lJzogJ0h1b2JpJyxcbiAgICAnY291bnRyaWVzJzogJ0NOJyxcbiAgICAncmF0ZUxpbWl0JzogMjAwMCxcbiAgICAndmVyc2lvbic6ICd2MycsXG4gICAgJ2hhc0ZldGNoT0hMQ1YnOiB0cnVlLFxuICAgICd0aW1lZnJhbWVzJzoge1xuICAgICAgICAnMW0nOiAnMDAxJyxcbiAgICAgICAgJzVtJzogJzAwNScsXG4gICAgICAgICcxNW0nOiAnMDE1JyxcbiAgICAgICAgJzMwbSc6ICcwMzAnLFxuICAgICAgICAnMWgnOiAnMDYwJyxcbiAgICAgICAgJzFkJzogJzEwMCcsXG4gICAgICAgICcxdyc6ICcyMDAnLFxuICAgICAgICAnMU0nOiAnMzAwJyxcbiAgICAgICAgJzF5JzogJzQwMCcsXG4gICAgfSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjU2OS0xNWFhN2I5YS01ZWRkLTExZTctOWU3Zi00NDc5MWY0ZWU0OWMuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwOi8vYXBpLmh1b2JpLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuaHVvYmkuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2dpdGh1Yi5jb20vaHVvYmlhcGkvQVBJX0RvY3NfZW4vd2lraScsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAnc3RhdGljbWFya2V0Jzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAne2lkfV9rbGluZV97cGVyaW9kfScsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcl97aWR9JyxcbiAgICAgICAgICAgICAgICAnZGVwdGhfe2lkfScsXG4gICAgICAgICAgICAgICAgJ2RlcHRoX3tpZH1fe2xlbmd0aH0nLFxuICAgICAgICAgICAgICAgICdkZXRhaWxfe2lkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAndXNkbWFya2V0Jzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAne2lkfV9rbGluZV97cGVyaW9kfScsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcl97aWR9JyxcbiAgICAgICAgICAgICAgICAnZGVwdGhfe2lkfScsXG4gICAgICAgICAgICAgICAgJ2RlcHRoX3tpZH1fe2xlbmd0aH0nLFxuICAgICAgICAgICAgICAgICdkZXRhaWxfe2lkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAndHJhZGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnZ2V0X2FjY291bnRfaW5mbycsXG4gICAgICAgICAgICAgICAgJ2dldF9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdvcmRlcl9pbmZvJyxcbiAgICAgICAgICAgICAgICAnYnV5JyxcbiAgICAgICAgICAgICAgICAnc2VsbCcsXG4gICAgICAgICAgICAgICAgJ2J1eV9tYXJrZXQnLFxuICAgICAgICAgICAgICAgICdzZWxsX21hcmtldCcsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2dldF9uZXdfZGVhbF9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdnZXRfb3JkZXJfaWRfYnlfdHJhZGVfaWQnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd19jb2luJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsX3dpdGhkcmF3X2NvaW4nLFxuICAgICAgICAgICAgICAgICdnZXRfd2l0aGRyYXdfY29pbl9yZXN1bHQnLFxuICAgICAgICAgICAgICAgICd0cmFuc2ZlcicsXG4gICAgICAgICAgICAgICAgJ2xvYW4nLFxuICAgICAgICAgICAgICAgICdyZXBheW1lbnQnLFxuICAgICAgICAgICAgICAgICdnZXRfbG9hbl9hdmFpbGFibGUnLFxuICAgICAgICAgICAgICAgICdnZXRfbG9hbnMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL0NOWSc6IHsgJ2lkJzogJ2J0YycsICdzeW1ib2wnOiAnQlRDL0NOWScsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDTlknLCAndHlwZSc6ICdzdGF0aWNtYXJrZXQnLCAnY29pblR5cGUnOiAxIH0sXG4gICAgICAgICdMVEMvQ05ZJzogeyAnaWQnOiAnbHRjJywgJ3N5bWJvbCc6ICdMVEMvQ05ZJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0NOWScsICd0eXBlJzogJ3N0YXRpY21hcmtldCcsICdjb2luVHlwZSc6IDIgfSxcbiAgICAgICAgJ0JUQy9VU0QnOiB7ICdpZCc6ICdidGMnLCAnc3ltYm9sJzogJ0JUQy9VU0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnVVNEJywgJ3R5cGUnOiAndXNkbWFya2V0JywgICAgJ2NvaW5UeXBlJzogMSB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMudHJhZGVQb3N0R2V0QWNjb3VudEluZm8gKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgbGV0IGF2YWlsYWJsZSA9ICdhdmFpbGFibGVfJyArIGxvd2VyY2FzZSArICdfZGlzcGxheSc7XG4gICAgICAgICAgICBsZXQgZnJvemVuID0gJ2Zyb3plbl8nICsgbG93ZXJjYXNlICsgJ19kaXNwbGF5JztcbiAgICAgICAgICAgIGxldCBsb2FuID0gJ2xvYW5fJyArIGxvd2VyY2FzZSArICdfZGlzcGxheSc7XG4gICAgICAgICAgICBpZiAoYXZhaWxhYmxlIGluIGJhbGFuY2VzKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VzW2F2YWlsYWJsZV0pO1xuICAgICAgICAgICAgaWYgKGZyb3plbiBpbiBiYWxhbmNlcylcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlc1tmcm96ZW5dKTtcbiAgICAgICAgICAgIGlmIChsb2FuIGluIGJhbGFuY2VzKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHRoaXMuc3VtIChhY2NvdW50Wyd1c2VkJ10sIHBhcnNlRmxvYXQgKGJhbGFuY2VzW2xvYW5dKSk7XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9IG1hcmtldFsndHlwZSddICsgJ0dldERlcHRoSWQnO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAoeyAnaWQnOiBtYXJrZXRbJ2lkJ10gfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9IG1hcmtldFsndHlwZSddICsgJ0dldFRpY2tlcklkJztcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdICh7ICdpZCc6IG1hcmtldFsnaWQnXSB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWyd0aWNrZXInXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50IChyZXNwb25zZVsndGltZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHBhcnNlRmxvYXQgKHRpY2tlclsnb3BlbiddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWyd0cyddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydkaXJlY3Rpb24nXSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgbWV0aG9kID0gbWFya2V0Wyd0eXBlJ10gKyAnR2V0RGV0YWlsSWQnO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kICh7IFxuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlWyd0cmFkZXMnXSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VPSExDViAob2hsY3YsIG1hcmtldCA9IHVuZGVmaW5lZCwgdGltZWZyYW1lID0gJzFtJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIG5vdCBpbXBsZW1lbnRlZCB5ZXRcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9obGN2WzBdLFxuICAgICAgICAgICAgb2hsY3ZbMV0sXG4gICAgICAgICAgICBvaGxjdlsyXSxcbiAgICAgICAgICAgIG9obGN2WzNdLFxuICAgICAgICAgICAgb2hsY3ZbNF0sXG4gICAgICAgICAgICBvaGxjdls2XSxcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9IG1hcmtldFsndHlwZSddICsgJ0dldElkS2xpbmVQZXJpb2QnO1xuICAgICAgICBsZXQgb2hsY3ZzID0gYXdhaXQgdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3BlcmlvZCc6IHRoaXMudGltZWZyYW1lc1t0aW1lZnJhbWVdLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIG9obGN2cztcbiAgICAgICAgLy8gcmV0dXJuIHRoaXMucGFyc2VPSExDVnMgKG1hcmtldCwgb2hsY3ZzLCB0aW1lZnJhbWUsIHNpbmNlLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICd0cmFkZVBvc3QnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKTtcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ2NvaW5fdHlwZSc6IG1hcmtldFsnY29pblR5cGUnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAnbWFya2V0JzogbWFya2V0WydxdW90ZSddLnRvTG93ZXJDYXNlICgpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKVxuICAgICAgICAgICAgb3JkZXJbJ3ByaWNlJ10gPSBwcmljZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbWV0aG9kICs9IHRoaXMuY2FwaXRhbGl6ZSAodHlwZSk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYWRlUG9zdENhbmNlbE9yZGVyICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAndHJhZGUnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ107XG4gICAgICAgIGlmIChhcGkgPT0gJ3RyYWRlJykge1xuICAgICAgICAgICAgdXJsICs9ICcvYXBpJyArIHRoaXMudmVyc2lvbjtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMua2V5c29ydCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbWV0aG9kJzogcGF0aCxcbiAgICAgICAgICAgICAgICAnYWNjZXNzX2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdjcmVhdGVkJzogdGhpcy5ub25jZSAoKSxcbiAgICAgICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy51cmxlbmNvZGUgKHRoaXMub21pdCAocXVlcnksICdtYXJrZXQnKSk7XG4gICAgICAgICAgICAvLyBzZWNyZXQga2V5IG11c3QgYmUgYXQgdGhlIGVuZCBvZiBxdWVyeSB0byBiZSBzaWduZWRcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nICs9ICcmc2VjcmV0X2tleT0nICsgdGhpcy5zZWNyZXQ7XG4gICAgICAgICAgICBxdWVyeVsnc2lnbiddID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAocXVlcnlTdHJpbmcpKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIGFwaSArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKSArICdfanNvbi5qcyc7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ3N0YXR1cycgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ3N0YXR1cyddID09ICdlcnJvcicpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIGlmICgnY29kZScgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGl0Yml0ID0ge1xuXG4gICAgJ2lkJzogJ2l0Yml0JyxcbiAgICAnbmFtZSc6ICdpdEJpdCcsXG4gICAgJ2NvdW50cmllcyc6ICdVUycsXG4gICAgJ3JhdGVMaW1pdCc6IDIwMDAsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODIyMTU5LTY2MTUzNjIwLTYwYWQtMTFlNy04OWU3LTAwNWY2ZDdmM2RlMC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLml0Yml0LmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cuaXRiaXQuY29tJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL2FwaS5pdGJpdC5jb20vZG9jcycsXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cuaXRiaXQuY29tL2FwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnbWFya2V0cy97c3ltYm9sfS90aWNrZXInLFxuICAgICAgICAgICAgICAgICdtYXJrZXRzL3tzeW1ib2x9L29yZGVyX2Jvb2snLFxuICAgICAgICAgICAgICAgICdtYXJrZXRzL3tzeW1ib2x9L3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3dhbGxldHMnLFxuICAgICAgICAgICAgICAgICd3YWxsZXRzL3t3YWxsZXRJZH0nLFxuICAgICAgICAgICAgICAgICd3YWxsZXRzL3t3YWxsZXRJZH0vYmFsYW5jZXMve2N1cnJlbmN5Q29kZX0nLFxuICAgICAgICAgICAgICAgICd3YWxsZXRzL3t3YWxsZXRJZH0vZnVuZGluZ19oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnd2FsbGV0cy97d2FsbGV0SWR9L3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3dhbGxldHMve3dhbGxldElkfS9vcmRlcnMve2lkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3dhbGxldF90cmFuc2ZlcnMnLFxuICAgICAgICAgICAgICAgICd3YWxsZXRzJyxcbiAgICAgICAgICAgICAgICAnd2FsbGV0cy97d2FsbGV0SWR9L2NyeXB0b2N1cnJlbmN5X2RlcG9zaXRzJyxcbiAgICAgICAgICAgICAgICAnd2FsbGV0cy97d2FsbGV0SWR9L2NyeXB0b2N1cnJlbmN5X3dpdGhkcmF3YWxzJyxcbiAgICAgICAgICAgICAgICAnd2FsbGV0cy97d2FsbGV0SWR9L29yZGVycycsXG4gICAgICAgICAgICAgICAgJ3dpcmVfd2l0aGRyYXdhbCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICAgICAnd2FsbGV0cy97d2FsbGV0SWR9L29yZGVycy97aWR9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9VU0QnOiB7ICdpZCc6ICdYQlRVU0QnLCAnc3ltYm9sJzogJ0JUQy9VU0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnVVNEJyB9LFxuICAgICAgICAnQlRDL1NHRCc6IHsgJ2lkJzogJ1hCVFNHRCcsICdzeW1ib2wnOiAnQlRDL1NHRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdTR0QnIH0sXG4gICAgICAgICdCVEMvRVVSJzogeyAnaWQnOiAnWEJURVVSJywgJ3N5bWJvbCc6ICdCVEMvRVVSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0VVUicgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0c1N5bWJvbE9yZGVyQm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0c1N5bWJvbFRpY2tlciAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKHRpY2tlclsnc2VydmVyVGltZVVUQyddKTtcbiAgICAgICAgbGV0IGJpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdiaWQnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ2JpZCddKVxuICAgICAgICAgICAgICAgIGJpZCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pO1xuICAgICAgICBpZiAoJ2FzaycgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnYXNrJ10pXG4gICAgICAgICAgICAgICAgYXNrID0gcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gyNGgnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cyNGgnXSksXG4gICAgICAgICAgICAnYmlkJzogYmlkLFxuICAgICAgICAgICAgJ2Fzayc6IGFzayxcbiAgICAgICAgICAgICd2d2FwJzogcGFyc2VGbG9hdCAodGlja2VyWyd2d2FwMjRoJ10pLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29wZW5Ub2RheSddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0UHJpY2UnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUyNGgnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKHRyYWRlWyd0aW1lc3RhbXAnXSk7XG4gICAgICAgIGxldCBpZCA9IHRyYWRlWydtYXRjaE51bWJlciddLnRvU3RyaW5nICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgJ29yZGVyJzogaWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRzU3ltYm9sVHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsncmVjZW50VHJhZGVzJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydiYWxhbmNlcyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHJlc3BvbnNlIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBwYXJzZUZsb2F0IChiYWxhbmNlWydhdmFpbGFibGVCYWxhbmNlJ10pLFxuICAgICAgICAgICAgICAgICd1c2VkJzogMC4wLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ3RvdGFsQmFsYW5jZSddKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2NvdW50Wyd1c2VkJ10gPSBhY2NvdW50Wyd0b3RhbCddIC0gYWNjb3VudFsnZnJlZSddO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgZmV0Y2hXYWxsZXRzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZUdldFdhbGxldHMgKCk7XG4gICAgfSxcblxuICAgIG5vbmNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZSA9PSAnbWFya2V0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBhbGxvd3MgbGltaXQgb3JkZXJzIG9ubHknKTtcbiAgICAgICAgYW1vdW50ID0gYW1vdW50LnRvU3RyaW5nICgpO1xuICAgICAgICBwcmljZSA9IHByaWNlLnRvU3RyaW5nICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZSxcbiAgICAgICAgICAgICdjdXJyZW5jeSc6IG1hcmtldFsnYmFzZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdkaXNwbGF5JzogYW1vdW50LFxuICAgICAgICAgICAgJ3ByaWNlJzogcHJpY2UsXG4gICAgICAgICAgICAnaW5zdHJ1bWVudCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFRyYWRlQWRkICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVEZWxldGVXYWxsZXRzV2FsbGV0SWRPcmRlcnNJZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocXVlcnkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGJvZHkgPSAnJztcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgdGltZXN0YW1wID0gbm9uY2U7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IFsgbWV0aG9kLCB1cmwsIGJvZHksIG5vbmNlLCB0aW1lc3RhbXAgXTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gbm9uY2UgKyB0aGlzLmpzb24gKGF1dGgpO1xuICAgICAgICAgICAgbGV0IGhhc2ggPSB0aGlzLmhhc2ggKHRoaXMuZW5jb2RlIChtZXNzYWdlKSwgJ3NoYTI1NicsICdiaW5hcnknKTtcbiAgICAgICAgICAgIGxldCBiaW5oYXNoID0gdGhpcy5iaW5hcnlDb25jYXQgKHVybCwgaGFzaCk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjIChiaW5oYXNoLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJywgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHNlbGYuYXBpS2V5ICsgJzonICsgc2lnbmF0dXJlLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ1gtQXV0aC1UaW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgJ1gtQXV0aC1Ob25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnY29kZScgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGp1YmkgPSB7XG5cbiAgICAnaWQnOiAnanViaScsXG4gICAgJ25hbWUnOiAnanViaS5jb20nLFxuICAgICdjb3VudHJpZXMnOiAnQ04nLFxuICAgICdyYXRlTGltaXQnOiAxNTAwLFxuICAgICd2ZXJzaW9uJzogJ3YxJyxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjU4MS05ZDM5N2Q5YS01ZWRkLTExZTctOGZiOS01ZDgyMzZjMGU2OTIuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5qdWJpLmNvbS9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3Lmp1YmkuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy5qdWJpLmNvbS9oZWxwL2FwaS5odG1sJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdkZXB0aCcsXG4gICAgICAgICAgICAgICAgJ29yZGVycycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ2FsbHRpY2tlcicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAndHJhZGVfYWRkJyxcbiAgICAgICAgICAgICAgICAndHJhZGVfY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAndHJhZGVfbGlzdCcsXG4gICAgICAgICAgICAgICAgJ3RyYWRlX3ZpZXcnLFxuICAgICAgICAgICAgICAgICd3YWxsZXQnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEFsbHRpY2tlciAoKTtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyAobWFya2V0cyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBrZXlzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBrZXlzW3BdO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBpZC50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9ICdDTlknO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIGJhc2UgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAoYmFzZSk7XG4gICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RCYWxhbmNlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgbG93ZXJjYXNlID0gY3VycmVuY3kudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlID09ICdkYXNoJylcbiAgICAgICAgICAgICAgICBsb3dlcmNhc2UgPSAnZHJrJztcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgbGV0IGZyZWUgPSBsb3dlcmNhc2UgKyAnX2JhbGFuY2UnO1xuICAgICAgICAgICAgbGV0IHVzZWQgPSBsb3dlcmNhc2UgKyAnX2xvY2snO1xuICAgICAgICAgICAgaWYgKGZyZWUgaW4gYmFsYW5jZXMpXG4gICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbZnJlZV0pO1xuICAgICAgICAgICAgaWYgKHVzZWQgaW4gYmFsYW5jZXMpXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbdXNlZF0pO1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXREZXB0aCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjb2luJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgICAgICByZXN1bHRbJ2Fza3MnXSA9IHRoaXMuc29ydEJ5IChyZXN1bHRbJ2Fza3MnXSwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEFsbHRpY2tlciAoKTtcbiAgICAgICAgbGV0IGlkcyA9IE9iamVjdC5rZXlzICh0aWNrZXJzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGlkID0gaWRzW2ldO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdjb2luJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKHRyYWRlWydkYXRlJ10pICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3R5cGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVycyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjb2luJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VHJhZGVBZGQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICAgICAgJ3ByaWNlJzogcHJpY2UsXG4gICAgICAgICAgICAndHlwZSc6IHNpZGUsXG4gICAgICAgICAgICAnY29pbic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVEZWxldGVXYWxsZXRzV2FsbGV0SWRPcmRlcnNJZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfSwgcGFyYW1zKTtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIGxldCBzZWNyZXQgPSB0aGlzLmhhc2ggKHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpO1xuICAgICAgICAgICAgcXVlcnlbJ3NpZ25hdHVyZSddID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAocmVxdWVzdCksIHRoaXMuZW5jb2RlIChzZWNyZXQpKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdyZXN1bHQnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZVsncmVzdWx0J10pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBrcmFrZW4gaXMgYWxzbyBvd25lciBvZiBleC4gQ29pbnNldHRlciAvIENhVmlydEV4IC8gQ2xldmVyY29pblxuXG52YXIga3Jha2VuID0ge1xuXG4gICAgJ2lkJzogJ2tyYWtlbicsXG4gICAgJ25hbWUnOiAnS3Jha2VuJyxcbiAgICAnY291bnRyaWVzJzogJ1VTJyxcbiAgICAndmVyc2lvbic6ICcwJyxcbiAgICAncmF0ZUxpbWl0JzogMTUwMCxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAnaGFzRmV0Y2hPSExDVic6IHRydWUsXG4gICAgJ3RpbWVmcmFtZXMnOiB7XG4gICAgICAgICcxbSc6ICcxJyxcbiAgICAgICAgJzVtJzogJzUnLFxuICAgICAgICAnMTVtJzogJzE1JyxcbiAgICAgICAgJzMwbSc6ICczMCcsXG4gICAgICAgICcxaCc6ICc2MCcsXG4gICAgICAgICc0aCc6ICcyNDAnLFxuICAgICAgICAnMWQnOiAnMTQ0MCcsXG4gICAgICAgICcxdyc6ICcxMDA4MCcsXG4gICAgICAgICcydyc6ICcyMTYwMCcsXG4gICAgfSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjU5OS0yMjcwOTMwNC01ZWRlLTExZTctOWRlMS05ZjMzNzMyZTE1MDkuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5rcmFrZW4uY29tJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5rcmFrZW4uY29tJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL3d3dy5rcmFrZW4uY29tL2VuLXVzL2hlbHAvYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vbm90aGluZ2lzZGVhZC9ucG0ta3Jha2VuLWFwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnQXNzZXRzJyxcbiAgICAgICAgICAgICAgICAnQXNzZXRQYWlycycsXG4gICAgICAgICAgICAgICAgJ0RlcHRoJyxcbiAgICAgICAgICAgICAgICAnT0hMQycsXG4gICAgICAgICAgICAgICAgJ1NwcmVhZCcsXG4gICAgICAgICAgICAgICAgJ1RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ1RpbWUnLFxuICAgICAgICAgICAgICAgICdUcmFkZXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQWRkT3JkZXInLFxuICAgICAgICAgICAgICAgICdCYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnQ2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdDbG9zZWRPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdEZXBvc2l0QWRkcmVzc2VzJyxcbiAgICAgICAgICAgICAgICAnRGVwb3NpdE1ldGhvZHMnLFxuICAgICAgICAgICAgICAgICdEZXBvc2l0U3RhdHVzJyxcbiAgICAgICAgICAgICAgICAnTGVkZ2VycycsXG4gICAgICAgICAgICAgICAgJ09wZW5PcmRlcnMnLFxuICAgICAgICAgICAgICAgICdPcGVuUG9zaXRpb25zJyxcbiAgICAgICAgICAgICAgICAnUXVlcnlMZWRnZXJzJyxcbiAgICAgICAgICAgICAgICAnUXVlcnlPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdRdWVyeVRyYWRlcycsXG4gICAgICAgICAgICAgICAgJ1RyYWRlQmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ1RyYWRlc0hpc3RvcnknLFxuICAgICAgICAgICAgICAgICdUcmFkZVZvbHVtZScsXG4gICAgICAgICAgICAgICAgJ1dpdGhkcmF3JyxcbiAgICAgICAgICAgICAgICAnV2l0aGRyYXdDYW5jZWwnLFxuICAgICAgICAgICAgICAgICdXaXRoZHJhd0luZm8nLFxuICAgICAgICAgICAgICAgICdXaXRoZHJhd1N0YXR1cycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0QXNzZXRQYWlycyAoKTtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyAobWFya2V0c1sncmVzdWx0J10pO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwga2V5cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IGlkID0ga2V5c1twXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzWydyZXN1bHQnXVtpZF07XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnYmFzZSddO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gbWFya2V0WydxdW90ZSddO1xuICAgICAgICAgICAgaWYgKChiYXNlWzBdID09ICdYJykgfHwgKGJhc2VbMF0gPT0gJ1onKSlcbiAgICAgICAgICAgICAgICBiYXNlID0gYmFzZS5zbGljZSAoMSk7XG4gICAgICAgICAgICBpZiAoKHF1b3RlWzBdID09ICdYJykgfHwgKHF1b3RlWzBdID09ICdaJykpXG4gICAgICAgICAgICAgICAgcXVvdGUgPSBxdW90ZS5zbGljZSAoMSk7XG4gICAgICAgICAgICBiYXNlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGJhc2UpO1xuICAgICAgICAgICAgcXVvdGUgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAocXVvdGUpO1xuICAgICAgICAgICAgbGV0IGRhcmtwb29sID0gaWQuaW5kZXhPZiAoJy5kJykgPj0gMDtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBkYXJrcG9vbCA/IG1hcmtldFsnYWx0bmFtZSddIDogKGJhc2UgKyAnLycgKyBxdW90ZSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdkYXJrcG9vbCc6IGRhcmtwb29sLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGRhcmtwb29sID0gc3ltYm9sLmluZGV4T2YgKCcuZCcpID49IDA7XG4gICAgICAgIGlmIChkYXJrcG9vbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBkb2VzIG5vdCBwcm92aWRlIGFuIG9yZGVyIGJvb2sgZm9yIGRhcmtwb29sIHN5bWJvbCAnICsgc3ltYm9sKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldERlcHRoICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gcmVzcG9uc2VbJ3Jlc3VsdCddW21hcmtldFsnaWQnXV07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoJ11bMV0pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbCddWzFdKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2InXVswXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhJ11bMF0pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3AnXVsxXSksXG4gICAgICAgICAgICAnb3Blbic6IHBhcnNlRmxvYXQgKHRpY2tlclsnbyddKSxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydjJ11bMF0pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndiddWzFdKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlcnMgKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcGFpcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCB0aGlzLnN5bWJvbHMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSB0aGlzLnN5bWJvbHNbc107XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzW3N5bWJvbF07XG4gICAgICAgICAgICBpZiAoIW1hcmtldFsnZGFya3Bvb2wnXSlcbiAgICAgICAgICAgICAgICBwYWlycy5wdXNoIChtYXJrZXRbJ2lkJ10pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmaWx0ZXIgPSBwYWlycy5qb2luICgnLCcpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoe1xuICAgICAgICAgICAgJ3BhaXInOiBmaWx0ZXIsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdGlja2VycyA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgbGV0IGlkcyA9IE9iamVjdC5rZXlzICh0aWNrZXJzKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGlkID0gaWRzW2ldO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGRhcmtwb29sID0gc3ltYm9sLmluZGV4T2YgKCcuZCcpID49IDA7XG4gICAgICAgIGlmIChkYXJrcG9vbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBkb2VzIG5vdCBwcm92aWRlIGEgdGlja2VyIGZvciBkYXJrcG9vbCBzeW1ib2wgJyArIHN5bWJvbCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdwYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWydyZXN1bHQnXVttYXJrZXRbJ2lkJ11dO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZU9ITENWIChvaGxjdiwgbWFya2V0ID0gdW5kZWZpbmVkLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG9obGN2WzBdICogMTAwMCxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WzFdKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WzJdKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WzNdKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WzRdKSxcbiAgICAgICAgICAgIHBhcnNlRmxvYXQgKG9obGN2WzZdKSxcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPSExDICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnaW50ZXJ2YWwnOiB0aGlzLnRpbWVmcmFtZXNbdGltZWZyYW1lXSxcbiAgICAgICAgICAgICdzaW5jZSc6IHNpbmNlLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IG9obGN2cyA9IHJlc3BvbnNlWydyZXN1bHQnXVttYXJrZXRbJ2lkJ11dO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9ITENWcyAob2hsY3ZzLCBtYXJrZXQsIHRpbWVmcmFtZSwgc2luY2UsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKHRyYWRlWzJdICogMTAwMCk7XG4gICAgICAgIGxldCBzaWRlID0gKHRyYWRlWzNdID09ICdzJykgPyAnc2VsbCcgOiAnYnV5JztcbiAgICAgICAgbGV0IHR5cGUgPSAodHJhZGVbNF0gPT0gJ2wnKSA/ICdsaW1pdCcgOiAnbWFya2V0JztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHR5cGUsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVswXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbMV0pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBpZCA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcic6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHRyYWRlcyA9IHJlc3BvbnNlWydyZXN1bHQnXVtpZF07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzICh0cmFkZXMsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBsZXQgY3VycmVuY2llcyA9IE9iamVjdC5rZXlzIChiYWxhbmNlcyk7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBjb2RlID0gY3VycmVuY3k7XG4gICAgICAgICAgICAvLyBYLUlTTzQyMTctQTMgc3RhbmRhcmQgY3VycmVuY3kgY29kZXNcbiAgICAgICAgICAgIGlmIChjb2RlWzBdID09ICdYJykge1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnNsaWNlICgxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZVswXSA9PSAnWicpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZS5zbGljZSAoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGNvZGUpO1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBwYXJzZUZsb2F0IChiYWxhbmNlc1tjdXJyZW5jeV0pO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogMC4wLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2NvZGVdID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAncGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAndHlwZSc6IHNpZGUsXG4gICAgICAgICAgICAnb3JkZXJ0eXBlJzogdHlwZSxcbiAgICAgICAgICAgICd2b2x1bWUnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0QWRkT3JkZXIgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBsZW5ndGggPSByZXNwb25zZVsncmVzdWx0J11bJ3R4aWQnXS5sZW5ndGg7XG4gICAgICAgIGxldCBpZCA9IChsZW5ndGggPiAxKSA/IHJlc3BvbnNlWydyZXN1bHQnXVsndHhpZCddIDogcmVzcG9uc2VbJ3Jlc3VsdCddWyd0eGlkJ11bMF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT3JkZXIgKG9yZGVyLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gb3JkZXJbJ2Rlc2NyJ107XG4gICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtkZXNjcmlwdGlvblsncGFpciddXTtcbiAgICAgICAgbGV0IHNpZGUgPSBkZXNjcmlwdGlvblsndHlwZSddO1xuICAgICAgICBsZXQgdHlwZSA9IGRlc2NyaXB0aW9uWydvcmRlcnR5cGUnXTtcbiAgICAgICAgbGV0IHN5bWJvbCA9IChtYXJrZXQpID8gbWFya2V0WydzeW1ib2wnXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IG9yZGVyWydvcGVudG0nXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiBvcmRlclsncmVmaWQnXSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3RhdHVzJzogb3JkZXJbJ3N0YXR1cyddLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZSxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IG9yZGVyWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IG9yZGVyWyd2b2wnXSxcbiAgICAgICAgICAgIC8vICd0cmFkZXMnOiB0aGlzLnBhcnNlVHJhZGVzIChvcmRlclsndHJhZGVzJ10sIG1hcmtldCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT3JkZXJzIChvcmRlcnMsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAob3JkZXJzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBvcmRlciA9IHRoaXMucGFyc2VPcmRlciAob3JkZXJzW2lkXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RRdWVyeU9yZGVycyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICd0cmFkZXMnOiB0cnVlLCAvLyB3aGV0aGVyIG9yIG5vdCB0byBpbmNsdWRlIHRyYWRlcyBpbiBvdXRwdXQgKG9wdGlvbmFsLCBkZWZhdWx0IGZhbHNlKVxuICAgICAgICAgICAgJ3R4aWQnOiBpZCwgLy8gY29tbWEgZGVsaW1pdGVkIGxpc3Qgb2YgdHJhbnNhY3Rpb24gaWRzIHRvIHF1ZXJ5IGluZm8gYWJvdXQgKDIwIG1heGltdW0pXG4gICAgICAgICAgICAvLyAndXNlcnJlZic6ICdvcHRpb25hbCcsIC8vIHJlc3RyaWN0IHJlc3VsdHMgdG8gZ2l2ZW4gdXNlciByZWZlcmVuY2UgaWQgKG9wdGlvbmFsKVxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IG9yZGVycyA9IHJlc3BvbnNlWydyZXN1bHQnXTtcbiAgICAgICAgbGV0IG9yZGVyID0gdGhpcy5wYXJzZU9yZGVyIChvcmRlcnNbaWRdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kICh7ICdpbmZvJzogcmVzcG9uc2UgfSwgb3JkZXIpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxPcmRlciAoeyAndHhpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyB3aXRoZHJhdyAoY3VycmVuY3ksIGFtb3VudCwgYWRkcmVzcywgcGFyYW1zID0ge30pIHtcbiAgICAgICAgaWYgKCdrZXknIGluIHBhcmFtcykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RXaXRoZHJhdyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnYXNzZXQnOiBjdXJyZW5jeSxcbiAgICAgICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICAgICAgICAgIC8vICdhZGRyZXNzJzogYWRkcmVzcywgLy8gdGhleSBkb24ndCBhbGxvdyB3aXRoZHJhd2FscyB0byBkaXJlY3QgYWRkcmVzc2VzXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAnaWQnOiByZXNwb25zZVsncmVzdWx0J10sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgXCIgd2l0aGRyYXcgcmVxdWlyZXMgYSAna2V5JyBwYXJhbWV0ZXIgKHdpdGhkcmF3YWwga2V5IG5hbWUsIGFzIHNldCB1cCBvbiB5b3VyIGFjY291bnQpXCIpO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyBhcGkgKyAnLycgKyBwYXRoO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7ICdub25jZSc6IG5vbmNlIH0sIHBhcmFtcykpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSB0aGlzLmVuY29kZSAobm9uY2UgKyBib2R5KTtcbiAgICAgICAgICAgIGxldCBoYXNoID0gdGhpcy5oYXNoIChhdXRoLCAnc2hhMjU2JywgJ2JpbmFyeScpO1xuICAgICAgICAgICAgbGV0IGJpbmFyeSA9IHRoaXMuc3RyaW5nVG9CaW5hcnkgKHRoaXMuZW5jb2RlICh1cmwpKTtcbiAgICAgICAgICAgIGxldCBiaW5oYXNoID0gdGhpcy5iaW5hcnlDb25jYXQgKGJpbmFyeSwgaGFzaCk7XG4gICAgICAgICAgICBsZXQgc2VjcmV0ID0gdGhpcy5iYXNlNjRUb0JpbmFyeSAodGhpcy5zZWNyZXQpO1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAoYmluaGFzaCwgc2VjcmV0LCAnc2hhNTEyJywgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQVBJLUtleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdBUEktU2lnbic6IHRoaXMuZGVjb2RlIChzaWduYXR1cmUpLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdXJsID0gdGhpcy51cmxzWydhcGknXSArIHVybDtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgbGV0IG51bUVycm9ycyA9IHJlc3BvbnNlWydlcnJvciddLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChudW1FcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGxha2VidGMgPSB7XG5cbiAgICAnaWQnOiAnbGFrZWJ0YycsXG4gICAgJ25hbWUnOiAnTGFrZUJUQycsXG4gICAgJ2NvdW50cmllcyc6ICdVUycsXG4gICAgJ3ZlcnNpb24nOiAnYXBpX3YyJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yODA3NDEyMC03MmI3YzM4YS02NjYwLTExZTctOTJkOS1kOTAyNzUwMjI4MWQuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5sYWtlYnRjLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cubGFrZWJ0Yy5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmxha2VidGMuY29tL3MvYXBpX3YyJyxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5sYWtlYnRjLmNvbS9zL2FwaScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYmNvcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICdiY3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdidXlPcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldEFjY291bnRJbmZvJyxcbiAgICAgICAgICAgICAgICAnZ2V0RXh0ZXJuYWxBY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2dldE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldFRyYWRlcycsXG4gICAgICAgICAgICAgICAgJ29wZW5PcmRlcnMnLFxuICAgICAgICAgICAgICAgICdzZWxsT3JkZXInLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChtYXJrZXRzKTtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBrZXlzW2tdO1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbaWRdO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBpZC5zbGljZSAoMCwgMyk7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBpZC5zbGljZSAoMywgNik7XG4gICAgICAgICAgICBiYXNlID0gYmFzZS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIHF1b3RlID0gcXVvdGUudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdldEFjY291bnRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsnYmFsYW5jZSddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHJlc3BvbnNlIH07XG4gICAgICAgIGxldCBjdXJyZW5jaWVzID0gT2JqZWN0LmtleXMgKGJhbGFuY2VzKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBjdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBjdXJyZW5jaWVzW2NdO1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBwYXJzZUZsb2F0IChiYWxhbmNlc1tjdXJyZW5jeV0pO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogMC4wLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0QmNvcmRlcmJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2spO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW21hcmtldFsnaWQnXV07XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IHZvbHVtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCd2b2x1bWUnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ3ZvbHVtZSddKVxuICAgICAgICAgICAgICAgIHZvbHVtZSA9IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHZvbHVtZSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsnZGF0ZSddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWydhbW91bnQnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRCY3RyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChtYXJrZXQsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSkgKyAnT3JkZXInO1xuICAgICAgICBsZXQgbWFya2V0SWQgPSB0aGlzLm1hcmtldElkIChtYXJrZXQpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAncGFyYW1zJzogWyBwcmljZSwgYW1vdW50LCBtYXJrZXRJZCBdLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh7ICdwYXJhbXMnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbjtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgdXJsICs9ICcvJyArIHBhdGg7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcy5qb2luICgnLCcpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHBhcmFtcyA9ICcnO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy51cmxlbmNvZGUgKHtcbiAgICAgICAgICAgICAgICAndG9uY2UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnYWNjZXNza2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ3JlcXVlc3RtZXRob2QnOiBtZXRob2QudG9Mb3dlckNhc2UgKCksXG4gICAgICAgICAgICAgICAgJ2lkJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHBhdGgsXG4gICAgICAgICAgICAgICAgJ3BhcmFtcyc6IHBhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAoe1xuICAgICAgICAgICAgICAgICdtZXRob2QnOiBwYXRoLFxuICAgICAgICAgICAgICAgICdwYXJhbXMnOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgJ2lkJzogbm9uY2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChxdWVyeSksIHRoaXMuc2VjcmV0LCAnc2hhMScsICdiYXNlNjQnKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0pzb24tUnBjLVRvbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBcIkJhc2ljIFwiICsgdGhpcy5hcGlLZXkgKyAnOicgKyBzaWduYXR1cmUsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgbGl2ZWNvaW4gPSB7XG5cbiAgICAnaWQnOiAnbGl2ZWNvaW4nLFxuICAgICduYW1lJzogJ0xpdmVDb2luJyxcbiAgICAnY291bnRyaWVzJzogWyAnVVMnLCAnVUsnLCAnUlUnIF0sXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5ODA3NjgtZjIyZmM0MjQtNjM4YS0xMWU3LTg5YzktNjAxMGE1NGZmOWJlLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkubGl2ZWNvaW4ubmV0JyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5saXZlY29pbi5uZXQnLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3LmxpdmVjb2luLm5ldC9hcGk/bGFuZz1lbicsXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvYWxsL29yZGVyX2Jvb2snLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9sYXN0X3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL21heGJpZF9taW5hc2snLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9vcmRlcl9ib29rJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvcmVzdHJpY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvdGlja2VyJywgLy8gb21pdCBwYXJhbXMgdG8gZ2V0IGFsbCB0aWNrZXJzIGF0IG9uY2VcbiAgICAgICAgICAgICAgICAnaW5mby9jb2luSW5mbycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL2NsaWVudF9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL2NvbW1pc3Npb24nLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9jb21taXNzaW9uQ29tbW9uSW5mbycsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvYmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdwYXltZW50L2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdwYXltZW50L2dldC9hZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAncGF5bWVudC9oaXN0b3J5L3NpemUnLFxuICAgICAgICAgICAgICAgICdwYXltZW50L2hpc3RvcnkvdHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2UvYnV5bGltaXQnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9idXltYXJrZXQnLFxuICAgICAgICAgICAgICAgICdleGNoYW5nZS9jYW5jZWxsaW1pdCcsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL3NlbGxsaW1pdCcsXG4gICAgICAgICAgICAgICAgJ2V4Y2hhbmdlL3NlbGxtYXJrZXQnLFxuICAgICAgICAgICAgICAgICdwYXltZW50L291dC9jYXBpdGFsaXN0JyxcbiAgICAgICAgICAgICAgICAncGF5bWVudC9vdXQvY2FyZCcsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvb3V0L2NvaW4nLFxuICAgICAgICAgICAgICAgICdwYXltZW50L291dC9va3BheScsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvb3V0L3BheWVlcicsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvb3V0L3BlcmZlY3Rtb25leScsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvdm91Y2hlci9hbW91bnQnLFxuICAgICAgICAgICAgICAgICdwYXltZW50L3ZvdWNoZXIvbWFrZScsXG4gICAgICAgICAgICAgICAgJ3BheW1lbnQvdm91Y2hlci9yZWRlZW0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEV4Y2hhbmdlVGlja2VyICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgbWFya2V0cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbcF07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGlkO1xuICAgICAgICAgICAgbGV0IFsgYmFzZSwgcXVvdGUgXSA9IHN5bWJvbC5zcGxpdCAoJy8nKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldFBheW1lbnRCYWxhbmNlcyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IHRoaXMuY3VycmVuY2llcy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tiXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGJhbGFuY2VbJ2N1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiByZXN1bHQpXG4gICAgICAgICAgICAgICAgYWNjb3VudCA9IHJlc3VsdFtjdXJyZW5jeV07XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChiYWxhbmNlWyd0eXBlJ10gPT0gJ3RvdGFsJylcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsndmFsdWUnXSk7XG4gICAgICAgICAgICBpZiAoYmFsYW5jZVsndHlwZSddID09ICdhdmFpbGFibGUnKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ3ZhbHVlJ10pO1xuICAgICAgICAgICAgaWYgKGJhbGFuY2VbJ3R5cGUnXSA9PSAndHJhZGUnKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ3ZhbHVlJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VPcmRlckJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdncm91cEJ5UHJpY2UnOiAnZmFsc2UnLFxuICAgICAgICAgICAgJ2RlcHRoJzogMTAwLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IG9yZGVyYm9va1sndGltZXN0YW1wJ107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiZXN0X2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Jlc3RfYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3Z3YXAnXSksXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VUaWNrZXIgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gdGhpcy5pbmRleEJ5IChyZXNwb25zZSwgJ3N5bWJvbCcpO1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKHRpY2tlcnMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbaWRdO1xuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEV4Y2hhbmdlVGlja2VyICh7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ3RpbWUnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3R5cGUnXS50b0xvd2VyQ2FzZSAoKSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydxdWFudGl0eSddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RXhjaGFuZ2VMYXN0VHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5UGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwcml2YXRlUG9zdEV4Y2hhbmdlJyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSkgKyB0eXBlO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdxdWFudGl0eSc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ2xpbWl0JylcbiAgICAgICAgICAgIG9yZGVyWydwcmljZSddID0gcHJpY2U7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdEV4Y2hhbmdlQ2FuY2VsbGltaXQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJJZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocGFyYW1zKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMua2V5c29ydCAocGFyYW1zKSk7XG4gICAgICAgICAgICBpZiAobWV0aG9kID09ICdHRVQnKVxuICAgICAgICAgICAgICAgIGlmIChxdWVyeSlcbiAgICAgICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHF1ZXJ5O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGlmIChxdWVyeSlcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IHF1ZXJ5O1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKHF1ZXJ5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTI1NicpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQXBpLUtleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdTaWduJzogc2lnbmF0dXJlLnRvVXBwZXJDYXNlICgpLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ3N1Y2Nlc3MnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgbGlxdWkgPSBleHRlbmQgKGJ0Y2UsIHtcbiAgICAnaWQnOiAnbGlxdWknLFxuICAgICduYW1lJzogJ0xpcXVpJyxcbiAgICAnY291bnRyaWVzJzogJ1VBJyxcbiAgICAncmF0ZUxpbWl0JzogMTAwMCxcbiAgICAndmVyc2lvbic6ICczJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzk4MjAyMi03NWFlYTgyOC02M2EwLTExZTctOTUxMS1jYTU4NGE4ZWRkNzQuanBnJyxcbiAgICAgICAgJ2FwaSc6IHtcbiAgICAgICAgICAgICdwdWJsaWMnOiAnaHR0cHM6Ly9hcGkubGlxdWkuaW8vYXBpJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vYXBpLmxpcXVpLmlvL3RhcGknLFxuICAgICAgICB9LFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vbGlxdWkuaW8nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vbGlxdWkuaW8vYXBpJyxcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXVthcGldO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSAgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnbWV0aG9kJzogcGF0aCxcbiAgICAgICAgICAgIH0sIHF1ZXJ5KSk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYm9keSksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGE1MTInKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHNpZ25hdHVyZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ3N1Y2Nlc3MnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZVsnc3VjY2VzcyddKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn0pXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGx1bm8gPSB7XG5cbiAgICAnaWQnOiAnbHVubycsXG4gICAgJ25hbWUnOiAnbHVubycsXG4gICAgJ2NvdW50cmllcyc6IFsgJ0dCJywgJ1NHJywgJ1pBJyBdLFxuICAgICdyYXRlTGltaXQnOiAzMDAwLFxuICAgICd2ZXJzaW9uJzogJzEnLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2NjA3LThjMWE2OWQ4LTVlZGUtMTFlNy05MzBjLTU0MGI1ZWI5YmUyNC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLm15Yml0eC5jb20vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5sdW5vLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cubHVuby5jb20vZW4vYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL25wbWpzLm9yZy9wYWNrYWdlL2JpdHgnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9iYXVzbWVpZXIvbm9kZS1iaXR4JyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICd0aWNrZXInLFxuICAgICAgICAgICAgICAgICd0aWNrZXJzJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYWNjb3VudHMve2lkfS9wZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAnYWNjb3VudHMve2lkfS90cmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgICAgICdiYWxhbmNlJyxcbiAgICAgICAgICAgICAgICAnZmVlX2luZm8nLFxuICAgICAgICAgICAgICAgICdmdW5kaW5nX2FkZHJlc3MnLFxuICAgICAgICAgICAgICAgICdsaXN0b3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnbGlzdHRyYWRlcycsXG4gICAgICAgICAgICAgICAgJ29yZGVycy97aWR9JyxcbiAgICAgICAgICAgICAgICAncXVvdGVzL3tpZH0nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2FscycsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3YWxzL3tpZH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ3Bvc3RvcmRlcicsXG4gICAgICAgICAgICAgICAgJ21hcmtldG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnc3RvcG9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZnVuZGluZ19hZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdhbHMnLFxuICAgICAgICAgICAgICAgICdzZW5kJyxcbiAgICAgICAgICAgICAgICAncXVvdGVzJyxcbiAgICAgICAgICAgICAgICAnb2F1dGgyL2dyYW50JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncHV0JzogW1xuICAgICAgICAgICAgICAgICdxdW90ZXMve2lkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICAgICAncXVvdGVzL3tpZH0nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd2Fscy97aWR9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgbWFya2V0c1sndGlja2VycyddLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1sndGlja2VycyddW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydwYWlyJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IGlkLnNsaWNlICgwLCAzKTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IGlkLnNsaWNlICgzLCA2KTtcbiAgICAgICAgICAgIGJhc2UgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAoYmFzZSk7XG4gICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QmFsYW5jZSAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ2JhbGFuY2UnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiByZXNwb25zZSB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGJhbGFuY2VbJ2Fzc2V0J10pO1xuICAgICAgICAgICAgbGV0IHJlc2VydmVkID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsncmVzZXJ2ZWQnXSk7XG4gICAgICAgICAgICBsZXQgdW5jb25maXJtZWQgPSBwYXJzZUZsb2F0IChiYWxhbmNlWyd1bmNvbmZpcm1lZCddKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnYmFsYW5jZSddKSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IHRoaXMuc3VtIChyZXNlcnZlZCwgdW5jb25maXJtZWQpLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IDAuMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyYm9vayAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlyJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBvcmRlcmJvb2tbJ3RpbWVzdGFtcCddO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB0aW1lc3RhbXAsICdiaWRzJywgJ2Fza3MnLCAncHJpY2UnLCAndm9sdW1lJyk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGlja2VyWyd0aW1lc3RhbXAnXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsb3cnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3RfdHJhZGUnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydyb2xsaW5nXzI0X2hvdXJfdm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VycyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSB0aGlzLmluZGV4QnkgKHJlc3BvbnNlWyd0aWNrZXJzJ10sICdwYWlyJyk7XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyICh7XG4gICAgICAgICAgICAncGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHNpZGUgPSAodHJhZGVbJ2lzX2J1eSddKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0cmFkZVsndGltZXN0YW1wJ10sXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRyYWRlWyd0aW1lc3RhbXAnXSksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHBhcnNlRmxvYXQgKHRyYWRlWyd2b2x1bWUnXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAncGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVsndHJhZGVzJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChtYXJrZXQsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtZXRob2QgPSAncHJpdmF0ZVBvc3QnO1xuICAgICAgICBsZXQgb3JkZXIgPSB7ICdwYWlyJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbWFya2V0Jykge1xuICAgICAgICAgICAgbWV0aG9kICs9ICdNYXJrZXRvcmRlcic7XG4gICAgICAgICAgICBvcmRlclsndHlwZSddID0gc2lkZS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGlmIChzaWRlID09ICdidXknKVxuICAgICAgICAgICAgICAgIG9yZGVyWydjb3VudGVyX3ZvbHVtZSddID0gYW1vdW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9yZGVyWydiYXNlX3ZvbHVtZSddID0gYW1vdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWV0aG9kICs9ICdPcmRlcic7XG4gICAgICAgICAgICBvcmRlclsndm9sdW1lJ10gPSBhbW91bnQ7XG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICAgICAgaWYgKHNpZGUgPT0gJ2J1eScpXG4gICAgICAgICAgICAgICAgb3JkZXJbJ3R5cGUnXSA9ICdCSUQnO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9yZGVyWyd0eXBlJ10gPSAnQVNLJztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ29yZGVyX2lkJ10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdFN0b3BvcmRlciAoeyAnb3JkZXJfaWQnOiBpZCB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHJpdmF0ZScpIHtcbiAgICAgICAgICAgIGxldCBhdXRoID0gdGhpcy5lbmNvZGUgKHRoaXMuYXBpS2V5ICsgJzonICsgdGhpcy5zZWNyZXQpO1xuICAgICAgICAgICAgYXV0aCA9IHRoaXMuc3RyaW5nVG9CYXNlNjQgKGF1dGgpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIHRoaXMuZGVjb2RlIChhdXRoKSB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIG1lcmNhZG8gPSB7XG5cbiAgICAnaWQnOiAnbWVyY2FkbycsXG4gICAgJ25hbWUnOiAnTWVyY2FkbyBCaXRjb2luJyxcbiAgICAnY291bnRyaWVzJzogJ0JSJywgLy8gQnJhemlsXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3ZlcnNpb24nOiAndjMnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODM3MDYwLWU3YzU4NzE0LTYwZWEtMTFlNy05MTkyLWYwNWU4NmFkYjgzZi5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL3d3dy5tZXJjYWRvYml0Y29pbi5uZXQvYXBpJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vd3d3Lm1lcmNhZG9iaXRjb2luLm5ldC90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5tZXJjYWRvYml0Y29pbi5jb20uYnInLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lm1lcmNhZG9iaXRjb2luLmNvbS5ici9hcGktZG9jJyxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5tZXJjYWRvYml0Y29pbi5jb20uYnIvdHJhZGUtYXBpJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogWyAvLyBsYXN0IHNsYXNoIGNyaXRpY2FsXG4gICAgICAgICAgICAgICAgJ29yZGVyYm9vay8nLFxuICAgICAgICAgICAgICAgICdvcmRlcmJvb2tfbGl0ZWNvaW4vJyxcbiAgICAgICAgICAgICAgICAndGlja2VyLycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcl9saXRlY29pbi8nLFxuICAgICAgICAgICAgICAgICd0cmFkZXMvJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzX2xpdGVjb2luLycsXG4gICAgICAgICAgICAgICAgJ3YyL3RpY2tlci8nLFxuICAgICAgICAgICAgICAgICd2Mi90aWNrZXJfbGl0ZWNvaW4vJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2dldF9hY2NvdW50X2luZm8nLFxuICAgICAgICAgICAgICAgICdnZXRfb3JkZXInLFxuICAgICAgICAgICAgICAgICdnZXRfd2l0aGRyYXdhbCcsXG4gICAgICAgICAgICAgICAgJ2xpc3Rfc3lzdGVtX21lc3NhZ2VzJyxcbiAgICAgICAgICAgICAgICAnbGlzdF9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdsaXN0X29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ3BsYWNlX2J1eV9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ3BsYWNlX3NlbGxfb3JkZXInLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd19jb2luJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9CUkwnOiB7ICdpZCc6ICdCUkxCVEMnLCAnc3ltYm9sJzogJ0JUQy9CUkwnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnQlJMJywgJ3N1ZmZpeCc6ICcnIH0sXG4gICAgICAgICdMVEMvQlJMJzogeyAnaWQnOiAnQlJMTFRDJywgJ3N5bWJvbCc6ICdMVEMvQlJMJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0JSTCcsICdzdWZmaXgnOiAnTGl0ZWNvaW4nIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IG1ldGhvZCA9ICdwdWJsaWNHZXRPcmRlcmJvb2snICsgdGhpcy5jYXBpdGFsaXplIChtYXJrZXRbJ3N1ZmZpeCddKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXNbbWV0aG9kXSAocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3B1YmxpY0dldFYyVGlja2VyJyArIHRoaXMuY2FwaXRhbGl6ZSAobWFya2V0WydzdWZmaXgnXSk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAoKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHJlc3BvbnNlWyd0aWNrZXInXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0aWNrZXJbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYnV5J10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnc2VsbCddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsnZGF0ZSddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3R5cGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3B1YmxpY0dldFRyYWRlcycgKyB0aGlzLmNhcGl0YWxpemUgKG1hcmtldFsnc3VmZml4J10pO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0R2V0QWNjb3VudEluZm8gKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydiYWxhbmNlJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZSBpbiBiYWxhbmNlcykge1xuICAgICAgICAgICAgICAgIGFjY291bnRbJ2ZyZWUnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VzW2xvd2VyY2FzZV1bJ2F2YWlsYWJsZSddKTtcbiAgICAgICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gcGFyc2VGbG9hdCAoYmFsYW5jZXNbbG93ZXJjYXNlXVsndG90YWwnXSk7XG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0UGxhY2UnICsgdGhpcy5jYXBpdGFsaXplIChzaWRlKSArICdPcmRlcic7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdjb2luX3BhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3F1YW50aXR5JzogYW1vdW50LFxuICAgICAgICAgICAgJ2xpbWl0X3ByaWNlJzogcHJpY2UsXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsncmVzcG9uc2VfZGF0YSddWydvcmRlciddWydvcmRlcl9pZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJfaWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ11bYXBpXSArICcvJztcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgdXJsICs9IHBhdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgKz0gdGhpcy52ZXJzaW9uICsgJy8nO1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAndGFwaV9tZXRob2QnOiBwYXRoLFxuICAgICAgICAgICAgICAgICd0YXBpX25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gJy90YXBpLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyAnPycgKyBib2R5O1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ1RBUEktSUQnOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnVEFQSS1NQUMnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChhdXRoKSwgdGhpcy5zZWNyZXQsICdzaGE1MTInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yX21lc3NhZ2UnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPS0NvaW5cbi8vIENoaW5hXG4vLyBodHRwczovL3d3dy5va2NvaW4uY29tL1xuLy8gaHR0cHM6Ly93d3cub2tjb2luLmNvbS9yZXN0X2dldFN0YXJ0ZWQuaHRtbFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL09LQ29pbi93ZWJzb2NrZXRcbi8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29rY29pbi5jb21cbi8vIGh0dHBzOi8vd3d3Lm9rY29pbi5jblxuLy8gaHR0cHM6Ly93d3cub2tjb2luLmNuL3Jlc3RfZ2V0U3RhcnRlZC5odG1sXG5cbnZhciBva2NvaW4gPSB7XG5cbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsIC8vIHVwIHRvIDMwMDAgcmVxdWVzdHMgcGVyIDUgbWludXRlcyDiiYggNjAwIHJlcXVlc3RzIHBlciBtaW51dGUg4omIIDEwIHJlcXVlc3RzIHBlciBzZWNvbmQg4omIIDEwMCBtc1xuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFtJzogJzFtaW4nLFxuICAgICAgICAnM20nOiAnM21pbicsXG4gICAgICAgICc1bSc6ICc1bWluJyxcbiAgICAgICAgJzE1bSc6ICcxNW1pbicsXG4gICAgICAgICczMG0nOiAnMzBtaW4nLFxuICAgICAgICAnMWgnOiAnMWhvdXInLFxuICAgICAgICAnMmgnOiAnMmhvdXInLFxuICAgICAgICAnNGgnOiAnNGhvdXInLFxuICAgICAgICAnNmgnOiAnNmhvdXInLFxuICAgICAgICAnMTJoJzogJzEyaG91cicsXG4gICAgICAgICcxZCc6ICcxZGF5JyxcbiAgICAgICAgJzNkJzogJzNkYXknLFxuICAgICAgICAnMXcnOiAnMXdlZWsnLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2RlcHRoJyxcbiAgICAgICAgICAgICAgICAnZXhjaGFuZ2VfcmF0ZScsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV9kZXB0aCcsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV9lc3RpbWF0ZWRfcHJpY2UnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfaG9sZF9hbW91bnQnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfaW5kZXgnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfa2xpbmUnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfcHJpY2VfbGltaXQnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfdGlja2VyJyxcbiAgICAgICAgICAgICAgICAnZnV0dXJlX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2tsaW5lJyxcbiAgICAgICAgICAgICAgICAnb3RjcycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhY2NvdW50X3JlY29yZHMnLFxuICAgICAgICAgICAgICAgICdiYXRjaF90cmFkZScsXG4gICAgICAgICAgICAgICAgJ2JvcnJvd19tb25leScsXG4gICAgICAgICAgICAgICAgJ2JvcnJvd19vcmRlcl9pbmZvJyxcbiAgICAgICAgICAgICAgICAnYm9ycm93c19pbmZvJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsX2JvcnJvdycsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vdGNfb3JkZXInLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfd2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfYmF0Y2hfdHJhZGUnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAnZnV0dXJlX2Rldm9sdmUnLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfZXhwbG9zaXZlJyxcbiAgICAgICAgICAgICAgICAnZnV0dXJlX29yZGVyX2luZm8nLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfb3JkZXJzX2luZm8nLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfcG9zaXRpb24nLFxuICAgICAgICAgICAgICAgICdmdXR1cmVfcG9zaXRpb25fNGZpeCcsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV90cmFkZScsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV90cmFkZXNfaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV91c2VyaW5mbycsXG4gICAgICAgICAgICAgICAgJ2Z1dHVyZV91c2VyaW5mb180Zml4JyxcbiAgICAgICAgICAgICAgICAnbGVuZF9kZXB0aCcsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2ZlZScsXG4gICAgICAgICAgICAgICAgJ29yZGVyX2hpc3RvcnknLFxuICAgICAgICAgICAgICAgICdvcmRlcl9pbmZvJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzX2luZm8nLFxuICAgICAgICAgICAgICAgICdvdGNfb3JkZXJfaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ290Y19vcmRlcl9pbmZvJyxcbiAgICAgICAgICAgICAgICAncmVwYXltZW50JyxcbiAgICAgICAgICAgICAgICAnc3VibWl0X290Y19vcmRlcicsXG4gICAgICAgICAgICAgICAgJ3RyYWRlJyxcbiAgICAgICAgICAgICAgICAndHJhZGVfaGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlX290Y19vcmRlcicsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXdfaW5mbycsXG4gICAgICAgICAgICAgICAgJ3VucmVwYXltZW50c19pbmZvJyxcbiAgICAgICAgICAgICAgICAndXNlcmluZm8nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0RGVwdGggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdiaWRzJzogb3JkZXJib29rWydiaWRzJ10sXG4gICAgICAgICAgICAnYXNrcyc6IHRoaXMuc29ydEJ5IChvcmRlcmJvb2tbJ2Fza3MnXSwgMCksXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndGltZXN0YW1wJ107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAocmVzcG9uc2VbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICBsZXQgdGlja2VyID0gdGhpcy5leHRlbmQgKHJlc3BvbnNlWyd0aWNrZXInXSwgeyAndGltZXN0YW1wJzogdGltZXN0YW1wIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBzeW1ib2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChtYXJrZXQpXG4gICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0cmFkZVsnZGF0ZV9tcyddLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0cmFkZVsnZGF0ZV9tcyddKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndGlkJ10sXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3R5cGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsnYW1vdW50J10pLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSAxNDQwLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICd0eXBlJzogdGhpcy50aW1lZnJhbWVzW3RpbWVmcmFtZV0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChsaW1pdClcbiAgICAgICAgICAgIHJlcXVlc3RbJ3NpemUnXSA9IHBhcnNlSW50IChsaW1pdCk7XG4gICAgICAgIGlmIChzaW5jZSkge1xuICAgICAgICAgICAgcmVxdWVzdFsnc2luY2UnXSA9IHNpbmNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdFsnc2luY2UnXSA9IHRoaXMubWlsbGlzZWNvbmRzICgpIC0gODY0MDAwMDA7IC8vIGxhc3QgMjQgaG91cnNcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEtsaW5lICh0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT0hMQ1ZzIChyZXNwb25zZSwgbWFya2V0LCB0aW1lZnJhbWUsIHNpbmNlLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFVzZXJpbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsnaW5mbyddWydmdW5kcyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHJlc3BvbnNlIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgbG93ZXJjYXNlID0gY3VycmVuY3kudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UgaW4gYmFsYW5jZXNbJ2ZyZWUnXSlcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBwYXJzZUZsb2F0IChiYWxhbmNlc1snZnJlZSddW2xvd2VyY2FzZV0pO1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZSBpbiBiYWxhbmNlc1snZnJlZXplZCddKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VzWydmcmVlemVkJ11bbG93ZXJjYXNlXSk7XG4gICAgICAgICAgICBhY2NvdW50Wyd0b3RhbCddID0gdGhpcy5zdW0gKGFjY291bnRbJ2ZyZWUnXSwgYWNjb3VudFsndXNlZCddKTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChtYXJrZXQsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKSB7XG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICAgICAgb3JkZXJbJ2Ftb3VudCddID0gYW1vdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZGUgPT0gJ2J1eScpIHtcbiAgICAgICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHBhcmFtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3JkZXJbJ2Ftb3VudCddID0gYW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3JkZXJbJ3R5cGUnXSArPSAnX21hcmtldCc7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFRyYWRlICh0aGlzLmV4dGVuZCAob3JkZXIsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydvcmRlcl9pZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJfaWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9ICcvJyArICdhcGknICsgJy8nICsgdGhpcy52ZXJzaW9uICsgJy8nICsgcGF0aCArICcuZG8nO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHRoaXMua2V5c29ydCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnYXBpX2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgICAgICAvLyBzZWNyZXQga2V5IG11c3QgYmUgYXQgdGhlIGVuZCBvZiBxdWVyeVxuICAgICAgICAgICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KSArICcmc2VjcmV0X2tleT0nICsgdGhpcy5zZWNyZXQ7XG4gICAgICAgICAgICBxdWVyeVsnc2lnbiddID0gdGhpcy5oYXNoICh0aGlzLmVuY29kZSAocXVlcnlTdHJpbmcpKS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH07XG4gICAgICAgIH1cbiAgICAgICAgdXJsID0gdGhpcy51cmxzWydhcGknXSArIHVybDtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ3Jlc3VsdCcgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlWydyZXN1bHQnXSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIG9rY29pbmNueSA9IGV4dGVuZCAob2tjb2luLCB7XG4gICAgJ2lkJzogJ29rY29pbmNueScsXG4gICAgJ25hbWUnOiAnT0tDb2luIENOWScsXG4gICAgJ2NvdW50cmllcyc6ICdDTicsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY3OTItOGJlOTE1N2EtNWVlNS0xMWU3LTkyNmMtNmQ2OWI4ZDMzNzhkLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly93d3cub2tjb2luLmNuJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5va2NvaW4uY24nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3Lm9rY29pbi5jbi9yZXN0X2dldFN0YXJ0ZWQuaHRtbCcsXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9DTlknOiB7ICdpZCc6ICdidGNfY255JywgJ3N5bWJvbCc6ICdCVEMvQ05ZJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0NOWScgfSxcbiAgICAgICAgJ0xUQy9DTlknOiB7ICdpZCc6ICdsdGNfY255JywgJ3N5bWJvbCc6ICdMVEMvQ05ZJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ0NOWScgfSxcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgb2tjb2ludXNkID0gZXh0ZW5kIChva2NvaW4sIHtcbiAgICAnaWQnOiAnb2tjb2ludXNkJyxcbiAgICAnbmFtZSc6ICdPS0NvaW4gVVNEJyxcbiAgICAnY291bnRyaWVzJzogWyAnQ04nLCAnVVMnIF0sXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY3OTEtODlmZmI1MDItNWVlNS0xMWU3LThhNWItYzU5NTBiNjhhYzY1LmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly93d3cub2tjb2luLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cub2tjb2luLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cub2tjb2luLmNvbS9yZXN0X2dldFN0YXJ0ZWQuaHRtbCcsXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb2tjb2luLmNvbScsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9VU0QnOiB7ICdpZCc6ICdidGNfdXNkJywgJ3N5bWJvbCc6ICdCVEMvVVNEJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0xUQy9VU0QnOiB7ICdpZCc6ICdsdGNfdXNkJywgJ3N5bWJvbCc6ICdMVEMvVVNEJywgJ2Jhc2UnOiAnTFRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0VUSC9VU0QnOiB7ICdpZCc6ICdldGhfdXNkJywgJ3N5bWJvbCc6ICdFVEgvVVNEJywgJ2Jhc2UnOiAnRVRIJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICAgICAgJ0VUQy9VU0QnOiB7ICdpZCc6ICdldGNfdXNkJywgJ3N5bWJvbCc6ICdFVEMvVVNEJywgJ2Jhc2UnOiAnRVRDJywgJ3F1b3RlJzogJ1VTRCcgfSxcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgb2tleCA9IGV4dGVuZCAob2tjb2luLCB7XG4gICAgJ2lkJzogJ29rZXgnLFxuICAgICduYW1lJzogJ09LRVgnLFxuICAgICdjb3VudHJpZXMnOiBbICdDTicsICdVUycgXSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yOTU2MjU5My05MDM4YTliYy04NzQyLTExZTctOTFjYy04MjAxZjg0NWJmYzEuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL3d3dy5va2V4LmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cub2tleC5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3Lm9rZXguY29tL3Jlc3RfZ2V0U3RhcnRlZC5odG1sJyxcbiAgICB9LFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1VTRCc6IHsgJ2lkJzogJ2J0Y191c2QnLCAnc3ltYm9sJzogJ0JUQy9VU0QnLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnVVNEJyB9LFxuICAgICAgICAnTFRDL1VTRCc6IHsgJ2lkJzogJ2x0Y191c2QnLCAnc3ltYm9sJzogJ0xUQy9VU0QnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnVVNEJyB9LFxuICAgICAgICAvLyAnTFRDL0JUQyc6IHsgJ2lkJzogJ2x0Y19idGMnLCAnc3ltYm9sJzogJ0xUQy9CVEMnLCAnYmFzZSc6ICdMVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAvLyAnRVRIL0JUQyc6IHsgJ2lkJzogJ2V0aF9idGMnLCAnc3ltYm9sJzogJ0VUSC9CVEMnLCAnYmFzZSc6ICdFVEgnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAvLyAnRVRDL0JUQyc6IHsgJ2lkJzogJ2V0Y19idGMnLCAnc3ltYm9sJzogJ0VUQy9CVEMnLCAnYmFzZSc6ICdFVEMnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgICAgICAvLyAnQkNIL0JUQyc6IHsgJ2lkJzogJ2JjY19idGMnLCAnc3ltYm9sJzogJ0JDSC9CVEMnLCAnYmFzZSc6ICdCQ0gnLCAncXVvdGUnOiAnQlRDJyB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRGdXR1cmVEZXB0aCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ2NvbnRyYWN0X3R5cGUnOiAndGhpc193ZWVrJywgLy8gbmV4dF93ZWVrLCBxdWFydGVyXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnYmlkcyc6IG9yZGVyYm9va1snYmlkcyddLFxuICAgICAgICAgICAgJ2Fza3MnOiB0aGlzLnNvcnRCeSAob3JkZXJib29rWydhc2tzJ10sIDApLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEZ1dHVyZVRpY2tlciAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnY29udHJhY3RfdHlwZSc6ICd0aGlzX3dlZWsnLCAvLyBuZXh0X3dlZWssIHF1YXJ0ZXJcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAocmVzcG9uc2VbJ2RhdGUnXSkgKiAxMDAwO1xuICAgICAgICBsZXQgdGlja2VyID0gdGhpcy5leHRlbmQgKHJlc3BvbnNlWyd0aWNrZXInXSwgeyAndGltZXN0YW1wJzogdGltZXN0YW1wIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RnV0dXJlVHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdjb250cmFjdF90eXBlJzogJ3RoaXNfd2VlaycsIC8vIG5leHRfd2VlaywgcXVhcnRlclxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9ITENWIChzeW1ib2wsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnY29udHJhY3RfdHlwZSc6ICd0aGlzX3dlZWsnLCAvLyBuZXh0X3dlZWssIHF1YXJ0ZXJcbiAgICAgICAgICAgICd0eXBlJzogdGhpcy50aW1lZnJhbWVzW3RpbWVmcmFtZV0sXG4gICAgICAgICAgICAnc2luY2UnOiBzaW5jZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxpbWl0KVxuICAgICAgICAgICAgcmVxdWVzdFsnc2l6ZSddID0gcGFyc2VJbnQgKGxpbWl0KTtcbiAgICAgICAgaWYgKHNpbmNlKSB7XG4gICAgICAgICAgICByZXF1ZXN0WydzaW5jZSddID0gc2luY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXF1ZXN0WydzaW5jZSddID0gdGhpcy5taWxsaXNlY29uZHMgKCkgLSA4NjQwMDAwMDsgLy8gbGFzdCAyNCBob3Vyc1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RnV0dXJlS2xpbmUgKHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPSExDVnMgKHJlc3BvbnNlLCBtYXJrZXQsIHRpbWVmcmFtZSwgc2luY2UsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyVHlwZSA9IChzaWRlID09ICdidXknKSA/ICcxJyA6ICcyJztcbiAgICAgICAgbGV0IG9yZGVyID0ge1xuICAgICAgICAgICAgJ3N5bWJvbCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAndHlwZSc6IG9yZGVyVHlwZSxcbiAgICAgICAgICAgICdjb250cmFjdF90eXBlJzogJ3RoaXNfd2VlaycsIC8vIG5leHRfd2VlaywgcXVhcnRlclxuICAgICAgICAgICAgJ21hdGNoX3ByaWNlJzogMCwgLy8gbWF0Y2ggYmVzdCBjb3VudGVyIHBhcnR5IHByaWNlPyAwIG9yIDEsIGlnbm9yZXMgcHJpY2UgaWYgMVxuICAgICAgICAgICAgJ2xldmVyX3JhdGUnOiAxMCwgLy8gbGV2ZXJhZ2UgcmF0ZSB2YWx1ZTogMTAgb3IgMjAgKDEwIGJ5IGRlZmF1bHQpXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RGdXR1cmVUcmFkZSAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJfaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdEZ1dHVyZUNhbmNlbCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdvcmRlcl9pZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxufSlcblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgcGF5bWl1bSA9IHtcblxuICAgICdpZCc6ICdwYXltaXVtJyxcbiAgICAnbmFtZSc6ICdQYXltaXVtJyxcbiAgICAnY291bnRyaWVzJzogWyAnRlInLCAnRVUnIF0sXG4gICAgJ3JhdGVMaW1pdCc6IDIwMDAsXG4gICAgJ3ZlcnNpb24nOiAndjEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzkwNTY0LWE5NDVhOWQ0LTVmZjktMTFlNy05ZDJkLWI2MzU3NjNmMmYyNC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vcGF5bWl1bS5jb20vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5wYXltaXVtLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL1BheW1pdW0vYXBpLWRvY3VtZW50YXRpb24nLFxuICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnBheW1pdW0uY29tL3BhZ2UvZGV2ZWxvcGVycycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnY291bnRyaWVzJyxcbiAgICAgICAgICAgICAgICAnZGF0YS97aWR9L3RpY2tlcicsXG4gICAgICAgICAgICAgICAgJ2RhdGEve2lkfS90cmFkZXMnLFxuICAgICAgICAgICAgICAgICdkYXRhL3tpZH0vZGVwdGgnLFxuICAgICAgICAgICAgICAgICdiaXRjb2luX2NoYXJ0cy97aWR9L3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2JpdGNvaW5fY2hhcnRzL3tpZH0vZGVwdGgnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdtZXJjaGFudC9nZXRfcGF5bWVudC97VVVJRH0nLFxuICAgICAgICAgICAgICAgICd1c2VyJyxcbiAgICAgICAgICAgICAgICAndXNlci9hZGRyZXNzZXMnLFxuICAgICAgICAgICAgICAgICd1c2VyL2FkZHJlc3Nlcy97YnRjX2FkZHJlc3N9JyxcbiAgICAgICAgICAgICAgICAndXNlci9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICd1c2VyL29yZGVycy97VVVJRH0nLFxuICAgICAgICAgICAgICAgICd1c2VyL3ByaWNlX2FsZXJ0cycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ3VzZXIvb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAndXNlci9hZGRyZXNzZXMnLFxuICAgICAgICAgICAgICAgICd1c2VyL3BheW1lbnRfcmVxdWVzdHMnLFxuICAgICAgICAgICAgICAgICd1c2VyL3ByaWNlX2FsZXJ0cycsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50L2NyZWF0ZV9wYXltZW50JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICd1c2VyL29yZGVycy97VVVJRH0vY2FuY2VsJyxcbiAgICAgICAgICAgICAgICAndXNlci9wcmljZV9hbGVydHMve2lkfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvRVVSJzogeyAnaWQnOiAnZXVyJywgJ3N5bWJvbCc6ICdCVEMvRVVSJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ0VVUicgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSBhd2FpdCB0aGlzLnByaXZhdGVHZXRVc2VyICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jdXJyZW5jaWVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSB0aGlzLmN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgbG93ZXJjYXNlID0gY3VycmVuY3kudG9Mb3dlckNhc2UgKCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHRoaXMuYWNjb3VudCAoKTtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gJ2JhbGFuY2VfJyArIGxvd2VyY2FzZTtcbiAgICAgICAgICAgIGxldCBsb2NrZWQgPSAnbG9ja2VkXycgKyBsb3dlcmNhc2U7XG4gICAgICAgICAgICBpZiAoYmFsYW5jZSBpbiBiYWxhbmNlcylcbiAgICAgICAgICAgICAgICBhY2NvdW50WydmcmVlJ10gPSBiYWxhbmNlc1tiYWxhbmNlXTtcbiAgICAgICAgICAgIGlmIChsb2NrZWQgaW4gYmFsYW5jZXMpXG4gICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYmFsYW5jZXNbbG9ja2VkXTtcbiAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0RGF0YUlkRGVwdGggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYmlkcycsICdhc2tzJywgJ3ByaWNlJywgJ2Ftb3VudCcpO1xuICAgICAgICByZXN1bHRbJ2JpZHMnXSA9IHRoaXMuc29ydEJ5IChyZXN1bHRbJ2JpZHMnXSwgMCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0RGF0YUlkVGlja2VyICh7XG4gICAgICAgICAgICAnaWQnOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsnYXQnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydiaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydhc2snXSksXG4gICAgICAgICAgICAndndhcCc6IHBhcnNlRmxvYXQgKHRpY2tlclsndndhcCddKSxcbiAgICAgICAgICAgICdvcGVuJzogcGFyc2VGbG9hdCAodGlja2VyWydvcGVuJ10pLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ByaWNlJ10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogcGFyc2VGbG9hdCAodGlja2VyWyd2YXJpYXRpb24nXSksXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKHRyYWRlWydjcmVhdGVkX2F0X2ludCddKSAqIDEwMDA7XG4gICAgICAgIGxldCB2b2x1bWUgPSAndHJhZGVkXycgKyBtYXJrZXRbJ2Jhc2UnXS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogdHJhZGUsXG4gICAgICAgICAgICAnaWQnOiB0cmFkZVsndXVpZCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydzaWRlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVt2b2x1bWVdLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0RGF0YUlkVHJhZGVzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAobWFya2V0LCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAndHlwZSc6IHRoaXMuY2FwaXRhbGl6ZSAodHlwZSkgKyAnT3JkZXInLFxuICAgICAgICAgICAgJ2N1cnJlbmN5JzogdGhpcy5tYXJrZXRJZCAobWFya2V0KSxcbiAgICAgICAgICAgICdkaXJlY3Rpb24nOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGUgPT0gJ21hcmtldCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VXNlck9yZGVycyAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsndXVpZCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJOdW1iZXInOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocGFyYW1zKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCkudG9TdHJpbmcgKCk7XG4gICAgICAgICAgICBsZXQgYXV0aCA9IG5vbmNlICsgdXJsICsgYm9keTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0FwaS1LZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnQXBpLVNpZ25hdHVyZSc6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCB0aGlzLnNlY3JldCksXG4gICAgICAgICAgICAgICAgJ0FwaS1Ob25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcnMnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBwb2xvbmlleCA9IHtcblxuICAgICdpZCc6ICdwb2xvbmlleCcsXG4gICAgJ25hbWUnOiAnUG9sb25pZXgnLFxuICAgICdjb3VudHJpZXMnOiAnVVMnLFxuICAgICdyYXRlTGltaXQnOiA1MDAsIC8vIDYgY2FsbHMgcGVyIHNlY29uZFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2ODE3LWU5NDU2MzEyLTVlZTYtMTFlNy05YjNjLWI2MjhjYTU2MjZhNS5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL3BvbG9uaWV4LmNvbS9wdWJsaWMnLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly9wb2xvbmlleC5jb20vdHJhZGluZ0FwaScsXG4gICAgICAgIH0sXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly9wb2xvbmlleC5jb20nLFxuICAgICAgICAnZG9jJzogW1xuICAgICAgICAgICAgJ2h0dHBzOi8vcG9sb25pZXguY29tL3N1cHBvcnQvYXBpLycsXG4gICAgICAgICAgICAnaHR0cDovL3Bhc3RlYmluLmNvbS9kTVg3bVpFMCcsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAncmV0dXJuMjRoVm9sdW1lJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuQ2hhcnREYXRhJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuQ3VycmVuY2llcycsXG4gICAgICAgICAgICAgICAgJ3JldHVybkxvYW5PcmRlcnMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5PcmRlckJvb2snLFxuICAgICAgICAgICAgICAgICdyZXR1cm5UaWNrZXInLFxuICAgICAgICAgICAgICAgICdyZXR1cm5UcmFkZUhpc3RvcnknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYnV5JyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsTG9hbk9mZmVyJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdjbG9zZU1hcmdpblBvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICAnY3JlYXRlTG9hbk9mZmVyJyxcbiAgICAgICAgICAgICAgICAnZ2VuZXJhdGVOZXdBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnZ2V0TWFyZ2luUG9zaXRpb24nLFxuICAgICAgICAgICAgICAgICdtYXJnaW5CdXknLFxuICAgICAgICAgICAgICAgICdtYXJnaW5TZWxsJyxcbiAgICAgICAgICAgICAgICAnbW92ZU9yZGVyJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuQWN0aXZlTG9hbnMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5BdmFpbGFibGVBY2NvdW50QmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5CYWxhbmNlcycsXG4gICAgICAgICAgICAgICAgJ3JldHVybkNvbXBsZXRlQmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5EZXBvc2l0QWRkcmVzc2VzJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuRGVwb3NpdHNXaXRoZHJhd2FscycsXG4gICAgICAgICAgICAgICAgJ3JldHVybkZlZUluZm8nLFxuICAgICAgICAgICAgICAgICdyZXR1cm5MZW5kaW5nSGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ3JldHVybk1hcmdpbkFjY291bnRTdW1tYXJ5JyxcbiAgICAgICAgICAgICAgICAncmV0dXJuT3BlbkxvYW5PZmZlcnMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5PcGVuT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuT3JkZXJUcmFkZXMnLFxuICAgICAgICAgICAgICAgICdyZXR1cm5UcmFkYWJsZUJhbGFuY2VzJyxcbiAgICAgICAgICAgICAgICAncmV0dXJuVHJhZGVIaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnc2VsbCcsXG4gICAgICAgICAgICAgICAgJ3RvZ2dsZUF1dG9SZW5ldycsXG4gICAgICAgICAgICAgICAgJ3RyYW5zZmVyQmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRSZXR1cm5UaWNrZXIgKCk7XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMgKG1hcmtldHMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwga2V5cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IGlkID0ga2V5c1twXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW2lkXTtcbiAgICAgICAgICAgIGxldCBbIHF1b3RlLCBiYXNlIF0gPSBpZC5zcGxpdCAoJ18nKTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdzeW1ib2wnOiBzeW1ib2wsXG4gICAgICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgICAgICdxdW90ZSc6IHF1b3RlLFxuICAgICAgICAgICAgICAgICdpbmZvJzogbWFya2V0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hCYWxhbmNlIChwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UmV0dXJuQ29tcGxldGVCYWxhbmNlcyAoe1xuICAgICAgICAgICAgJ2FjY291bnQnOiAnYWxsJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgbGV0IGN1cnJlbmNpZXMgPSBPYmplY3Qua2V5cyAoYmFsYW5jZXMpO1xuICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IGN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGN1cnJlbmNpZXNbY107XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2N1cnJlbmN5XTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnYXZhaWxhYmxlJ10pLFxuICAgICAgICAgICAgICAgICd1c2VkJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnb25PcmRlcnMnXSksXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogMC4wLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSB0aGlzLnN1bSAoYWNjb3VudFsnZnJlZSddLCBhY2NvdW50Wyd1c2VkJ10pO1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0UmV0dXJuT3JkZXJCb29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5UGFpcic6IHRoaXMubWFya2V0SWQgKG1hcmtldCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaDI0aHInXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cyNGhyJ10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaGVzdEJpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvd2VzdEFzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbGFzdCddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3BlcmNlbnRDaGFuZ2UnXSksXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Jhc2VWb2x1bWUnXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3F1b3RlVm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRSZXR1cm5UaWNrZXIgKCk7XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAodGlja2Vycyk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgdGlja2VyID0gdGlja2Vyc1tpZF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFJldHVyblRpY2tlciAoKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbbWFya2V0WydpZCddXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKHRyYWRlWydkYXRlJ10pO1xuICAgICAgICBsZXQgaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBvcmRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHN5bWJvbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG1hcmtldCkge1xuICAgICAgICAgICAgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgfSBlbHNlIGlmICgnY3VycmVuY3lQYWlyJyBpbiB0cmFkZSkge1xuICAgICAgICAgICAgbGV0IG1hcmtldElkID0gdHJhZGVbJ2N1cnJlbmN5UGFpciddO1xuICAgICAgICAgICAgc3ltYm9sID0gdGhpcy5tYXJrZXRzX2J5X2lkW21hcmtldElkXVsnc3ltYm9sJ107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCd0cmFkZUlEJyBpbiB0cmFkZSlcbiAgICAgICAgICAgIGlkID0gdHJhZGVbJ3RyYWRlSUQnXTtcbiAgICAgICAgaWYgKCdvcmRlck51bWJlcicgaW4gdHJhZGUpXG4gICAgICAgICAgICBvcmRlciA9IHRyYWRlWydvcmRlck51bWJlciddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAnb3JkZXInOiBvcmRlcixcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsndHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogcGFyc2VGbG9hdCAodHJhZGVbJ3JhdGUnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgdHJhZGVzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRSZXR1cm5UcmFkZUhpc3RvcnkgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ2VuZCc6IHRoaXMuc2Vjb25kcyAoKSwgLy8gbGFzdCA1MDAwMCB0cmFkZXMgYnkgZGVmYXVsdFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHRyYWRlcywgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNeVRyYWRlcyAoc3ltYm9sID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc3ltYm9sKVxuICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCBwYWlyID0gbWFya2V0ID8gbWFya2V0WydpZCddIDogJ2FsbCc7XG4gICAgICAgIGxldCByZXF1ZXN0ID0gdGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdjdXJyZW5jeVBhaXInOiBwYWlyLFxuICAgICAgICAgICAgJ2VuZCc6IHRoaXMuc2Vjb25kcyAoKSwgLy8gbGFzdCA1MDAwMCB0cmFkZXMgYnkgZGVmYXVsdFxuICAgICAgICB9LCBwYXJhbXMpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UmV0dXJuVHJhZGVIaXN0b3J5IChyZXF1ZXN0KTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG1hcmtldCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7ICdpbmZvJzogcmVzcG9uc2UgfTtcbiAgICAgICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAocmVzcG9uc2UpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVtpZF0sIG1hcmtldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcGFyc2VPcmRlciAob3JkZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdHJhZGVzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoJ3Jlc3VsdGluZ1RyYWRlcycgaW4gb3JkZXIpXG4gICAgICAgICAgICB0cmFkZXMgPSB0aGlzLnBhcnNlVHJhZGVzIChvcmRlclsncmVzdWx0aW5nVHJhZGVzJ10sIG1hcmtldCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IG9yZGVyLFxuICAgICAgICAgICAgJ2lkJzogb3JkZXJbJ29yZGVyTnVtYmVyJ10sXG4gICAgICAgICAgICAndGltZXN0YW1wJzogb3JkZXJbJ3RpbWVzdGFtcCddLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxIChvcmRlclsndGltZXN0YW1wJ10pLFxuICAgICAgICAgICAgJ3N0YXR1cyc6IG9yZGVyWydzdGF0dXMnXSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiBvcmRlclsndHlwZSddLFxuICAgICAgICAgICAgJ3NpZGUnOiBvcmRlclsnc2lkZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogb3JkZXJbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50Jzogb3JkZXJbJ2Ftb3VudCddLFxuICAgICAgICAgICAgJ3RyYWRlcyc6IHRyYWRlcyxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcGVuT3JkZXJzIChzeW1ib2wgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzeW1ib2wpXG4gICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHBhaXIgPSBtYXJrZXQgPyBtYXJrZXRbJ2lkJ10gOiAnYWxsJztcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFJldHVybk9wZW5PcmRlcnMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lQYWlyJzogcGFpcixcbiAgICAgICAgfSkpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGlmIChtYXJrZXQpIHtcbiAgICAgICAgICAgIGxldCBvcmRlcnMgPSByZXNwb25zZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9yZGVyID0gb3JkZXJzW2ldO1xuICAgICAgICAgICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAob3JkZXJbJ2RhdGUnXSk7XG4gICAgICAgICAgICAgICAgbGV0IGV4dGVuZGVkID0gdGhpcy5leHRlbmQgKG9yZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiAnb3BlbicsXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2xpbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3NpZGUnOiBvcmRlclsndHlwZSddLFxuICAgICAgICAgICAgICAgICAgICAncHJpY2UnOiBvcmRlclsncmF0ZSddLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoICh0aGlzLnBhcnNlT3JkZXIgKGV4dGVuZGVkLCBtYXJrZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyAocmVzcG9uc2UpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICAgICAgbGV0IG9yZGVycyA9IHJlc3BvbnNlW2lkXTtcbiAgICAgICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IG9yZGVycy5sZW5ndGg7IG8rKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXIgPSBvcmRlcnNbb107XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAob3JkZXJbJ2RhdGUnXSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleHRlbmRlZCA9IHRoaXMuZXh0ZW5kIChvcmRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiAnb3BlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdsaW1pdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2lkZSc6IG9yZGVyWyd0eXBlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAncHJpY2UnOiBvcmRlclsncmF0ZSddLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHRoaXMucGFyc2VPcmRlciAoZXh0ZW5kZWQsIG1hcmtldCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXG4gICAgYXN5bmMgZmV0Y2hPcmRlclN0YXR1cyAoaWQsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJzID0gYXdhaXQgdGhpcy5mZXRjaE9wZW5PcmRlcnMgKG1hcmtldCk7XG4gICAgICAgIGxldCBpbmRleGVkID0gdGhpcy5pbmRleEJ5IChvcmRlcnMsICdpZCcpO1xuICAgICAgICByZXR1cm4gKGlkIGluIGluZGV4ZWQpID8gJ29wZW4nIDogJ2Nsb3NlZCc7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpc1ttZXRob2RdICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5UGFpcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB0aGlzLnBhcnNlT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ3N0YXR1cyc6ICdvcGVuJyxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZSxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgfSwgcmVzcG9uc2UpLCBtYXJrZXQpO1xuICAgICAgICBsZXQgaWQgPSBvcmRlclsnaWQnXTtcbiAgICAgICAgdGhpcy5vcmRlcnNbaWRdID0gb3JkZXI7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZCAoeyAnaW5mbyc6IHJlc3BvbnNlIH0sIG9yZGVyKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlciAoaWQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVycyA9IGF3YWl0IHRoaXMuZmV0Y2hPcGVuT3JkZXJzICgpO1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4QnkgKG9yZGVycywgJ2lkJyk7XG4gICAgICAgIGlmIChpZCBpbiBpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcnNbaWRdID0gaW5kZXhbaWRdO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4W2lkXTtcbiAgICAgICAgfSBlbHNlIGlmIChpZCBpbiB0aGlzLm9yZGVycykge1xuICAgICAgICAgICAgdGhpcy5vcmRlcnNbaWRdWydzdGF0dXMnXSA9ICdjbG9zZWQnO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JkZXJzW2lkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgb3JkZXIgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlclRyYWRlcyAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0cmFkZXMgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UmV0dXJuT3JkZXJUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJOdW1iZXInOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzICh0cmFkZXMpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJOdW1iZXInOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHdpdGhkcmF3IChjdXJyZW5jeSwgYW1vdW50LCBhZGRyZXNzLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdFdpdGhkcmF3ICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2N1cnJlbmN5JzogY3VycmVuY3ksXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICAgICAgJ2FkZHJlc3MnOiBhZGRyZXNzLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzdWx0LFxuICAgICAgICAgICAgJ2lkJzogcmVzdWx0WydyZXNwb25zZSddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddW2FwaV07XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMuZXh0ZW5kICh7ICdjb21tYW5kJzogcGF0aCB9LCBwYXJhbXMpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXJ5Wydub25jZSddID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLnVybGVuY29kZSAocXVlcnkpO1xuICAgICAgICAgICAgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgICAgICAgICAgJ0tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICdTaWduJzogdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYm9keSksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCksICdzaGE1MTInKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgbGV0IGVycm9yID0gdGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpO1xuICAgICAgICAgICAgbGV0IGZhaWxlZCA9IHJlc3BvbnNlWydlcnJvciddLmluZGV4T2YgKCdOb3QgZW5vdWdoJykgPj0gMDtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEluc3VmZmljaWVudEZ1bmRzIChlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBxdWFkcmlnYWN4ID0ge1xuXG4gICAgJ2lkJzogJ3F1YWRyaWdhY3gnLFxuICAgICduYW1lJzogJ1F1YWRyaWdhQ1gnLFxuICAgICdjb3VudHJpZXMnOiAnQ0EnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd2ZXJzaW9uJzogJ3YyJyxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2NjgyNS05OGE2ZDBkZS01ZWU3LTExZTctOWZhNC0zOGUxMWEyYzZmNTIuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS5xdWFkcmlnYWN4LmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cucXVhZHJpZ2FjeC5jb20nLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3LnF1YWRyaWdhY3guY29tL2FwaV9pbmZvJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlcl9ib29rJyxcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdiaXRjb2luX2RlcG9zaXRfYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2JpdGNvaW5fd2l0aGRyYXdhbCcsXG4gICAgICAgICAgICAgICAgJ2J1eScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbF9vcmRlcicsXG4gICAgICAgICAgICAgICAgJ2V0aGVyX2RlcG9zaXRfYWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2V0aGVyX3dpdGhkcmF3YWwnLFxuICAgICAgICAgICAgICAgICdsb29rdXBfb3JkZXInLFxuICAgICAgICAgICAgICAgICdvcGVuX29yZGVycycsXG4gICAgICAgICAgICAgICAgJ3NlbGwnLFxuICAgICAgICAgICAgICAgICd1c2VyX3RyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvQ0FEJzogeyAnaWQnOiAnYnRjX2NhZCcsICdzeW1ib2wnOiAnQlRDL0NBRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdDQUQnIH0sXG4gICAgICAgICdCVEMvVVNEJzogeyAnaWQnOiAnYnRjX3VzZCcsICdzeW1ib2wnOiAnQlRDL1VTRCcsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdVU0QnIH0sXG4gICAgICAgICdFVEgvQlRDJzogeyAnaWQnOiAnZXRoX2J0YycsICdzeW1ib2wnOiAnRVRIL0JUQycsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdCVEMnIH0sXG4gICAgICAgICdFVEgvQ0FEJzogeyAnaWQnOiAnZXRoX2NhZCcsICdzeW1ib2wnOiAnRVRIL0NBRCcsICdiYXNlJzogJ0VUSCcsICdxdW90ZSc6ICdDQUQnIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZXNbbG93ZXJjYXNlICsgJ19hdmFpbGFibGUnXSksXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBwYXJzZUZsb2F0IChiYWxhbmNlc1tsb3dlcmNhc2UgKyAnX3Jlc2VydmVkJ10pLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IHBhcnNlRmxvYXQgKGJhbGFuY2VzW2xvd2VyY2FzZSArICdfYmFsYW5jZSddKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRPcmRlckJvb2sgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnYm9vayc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKG9yZGVyYm9va1sndGltZXN0YW1wJ10pICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdGltZXN0YW1wKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBsZXQgdGlja2VyID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXIgKHtcbiAgICAgICAgICAgICdib29rJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSBwYXJzZUludCAodGlja2VyWyd0aW1lc3RhbXAnXSkgKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnbG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYmlkJ10pLFxuICAgICAgICAgICAgJ2Fzayc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3Z3YXAnXSksXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sdW1lJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHBhcnNlSW50ICh0cmFkZVsnZGF0ZSddKSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHRyYWRlWydzaWRlJ10sXG4gICAgICAgICAgICAncHJpY2UnOiBwYXJzZUZsb2F0ICh0cmFkZVsncHJpY2UnXSksXG4gICAgICAgICAgICAnYW1vdW50JzogcGFyc2VGbG9hdCAodHJhZGVbJ2Ftb3VudCddKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYW5zYWN0aW9ucyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdib29rJzogbWFya2V0WydpZCddLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlc3BvbnNlLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAnYm9vayc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzW21ldGhvZF0gKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZVBvc3RDYW5jZWxPcmRlciAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHBhdGg7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy51aWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IgKHRoaXMuaWQgKyAnIHJlcXVpcmVzIGAnICsgdGhpcy5pZCArICcudWlkYCBwcm9wZXJ0eSBmb3IgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBsZXQgcmVxdWVzdCA9IFsgbm9uY2UudG9TdHJpbmcgKCksIHRoaXMudWlkLCB0aGlzLmFwaUtleSBdLmpvaW4gKCcnKTtcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChyZXF1ZXN0KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSk7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdrZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnbm9uY2UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnc2lnbmF0dXJlJzogc2lnbmF0dXJlLFxuICAgICAgICAgICAgfSwgcGFyYW1zKTtcbiAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHF1ZXJ5KTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyAnICsgdGhpcy5qc29uIChyZXNwb25zZSkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSxcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgcXVvaW5lID0ge1xuXG4gICAgJ2lkJzogJ3F1b2luZScsXG4gICAgJ25hbWUnOiAnUVVPSU5FJyxcbiAgICAnY291bnRyaWVzJzogWyAnSlAnLCAnU0cnLCAnVk4nIF0sXG4gICAgJ3ZlcnNpb24nOiAnMicsXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc3NjY4NDQtOTYxNWE0ZTgtNWVlOC0xMWU3LTg4MTQtZmNkMDA0ZGI4Y2RkLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly9hcGkucXVvaW5lLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cucXVvaW5lLmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9kZXZlbG9wZXJzLnF1b2luZS5jb20nLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ3Byb2R1Y3RzJyxcbiAgICAgICAgICAgICAgICAncHJvZHVjdHMve2lkfScsXG4gICAgICAgICAgICAgICAgJ3Byb2R1Y3RzL3tpZH0vcHJpY2VfbGV2ZWxzJyxcbiAgICAgICAgICAgICAgICAnZXhlY3V0aW9ucycsXG4gICAgICAgICAgICAgICAgJ2lyX2xhZGRlcnMve2N1cnJlbmN5fScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2FjY291bnRzL2JhbGFuY2UnLFxuICAgICAgICAgICAgICAgICdjcnlwdG9fYWNjb3VudHMnLFxuICAgICAgICAgICAgICAgICdleGVjdXRpb25zL21lJyxcbiAgICAgICAgICAgICAgICAnZmlhdF9hY2NvdW50cycsXG4gICAgICAgICAgICAgICAgJ2xvYW5fYmlkcycsXG4gICAgICAgICAgICAgICAgJ2xvYW5zJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzL3tpZH0nLFxuICAgICAgICAgICAgICAgICdvcmRlcnMve2lkfS90cmFkZXMnLFxuICAgICAgICAgICAgICAgICd0cmFkZXMnLFxuICAgICAgICAgICAgICAgICd0cmFkZXMve2lkfS9sb2FucycsXG4gICAgICAgICAgICAgICAgJ3RyYWRpbmdfYWNjb3VudHMnLFxuICAgICAgICAgICAgICAgICd0cmFkaW5nX2FjY291bnRzL3tpZH0nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdmaWF0X2FjY291bnRzJyxcbiAgICAgICAgICAgICAgICAnbG9hbl9iaWRzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncHV0JzogW1xuICAgICAgICAgICAgICAgICdsb2FuX2JpZHMve2lkfS9jbG9zZScsXG4gICAgICAgICAgICAgICAgJ2xvYW5zL3tpZH0nLFxuICAgICAgICAgICAgICAgICdvcmRlcnMve2lkfScsXG4gICAgICAgICAgICAgICAgJ29yZGVycy97aWR9L2NhbmNlbCcsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcy97aWR9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3tpZH0vY2xvc2UnLFxuICAgICAgICAgICAgICAgICd0cmFkZXMvY2xvc2VfYWxsJyxcbiAgICAgICAgICAgICAgICAndHJhZGluZ19hY2NvdW50cy97aWR9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoTWFya2V0cyAoKSB7XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQcm9kdWN0cyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydpZCddO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBtYXJrZXRbJ2Jhc2VfY3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsncXVvdGVkX2N1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QWNjb3VudHNCYWxhbmNlICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnYmFsYW5jZSddKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogdG90YWwsXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiAwLjAsXG4gICAgICAgICAgICAgICAgJ3RvdGFsJzogdG90YWwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzdWx0W2N1cnJlbmN5XSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0UHJvZHVjdHNJZFByaWNlTGV2ZWxzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2J1eV9wcmljZV9sZXZlbHMnLCAnc2VsbF9wcmljZV9sZXZlbHMnKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLm1pbGxpc2Vjb25kcyAoKTtcbiAgICAgICAgbGV0IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICgnbGFzdF90cmFkZWRfcHJpY2UnIGluIHRpY2tlcikge1xuICAgICAgICAgICAgaWYgKHRpY2tlclsnbGFzdF90cmFkZWRfcHJpY2UnXSkge1xuICAgICAgICAgICAgICAgIGxldCBsZW5ndGggPSB0aWNrZXJbJ2xhc3RfdHJhZGVkX3ByaWNlJ10ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gcGFyc2VGbG9hdCAodGlja2VyWydsYXN0X3RyYWRlZF9wcmljZSddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWydoaWdoX21hcmtldF9hc2snXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3dfbWFya2V0X2JpZCddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ21hcmtldF9iaWQnXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydtYXJrZXRfYXNrJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogbGFzdCxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbHVtZV8yNGgnXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFByb2R1Y3RzICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdGlja2Vycy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbdF07XG4gICAgICAgICAgICBsZXQgYmFzZSA9IHRpY2tlclsnYmFzZV9jdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gdGlja2VyWydxdW90ZWRfY3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzW3N5bWJvbF07XG4gICAgICAgICAgICByZXN1bHRbc3ltYm9sXSA9IHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRpY2tlciAoc3ltYm9sKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0UHJvZHVjdHNJZCAoe1xuICAgICAgICAgICAgJ2lkJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2NyZWF0ZWRfYXQnXSAqIDEwMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3Rha2VyX3NpZGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHBhcnNlRmxvYXQgKHRyYWRlWydwcmljZSddKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBwYXJzZUZsb2F0ICh0cmFkZVsncXVhbnRpdHknXSksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRFeGVjdXRpb25zICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3Byb2R1Y3RfaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2VbJ21vZGVscyddLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnb3JkZXJfdHlwZSc6IHR5cGUsXG4gICAgICAgICAgICAncHJvZHVjdF9pZCc6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncXVhbnRpdHknOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0T3JkZXJzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ29yZGVyJzogb3JkZXIsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQdXRPcmRlcnNJZENhbmNlbCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gJy8nICsgdGhpcy5pbXBsb2RlUGFyYW1zIChwYXRoLCBwYXJhbXMpO1xuICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnWC1RdW9pbmUtQVBJLVZlcnNpb24nOiB0aGlzLnZlcnNpb24sXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgJ3BhdGgnOiB1cmwsXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgJ3Rva2VuX2lkJzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ2lhdCc6IE1hdGguZmxvb3IgKG5vbmNlIC8gMTAwMCksIC8vIGlzc3VlZCBhdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyAocXVlcnkpLmxlbmd0aClcbiAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBoZWFkZXJzWydYLVF1b2luZS1BdXRoJ10gPSB0aGlzLmp3dCAocmVxdWVzdCwgdGhpcy5zZWNyZXQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHRoaXMudXJsc1snYXBpJ10gKyB1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnbWVzc2FnZScgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHNvdXRoeGNoYW5nZSA9IHtcblxuICAgICdpZCc6ICdzb3V0aHhjaGFuZ2UnLFxuICAgICduYW1lJzogJ1NvdXRoWGNoYW5nZScsXG4gICAgJ2NvdW50cmllcyc6ICdBUicsIC8vIEFyZ2VudGluYVxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3ODM4OTEyLTRmOTRlYzhhLTYwZjYtMTFlNy05ZTVkLWJiZjliZDUwYTU1OS5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vd3d3LnNvdXRoeGNoYW5nZS5jb20vYXBpJyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy5zb3V0aHhjaGFuZ2UuY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy5zb3V0aHhjaGFuZ2UuY29tL0hvbWUvQXBpJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdtYXJrZXRzJyxcbiAgICAgICAgICAgICAgICAncHJpY2Uve3N5bWJvbH0nLFxuICAgICAgICAgICAgICAgICdwcmljZXMnLFxuICAgICAgICAgICAgICAgICdib29rL3tzeW1ib2x9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3tzeW1ib2x9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE1hcmtldE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2VuZXJhdGVuZXdhZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnbGlzdE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2xpc3RCYWxhbmNlcycsXG4gICAgICAgICAgICAgICAgJ3BsYWNlT3JkZXInLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0TWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBtYXJrZXRbMF07XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBtYXJrZXRbMV07XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgbGV0IGlkID0gc3ltYm9sO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdExpc3RCYWxhbmNlcyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYmFsYW5jZVsnQ3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS51cHBlcmNhc2U7XG4gICAgICAgICAgICBsZXQgZnJlZSA9IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ0F2YWlsYWJsZSddKTtcbiAgICAgICAgICAgIGxldCB1c2VkID0gcGFyc2VGbG9hdCAoYmFsYW5jZVsnVW5jb25maXJtZWQnXSk7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSB0aGlzLnN1bSAoZnJlZSwgdXNlZCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudCA9IHtcbiAgICAgICAgICAgICAgICAnZnJlZSc6IGZyZWUsXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiB1c2VkLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IHRvdGFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdFtjdXJyZW5jeV0gPSBhY2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoT3JkZXJCb29rIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEJvb2tTeW1ib2wgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ0J1eU9yZGVycycsICdTZWxsT3JkZXJzJywgJ1ByaWNlJywgJ0Ftb3VudCcpO1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgYmlkID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgYXNrID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHZvbHVtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdCaWQnIGluIHRpY2tlcilcbiAgICAgICAgICAgIGlmICh0aWNrZXJbJ0JpZCddKVxuICAgICAgICAgICAgICAgIGJpZCA9IHBhcnNlRmxvYXQgKHRpY2tlclsnQmlkJ10pO1xuICAgICAgICBpZiAoJ0FzaycgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnQXNrJ10pXG4gICAgICAgICAgICAgICAgYXNrID0gcGFyc2VGbG9hdCAodGlja2VyWydBc2snXSk7XG4gICAgICAgIGlmICgnTGFzdCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnTGFzdCddKVxuICAgICAgICAgICAgICAgIGxhc3QgPSBwYXJzZUZsb2F0ICh0aWNrZXJbJ0xhc3QnXSk7XG4gICAgICAgIGlmICgnVmFyaWF0aW9uMjRIcicgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpY2tlclsnVmFyaWF0aW9uMjRIciddKVxuICAgICAgICAgICAgICAgIGNoYW5nZSA9IHBhcnNlRmxvYXQgKHRpY2tlclsnVmFyaWF0aW9uMjRIciddKTtcbiAgICAgICAgaWYgKCdWb2x1bWUyNEhyJyBpbiB0aWNrZXIpXG4gICAgICAgICAgICBpZiAodGlja2VyWydWb2x1bWUyNEhyJ10pXG4gICAgICAgICAgICAgICAgdm9sdW1lID0gcGFyc2VGbG9hdCAodGlja2VyWydWb2x1bWUyNEhyJ10pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xvdyc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiaWQnOiBiaWQsXG4gICAgICAgICAgICAnYXNrJzogYXNrLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogbGFzdCxcbiAgICAgICAgICAgICdjaGFuZ2UnOiBjaGFuZ2UsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiB2b2x1bWUsXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRQcmljZXMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gdGhpcy5pbmRleEJ5IChyZXNwb25zZSwgJ01hcmtldCcpO1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKHRpY2tlcnMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbaWRdO1xuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFByaWNlU3ltYm9sICh7XG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ0F0J10gKiAxMDAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICdpZCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcmRlcic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiB0cmFkZVsnVHlwZSddLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ1ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ0Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0VHJhZGVzU3ltYm9sICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnbGlzdGluZ0N1cnJlbmN5JzogbWFya2V0WydiYXNlJ10sXG4gICAgICAgICAgICAncmVmZXJlbmNlQ3VycmVuY3knOiBtYXJrZXRbJ3F1b3RlJ10sXG4gICAgICAgICAgICAndHlwZSc6IHNpZGUsXG4gICAgICAgICAgICAnYW1vdW50JzogYW1vdW50LFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKVxuICAgICAgICAgICAgb3JkZXJbJ2xpbWl0UHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UGxhY2VPcmRlciAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdENhbmNlbE9yZGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ29yZGVyQ29kZSc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIHF1ZXJ5ID0gdGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAna2V5JzogdGhpcy5hcGlLZXksXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBxdWVyeSk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy5qc29uIChxdWVyeSk7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0hhc2gnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlIChib2R5KSwgdGhpcy5lbmNvZGUgKHRoaXMuc2VjcmV0KSwgJ3NoYTUxMicpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIC8vIGlmICghcmVzcG9uc2UpXG4gICAgICAgIC8vICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHN1cmJpdGNvaW4gPSBleHRlbmQgKGJsaW5rdHJhZGUsIHtcbiAgICAnaWQnOiAnc3VyYml0Y29pbicsXG4gICAgJ25hbWUnOiAnU3VyQml0Y29pbicsXG4gICAgJ2NvdW50cmllcyc6ICdWRScsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTE1MTEtZjBhNTAxOTQtNjQ4MS0xMWU3LTk5YjUtOGYwMjkzMjQyNGNjLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vYXBpLmJsaW5rdHJhZGUuY29tL2FwaScsXG4gICAgICAgICAgICAncHJpdmF0ZSc6ICdodHRwczovL2FwaS5ibGlua3RyYWRlLmNvbS90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3N1cmJpdGNvaW4uY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2JsaW5rdHJhZGUuY29tL2RvY3MnLFxuICAgIH0sXG4gICAgJ2NvbW1lbnQnOiAnQmxpbmt0cmFkZSBBUEknLFxuICAgICdtYXJrZXRzJzoge1xuICAgICAgICAnQlRDL1ZFRic6IHsgJ2lkJzogJ0JUQ1ZFRicsICdzeW1ib2wnOiAnQlRDL1ZFRicsICdiYXNlJzogJ0JUQycsICdxdW90ZSc6ICdWRUYnLCAnYnJva2VySWQnOiAxLCAnYnJva2VyJzogJ1N1ckJpdGNvaW4nIH0sXG4gICAgfSxcbn0pXG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHRoZXJvY2sgPSB7XG5cbiAgICAnaWQnOiAndGhlcm9jaycsXG4gICAgJ25hbWUnOiAnVGhlUm9ja1RyYWRpbmcnLFxuICAgICdjb3VudHJpZXMnOiAnTVQnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd2ZXJzaW9uJzogJ3YxJyxcbiAgICAnaGFzRmV0Y2hUaWNrZXJzJzogdHJ1ZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yNzc2Njg2OS03NTA1N2ZhMi01ZWU5LTExZTctOWE2Zi0xM2U2NDFmYTQ3MDcuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2FwaS50aGVyb2NrdHJhZGluZy5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vdGhlcm9ja3RyYWRpbmcuY29tJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL2FwaS50aGVyb2NrdHJhZGluZy5jb20vZG9jL3YxL2luZGV4Lmh0bWwnLFxuICAgICAgICAgICAgJ2h0dHBzOi8vYXBpLnRoZXJvY2t0cmFkaW5nLmNvbS9kb2MvJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdmdW5kcy97aWR9L29yZGVyYm9vaycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRzL3tpZH0vdGlja2VyJyxcbiAgICAgICAgICAgICAgICAnZnVuZHMve2lkfS90cmFkZXMnLFxuICAgICAgICAgICAgICAgICdmdW5kcy90aWNrZXJzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdiYWxhbmNlcy97aWR9JyxcbiAgICAgICAgICAgICAgICAnZGlzY291bnRzJyxcbiAgICAgICAgICAgICAgICAnZGlzY291bnRzL3tpZH0nLFxuICAgICAgICAgICAgICAgICdmdW5kcycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRzL3tpZH0nLFxuICAgICAgICAgICAgICAgICdmdW5kcy97aWR9L3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2Z1bmRzL3tmdW5kX2lkfS9vcmRlcnMnLFxuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vb3JkZXJzL3tpZH0nLFxuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vcG9zaXRpb25fYmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vcG9zaXRpb25zJyxcbiAgICAgICAgICAgICAgICAnZnVuZHMve2Z1bmRfaWR9L3Bvc2l0aW9ucy97aWR9JyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zL3tpZH0nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd19saW1pdHMve2lkfScsXG4gICAgICAgICAgICAgICAgJ3dpdGhkcmF3X2xpbWl0cycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgJ3Bvc3QnOiBbXG4gICAgICAgICAgICAgICAgJ2F0bXMvd2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vb3JkZXJzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vb3JkZXJzL3tpZH0nLFxuICAgICAgICAgICAgICAgICdmdW5kcy97ZnVuZF9pZH0vb3JkZXJzL3JlbW92ZV9hbGwnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEZ1bmRzVGlja2VycyAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHNbJ3RpY2tlcnMnXS5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IG1hcmtldCA9IG1hcmtldHNbJ3RpY2tlcnMnXVtwXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnZnVuZF9pZCddO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBpZC5zbGljZSAoMCwgMyk7XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBpZC5zbGljZSAoMywgNik7XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gYmFzZSArICcvJyArIHF1b3RlO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0QmFsYW5jZXMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydiYWxhbmNlcyddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IHJlc3BvbnNlIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IGZyZWUgPSBiYWxhbmNlWyd0cmFkaW5nX2JhbGFuY2UnXTtcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IGJhbGFuY2VbJ2JhbGFuY2UnXTtcbiAgICAgICAgICAgIGxldCB1c2VkID0gdG90YWwgLSBmcmVlO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBmcmVlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogdXNlZCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiB0b3RhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRGdW5kc0lkT3JkZXJib29rICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2lkJzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAob3JkZXJib29rWydkYXRlJ10pO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9yZGVyQm9vayAob3JkZXJib29rLCB0aW1lc3RhbXAsICdiaWRzJywgJ2Fza3MnLCAncHJpY2UnLCAnYW1vdW50Jyk7XG4gICAgfSxcblxuICAgIHBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5wYXJzZTg2MDEgKHRpY2tlclsnZGF0ZSddKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2JpZCddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2FzayddKSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29wZW4nXSksXG4gICAgICAgICAgICAnY2xvc2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Nsb3NlJ10pLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWVfdHJhZGVkJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWyd2b2x1bWUnXSksXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRGdW5kc1RpY2tlcnMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gdGhpcy5pbmRleEJ5IChyZXNwb25zZVsndGlja2VycyddLCAnZnVuZF9pZCcpO1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKHRpY2tlcnMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ3N5bWJvbCddO1xuICAgICAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbaWRdO1xuICAgICAgICAgICAgcmVzdWx0W3N5bWJvbF0gPSB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXIgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEZ1bmRzSWRUaWNrZXIgKHtcbiAgICAgICAgICAgICdpZCc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFtYXJrZXQpXG4gICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbdHJhZGVbJ2Z1bmRfaWQnXV07XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodHJhZGVbJ2RhdGUnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkZXInOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ3N5bWJvbCc6IG1hcmtldFsnc3ltYm9sJ10sXG4gICAgICAgICAgICAndHlwZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdzaWRlJzogdHJhZGVbJ3NpZGUnXSxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IHRyYWRlWydhbW91bnQnXSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEZ1bmRzSWRUcmFkZXMgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2VbJ3RyYWRlcyddLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBpZiAodHlwZSA9PSAnbWFya2V0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBhbGxvd3MgbGltaXQgb3JkZXJzIG9ubHknKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEZ1bmRzRnVuZElkT3JkZXJzICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2Z1bmRfaWQnOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdwcmljZSc6IHByaWNlLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnaWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY2FuY2VsT3JkZXIgKGlkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlRGVsZXRlRnVuZHNGdW5kSWRPcmRlcnNJZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKS50b1N0cmluZyAoKTtcbiAgICAgICAgICAgIGxldCBhdXRoID0gbm9uY2UgKyB1cmw7XG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgICdYLVRSVC1LRVknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnWC1UUlQtTk9OQ0UnOiBub25jZSxcbiAgICAgICAgICAgICAgICAnWC1UUlQtU0lHTic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzIChxdWVyeSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAocXVlcnkpO1xuICAgICAgICAgICAgICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcnMnIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciB1cmR1Yml0ID0gZXh0ZW5kIChibGlua3RyYWRlLCB7XG4gICAgJ2lkJzogJ3VyZHViaXQnLFxuICAgICduYW1lJzogJ1VyZHVCaXQnLFxuICAgICdjb3VudHJpZXMnOiAnUEsnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3OTkxNDUzLTE1NmJmM2FlLTY0ODAtMTFlNy04MmViLTcyOTVmZTFiNWJiNC5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwczovL2FwaS5ibGlua3RyYWRlLmNvbS9hcGknLFxuICAgICAgICAgICAgJ3ByaXZhdGUnOiAnaHR0cHM6Ly9hcGkuYmxpbmt0cmFkZS5jb20vdGFwaScsXG4gICAgICAgIH0sXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly91cmR1Yml0LmNvbScsXG4gICAgICAgICdkb2MnOiAnaHR0cHM6Ly9ibGlua3RyYWRlLmNvbS9kb2NzJyxcbiAgICB9LFxuICAgICdjb21tZW50JzogJ0JsaW5rdHJhZGUgQVBJJyxcbiAgICAnbWFya2V0cyc6IHtcbiAgICAgICAgJ0JUQy9QS1InOiB7ICdpZCc6ICdCVENQS1InLCAnc3ltYm9sJzogJ0JUQy9QS1InLCAnYmFzZSc6ICdCVEMnLCAncXVvdGUnOiAnUEtSJywgJ2Jyb2tlcklkJzogOCwgJ2Jyb2tlcic6ICdVcmR1Qml0JyB9LFxuICAgIH0sXG59KVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciB2YXVsdG9ybyA9IHtcblxuICAgICdpZCc6ICd2YXVsdG9ybycsXG4gICAgJ25hbWUnOiAnVmF1bHRvcm8nLFxuICAgICdjb3VudHJpZXMnOiAnQ0gnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd2ZXJzaW9uJzogJzEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2ODgwLWYyMDVlODcwLTVlZTktMTFlNy04ZmUyLTBkNWIxNTg4MDc1Mi5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLnZhdWx0b3JvLmNvbScsXG4gICAgICAgICd3d3cnOiAnaHR0cHM6Ly93d3cudmF1bHRvcm8uY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL2FwaS52YXVsdG9yby5jb20nLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2JpZGFuZGFzaycsXG4gICAgICAgICAgICAgICAgJ2J1eW9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2xhdGVzdCcsXG4gICAgICAgICAgICAgICAgJ2xhdGVzdHRyYWRlcycsXG4gICAgICAgICAgICAgICAgJ21hcmtldHMnLFxuICAgICAgICAgICAgICAgICdvcmRlcmJvb2snLFxuICAgICAgICAgICAgICAgICdzZWxsb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zL2RheScsXG4gICAgICAgICAgICAgICAgJ3RyYW5zYWN0aW9ucy9ob3VyJyxcbiAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25zL21vbnRoJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAnYmFsYW5jZScsXG4gICAgICAgICAgICAgICAgJ215dHJhZGVzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnYnV5L3tzeW1ib2x9L3t0eXBlfScsXG4gICAgICAgICAgICAgICAgJ2NhbmNlbC97aWR9JyxcbiAgICAgICAgICAgICAgICAnc2VsbC97c3ltYm9sfS97dHlwZX0nLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhdycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBtYXJrZXRzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1snZGF0YSddO1xuICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnQmFzZUN1cnJlbmN5J107XG4gICAgICAgIGxldCBxdW90ZSA9IG1hcmtldFsnTWFya2V0Q3VycmVuY3knXTtcbiAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgbGV0IGJhc2VJZCA9IGJhc2U7XG4gICAgICAgIGxldCBxdW90ZUlkID0gcXVvdGU7XG4gICAgICAgIGxldCBpZCA9IG1hcmtldFsnTWFya2V0TmFtZSddO1xuICAgICAgICByZXN1bHQucHVzaCAoe1xuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgJ2Jhc2UnOiBiYXNlLFxuICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAnYmFzZUlkJzogYmFzZUlkLFxuICAgICAgICAgICAgJ3F1b3RlSWQnOiBxdW90ZUlkLFxuICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldEJhbGFuY2UgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydkYXRhJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYiA9IDA7IGIgPCBiYWxhbmNlcy5sZW5ndGg7IGIrKykge1xuICAgICAgICAgICAgbGV0IGJhbGFuY2UgPSBiYWxhbmNlc1tiXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IGJhbGFuY2VbJ2N1cnJlbmN5X2NvZGUnXTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBmcmVlID0gYmFsYW5jZVsnY2FzaCddO1xuICAgICAgICAgICAgbGV0IHVzZWQgPSBiYWxhbmNlWydyZXNlcnZlZCddO1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gdGhpcy5zdW0gKGZyZWUsIHVzZWQpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBmcmVlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogdXNlZCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiB0b3RhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE9yZGVyYm9vayAocGFyYW1zKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHtcbiAgICAgICAgICAgICdiaWRzJzogcmVzcG9uc2VbJ2RhdGEnXVswXVsnYiddLFxuICAgICAgICAgICAgJ2Fza3MnOiByZXNwb25zZVsnZGF0YSddWzFdWydzJ10sXG4gICAgICAgIH07XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHVuZGVmaW5lZCwgJ2JpZHMnLCAnYXNrcycsICdHb2xkX1ByaWNlJywgJ0dvbGRfQW1vdW50Jyk7XG4gICAgICAgIHJlc3VsdFsnYmlkcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYmlkcyddLCAwLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgcXVvdGUgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEJpZGFuZGFzayAoKTtcbiAgICAgICAgbGV0IGJpZHNMZW5ndGggPSBxdW90ZVsnYmlkcyddLmxlbmd0aDtcbiAgICAgICAgbGV0IGJpZCA9IHF1b3RlWydiaWRzJ11bYmlkc0xlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgYXNrID0gcXVvdGVbJ2Fza3MnXVswXTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgdGlja2VyID0gcmVzcG9uc2VbJ2RhdGEnXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogcGFyc2VGbG9hdCAodGlja2VyWycyNGhIaWdoJ10pLFxuICAgICAgICAgICAgJ2xvdyc6IHBhcnNlRmxvYXQgKHRpY2tlclsnMjRoTG93J10pLFxuICAgICAgICAgICAgJ2JpZCc6IGJpZFswXSxcbiAgICAgICAgICAgICdhc2snOiBhc2tbMF0sXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ0xhc3RQcmljZSddKSxcbiAgICAgICAgICAgICdjaGFuZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncGVyY2VudGFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdhdmVyYWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJzI0aFZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0aGlzLnBhcnNlODYwMSAodHJhZGVbJ1RpbWUnXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaWQnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ29yZGVyJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwcmljZSc6IHRyYWRlWydHb2xkX1ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ0dvbGRfQW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFuc2FjdGlvbnNEYXkgKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgY3JlYXRlT3JkZXIgKHN5bWJvbCwgdHlwZSwgc2lkZSwgYW1vdW50LCBwcmljZSA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgbWV0aG9kID0gJ3ByaXZhdGVQb3N0JyArIHRoaXMuY2FwaXRhbGl6ZSAoc2lkZSkgKyAnU3ltYm9sVHlwZSc7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXNbbWV0aG9kXSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3F1b3RlSWQnXS50b0xvd2VyQ2FzZSAoKSxcbiAgICAgICAgICAgICd0eXBlJzogdHlwZSxcbiAgICAgICAgICAgICdnbGQnOiBhbW91bnQsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSB8fCAxLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnZGF0YSddWydPcmRlcl9JRCddLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsSWQgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdwdWJsaWMnLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLyc7XG4gICAgICAgIGlmIChhcGkgPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgIHVybCArPSBwYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG5vbmNlID0gdGhpcy5ub25jZSAoKTtcbiAgICAgICAgICAgIHVybCArPSB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgICAgICdub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgICAgICdhcGlrZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgIH0sIHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKSk7XG4gICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnWC1TaWduYXR1cmUnOiB0aGlzLmhtYWMgKHRoaXMuZW5jb2RlICh1cmwpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHZidGMgPSBleHRlbmQgKGJsaW5rdHJhZGUsIHtcbiAgICAnaWQnOiAndmJ0YycsXG4gICAgJ25hbWUnOiAnVkJUQycsXG4gICAgJ2NvdW50cmllcyc6ICdWTicsXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjc5OTE0ODEtMWY1M2QxZDgtNjQ4MS0xMWU3LTg4NGUtMjFkMTdlNzkzOWRiLmpwZycsXG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAncHVibGljJzogJ2h0dHBzOi8vYXBpLmJsaW5rdHJhZGUuY29tL2FwaScsXG4gICAgICAgICAgICAncHJpdmF0ZSc6ICdodHRwczovL2FwaS5ibGlua3RyYWRlLmNvbS90YXBpJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3ZidGMuZXhjaGFuZ2UnLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vYmxpbmt0cmFkZS5jb20vZG9jcycsXG4gICAgfSxcbiAgICAnY29tbWVudCc6ICdCbGlua3RyYWRlIEFQSScsXG4gICAgJ21hcmtldHMnOiB7XG4gICAgICAgICdCVEMvVk5EJzogeyAnaWQnOiAnQlRDVk5EJywgJ3N5bWJvbCc6ICdCVEMvVk5EJywgJ2Jhc2UnOiAnQlRDJywgJ3F1b3RlJzogJ1ZORCcsICdicm9rZXJJZCc6IDMsICdicm9rZXInOiAnVkJUQycgfSxcbiAgICB9LFxufSlcblxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciB2aXJ3b3ggPSB7XG5cbiAgICAnaWQnOiAndmlyd294JyxcbiAgICAnbmFtZSc6ICdWaXJXb1gnLFxuICAgICdjb3VudHJpZXMnOiAnQVQnLFxuICAgICdyYXRlTGltaXQnOiAxMDAwLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2ODk0LTZkYTlkMzYwLTVlZWEtMTFlNy05MGFhLTQxZjI3MTFiNzQwNS5qcGcnLFxuICAgICAgICAnYXBpJzoge1xuICAgICAgICAgICAgJ3B1YmxpYyc6ICdodHRwOi8vYXBpLnZpcndveC5jb20vYXBpL2pzb24ucGhwJyxcbiAgICAgICAgICAgICdwcml2YXRlJzogJ2h0dHBzOi8vd3d3LnZpcndveC5jb20vYXBpL3RyYWRpbmcucGhwJyxcbiAgICAgICAgfSxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy52aXJ3b3guY29tJyxcbiAgICAgICAgJ2RvYyc6ICdodHRwczovL3d3dy52aXJ3b3guY29tL2RldmVsb3BlcnMucGhwJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdnZXRJbnN0cnVtZW50cycsXG4gICAgICAgICAgICAgICAgJ2dldEJlc3RQcmljZXMnLFxuICAgICAgICAgICAgICAgICdnZXRNYXJrZXREZXB0aCcsXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlTWFya2V0T3JkZXInLFxuICAgICAgICAgICAgICAgICdnZXRUcmFkZWRQcmljZVZvbHVtZScsXG4gICAgICAgICAgICAgICAgJ2dldFJhd1RyYWRlRGF0YScsXG4gICAgICAgICAgICAgICAgJ2dldFN0YXRpc3RpY3MnLFxuICAgICAgICAgICAgICAgICdnZXRUZXJtaW5hbExpc3QnLFxuICAgICAgICAgICAgICAgICdnZXRHcmlkTGlzdCcsXG4gICAgICAgICAgICAgICAgJ2dldEdyaWRTdGF0aXN0aWNzJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnZ2V0SW5zdHJ1bWVudHMnLFxuICAgICAgICAgICAgICAgICdnZXRCZXN0UHJpY2VzJyxcbiAgICAgICAgICAgICAgICAnZ2V0TWFya2V0RGVwdGgnLFxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZU1hcmtldE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2V0VHJhZGVkUHJpY2VWb2x1bWUnLFxuICAgICAgICAgICAgICAgICdnZXRSYXdUcmFkZURhdGEnLFxuICAgICAgICAgICAgICAgICdnZXRTdGF0aXN0aWNzJyxcbiAgICAgICAgICAgICAgICAnZ2V0VGVybWluYWxMaXN0JyxcbiAgICAgICAgICAgICAgICAnZ2V0R3JpZExpc3QnLFxuICAgICAgICAgICAgICAgICdnZXRHcmlkU3RhdGlzdGljcycsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2NhbmNlbE9yZGVyJyxcbiAgICAgICAgICAgICAgICAnZ2V0QmFsYW5jZXMnLFxuICAgICAgICAgICAgICAgICdnZXRDb21taXNzaW9uRGlzY291bnQnLFxuICAgICAgICAgICAgICAgICdnZXRPcmRlcnMnLFxuICAgICAgICAgICAgICAgICdnZXRUcmFuc2FjdGlvbnMnLFxuICAgICAgICAgICAgICAgICdwbGFjZU9yZGVyJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnY2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdnZXRCYWxhbmNlcycsXG4gICAgICAgICAgICAgICAgJ2dldENvbW1pc3Npb25EaXNjb3VudCcsXG4gICAgICAgICAgICAgICAgJ2dldE9yZGVycycsXG4gICAgICAgICAgICAgICAgJ2dldFRyYW5zYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgJ3BsYWNlT3JkZXInLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldEluc3RydW1lbnRzICgpO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzIChtYXJrZXRzWydyZXN1bHQnXSk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBrZXlzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1sncmVzdWx0J11ba2V5c1twXV07XG4gICAgICAgICAgICBsZXQgaWQgPSBtYXJrZXRbJ2luc3RydW1lbnRJRCddO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICBsZXQgYmFzZSA9IG1hcmtldFsnbG9uZ0N1cnJlbmN5J107XG4gICAgICAgICAgICBsZXQgcXVvdGUgPSBtYXJrZXRbJ3Nob3J0Q3VycmVuY3knXTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RHZXRCYWxhbmNlcyAoKTtcbiAgICAgICAgbGV0IGJhbGFuY2VzID0gcmVzcG9uc2VbJ3Jlc3VsdCddWydhY2NvdW50TGlzdCddO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydjdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gYmFsYW5jZVsnYmFsYW5jZSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiB0b3RhbCxcbiAgICAgICAgICAgICAgICAndXNlZCc6IDAuMCxcbiAgICAgICAgICAgICAgICAndG90YWwnOiB0b3RhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJlc3RQcmljZXMgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNQb3N0R2V0QmVzdFByaWNlcyAoe1xuICAgICAgICAgICAgJ3N5bWJvbHMnOiBbIHN5bWJvbCBdLFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNQb3N0R2V0TWFya2V0RGVwdGggKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnc3ltYm9scyc6IFsgc3ltYm9sIF0sXG4gICAgICAgICAgICAnYnV5RGVwdGgnOiAxMDAsXG4gICAgICAgICAgICAnc2VsbERlcHRoJzogMTAwLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IHJlc3BvbnNlWydyZXN1bHQnXVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vaywgdW5kZWZpbmVkLCAnYnV5JywgJ3NlbGwnLCAncHJpY2UnLCAndm9sdW1lJyk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICBsZXQgc3RhcnQgPSBlbmQgLSA4NjQwMDAwMDtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZWRQcmljZVZvbHVtZSAoe1xuICAgICAgICAgICAgJ2luc3RydW1lbnQnOiBzeW1ib2wsXG4gICAgICAgICAgICAnZW5kRGF0ZSc6IHRoaXMueXl5eW1tZGRoaG1tc3MgKGVuZCksXG4gICAgICAgICAgICAnc3RhcnREYXRlJzogdGhpcy55eXl5bW1kZGhobW1zcyAoc3RhcnQpLFxuICAgICAgICAgICAgJ0hMT0MnOiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSByZXNwb25zZVsncmVzdWx0J11bJ3ByaWNlVm9sdW1lTGlzdCddO1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzICh0aWNrZXJzKTtcbiAgICAgICAgbGV0IGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgICBsZXQgbGFzdEtleSA9IGtleXNbbGVuZ3RoIC0gMV07XG4gICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2xhc3RLZXldO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Fzayc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ29wZW4nXSksXG4gICAgICAgICAgICAnY2xvc2UnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2Nsb3NlJ10pLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydsb25nVm9sdW1lJ10pLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogcGFyc2VGbG9hdCAodGlja2VyWydzaG9ydFZvbHVtZSddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaFRyYWRlcyAobWFya2V0LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNHZXRSYXdUcmFkZURhdGEodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdpbnN0cnVtZW50JzogbWFya2V0LFxuICAgICAgICAgICAgJ3RpbWVzcGFuJzogMzYwMCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChtYXJrZXQsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBvcmRlciA9IHtcbiAgICAgICAgICAgICdpbnN0cnVtZW50JzogdGhpcy5zeW1ib2wgKG1hcmtldCksXG4gICAgICAgICAgICAnb3JkZXJUeXBlJzogc2lkZS50b1VwcGVyQ2FzZSAoKSxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlID09ICdsaW1pdCcpXG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0UGxhY2VPcmRlciAodGhpcy5leHRlbmQgKG9yZGVyLCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpbmZvJzogcmVzcG9uc2UsXG4gICAgICAgICAgICAnaWQnOiByZXNwb25zZVsnb3JkZXJJRCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJJRCc6IGlkLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ3B1YmxpYycsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXVthcGldO1xuICAgICAgICBsZXQgYXV0aCA9IHt9O1xuICAgICAgICBpZiAoYXBpID09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgYXV0aFsna2V5J10gPSB0aGlzLmFwaUtleTtcbiAgICAgICAgICAgIGF1dGhbJ3VzZXInXSA9IHRoaXMubG9naW47XG4gICAgICAgICAgICBhdXRoWydwYXNzJ10gPSB0aGlzLnBhc3N3b3JkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgIGlmIChtZXRob2QgPT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIHVybCArPSAnPycgKyB0aGlzLnVybGVuY29kZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnbWV0aG9kJzogcGF0aCxcbiAgICAgICAgICAgICAgICAnaWQnOiBub25jZSxcbiAgICAgICAgICAgIH0sIGF1dGgsIHBhcmFtcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZGVycyA9IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9O1xuICAgICAgICAgICAgYm9keSA9IHRoaXMuanNvbiAoe1xuICAgICAgICAgICAgICAgICdtZXRob2QnOiBwYXRoLFxuICAgICAgICAgICAgICAgICdwYXJhbXMnOiB0aGlzLmV4dGVuZCAoYXV0aCwgcGFyYW1zKSxcbiAgICAgICAgICAgICAgICAnaWQnOiBub25jZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbJ2Vycm9yJ10pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciB4YnRjZSA9IHtcblxuICAgICdpZCc6ICd4YnRjZScsXG4gICAgJ25hbWUnOiAneEJUQ2UnLFxuICAgICdjb3VudHJpZXMnOiAnUlUnLFxuICAgICdyYXRlTGltaXQnOiAyMDAwLCAvLyByZXNwb25zZXMgYXJlIGNhY2hlZCBldmVyeSAyIHNlY29uZHNcbiAgICAndmVyc2lvbic6ICd2MScsXG4gICAgJ2hhc0ZldGNoVGlja2Vycyc6IHRydWUsXG4gICAgJ2hhc0ZldGNoT0hMQ1YnOiBmYWxzZSxcbiAgICAndXJscyc6IHtcbiAgICAgICAgJ2xvZ28nOiAnaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vMTI5NDQ1NC8yODA1OTQxNC1lMjM1OTcwYy02NjJjLTExZTctOGMzYS0wOGUzMWY3ODY4NGIuanBnJyxcbiAgICAgICAgJ2FwaSc6ICdodHRwczovL2NyeXB0b3R0bGl2ZXdlYmFwaS54YnRjZS5uZXQ6ODQ0My9hcGknLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vd3d3LnhidGNlLmNvbScsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cHM6Ly93d3cueGJ0Y2UuY29tL3RyYWRlYXBpJyxcbiAgICAgICAgICAgICdodHRwczovL3N1cHBvcnQueGJ0Y2UuaW5mby9Lbm93bGVkZ2ViYXNlL0FydGljbGUvVmlldy81Mi8yNS94YnRjZS1leGNoYW5nZS1hcGknLFxuICAgICAgICBdLFxuICAgIH0sXG4gICAgJ2FwaSc6IHtcbiAgICAgICAgJ3B1YmxpYyc6IHtcbiAgICAgICAgICAgICdnZXQnOiBbXG4gICAgICAgICAgICAgICAgJ2N1cnJlbmN5JyxcbiAgICAgICAgICAgICAgICAnY3VycmVuY3kve2ZpbHRlcn0nLFxuICAgICAgICAgICAgICAgICdsZXZlbDInLFxuICAgICAgICAgICAgICAgICdsZXZlbDIve2ZpbHRlcn0nLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3Rvcnkve3N5bWJvbH0ve3BlcmlvZGljaXR5fS9iYXJzL2FzaycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS97cGVyaW9kaWNpdHl9L2JhcnMvYmlkJyxcbiAgICAgICAgICAgICAgICAncXVvdGVoaXN0b3J5L3tzeW1ib2x9L2xldmVsMicsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS90aWNrcycsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCcsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbC97ZmlsdGVyfScsXG4gICAgICAgICAgICAgICAgJ3RpY2snLFxuICAgICAgICAgICAgICAgICd0aWNrL3tmaWx0ZXJ9JyxcbiAgICAgICAgICAgICAgICAndGlja2VyJyxcbiAgICAgICAgICAgICAgICAndGlja2VyL3tmaWx0ZXJ9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzZXNzaW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdwcml2YXRlJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAndHJhZGVzZXJ2ZXJpbmZvJyxcbiAgICAgICAgICAgICAgICAndHJhZGVzZXNzaW9uJyxcbiAgICAgICAgICAgICAgICAnY3VycmVuY3knLFxuICAgICAgICAgICAgICAgICdjdXJyZW5jeS97ZmlsdGVyfScsXG4gICAgICAgICAgICAgICAgJ2xldmVsMicsXG4gICAgICAgICAgICAgICAgJ2xldmVsMi97ZmlsdGVyfScsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCcsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbC97ZmlsdGVyfScsXG4gICAgICAgICAgICAgICAgJ3RpY2snLFxuICAgICAgICAgICAgICAgICd0aWNrL3tmaWx0ZXJ9JyxcbiAgICAgICAgICAgICAgICAnYWNjb3VudCcsXG4gICAgICAgICAgICAgICAgJ2Fzc2V0JyxcbiAgICAgICAgICAgICAgICAnYXNzZXQve2lkfScsXG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICAncG9zaXRpb24ve2lkfScsXG4gICAgICAgICAgICAgICAgJ3RyYWRlJyxcbiAgICAgICAgICAgICAgICAndHJhZGUve2lkfScsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS97cGVyaW9kaWNpdHl9L2JhcnMvYXNrJyxcbiAgICAgICAgICAgICAgICAncXVvdGVoaXN0b3J5L3tzeW1ib2x9L3twZXJpb2RpY2l0eX0vYmFycy9hc2svaW5mbycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS97cGVyaW9kaWNpdHl9L2JhcnMvYmlkJyxcbiAgICAgICAgICAgICAgICAncXVvdGVoaXN0b3J5L3tzeW1ib2x9L3twZXJpb2RpY2l0eX0vYmFycy9iaWQvaW5mbycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS9sZXZlbDInLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3Rvcnkve3N5bWJvbH0vbGV2ZWwyL2luZm8nLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3Rvcnkve3N5bWJvbH0vcGVyaW9kaWNpdGllcycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS90aWNrcycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS97c3ltYm9sfS90aWNrcy9pbmZvJyxcbiAgICAgICAgICAgICAgICAncXVvdGVoaXN0b3J5L2NhY2hlL3tzeW1ib2x9L3twZXJpb2RpY2l0eX0vYmFycy9hc2snLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3RvcnkvY2FjaGUve3N5bWJvbH0ve3BlcmlvZGljaXR5fS9iYXJzL2JpZCcsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS9jYWNoZS97c3ltYm9sfS9sZXZlbDInLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3RvcnkvY2FjaGUve3N5bWJvbH0vdGlja3MnLFxuICAgICAgICAgICAgICAgICdxdW90ZWhpc3Rvcnkvc3ltYm9scycsXG4gICAgICAgICAgICAgICAgJ3F1b3RlaGlzdG9yeS92ZXJzaW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAndHJhZGUnLFxuICAgICAgICAgICAgICAgICd0cmFkZWhpc3RvcnknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwdXQnOiBbXG4gICAgICAgICAgICAgICAgJ3RyYWRlJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAnZGVsZXRlJzogW1xuICAgICAgICAgICAgICAgICd0cmFkZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldFN5bWJvbCAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydTeW1ib2wnXTtcbiAgICAgICAgICAgIGxldCBiYXNlID0gbWFya2V0WydNYXJnaW5DdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHF1b3RlID0gbWFya2V0WydQcm9maXRDdXJyZW5jeSddO1xuICAgICAgICAgICAgaWYgKGJhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgYmFzZSA9ICdEQVNIJztcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBiYXNlICsgJy8nICsgcXVvdGU7XG4gICAgICAgICAgICBzeW1ib2wgPSBtYXJrZXRbJ0lzVHJhZGVBbGxvd2VkJ10gPyBzeW1ib2wgOiBpZDtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldEFzc2V0ICgpO1xuICAgICAgICBsZXQgcmVzdWx0ID0geyAnaW5mbyc6IGJhbGFuY2VzIH07XG4gICAgICAgIGZvciAobGV0IGIgPSAwOyBiIDwgYmFsYW5jZXMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbYl07XG4gICAgICAgICAgICBsZXQgY3VycmVuY3kgPSBiYWxhbmNlWydDdXJyZW5jeSddO1xuICAgICAgICAgICAgbGV0IHVwcGVyY2FzZSA9IGN1cnJlbmN5LnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgLy8geGJ0Y2UgbmFtZXMgREFTSCBpbmNvcnJlY3RseSBhcyBEU0hcbiAgICAgICAgICAgIGlmICh1cHBlcmNhc2UgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgdXBwZXJjYXNlID0gJ0RBU0gnO1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gYmFsYW5jZVsnYmFsYW5jZSddO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlWydGcmVlQW1vdW50J10sXG4gICAgICAgICAgICAgICAgJ3VzZWQnOiBiYWxhbmNlWydMb2NrZWRBbW91bnQnXSxcbiAgICAgICAgICAgICAgICAndG90YWwnOiBiYWxhbmNlWydBbW91bnQnXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXN1bHRbdXBwZXJjYXNlXSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0TGV2ZWwyRmlsdGVyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ2ZpbHRlcic6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIG9yZGVyYm9vayA9IG9yZGVyYm9va1swXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IG9yZGVyYm9va1snVGltZXN0YW1wJ107XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCwgJ0JpZHMnLCAnQXNrcycsICdQcmljZScsICdWb2x1bWUnKTtcbiAgICB9LFxuXG4gICAgcGFyc2VUaWNrZXIgKHRpY2tlciwgbWFya2V0KSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSAwO1xuICAgICAgICBsZXQgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdMYXN0QnV5VGltZXN0YW1wJyBpbiB0aWNrZXIpXG4gICAgICAgICAgICBpZiAodGltZXN0YW1wIDwgdGlja2VyWydMYXN0QnV5VGltZXN0YW1wJ10pIHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgPSB0aWNrZXJbJ0xhc3RCdXlUaW1lc3RhbXAnXTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gdGlja2VyWydMYXN0QnV5UHJpY2UnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKCdMYXN0U2VsbFRpbWVzdGFtcCcgaW4gdGlja2VyKVxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCA8IHRpY2tlclsnTGFzdFNlbGxUaW1lc3RhbXAnXSkge1xuICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IHRpY2tlclsnTGFzdFNlbGxUaW1lc3RhbXAnXTtcbiAgICAgICAgICAgICAgICBsYXN0ID0gdGlja2VyWydMYXN0U2VsbFByaWNlJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmICghdGltZXN0YW1wKVxuICAgICAgICAgICAgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiB0aWNrZXJbJ0RhaWx5QmVzdEJ1eVByaWNlJ10sXG4gICAgICAgICAgICAnbG93JzogdGlja2VyWydEYWlseUJlc3RTZWxsUHJpY2UnXSxcbiAgICAgICAgICAgICdiaWQnOiB0aWNrZXJbJ0Jlc3RCaWQnXSxcbiAgICAgICAgICAgICdhc2snOiB0aWNrZXJbJ0Jlc3RBc2snXSxcbiAgICAgICAgICAgICd2d2FwJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IGxhc3QsXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdiYXNlVm9sdW1lJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3F1b3RlVm9sdW1lJzogdGlja2VyWydEYWlseVRyYWRlZFRvdGFsVm9sdW1lJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXJzICgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlcnMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlciAoKTtcbiAgICAgICAgdGlja2VycyA9IHRoaXMuaW5kZXhCeSAodGlja2VycywgJ1N5bWJvbCcpO1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKHRpY2tlcnMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChpZCBpbiB0aGlzLm1hcmtldHNfYnlfaWQpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldHNfYnlfaWRbaWRdO1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IG1hcmtldFsnc3ltYm9sJ107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBiYXNlID0gaWQuc2xpY2UgKDAsIDMpO1xuICAgICAgICAgICAgICAgIGxldCBxdW90ZSA9IGlkLnNsaWNlICgzLCA2KTtcbiAgICAgICAgICAgICAgICBpZiAoYmFzZSA9PSAnRFNIJylcbiAgICAgICAgICAgICAgICAgICAgYmFzZSA9ICdEQVNIJztcbiAgICAgICAgICAgICAgICBpZiAocXVvdGUgPT0gJ0RTSCcpXG4gICAgICAgICAgICAgICAgICAgIHF1b3RlID0gJ0RBU0gnO1xuICAgICAgICAgICAgICAgIHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgdGlja2VycyA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyRmlsdGVyICh7XG4gICAgICAgICAgICAnZmlsdGVyJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRpY2tlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBmZXRjaFRpY2tlciByZXR1cm5lZCBlbXB0eSByZXNwb25zZSwgeEJUQ2UgcHVibGljIEFQSSBlcnJvcicpO1xuICAgICAgICB0aWNrZXJzID0gdGhpcy5pbmRleEJ5ICh0aWNrZXJzLCAnU3ltYm9sJyk7XG4gICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW21hcmtldFsnaWQnXV07XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGlja2VyICh0aWNrZXIsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIC8vIG5vIG1ldGhvZCBmb3IgdHJhZGVzP1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlR2V0VHJhZGUgKHBhcmFtcyk7XG4gICAgfSxcblxuICAgIHBhcnNlT0hMQ1YgKG9obGN2LCBtYXJrZXQgPSB1bmRlZmluZWQsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb2hsY3ZbJ1RpbWVzdGFtcCddLFxuICAgICAgICAgICAgb2hsY3ZbJ09wZW4nXSxcbiAgICAgICAgICAgIG9obGN2WydIaWdoJ10sXG4gICAgICAgICAgICBvaGxjdlsnTG93J10sXG4gICAgICAgICAgICBvaGxjdlsnQ2xvc2UnXSxcbiAgICAgICAgICAgIG9obGN2WydWb2x1bWUnXSxcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPSExDViAoc3ltYm9sLCB0aW1lZnJhbWUgPSAnMW0nLCBzaW5jZSA9IHVuZGVmaW5lZCwgbGltaXQgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHRocm93IG5ldyBOb3RTdXBwb3J0ZWQgKHRoaXMuaWQgKyAnIGZldGNoT0hMQ1YgaXMgZGlzYWJsZWQgYnkgdGhlIGV4Y2hhbmdlJyk7XG4gICAgICAgIGxldCBtaW51dGVzID0gcGFyc2VJbnQgKHRpbWVmcmFtZSAvIDYwKTsgLy8gMSBtaW51dGUgYnkgZGVmYXVsdFxuICAgICAgICBsZXQgcGVyaW9kaWNpdHkgPSBtaW51dGVzLnRvU3RyaW5nICgpO1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGlmICghc2luY2UpXG4gICAgICAgICAgICBzaW5jZSA9IHRoaXMuc2Vjb25kcyAoKSAtIDg2NDAwICogNzsgLy8gbGFzdCBkYXkgYnkgZGVmdWxhdFxuICAgICAgICBpZiAoIWxpbWl0KVxuICAgICAgICAgICAgbGltaXQgPSAxMDAwOyAvLyBkZWZhdWx0XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZUdldFF1b3RlaGlzdG9yeVN5bWJvbFBlcmlvZGljaXR5QmFyc0JpZCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAncGVyaW9kaWNpdHknOiAnNW0nLCAvLyBwZXJpb2RpY2l0eSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiBzaW5jZSxcbiAgICAgICAgICAgICdjb3VudCc6IGxpbWl0LFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPSExDVnMgKHJlc3BvbnNlWydCYXJzJ10sIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBpZiAodHlwZSA9PSAnbWFya2V0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBhbGxvd3MgbGltaXQgb3JkZXJzIG9ubHknKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy50YXBpUG9zdFRyYWRlICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdyYXRlJzogcHJpY2UsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiByZXNwb25zZSxcbiAgICAgICAgICAgICdpZCc6IHJlc3BvbnNlWydJZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVEZWxldGVUcmFkZSAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdUeXBlJzogJ0NhbmNlbCcsXG4gICAgICAgICAgICAnSWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIG5vbmNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgIH0sXG5cbiAgICByZXF1ZXN0IChwYXRoLCBhcGkgPSAnYXBpJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICghdGhpcy5hcGlLZXkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvciAodGhpcy5pZCArICcgcmVxdWlyZXMgYXBpS2V5IGZvciBhbGwgcmVxdWVzdHMsIHRoZWlyIHB1YmxpYyBBUEkgaXMgYWx3YXlzIGJ1c3knKTtcbiAgICAgICAgaWYgKCF0aGlzLnVpZClcbiAgICAgICAgICAgIHRocm93IG5ldyBBdXRoZW50aWNhdGlvbkVycm9yICh0aGlzLmlkICsgJyByZXF1aXJlcyB1aWQgcHJvcGVydHkgZm9yIGF1dGhlbnRpY2F0aW9uIGFuZCB0cmFkaW5nJyk7XG4gICAgICAgIGxldCB1cmwgPSB0aGlzLnVybHNbJ2FwaSddICsgJy8nICsgdGhpcy52ZXJzaW9uO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKVxuICAgICAgICAgICAgdXJsICs9ICcvJyArIGFwaTtcbiAgICAgICAgdXJsICs9ICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5vbWl0IChwYXJhbXMsIHRoaXMuZXh0cmFjdFBhcmFtcyAocGF0aCkpO1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoZWFkZXJzID0geyAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnIH07XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSAnUE9TVCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSB0aGlzLmpzb24gKHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBhdXRoID0gbm9uY2UgKyB0aGlzLnVpZCArIHRoaXMuYXBpS2V5ICsgbWV0aG9kICsgdXJsO1xuICAgICAgICAgICAgaWYgKGJvZHkpXG4gICAgICAgICAgICAgICAgYXV0aCArPSBib2R5O1xuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGF1dGgpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhMjU2JywgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgbGV0IGNyZWRlbnRpYWxzID0gdGhpcy51aWQgKyAnOicgKyB0aGlzLmFwaUtleSArICc6JyArIG5vbmNlICsgJzonICsgdGhpcy5iaW5hcnlUb1N0cmluZyAoc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIGhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9ICdITUFDICcgKyBjcmVkZW50aWFscztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaCAodXJsLCBtZXRob2QsIGhlYWRlcnMsIGJvZHkpO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHlvYml0ID0ge1xuXG4gICAgJ2lkJzogJ3lvYml0JyxcbiAgICAnbmFtZSc6ICdZb0JpdCcsXG4gICAgJ2NvdW50cmllcyc6ICdSVScsXG4gICAgJ3JhdGVMaW1pdCc6IDIwMDAsIC8vIHJlc3BvbnNlcyBhcmUgY2FjaGVkIGV2ZXJ5IDIgc2Vjb25kc1xuICAgICd2ZXJzaW9uJzogJzMnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2OTEwLWNkY2JmZGFlLTVlZWEtMTFlNy05ODU5LTAzZmVhODczMjcyZC5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8veW9iaXQubmV0JyxcbiAgICAgICAgJ3d3dyc6ICdodHRwczovL3d3dy55b2JpdC5uZXQnLFxuICAgICAgICAnZG9jJzogJ2h0dHBzOi8vd3d3LnlvYml0Lm5ldC9lbi9hcGkvJyxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdhcGknOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdkZXB0aC97cGFpcnN9JyxcbiAgICAgICAgICAgICAgICAnaW5mbycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlci97cGFpcnN9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3twYWlyc30nLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3RhcGknOiB7XG4gICAgICAgICAgICAncG9zdCc6IFtcbiAgICAgICAgICAgICAgICAnQWN0aXZlT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnQ2FuY2VsT3JkZXInLFxuICAgICAgICAgICAgICAgICdHZXREZXBvc2l0QWRkcmVzcycsXG4gICAgICAgICAgICAgICAgJ2dldEluZm8nLFxuICAgICAgICAgICAgICAgICdPcmRlckluZm8nLFxuICAgICAgICAgICAgICAgICdUcmFkZScsXG4gICAgICAgICAgICAgICAgJ1RyYWRlSGlzdG9yeScsXG4gICAgICAgICAgICAgICAgJ1dpdGhkcmF3Q29pbnNUb0FkZHJlc3MnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLmFwaUdldEluZm8gKCk7XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMgKG1hcmtldHNbJ3BhaXJzJ10pO1xuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwga2V5cy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgbGV0IGlkID0ga2V5c1twXTtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzWydwYWlycyddW2lkXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBpZC50b1VwcGVyQ2FzZSAoKS5yZXBsYWNlICgnXycsICcvJyk7XG4gICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gc3ltYm9sLnNwbGl0ICgnLycpO1xuICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgIHF1b3RlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKHF1b3RlKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoICh7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3N5bWJvbCc6IHN5bWJvbCxcbiAgICAgICAgICAgICAgICAnYmFzZSc6IGJhc2UsXG4gICAgICAgICAgICAgICAgJ3F1b3RlJzogcXVvdGUsXG4gICAgICAgICAgICAgICAgJ2luZm8nOiBtYXJrZXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaEJhbGFuY2UgKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMudGFwaVBvc3RHZXRJbmZvICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsncmV0dXJuJ107XG4gICAgICAgIGxldCByZXN1bHQgPSB7ICdpbmZvJzogYmFsYW5jZXMgfTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmN1cnJlbmNpZXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW5jeSA9IHRoaXMuY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBsb3dlcmNhc2UgPSBjdXJyZW5jeS50b0xvd2VyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0gdGhpcy5hY2NvdW50ICgpO1xuICAgICAgICAgICAgaWYgKCdmdW5kcycgaW4gYmFsYW5jZXMpXG4gICAgICAgICAgICAgICAgaWYgKGxvd2VyY2FzZSBpbiBiYWxhbmNlc1snZnVuZHMnXSlcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsnZnJlZSddID0gYmFsYW5jZXNbJ2Z1bmRzJ11bbG93ZXJjYXNlXTtcbiAgICAgICAgICAgIGlmICgnZnVuZHNfaW5jbF9vcmRlcnMnIGluIGJhbGFuY2VzKVxuICAgICAgICAgICAgICAgIGlmIChsb3dlcmNhc2UgaW4gYmFsYW5jZXNbJ2Z1bmRzX2luY2xfb3JkZXJzJ10pXG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSBiYWxhbmNlc1snZnVuZHNfaW5jbF9vcmRlcnMnXVtsb3dlcmNhc2VdO1xuICAgICAgICAgICAgaWYgKGFjY291bnRbJ3RvdGFsJ10gJiYgYWNjb3VudFsnZnJlZSddKVxuICAgICAgICAgICAgICAgIGFjY291bnRbJ3VzZWQnXSA9IGFjY291bnRbJ3RvdGFsJ10gLSBhY2NvdW50WydmcmVlJ107XG4gICAgICAgICAgICByZXN1bHRbY3VycmVuY3ldID0gYWNjb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9yZGVyQm9vayAoc3ltYm9sLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpR2V0RGVwdGhQYWlycyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlycyc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIGxldCBvcmRlcmJvb2sgPSByZXNwb25zZVttYXJrZXRbJ2lkJ11dO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdGhpcy5taWxsaXNlY29uZHMgKCk7XG4gICAgICAgIGxldCBiaWRzID0gKCdiaWRzJyBpbiBvcmRlcmJvb2spID8gb3JkZXJib29rWydiaWRzJ10gOiBbXTtcbiAgICAgICAgbGV0IGFza3MgPSAoJ2Fza3MnIGluIG9yZGVyYm9vaykgPyBvcmRlcmJvb2tbJ2Fza3MnXSA6IFtdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2JpZHMnOiBiaWRzLFxuICAgICAgICAgICAgJ2Fza3MnOiBhc2tzLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hUaWNrZXIgKHN5bWJvbCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgbWFya2V0ID0gdGhpcy5tYXJrZXQgKHN5bWJvbCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5hcGlHZXRUaWNrZXJQYWlycyAoe1xuICAgICAgICAgICAgJ3BhaXJzJzogbWFya2V0WydpZCddLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpY2tlciA9IHRpY2tlcnNbbWFya2V0WydpZCddXTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsndXBkYXRlZCddICogMTAwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnaGlnaCc6IHBhcnNlRmxvYXQgKHRpY2tlclsnaGlnaCddKSxcbiAgICAgICAgICAgICdsb3cnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xvdyddKSxcbiAgICAgICAgICAgICdiaWQnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2J1eSddKSxcbiAgICAgICAgICAgICdhc2snOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3NlbGwnXSksXG4gICAgICAgICAgICAndndhcCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdvcGVuJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2ZpcnN0JzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2xhc3QnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2xhc3QnXSksXG4gICAgICAgICAgICAnY2hhbmdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3BlcmNlbnRhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYXZlcmFnZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsnYXZnJ10pLFxuICAgICAgICAgICAgJ2Jhc2VWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbF9jdXInXSksXG4gICAgICAgICAgICAncXVvdGVWb2x1bWUnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ3ZvbCddKSxcbiAgICAgICAgICAgICdpbmZvJzogdGlja2VyLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBwYXJzZVRyYWRlICh0cmFkZSwgbWFya2V0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCB0aW1lc3RhbXAgPSB0cmFkZVsndGltZXN0YW1wJ10gKiAxMDAwO1xuICAgICAgICBsZXQgc2lkZSA9ICh0cmFkZVsndHlwZSddID09ICdiaWQnKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2luZm8nOiB0cmFkZSxcbiAgICAgICAgICAgICdpZCc6IHRyYWRlWyd0aWQnXS50b1N0cmluZyAoKSxcbiAgICAgICAgICAgICd0aW1lc3RhbXAnOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAnZGF0ZXRpbWUnOiB0aGlzLmlzbzg2MDEgKHRpbWVzdGFtcCksXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ3NpZGUnOiBzaWRlLFxuICAgICAgICAgICAgJ3ByaWNlJzogdHJhZGVbJ3ByaWNlJ10sXG4gICAgICAgICAgICAnYW1vdW50JzogdHJhZGVbJ2Ftb3VudCddLFxuICAgICAgICB9O1xuICAgIH0sICAgICAgICBcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlHZXRUcmFkZXNQYWlycyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdwYWlycyc6IG1hcmtldFsnaWQnXSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHJhZGVzIChyZXNwb25zZVttYXJrZXRbJ2lkJ11dLCBtYXJrZXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBpZiAodHlwZSA9PSAnbWFya2V0JylcbiAgICAgICAgICAgIHRocm93IG5ldyBFeGNoYW5nZUVycm9yICh0aGlzLmlkICsgJyBhbGxvd3MgbGltaXQgb3JkZXJzIG9ubHknKTtcbiAgICAgICAgbGV0IHJhdGUgPSBwcmljZS50b1N0cmluZyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy50YXBpUG9zdFRyYWRlICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChzeW1ib2wpLFxuICAgICAgICAgICAgJ3R5cGUnOiBzaWRlLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IGFtb3VudCxcbiAgICAgICAgICAgICdyYXRlJzogJyUuOGYnLnNwcmludGYgKHByaWNlKSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3JldHVybiddWydvcmRlcl9pZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnRhcGlQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJfaWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIGFzeW5jIHJlcXVlc3QgKHBhdGgsIGFwaSA9ICdhcGknLCBtZXRob2QgPSAnR0VUJywgcGFyYW1zID0ge30sIGhlYWRlcnMgPSB1bmRlZmluZWQsIGJvZHkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyAnLycgKyBhcGk7XG4gICAgICAgIGlmIChhcGkgPT0gJ2FwaScpIHtcbiAgICAgICAgICAgIHVybCArPSAnLycgKyB0aGlzLnZlcnNpb24gKyAnLycgKyB0aGlzLmltcGxvZGVQYXJhbXMgKHBhdGgsIHBhcmFtcyk7XG4gICAgICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLm9taXQgKHBhcmFtcywgdGhpcy5leHRyYWN0UGFyYW1zIChwYXRoKSk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy5leHRlbmQgKHsgJ21ldGhvZCc6IHBhdGgsICdub25jZSc6IG5vbmNlIH0sIHBhcmFtcyk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHF1ZXJ5KTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdrZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnc2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIHl1bmJpID0ge1xuXG4gICAgJ2lkJzogJ3l1bmJpJyxcbiAgICAnbmFtZSc6ICdZVU5CSScsXG4gICAgJ2NvdW50cmllcyc6ICdDTicsXG4gICAgJ3JhdGVMaW1pdCc6IDEwMDAsXG4gICAgJ3ZlcnNpb24nOiAndjInLFxuICAgICdoYXNGZXRjaFRpY2tlcnMnOiB0cnVlLFxuICAgICdoYXNGZXRjaE9ITENWJzogdHJ1ZSxcbiAgICAndGltZWZyYW1lcyc6IHtcbiAgICAgICAgJzFtJzogJzEnLFxuICAgICAgICAnNW0nOiAnNScsXG4gICAgICAgICcxNW0nOiAnMTUnLFxuICAgICAgICAnMzBtJzogJzMwJyxcbiAgICAgICAgJzFoJzogJzYwJyxcbiAgICAgICAgJzJoJzogJzEyMCcsXG4gICAgICAgICc0aCc6ICcyNDAnLFxuICAgICAgICAnMTJoJzogJzcyMCcsXG4gICAgICAgICcxZCc6ICcxNDQwJyxcbiAgICAgICAgJzNkJzogJzQzMjAnLFxuICAgICAgICAnMXcnOiAnMTAwODAnLFxuICAgIH0sXG4gICAgJ3VybHMnOiB7XG4gICAgICAgICdsb2dvJzogJ2h0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzEyOTQ0NTQvMjg1NzA1NDgtNGQ2NDZjNDAtNzE0Ny0xMWU3LTljZjYtODM5YjkzZTZkNjIyLmpwZycsXG4gICAgICAgICdhcGknOiAnaHR0cHM6Ly95dW5iaS5jb20nLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8veXVuYmkuY29tJyxcbiAgICAgICAgJ2RvYyc6IFtcbiAgICAgICAgICAgICdodHRwczovL3l1bmJpLmNvbS9kb2N1bWVudHMvYXBpL2d1aWRlJyxcbiAgICAgICAgICAgICdodHRwczovL3l1bmJpLmNvbS9zd2FnZ2VyLycsXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICAnYXBpJzoge1xuICAgICAgICAncHVibGljJzoge1xuICAgICAgICAgICAgJ2dldCc6IFtcbiAgICAgICAgICAgICAgICAndGlja2VycycsXG4gICAgICAgICAgICAgICAgJ3RpY2tlcnMve21hcmtldH0nLFxuICAgICAgICAgICAgICAgICdtYXJrZXRzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXJfYm9vaycsXG4gICAgICAgICAgICAgICAgJ2snLFxuICAgICAgICAgICAgICAgICdkZXB0aCcsXG4gICAgICAgICAgICAgICAgJ3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ2tfd2l0aF9wZW5kaW5nX3RyYWRlcycsXG4gICAgICAgICAgICAgICAgJ3RpbWVzdGFtcCcsXG4gICAgICAgICAgICAgICAgJ2FkZHJlc3Nlcy97YWRkcmVzc30nLFxuICAgICAgICAgICAgICAgICdwYXJ0bmVycy9vcmRlcnMve2lkfS90cmFkZXMnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgJ3ByaXZhdGUnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdkZXBvc2l0cycsXG4gICAgICAgICAgICAgICAgJ21lbWJlcnMvbWUnLFxuICAgICAgICAgICAgICAgICdkZXBvc2l0JyxcbiAgICAgICAgICAgICAgICAnZGVwb3NpdF9hZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAnb3JkZXInLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICd0cmFkZXMvbXknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdvcmRlci9kZWxldGUnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMnLFxuICAgICAgICAgICAgICAgICdvcmRlcnMvbXVsdGknLFxuICAgICAgICAgICAgICAgICdvcmRlcnMvY2xlYXInLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hNYXJrZXRzICgpIHtcbiAgICAgICAgbGV0IG1hcmtldHMgPSBhd2FpdCB0aGlzLnB1YmxpY0dldE1hcmtldHMgKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBtYXJrZXRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gbWFya2V0c1twXTtcbiAgICAgICAgICAgIGxldCBpZCA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgICAgIGxldCBzeW1ib2wgPSBtYXJrZXRbJ25hbWUnXTtcbiAgICAgICAgICAgIGxldCBbIGJhc2UsIHF1b3RlIF0gPSBzeW1ib2wuc3BsaXQgKCcvJyk7XG4gICAgICAgICAgICBiYXNlID0gdGhpcy5jb21tb25DdXJyZW5jeUNvZGUgKGJhc2UpO1xuICAgICAgICAgICAgcXVvdGUgPSB0aGlzLmNvbW1vbkN1cnJlbmN5Q29kZSAocXVvdGUpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlR2V0TWVtYmVyc01lICgpO1xuICAgICAgICBsZXQgYmFsYW5jZXMgPSByZXNwb25zZVsnYWNjb3VudHMnXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGJhbGFuY2VzLmxlbmd0aDsgYisrKSB7XG4gICAgICAgICAgICBsZXQgYmFsYW5jZSA9IGJhbGFuY2VzW2JdO1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gYmFsYW5jZVsnY3VycmVuY3knXTtcbiAgICAgICAgICAgIGxldCB1cHBlcmNhc2UgPSBjdXJyZW5jeS50b1VwcGVyQ2FzZSAoKTtcbiAgICAgICAgICAgIGxldCBhY2NvdW50ID0ge1xuICAgICAgICAgICAgICAgICdmcmVlJzogcGFyc2VGbG9hdCAoYmFsYW5jZVsnYmFsYW5jZSddKSxcbiAgICAgICAgICAgICAgICAndXNlZCc6IHBhcnNlRmxvYXQgKGJhbGFuY2VbJ2xvY2tlZCddKSxcbiAgICAgICAgICAgICAgICAndG90YWwnOiAwLjAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWNjb3VudFsndG90YWwnXSA9IHRoaXMuc3VtIChhY2NvdW50WydmcmVlJ10sIGFjY291bnRbJ3VzZWQnXSk7XG4gICAgICAgICAgICByZXN1bHRbdXBwZXJjYXNlXSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgb3JkZXJib29rID0gYXdhaXQgdGhpcy5wdWJsaWNHZXREZXB0aCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgICAgICAnbGltaXQnOiAzMDAsXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gb3JkZXJib29rWyd0aW1lc3RhbXAnXSAqIDEwMDA7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnBhcnNlT3JkZXJCb29rIChvcmRlcmJvb2ssIHRpbWVzdGFtcCk7XG4gICAgICAgIHJlc3VsdFsnYmlkcyddID0gdGhpcy5zb3J0QnkgKHJlc3VsdFsnYmlkcyddLCAwLCB0cnVlKTtcbiAgICAgICAgcmVzdWx0Wydhc2tzJ10gPSB0aGlzLnNvcnRCeSAocmVzdWx0Wydhc2tzJ10sIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBwYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRpY2tlclsnYXQnXSAqIDEwMDA7XG4gICAgICAgIHRpY2tlciA9IHRpY2tlclsndGlja2VyJ107XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndGltZXN0YW1wJzogdGltZXN0YW1wLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJzogdGhpcy5pc284NjAxICh0aW1lc3RhbXApLFxuICAgICAgICAgICAgJ2hpZ2gnOiBwYXJzZUZsb2F0ICh0aWNrZXJbJ2hpZ2gnXSksXG4gICAgICAgICAgICAnbG93JzogcGFyc2VGbG9hdCAodGlja2VyWydsb3cnXSksXG4gICAgICAgICAgICAnYmlkJzogcGFyc2VGbG9hdCAodGlja2VyWydidXknXSksXG4gICAgICAgICAgICAnYXNrJzogcGFyc2VGbG9hdCAodGlja2VyWydzZWxsJ10pLFxuICAgICAgICAgICAgJ3Z3YXAnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnb3Blbic6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdjbG9zZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdmaXJzdCc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdsYXN0JzogcGFyc2VGbG9hdCAodGlja2VyWydsYXN0J10pLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHBhcnNlRmxvYXQgKHRpY2tlclsndm9sJ10pLFxuICAgICAgICAgICAgJ2luZm8nOiB0aWNrZXIsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VycyAoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCB0aWNrZXJzID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUaWNrZXJzICgpO1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKHRpY2tlcnMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaWQgPSBpZHNbaV07XG4gICAgICAgICAgICBsZXQgbWFya2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGlkO1xuICAgICAgICAgICAgaWYgKGlkIGluIHRoaXMubWFya2V0c19ieV9pZCkge1xuICAgICAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtpZF07XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gbWFya2V0WydzeW1ib2wnXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBpZC5zbGljZSAoMCwgMyk7XG4gICAgICAgICAgICAgICAgbGV0IHF1b3RlID0gaWQuc2xpY2UgKDMsIDYpO1xuICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgICAgIHF1b3RlID0gcXVvdGUudG9VcHBlckNhc2UgKCk7XG4gICAgICAgICAgICAgICAgYmFzZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChiYXNlKTtcbiAgICAgICAgICAgICAgICBxdW90ZSA9IHRoaXMuY29tbW9uQ3VycmVuY3lDb2RlIChxdW90ZSk7XG4gICAgICAgICAgICAgICAgbGV0IHN5bWJvbCA9IGJhc2UgKyAnLycgKyBxdW90ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0aWNrZXIgPSB0aWNrZXJzW2lkXTtcbiAgICAgICAgICAgIHJlc3VsdFtzeW1ib2xdID0gdGhpcy5wYXJzZVRpY2tlciAodGlja2VyLCBtYXJrZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChzeW1ib2wpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRpY2tlcnNNYXJrZXQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRpY2tlciAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIHBhcnNlVHJhZGUgKHRyYWRlLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRyYWRlWyd0aW1lc3RhbXAnXSAqIDEwMDA7XG4gICAgICAgIGxldCBzaWRlID0gKHRyYWRlWyd0eXBlJ10gPT0gJ2JpZCcpID8gJ2J1eScgOiAnc2VsbCc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ2lkJzogdHJhZGVbJ3RpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSwgICAgICAgIFxuXG4gICAgYXN5bmMgZmV0Y2hUcmFkZXMgKHN5bWJvbCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnB1YmxpY0dldFRyYWRlcyAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICdtYXJrZXQnOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICAvLyBsb29rcyBsaWtlIHRoZXkgc3dpdGNoZWQgdGhpcyBlbmRwb2ludCBvZmZcbiAgICAgICAgLy8gaXQgcmV0dXJucyA1MDMgU2VydmljZSBUZW1wb3JhcmlseSBVbmF2YWlsYWJsZSBhbHdheXNcbiAgICAgICAgLy8gcmV0dXJuIHRoaXMucGFyc2VUcmFkZXMgKHJlcG9uc2UsIG1hcmtldCk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxuXG4gICAgcGFyc2VPSExDViAob2hsY3YsIG1hcmtldCA9IHVuZGVmaW5lZCwgdGltZWZyYW1lID0gJzFtJywgc2luY2UgPSB1bmRlZmluZWQsIGxpbWl0ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBvaGxjdlswXSAqIDEwMDAsXG4gICAgICAgICAgICBvaGxjdlsxXSxcbiAgICAgICAgICAgIG9obGN2WzJdLFxuICAgICAgICAgICAgb2hsY3ZbM10sXG4gICAgICAgICAgICBvaGxjdls0XSxcbiAgICAgICAgICAgIG9obGN2WzVdLFxuICAgICAgICBdO1xuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE9ITENWIChzeW1ib2wsIHRpbWVmcmFtZSA9ICcxbScsIHNpbmNlID0gdW5kZWZpbmVkLCBsaW1pdCA9IHVuZGVmaW5lZCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICBpZiAoIWxpbWl0KVxuICAgICAgICAgICAgbGltaXQgPSA1MDA7IC8vIGRlZmF1bHQgaXMgMzBcbiAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAnbWFya2V0JzogbWFya2V0WydpZCddLFxuICAgICAgICAgICAgJ3BlcmlvZCc6IHRoaXMudGltZWZyYW1lc1t0aW1lZnJhbWVdLFxuICAgICAgICAgICAgJ2xpbWl0JzogbGltaXQsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChzaW5jZSlcbiAgICAgICAgICAgIHJlcXVlc3RbJ3RpbWVzdGFtcCddID0gc2luY2U7XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHVibGljR2V0SyAodGhpcy5leHRlbmQgKHJlcXVlc3QsIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9ITENWcyAocmVzcG9uc2UsIG1hcmtldCwgdGltZWZyYW1lLCBzaW5jZSwgbGltaXQpO1xuICAgIH0sXG5cbiAgICBhc3luYyBjcmVhdGVPcmRlciAoc3ltYm9sLCB0eXBlLCBzaWRlLCBhbW91bnQsIHByaWNlID0gdW5kZWZpbmVkLCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICBsZXQgb3JkZXIgPSB7XG4gICAgICAgICAgICAnbWFya2V0JzogdGhpcy5tYXJrZXRJZCAoc3ltYm9sKSxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICd2b2x1bWUnOiBhbW91bnQudG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnb3JkX3R5cGUnOiB0eXBlLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZSA9PSAnbGltaXQnKSB7XG4gICAgICAgICAgICBvcmRlclsncHJpY2UnXSA9IHByaWNlLnRvU3RyaW5nICgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RPcmRlcnMgKHRoaXMuZXh0ZW5kIChvcmRlciwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ2lkJ10udG9TdHJpbmcgKCksXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGNhbmNlbE9yZGVyIChpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNYXJrZXRzICgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcml2YXRlUG9zdE9yZGVyRGVsZXRlICh7ICdpZCc6IGlkIH0pO1xuICAgIH0sXG5cbiAgICBhc3luYyByZXF1ZXN0IChwYXRoLCBhcGkgPSAncHVibGljJywgbWV0aG9kID0gJ0dFVCcsIHBhcmFtcyA9IHt9LCBoZWFkZXJzID0gdW5kZWZpbmVkLCBib2R5ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCByZXF1ZXN0ID0gJy9hcGkvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKSArICcuanNvbic7XG4gICAgICAgIGxldCBxdWVyeSA9IHRoaXMub21pdCAocGFyYW1zLCB0aGlzLmV4dHJhY3RQYXJhbXMgKHBhdGgpKTtcbiAgICAgICAgbGV0IHVybCA9IHRoaXMudXJsc1snYXBpJ10gKyByZXF1ZXN0O1xuICAgICAgICBpZiAoYXBpID09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMgKHF1ZXJ5KS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdXJsICs9ICc/JyArIHRoaXMudXJsZW5jb2RlIChxdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbm9uY2UgPSB0aGlzLm5vbmNlICgpLnRvU3RyaW5nICgpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMua2V5c29ydCAodGhpcy5leHRlbmQgKHtcbiAgICAgICAgICAgICAgICAnYWNjZXNzX2tleSc6IHRoaXMuYXBpS2V5LFxuICAgICAgICAgICAgICAgICd0b25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgfSwgcGFyYW1zKSkpO1xuICAgICAgICAgICAgbGV0IGF1dGggPSBtZXRob2QgKyAnfCcgKyByZXF1ZXN0ICsgJ3wnICsgcXVlcnk7XG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gdGhpcy5obWFjICh0aGlzLmVuY29kZSAoYXV0aCksIHRoaXMuZW5jb2RlICh0aGlzLnNlY3JldCkpO1xuICAgICAgICAgICAgbGV0IHN1ZmZpeCA9IHF1ZXJ5ICsgJyZzaWduYXR1cmU9JyArIHNpZ25hdHVyZTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gJ0dFVCcpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgc3VmZml4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5ID0gc3VmZml4O1xuICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtTGVuZ3RoJzogYm9keS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoICh1cmwsIG1ldGhvZCwgaGVhZGVycywgYm9keSk7XG4gICAgICAgIGlmICgnZXJyb3InIGluIHJlc3BvbnNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnICcgKyB0aGlzLmpzb24gKHJlc3BvbnNlKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9LFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciB6YWlmID0ge1xuXG4gICAgJ2lkJzogJ3phaWYnLFxuICAgICduYW1lJzogJ1phaWYnLFxuICAgICdjb3VudHJpZXMnOiAnSlAnLFxuICAgICdyYXRlTGltaXQnOiAyMDAwLFxuICAgICd2ZXJzaW9uJzogJzEnLFxuICAgICd1cmxzJzoge1xuICAgICAgICAnbG9nbyc6ICdodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS8xMjk0NDU0LzI3NzY2OTI3LTM5Y2EyYWRhLTVlZWItMTFlNy05NzJmLTFiNDE5OTUxOGNhNi5qcGcnLFxuICAgICAgICAnYXBpJzogJ2h0dHBzOi8vYXBpLnphaWYuanAnLFxuICAgICAgICAnd3d3JzogJ2h0dHBzOi8vemFpZi5qcCcsXG4gICAgICAgICdkb2MnOiBbXG4gICAgICAgICAgICAnaHR0cDovL3RlY2hidXJlYXUtYXBpLWRvY3VtZW50LnJlYWR0aGVkb2NzLmlvL2phL2xhdGVzdC9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICdodHRwczovL2NvcnAuemFpZi5qcC9hcGktZG9jcycsXG4gICAgICAgICAgICAnaHR0cHM6Ly9jb3JwLnphaWYuanAvYXBpLWRvY3MvYXBpX2xpbmtzJyxcbiAgICAgICAgICAgICdodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS96YWlmLmpwJyxcbiAgICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20veW91MjE5Nzkvbm9kZS16YWlmJyxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgICdhcGknOiB7XG4gICAgICAgICdwdWJsaWMnOiB7XG4gICAgICAgICAgICAnZ2V0JzogW1xuICAgICAgICAgICAgICAgICdkZXB0aC97cGFpcn0nLFxuICAgICAgICAgICAgICAgICdjdXJyZW5jaWVzL3twYWlyfScsXG4gICAgICAgICAgICAgICAgJ2N1cnJlbmNpZXMvYWxsJyxcbiAgICAgICAgICAgICAgICAnY3VycmVuY3lfcGFpcnMve3BhaXJ9JyxcbiAgICAgICAgICAgICAgICAnY3VycmVuY3lfcGFpcnMvYWxsJyxcbiAgICAgICAgICAgICAgICAnbGFzdF9wcmljZS97cGFpcn0nLFxuICAgICAgICAgICAgICAgICd0aWNrZXIve3BhaXJ9JyxcbiAgICAgICAgICAgICAgICAndHJhZGVzL3twYWlyfScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICAncHJpdmF0ZSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdhY3RpdmVfb3JkZXJzJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsX29yZGVyJyxcbiAgICAgICAgICAgICAgICAnZGVwb3NpdF9oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnZ2V0X2lkX2luZm8nLFxuICAgICAgICAgICAgICAgICdnZXRfaW5mbycsXG4gICAgICAgICAgICAgICAgJ2dldF9pbmZvMicsXG4gICAgICAgICAgICAgICAgJ2dldF9wZXJzb25hbF9pbmZvJyxcbiAgICAgICAgICAgICAgICAndHJhZGUnLFxuICAgICAgICAgICAgICAgICd0cmFkZV9oaXN0b3J5JyxcbiAgICAgICAgICAgICAgICAnd2l0aGRyYXcnLFxuICAgICAgICAgICAgICAgICd3aXRoZHJhd19oaXN0b3J5JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgICdlY2FwaSc6IHtcbiAgICAgICAgICAgICdwb3N0JzogW1xuICAgICAgICAgICAgICAgICdjcmVhdGVJbnZvaWNlJyxcbiAgICAgICAgICAgICAgICAnZ2V0SW52b2ljZScsXG4gICAgICAgICAgICAgICAgJ2dldEludm9pY2VJZHNCeU9yZGVyTnVtYmVyJyxcbiAgICAgICAgICAgICAgICAnY2FuY2VsSW52b2ljZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIH0sXG5cbiAgICBhc3luYyBmZXRjaE1hcmtldHMgKCkge1xuICAgICAgICBsZXQgbWFya2V0cyA9IGF3YWl0IHRoaXMucHVibGljR2V0Q3VycmVuY3lQYWlyc0FsbCAoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IG1hcmtldHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgIGxldCBtYXJrZXQgPSBtYXJrZXRzW3BdO1xuICAgICAgICAgICAgbGV0IGlkID0gbWFya2V0WydjdXJyZW5jeV9wYWlyJ107XG4gICAgICAgICAgICBsZXQgc3ltYm9sID0gbWFya2V0WyduYW1lJ107XG4gICAgICAgICAgICBsZXQgWyBiYXNlLCBxdW90ZSBdID0gc3ltYm9sLnNwbGl0ICgnLycpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2ggKHtcbiAgICAgICAgICAgICAgICAnaWQnOiBpZCxcbiAgICAgICAgICAgICAgICAnc3ltYm9sJzogc3ltYm9sLFxuICAgICAgICAgICAgICAgICdiYXNlJzogYmFzZSxcbiAgICAgICAgICAgICAgICAncXVvdGUnOiBxdW90ZSxcbiAgICAgICAgICAgICAgICAnaW5mbyc6IG1hcmtldCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQmFsYW5jZSAocGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcml2YXRlUG9zdEdldEluZm8gKCk7XG4gICAgICAgIGxldCBiYWxhbmNlcyA9IHJlc3BvbnNlWydyZXR1cm4nXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgJ2luZm8nOiBiYWxhbmNlcyB9O1xuICAgICAgICBsZXQgY3VycmVuY2llcyA9IE9iamVjdC5rZXlzIChiYWxhbmNlc1snZnVuZHMnXSk7XG4gICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgY3VycmVuY2llcy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbmN5ID0gY3VycmVuY2llc1tjXTtcbiAgICAgICAgICAgIGxldCBiYWxhbmNlID0gYmFsYW5jZXNbJ2Z1bmRzJ11bY3VycmVuY3ldO1xuICAgICAgICAgICAgbGV0IHVwcGVyY2FzZSA9IGN1cnJlbmN5LnRvVXBwZXJDYXNlICgpO1xuICAgICAgICAgICAgbGV0IGFjY291bnQgPSB7XG4gICAgICAgICAgICAgICAgJ2ZyZWUnOiBiYWxhbmNlLFxuICAgICAgICAgICAgICAgICd1c2VkJzogMC4wLFxuICAgICAgICAgICAgICAgICd0b3RhbCc6IGJhbGFuY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCdkZXBvc2l0JyBpbiBiYWxhbmNlcykge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW5jeSBpbiBiYWxhbmNlc1snZGVwb3NpdCddKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRbJ3RvdGFsJ10gPSBiYWxhbmNlc1snZGVwb3NpdCddW2N1cnJlbmN5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFsndXNlZCddID0gYWNjb3VudFsndG90YWwnXSAtIGFjY291bnRbJ2ZyZWUnXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRbdXBwZXJjYXNlXSA9IGFjY291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcmRlckJvb2sgKG1hcmtldCwgcGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IG9yZGVyYm9vayA9IGF3YWl0IHRoaXMucHVibGljR2V0RGVwdGhQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlckJvb2sgKG9yZGVyYm9vayk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVGlja2VyIChtYXJrZXQpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWFya2V0cyAoKTtcbiAgICAgICAgbGV0IHRpY2tlciA9IGF3YWl0IHRoaXMucHVibGljR2V0VGlja2VyUGFpciAoe1xuICAgICAgICAgICAgJ3BhaXInOiB0aGlzLm1hcmtldElkIChtYXJrZXQpLFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcCA9IHRoaXMubWlsbGlzZWNvbmRzICgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdoaWdoJzogdGlja2VyWydoaWdoJ10sXG4gICAgICAgICAgICAnbG93JzogdGlja2VyWydsb3cnXSxcbiAgICAgICAgICAgICdiaWQnOiB0aWNrZXJbJ2JpZCddLFxuICAgICAgICAgICAgJ2Fzayc6IHRpY2tlclsnYXNrJ10sXG4gICAgICAgICAgICAndndhcCc6IHRpY2tlclsndndhcCddLFxuICAgICAgICAgICAgJ29wZW4nOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnY2xvc2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnZmlyc3QnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnbGFzdCc6IHRpY2tlclsnbGFzdCddLFxuICAgICAgICAgICAgJ2NoYW5nZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdwZXJjZW50YWdlJzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgJ2F2ZXJhZ2UnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnYmFzZVZvbHVtZSc6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICdxdW90ZVZvbHVtZSc6IHRpY2tlclsndm9sdW1lJ10sXG4gICAgICAgICAgICAnaW5mbyc6IHRpY2tlcixcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgcGFyc2VUcmFkZSAodHJhZGUsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgc2lkZSA9ICh0cmFkZVsndHJhZGVfdHlwZSddID09ICdiaWQnKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gdHJhZGVbJ2RhdGUnXSAqIDEwMDA7XG4gICAgICAgIGxldCBpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCdpZCcgaW4gdHJhZGUpIHtcbiAgICAgICAgICAgIGlkID0gdHJhZGVbJ2lkJ107XG4gICAgICAgIH0gZWxzZSBpZiAoJ3RpZCcgaW4gdHJhZGUpIHtcbiAgICAgICAgICAgIGlkID0gdHJhZGVbJ3RpZCddO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbWFya2V0KVxuICAgICAgICAgICAgbWFya2V0ID0gdGhpcy5tYXJrZXRzX2J5X2lkW3RyYWRlWydjdXJyZW5jeV9wYWlyJ11dO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogaWQudG9TdHJpbmcgKCksXG4gICAgICAgICAgICAnaW5mbyc6IHRyYWRlLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzeW1ib2wnOiBtYXJrZXRbJ3N5bWJvbCddLFxuICAgICAgICAgICAgJ3R5cGUnOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAnc2lkZSc6IHNpZGUsXG4gICAgICAgICAgICAncHJpY2UnOiB0cmFkZVsncHJpY2UnXSxcbiAgICAgICAgICAgICdhbW91bnQnOiB0cmFkZVsnYW1vdW50J10sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoVHJhZGVzIChzeW1ib2wsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGxldCBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wdWJsaWNHZXRUcmFkZXNQYWlyICh0aGlzLmV4dGVuZCAoe1xuICAgICAgICAgICAgJ3BhaXInOiBtYXJrZXRbJ2lkJ10sXG4gICAgICAgIH0sIHBhcmFtcykpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRyYWRlcyAocmVzcG9uc2UsIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyIChzeW1ib2wsIHR5cGUsIHNpZGUsIGFtb3VudCwgcHJpY2UgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIGlmICh0eXBlID09ICdtYXJrZXQnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2hhbmdlRXJyb3IgKHRoaXMuaWQgKyAnIGFsbG93cyBsaW1pdCBvcmRlcnMgb25seScpO1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0VHJhZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnY3VycmVuY3lfcGFpcic6IHRoaXMubWFya2V0SWQgKHN5bWJvbCksXG4gICAgICAgICAgICAnYWN0aW9uJzogKHNpZGUgPT0gJ2J1eScpID8gJ2JpZCcgOiAnYXNrJyxcbiAgICAgICAgICAgICdhbW91bnQnOiBhbW91bnQsXG4gICAgICAgICAgICAncHJpY2UnOiBwcmljZSxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnaW5mbyc6IHJlc3BvbnNlLFxuICAgICAgICAgICAgJ2lkJzogcmVzcG9uc2VbJ3JldHVybiddWydvcmRlcl9pZCddLnRvU3RyaW5nICgpLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBhc3luYyBjYW5jZWxPcmRlciAoaWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1hcmtldHMgKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnByaXZhdGVQb3N0Q2FuY2VsT3JkZXIgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAnb3JkZXJfaWQnOiBpZCxcbiAgICAgICAgfSwgcGFyYW1zKSk7XG4gICAgfSxcblxuICAgIHBhcnNlT3JkZXIgKG9yZGVyLCBtYXJrZXQgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgbGV0IHNpZGUgPSAob3JkZXJbJ2FjdGlvbiddID09ICdiaWQnKSA/ICdidXknIDogJ3NlbGwnO1xuICAgICAgICBsZXQgdGltZXN0YW1wID0gcGFyc2VJbnQgKG9yZGVyWyd0aW1lc3RhbXAnXSkgKiAxMDAwO1xuICAgICAgICBpZiAoIW1hcmtldClcbiAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0c19ieV9pZFtvcmRlclsnY3VycmVuY3lfcGFpciddXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IG9yZGVyWydpZCddLnRvU3RyaW5nICgpLFxuICAgICAgICAgICAgJ3RpbWVzdGFtcCc6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICdkYXRldGltZSc6IHRoaXMuaXNvODYwMSAodGltZXN0YW1wKSxcbiAgICAgICAgICAgICdzdGF0dXMnOiAnb3BlbicsXG4gICAgICAgICAgICAnc3ltYm9sJzogbWFya2V0WydzeW1ib2wnXSxcbiAgICAgICAgICAgICd0eXBlJzogJ2xpbWl0JyxcbiAgICAgICAgICAgICdzaWRlJzogc2lkZSxcbiAgICAgICAgICAgICdwcmljZSc6IG9yZGVyWydwcmljZSddLFxuICAgICAgICAgICAgJ2Ftb3VudCc6IG9yZGVyWydhbW91bnQnXSxcbiAgICAgICAgICAgICd0cmFkZXMnOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHBhcnNlT3JkZXJzIChvcmRlcnMsIG1hcmtldCA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgaWRzID0gT2JqZWN0LmtleXMgKG9yZGVycyk7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGlkc1tpXTtcbiAgICAgICAgICAgIGxldCBvcmRlciA9IG9yZGVyc1tpZF07XG4gICAgICAgICAgICBsZXQgZXh0ZW5kZWQgPSB0aGlzLmV4dGVuZCAob3JkZXIsIHsgJ2lkJzogaWQgfSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCAodGhpcy5wYXJzZU9yZGVyIChleHRlbmRlZCwgbWFya2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgYXN5bmMgZmV0Y2hPcGVuT3JkZXJzIChzeW1ib2wgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIGxldCByZXF1ZXN0ID0ge1xuICAgICAgICAvLyAgICAgJ2lzX3Rva2VuJzogZmFsc2UsXG4gICAgICAgIC8vICAgICAnaXNfdG9rZW5fYm90aCc6IGZhbHNlLFxuICAgICAgICAvLyB9O1xuICAgICAgICBsZXQgcmVxdWVzdCA9IHt9O1xuICAgICAgICBpZiAoc3ltYm9sKSB7XG4gICAgICAgICAgICBtYXJrZXQgPSB0aGlzLm1hcmtldCAoc3ltYm9sKTtcbiAgICAgICAgICAgIHJlcXVlc3RbJ2N1cnJlbmN5X3BhaXInXSA9IG1hcmtldFsnaWQnXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByaXZhdGVQb3N0QWN0aXZlT3JkZXJzICh0aGlzLmV4dGVuZCAocmVxdWVzdCwgcGFyYW1zKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3JkZXJzIChyZXNwb25zZVsncmV0dXJuJ10sIG1hcmtldCk7XG4gICAgfSxcblxuICAgIGFzeW5jIGZldGNoQ2xvc2VkT3JkZXJzIChzeW1ib2wgPSB1bmRlZmluZWQsIHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGxldCBtYXJrZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIGxldCByZXF1ZXN0ID0ge1xuICAgICAgICAvLyAgICAgJ2Zyb20nOiAwLFxuICAgICAgICAvLyAgICAgJ2NvdW50JzogMTAwMCxcbiAgICAgICAgLy8gICAgICdmcm9tX2lkJzogMCxcbiAgICAgICAgLy8gICAgICdlbmRfaWQnOiAxMDAwLFxuICAgICAgICAvLyAgICAgJ29yZGVyJzogJ0RFU0MnLFxuICAgICAgICAvLyAgICAgJ3NpbmNlJzogMTUwMzgyMTA1MSxcbiAgICAgICAgLy8gICAgICdlbmQnOiAxNTAzODIxMDUxLFxuICAgICAgICAvLyAgICAgJ2lzX3Rva2VuJzogZmFsc2UsXG4gICAgICAgIC8vIH07XG4gICAgICAgIGxldCByZXF1ZXN0ID0ge307XG4gICAgICAgIGlmIChzeW1ib2wpIHtcbiAgICAgICAgICAgIG1hcmtldCA9IHRoaXMubWFya2V0IChzeW1ib2wpO1xuICAgICAgICAgICAgcmVxdWVzdFsnY3VycmVuY3lfcGFpciddID0gbWFya2V0WydpZCddO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJpdmF0ZVBvc3RUcmFkZUhpc3RvcnkgKHRoaXMuZXh0ZW5kIChyZXF1ZXN0LCBwYXJhbXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcmRlcnMgKHJlc3BvbnNlWydyZXR1cm4nXSwgbWFya2V0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgcmVxdWVzdCAocGF0aCwgYXBpID0gJ2FwaScsIG1ldGhvZCA9ICdHRVQnLCBwYXJhbXMgPSB7fSwgaGVhZGVycyA9IHVuZGVmaW5lZCwgYm9keSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgdXJsID0gdGhpcy51cmxzWydhcGknXSArICcvJztcbiAgICAgICAgaWYgKGFwaSA9PSAncHVibGljJykge1xuICAgICAgICAgICAgdXJsICs9ICdhcGkvJyArIHRoaXMudmVyc2lvbiArICcvJyArIHRoaXMuaW1wbG9kZVBhcmFtcyAocGF0aCwgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCArPSAoYXBpID09ICdlY2FwaScpID8gJ2VjYXBpJyA6ICd0YXBpJztcbiAgICAgICAgICAgIGxldCBub25jZSA9IHRoaXMubm9uY2UgKCk7XG4gICAgICAgICAgICBib2R5ID0gdGhpcy51cmxlbmNvZGUgKHRoaXMuZXh0ZW5kICh7XG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHBhdGgsXG4gICAgICAgICAgICAgICAgJ25vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICB9LCBwYXJhbXMpKTtcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICAgICAgICdLZXknOiB0aGlzLmFwaUtleSxcbiAgICAgICAgICAgICAgICAnU2lnbic6IHRoaXMuaG1hYyAodGhpcy5lbmNvZGUgKGJvZHkpLCB0aGlzLmVuY29kZSAodGhpcy5zZWNyZXQpLCAnc2hhNTEyJyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2ggKHVybCwgbWV0aG9kLCBoZWFkZXJzLCBib2R5KTtcbiAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHJlc3BvbnNlWydlcnJvciddKTtcbiAgICAgICAgaWYgKCdzdWNjZXNzJyBpbiByZXNwb25zZSlcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2VbJ3N1Y2Nlc3MnXSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjaGFuZ2VFcnJvciAodGhpcy5pZCArICcgJyArIHRoaXMuanNvbiAocmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0sXG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudmFyIGV4Y2hhbmdlcyA9IHtcblxuICAgICdfMWJyb2tlcic6ICAgICAgXzFicm9rZXIsXG4gICAgJ18xYnRjeGUnOiAgICAgICBfMWJ0Y3hlLFxuICAgICdhbnhwcm8nOiAgICAgICAgYW54cHJvLFxuICAgICdiaW5hbmNlJzogICAgICAgYmluYW5jZSxcbiAgICAnYml0MmMnOiAgICAgICAgIGJpdDJjLFxuICAgICdiaXRiYXknOiAgICAgICAgYml0YmF5LFxuICAgICdiaXRiYXlzJzogICAgICAgYml0YmF5cyxcbiAgICAnYml0Y29pbmNvaWQnOiAgIGJpdGNvaW5jb2lkLFxuICAgICdiaXRmaW5leCc6ICAgICAgYml0ZmluZXgsXG4gICAgJ2JpdGZpbmV4Mic6ICAgICBiaXRmaW5leDIsXG4gICAgJ2JpdGZseWVyJzogICAgICBiaXRmbHllcixcbiAgICAnYml0bGlzaCc6ICAgICAgIGJpdGxpc2gsXG4gICAgJ2JpdG1hcmtldCc6ICAgICBiaXRtYXJrZXQsXG4gICAgJ2JpdG1leCc6ICAgICAgICBiaXRtZXgsXG4gICAgJ2JpdHNvJzogICAgICAgICBiaXRzbyxcbiAgICAnYml0c3RhbXAnOiAgICAgIGJpdHN0YW1wLFxuICAgICdiaXR0cmV4JzogICAgICAgYml0dHJleCxcbiAgICAnYmwzcCc6ICAgICAgICAgIGJsM3AsXG4gICAgJ2J0Y2NoaW5hJzogICAgICBidGNjaGluYSxcbiAgICAnYnRjZSc6ICAgICAgICAgIGJ0Y2UsXG4gICAgJ2J0Y2V4Y2hhbmdlJzogICBidGNleGNoYW5nZSxcbiAgICAnYnRjbWFya2V0cyc6ICAgIGJ0Y21hcmtldHMsXG4gICAgJ2J0Y3RyYWRldWEnOiAgICBidGN0cmFkZXVhLFxuICAgICdidGN0dXJrJzogICAgICAgYnRjdHVyayxcbiAgICAnYnRjeCc6ICAgICAgICAgIGJ0Y3gsXG4gICAgJ2J0ZXInOiAgICAgICAgICBidGVyLFxuICAgICdieGludGgnOiAgICAgICAgYnhpbnRoLFxuICAgICdjY2V4JzogICAgICAgICAgY2NleCxcbiAgICAnY2V4JzogICAgICAgICAgIGNleCxcbiAgICAnY2hidGMnOiAgICAgICAgIGNoYnRjLFxuICAgICdjaGlsZWJpdCc6ICAgICAgY2hpbGViaXQsXG4gICAgJ2NvaW5jaGVjayc6ICAgICBjb2luY2hlY2ssXG4gICAgJ2NvaW5mbG9vcic6ICAgICBjb2luZmxvb3IsXG4gICAgJ2NvaW5naSc6ICAgICAgICBjb2luZ2ksXG4gICAgJ2NvaW5tYXJrZXRjYXAnOiBjb2lubWFya2V0Y2FwLFxuICAgICdjb2lubWF0ZSc6ICAgICAgY29pbm1hdGUsXG4gICAgJ2NvaW5zZWN1cmUnOiAgICBjb2luc2VjdXJlLFxuICAgICdjb2luc3BvdCc6ICAgICAgY29pbnNwb3QsXG4gICAgJ2NyeXB0b3BpYSc6ICAgICBjcnlwdG9waWEsXG4gICAgJ2RzeCc6ICAgICAgICAgICBkc3gsXG4gICAgJ2V4bW8nOiAgICAgICAgICBleG1vLFxuICAgICdmbG93YnRjJzogICAgICAgZmxvd2J0YyxcbiAgICAnZm94Yml0JzogICAgICAgIGZveGJpdCxcbiAgICAnZnlic2UnOiAgICAgICAgIGZ5YnNlLFxuICAgICdmeWJzZyc6ICAgICAgICAgZnlic2csXG4gICAgJ2dhdGVjb2luJzogICAgICBnYXRlY29pbixcbiAgICAnZ2RheCc6ICAgICAgICAgIGdkYXgsXG4gICAgJ2dlbWluaSc6ICAgICAgICBnZW1pbmksXG4gICAgJ2hpdGJ0Yyc6ICAgICAgICBoaXRidGMsXG4gICAgJ2hpdGJ0YzInOiAgICAgICBoaXRidGMyLFxuICAgICdodW9iaSc6ICAgICAgICAgaHVvYmksXG4gICAgJ2l0Yml0JzogICAgICAgICBpdGJpdCxcbiAgICAnanViaSc6ICAgICAgICAgIGp1YmksXG4gICAgJ2tyYWtlbic6ICAgICAgICBrcmFrZW4sXG4gICAgJ2xha2VidGMnOiAgICAgICBsYWtlYnRjLFxuICAgICdsaXZlY29pbic6ICAgICAgbGl2ZWNvaW4sXG4gICAgJ2xpcXVpJzogICAgICAgICBsaXF1aSxcbiAgICAnbHVubyc6ICAgICAgICAgIGx1bm8sXG4gICAgJ21lcmNhZG8nOiAgICAgICBtZXJjYWRvLFxuICAgICdva2NvaW5jbnknOiAgICAgb2tjb2luY255LFxuICAgICdva2NvaW51c2QnOiAgICAgb2tjb2ludXNkLFxuICAgICdva2V4JzogICAgICAgICAgb2tleCxcbiAgICAncGF5bWl1bSc6ICAgICAgIHBheW1pdW0sXG4gICAgJ3BvbG9uaWV4JzogICAgICBwb2xvbmlleCxcbiAgICAncXVhZHJpZ2FjeCc6ICAgIHF1YWRyaWdhY3gsXG4gICAgJ3F1b2luZSc6ICAgICAgICBxdW9pbmUsXG4gICAgJ3NvdXRoeGNoYW5nZSc6ICBzb3V0aHhjaGFuZ2UsXG4gICAgJ3N1cmJpdGNvaW4nOiAgICBzdXJiaXRjb2luLFxuICAgICd0aGVyb2NrJzogICAgICAgdGhlcm9jayxcbiAgICAndXJkdWJpdCc6ICAgICAgIHVyZHViaXQsXG4gICAgJ3ZhdWx0b3JvJzogICAgICB2YXVsdG9ybyxcbiAgICAndmJ0Yyc6ICAgICAgICAgIHZidGMsXG4gICAgJ3ZpcndveCc6ICAgICAgICB2aXJ3b3gsXG4gICAgJ3hidGNlJzogICAgICAgICB4YnRjZSxcbiAgICAneW9iaXQnOiAgICAgICAgIHlvYml0LFxuICAgICd5dW5iaSc6ICAgICAgICAgeXVuYmksXG4gICAgJ3phaWYnOiAgICAgICAgICB6YWlmLFxufVxuXG5sZXQgZGVmaW5lQWxsRXhjaGFuZ2VzID0gZnVuY3Rpb24gKGV4Y2hhbmdlcykge1xuICAgIGxldCByZXN1bHQgPSB7fVxuICAgIGZvciAobGV0IGlkIGluIGV4Y2hhbmdlcylcbiAgICAgICAgcmVzdWx0W2lkXSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXhjaGFuZ2UgKGV4dGVuZCAoZXhjaGFuZ2VzW2lkXSwgcGFyYW1zKSlcbiAgICAgICAgfVxuICAgIHJlc3VsdC5leGNoYW5nZXMgPSBPYmplY3Qua2V5cyAoZXhjaGFuZ2VzKVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjY3h0ID0gT2JqZWN0LmFzc2lnbiAoZGVmaW5lQWxsRXhjaGFuZ2VzIChleGNoYW5nZXMpLCB7XG5cbiAgICB2ZXJzaW9uLFxuXG4gICAgLy8gZXhjZXB0aW9uc1xuXG4gICAgQ0NYVEVycm9yLFxuICAgIEV4Y2hhbmdlRXJyb3IsXG4gICAgTm90U3VwcG9ydGVkLFxuICAgIEF1dGhlbnRpY2F0aW9uRXJyb3IsXG4gICAgSW5zdWZmaWNpZW50RnVuZHMsXG4gICAgTmV0d29ya0Vycm9yLFxuICAgIEREb1NQcm90ZWN0aW9uLFxuICAgIFJlcXVlc3RUaW1lb3V0LFxuICAgIEV4Y2hhbmdlTm90QXZhaWxhYmxlLFxuXG4gICAgLy8gY29tbW9uIHV0aWxpdHkgZnVuY3Rpb25zXG5cbiAgICBzbGVlcCxcbiAgICB0aW1lb3V0LFxuICAgIGNhcGl0YWxpemUsXG4gICAga2V5c29ydCxcbiAgICBleHRlbmQsXG4gICAgb21pdCxcbiAgICBpbmRleEJ5LFxuICAgIHNvcnRCeSxcbiAgICBmbGF0dGVuLFxuICAgIHVuaXF1ZSxcbiAgICBwbHVjayxcbiAgICB1cmxlbmNvZGUsXG4gICAgc3VtLFxuICAgIGRlY2ltYWwsXG5cbiAgICAvLyB1bmRlcnNjb3JlIGFsaWFzZXNcblxuICAgIGluZGV4X2J5OiBpbmRleEJ5LFxuICAgIHNvcnRfYnk6IHNvcnRCeSxcblxuICAgIC8vIGNyeXB0byBmdW5jdGlvbnNcblxuICAgIGJpbmFyeUNvbmNhdCxcbiAgICBzdHJpbmdUb0JpbmFyeSxcbiAgICBiaW5hcnlUb1N0cmluZyxcbiAgICBzdHJpbmdUb0Jhc2U2NCxcbiAgICB1dGYxNlRvQmFzZTY0LFxuICAgIGJhc2U2NFRvQmluYXJ5LFxuICAgIGJhc2U2NFRvU3RyaW5nLFxuICAgIHVybGVuY29kZUJhc2U2NCxcbiAgICBoYXNoLFxuICAgIGhtYWMsXG4gICAgand0LFxuXG59KVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmlmIChpc0NvbW1vbkpTKSB7XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNjeHRcblxufSBlbHNlIHtcblxuICAgIHdpbmRvdy5jY3h0ID0gY2N4dFxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbn0pICgpIC8vIGVuZCBvZiBuYW1lc3BhY2VcbiJdfQ==