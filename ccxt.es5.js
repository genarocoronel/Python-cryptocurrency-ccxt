"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {

    //-----------------------------------------------------------------------------

    var version = '1.2.11';
    var isNode = typeof window === 'undefined';
    var isReactNative = typeof navigator !== 'undefined' && navigator && navigator.product && navigator.product == 'ReactNative' || false;

    //-----------------------------------------------------------------------------

    var CCXTError = function (_Error) {
        _inherits(CCXTError, _Error);

        function CCXTError(message) {
            _classCallCheck(this, CCXTError);

            // a workaround to make `instanceof CCXTError` work in ES5
            var _this = _possibleConstructorReturn(this, (CCXTError.__proto__ || Object.getPrototypeOf(CCXTError)).call(this, message));

            _this.constructor = CCXTError;
            _this.__proto__ = CCXTError.prototype;
            _this.message = message;
            return _this;
        }

        return CCXTError;
    }(Error);

    var DDoSProtectionError = function (_CCXTError) {
        _inherits(DDoSProtectionError, _CCXTError);

        function DDoSProtectionError(message) {
            _classCallCheck(this, DDoSProtectionError);

            var _this2 = _possibleConstructorReturn(this, (DDoSProtectionError.__proto__ || Object.getPrototypeOf(DDoSProtectionError)).call(this, message));

            _this2.constructor = DDoSProtectionError;
            _this2.__proto__ = DDoSProtectionError.prototype;
            _this2.message = message;
            return _this2;
        }

        return DDoSProtectionError;
    }(CCXTError);

    var TimeoutError = function (_CCXTError2) {
        _inherits(TimeoutError, _CCXTError2);

        function TimeoutError(message) {
            _classCallCheck(this, TimeoutError);

            var _this3 = _possibleConstructorReturn(this, (TimeoutError.__proto__ || Object.getPrototypeOf(TimeoutError)).call(this, message));

            _this3.constructor = TimeoutError;
            _this3.__proto__ = TimeoutError.prototype;
            _this3.message = message;
            return _this3;
        }

        return TimeoutError;
    }(CCXTError);

    var AuthenticationError = function (_CCXTError3) {
        _inherits(AuthenticationError, _CCXTError3);

        function AuthenticationError(message) {
            _classCallCheck(this, AuthenticationError);

            var _this4 = _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call(this, message));

            _this4.constructor = AuthenticationError;
            _this4.__proto__ = AuthenticationError.prototype;
            _this4.message = message;
            return _this4;
        }

        return AuthenticationError;
    }(CCXTError);

    // class MarketError 

    var MarketError = function (_CCXTError4) {
        _inherits(MarketError, _CCXTError4);

        function MarketError(message) {
            _classCallCheck(this, MarketError);

            var _this5 = _possibleConstructorReturn(this, (MarketError.__proto__ || Object.getPrototypeOf(MarketError)).call(this, message));

            _this5.constructor = MarketError;
            _this5.__proto__ = MarketError.prototype;
            _this5.message = message;
            return _this5;
        }

        return MarketError;
    }(CCXTError);

    var MarketNotAvailableError = function (_MarketError) {
        _inherits(MarketNotAvailableError, _MarketError);

        function MarketNotAvailableError(message) {
            _classCallCheck(this, MarketNotAvailableError);

            var _this6 = _possibleConstructorReturn(this, (MarketNotAvailableError.__proto__ || Object.getPrototypeOf(MarketNotAvailableError)).call(this, message));

            _this6.constructor = MarketNotAvailableError;
            _this6.__proto__ = MarketNotAvailableError.prototype;
            _this6.message = message;
            return _this6;
        }

        return MarketNotAvailableError;
    }(MarketError);

    var EndpointError = function (_MarketError2) {
        _inherits(EndpointError, _MarketError2);

        function EndpointError(message) {
            _classCallCheck(this, EndpointError);

            var _this7 = _possibleConstructorReturn(this, (EndpointError.__proto__ || Object.getPrototypeOf(EndpointError)).call(this, message));

            _this7.constructor = EndpointError;
            _this7.__proto__ = EndpointError.prototype;
            _this7.message = message;
            return _this7;
        }

        return EndpointError;
    }(MarketError);

    //-----------------------------------------------------------------------------
    // utility helpers

    var sleep = function sleep(ms) {
        return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
        });
    };

    var timeout = function timeout(ms, promise) {
        return Promise.race([promise, sleep(ms).then(function () {
            throw new TimeoutError('request timed out');
        })]);
    };

    var capitalize = function capitalize(string) {
        return string.length ? string.charAt(0).toUpperCase() + string.slice(1) : string;
    };

    var keysort = function keysort(object) {
        var result = {};
        Object.keys(object).sort().forEach(function (key) {
            return result[key] = object[key];
        });
        return result;
    };

    var extend = function extend() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var result = {};

        var _loop = function _loop(i) {
            if (_typeof(args[i]) === 'object') Object.keys(args[i]).forEach(function (key) {
                return result[key] = args[i][key];
            });
        };

        for (var i = 0; i < args.length; i++) {
            _loop(i);
        }return result;
    };

    var omit = function omit(object) {
        var result = extend(object);
        for (var i = 1; i < arguments.length; i++) {
            if (typeof arguments[i] === 'string') delete result[arguments[i]];else if (Array.isArray(arguments[i])) for (var k = 0; k < arguments[i].length; k++) {
                delete result[arguments[i][k]];
            }
        }return result;
    };

    var indexBy = function indexBy(array, key) {
        var result = {};
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            if (typeof element[key] != 'undefined') {
                result[element[key]] = element;
            }
        }
        return result;
    };

    var sortBy = function sortBy(array, key) {
        var descending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        descending = descending ? -1 : 1;
        return array.sort(function (a, b) {
            return a[key] < b[key] ? -descending : a[key] > b[key] ? descending : 0;
        });
    };

    var flatten = function flatten(array) {
        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        for (var i = 0, length = array.length; i < length; i++) {
            var value = array[i];
            if (Array.isArray(value)) {
                flatten(value, result);
            } else {
                result.push(value);
            }
        }
        return result;
    };

    var unique = function unique(array) {
        return array.filter(function (value, index, self) {
            return self.indexOf(value) == index;
        });
    };

    var pluck = function pluck(array, key) {
        return array.filter(function (element) {
            return typeof element[key] != 'undefined';
        }).map(function (element) {
            return element[key];
        });
    };

    var urlencode = function urlencode(object) {
        return qs.stringify(object);
    }; // this is related to the Kraken workaround, see issues #52 and #23

    var sum = function sum() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var result = args.filter(function (arg) {
            return typeof arg != 'undefined';
        });
        return result.length > 0 ? result.reduce(function (sum, value) {
            return sum + value;
        }, 0) : undefined;
    };

    //-----------------------------------------------------------------------------
    // platform-specific code (Node.js / Web Browsers)

    if (isNode) {

        var CryptoJS = module.require('crypto-js');
        var fetch = module.require('node-fetch');
        var qs = module.require('qs');
    } else if (isReactNative) {

        var CryptoJS = require('crypto-js');
        var fetch = window.fetch;
        var qs = require('qs');
    } else {

        // a quick fetch polyfill

        var fetch = function fetch(url, options) {
            var verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


            return new Promise(function (resolve, reject) {

                if (verbose) console.log(url, options);

                var xhr = new XMLHttpRequest();
                var method = options.method || 'GET';

                xhr.open(method, url, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) resolve(xhr.responseText);else {
                            // [403, 404, ...].indexOf (xhr.status) >= 0
                            throw new Error(method, url, xhr.status, xhr.responseText);
                        }
                    }
                };

                if (typeof options.headers != 'undefined') for (var header in options.headers) {
                    xhr.setRequestHeader(header, options.headers[header]);
                }xhr.send(options.body);
            });
        };
    }

    //-----------------------------------------------------------------------------
    // string ←→ binary ←→ base64 conversion routines

    var stringToBinary = function stringToBinary(str) {
        var arr = new Uint8Array(str.length);
        for (var i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return CryptoJS.lib.WordArray.create(arr);
    };

    var stringToBase64 = function stringToBase64(string) {
        return CryptoJS.enc.Latin1.parse(string).toString(CryptoJS.enc.Base64);
    },
        utf16ToBase64 = function utf16ToBase64(string) {
        return CryptoJS.enc.Utf16.parse(string).toString(CryptoJS.enc.Base64);
    },
        base64ToBinary = function base64ToBinary(string) {
        return CryptoJS.enc.Base64.parse(string);
    },
        base64ToString = function base64ToString(string) {
        return CryptoJS.enc.Base64.parse(string).toString(CryptoJS.enc.Utf8);
    };

    var binaryConcat = function binaryConcat() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        return args.reduce(function (a, b) {
            return a.concat(b);
        });
    };

    // url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores
    var urlencodeBase64 = function urlencodeBase64(base64string) {
        return base64string.replace(/[=]+$/, '').replace(/\+/g, '-').replace(/\//g, '_');
    };

    //-----------------------------------------------------------------------------
    // cryptography

    var hash = function hash(request) {
        var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'md5';
        var digest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'hex';

        var result = CryptoJS[hash.toUpperCase()](request);
        return digest == 'binary' ? result : result.toString(CryptoJS.enc[capitalize(digest)]);
    };

    var hmac = function hmac(request, secret) {
        var hash = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sha256';
        var digest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';

        var encoding = digest == 'binary' ? 'Latin1' : capitalize(digest);
        return CryptoJS['Hmac' + hash.toUpperCase()](request, secret).toString(CryptoJS.enc[capitalize(encoding)]);
    };

    //-----------------------------------------------------------------------------
    // a JSON Web Token authentication method

    var jwt = function jwt(request, secret) {
        var alg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HS256';
        var hash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'sha256';

        var encodedHeader = urlencodeBase64(stringToBase64(JSON.stringify({ 'alg': alg, 'typ': 'JWT' }))),
            encodedData = urlencodeBase64(stringToBase64(JSON.stringify(request))),
            token = [encodedHeader, encodedData].join('.'),
            signature = urlencodeBase64(utf16ToBase64(hmac(token, secret, hash, 'utf16')));
        return [token, signature].join('.');
    };

    //-----------------------------------------------------------------------------
    // the base class

    var Market = function Market(config) {
        var _this12 = this;

        this.hash = hash;
        this.hmac = hmac;
        this.jwt = jwt; // JSON Web Token
        this.binaryConcat = binaryConcat;
        this.stringToBinary = stringToBinary;
        this.stringToBase64 = stringToBase64;
        this.base64ToBinary = base64ToBinary;
        this.base64ToString = base64ToString;
        this.utf16ToBase64 = utf16ToBase64;
        this.urlencode = urlencode;
        this.omit = omit;
        this.pluck = pluck;
        this.unique = unique;
        this.extend = extend;
        this.flatten = flatten;
        this.indexBy = indexBy;
        this.sortBy = sortBy;
        this.keysort = keysort;
        this.capitalize = capitalize;
        this.json = JSON.stringify;
        this.sum = sum;

        this.encode = function (string) {
            return string;
        };
        this.decode = function (string) {
            return string;
        };

        if (isNode) this.nodeVersion = process.version.match(/\d+\.\d+.\d+/)[0];

        this.init = function () {
            var _this8 = this;

            if (this.api) Object.keys(this.api).forEach(function (type) {
                Object.keys(_this8.api[type]).forEach(function (method) {
                    var urls = _this8.api[type][method];

                    var _loop2 = function _loop2() {
                        var url = urls[i].trim();
                        var splitPath = url.split(/[^a-zA-Z0-9]/);

                        var uppercaseMethod = method.toUpperCase();
                        var lowercaseMethod = method.toLowerCase();
                        var camelcaseMethod = capitalize(lowercaseMethod);
                        var camelcaseSuffix = splitPath.map(capitalize).join('');
                        var underscoreSuffix = splitPath.map(function (x) {
                            return x.trim().toLowerCase();
                        }).filter(function (x) {
                            return x.length > 0;
                        }).join('_');

                        if (camelcaseSuffix.indexOf(camelcaseMethod) === 0) camelcaseSuffix = camelcaseSuffix.slice(camelcaseMethod.length);

                        if (underscoreSuffix.indexOf(lowercaseMethod) === 0) underscoreSuffix = underscoreSuffix.slice(lowercaseMethod.length);

                        var camelcase = type + camelcaseMethod + capitalize(camelcaseSuffix);
                        var underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix;

                        var f = function f(params) {
                            return _this8.request(url, type, uppercaseMethod, params);
                        };

                        _this8[camelcase] = f;
                        _this8[underscore] = f;
                    };

                    for (var i = 0; i < urls.length; i++) {
                        _loop2();
                    }
                });
            });

            if (this.products) this.setProducts(this.products);
        };

        this.fetch = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';

            var _this9 = this;

            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            if (isNode && this.userAgent) if (typeof this.userAgent == 'string') headers = extend({ 'User-Agent': this.userAgent }, headers);else if (_typeof(this.userAgent) == 'object' && 'User-Agent' in this.userAgent) headers = extend(this.userAgent, headers);

            if (this.proxy.length) headers = extend({ 'Origin': '*' }, headers);

            var options = { 'method': method, 'headers': headers, 'body': body };

            url = this.proxy + url;

            if (this.verbose) console.log(this.id, method, url, "\nRequest:\n", options);

            return timeout(this.timeout, fetch(url, options).catch(function (e) {
                if (isNode) {
                    throw new MarketNotAvailableError([_this9.id, method, url, e.type, e.message].join(' '));
                }
                throw e; // rethrow all unknown errors
            }).then(function (response) {
                if (typeof response == 'string') return response;
                return response.text().then(function (text) {
                    if (_this9.verbose) console.log(_this9.id, method, url, text ? "\nResponse:\n" + text : '');
                    if (response.status >= 200 && response.status <= 300) return text;
                    var error = undefined;
                    var details = text;
                    if ([429].indexOf(response.status) >= 0) {
                        error = DDoSProtectionError;
                    } else if ([500, 501, 502, 404, 525].indexOf(response.status) >= 0) {
                        error = MarketNotAvailableError;
                    } else if ([400, 403, 405, 503].indexOf(response.status) >= 0) {
                        var ddosProtection = text.match(/cloudflare|incapsula/i);
                        if (ddosProtection) {
                            error = DDoSProtectionError;
                        } else {
                            error = MarketNotAvailableError;
                            details = text + ' (possible reasons: ' + ['invalid API keys', 'bad or old nonce', 'market down or offline', 'on maintenance', 'DDoS protection', 'rate-limiting in effect'].join(', ') + ')';
                        }
                    } else if ([408, 504].indexOf(response.status) >= 0) {
                        error = TimeoutError;
                    } else if ([401, 422, 511].indexOf(response.status) >= 0) {
                        error = AuthenticationError;
                    } else {
                        error = Error;
                    }
                    throw new error([_this9.id, method, url, response.status, response.statusText, details].join(' '));
                });
            }).then(function (response) {
                return _this9.handleResponse(url, method, headers, response);
            }));
        };

        this.handleResponse = function (url) {
            var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';
            var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
            var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;


            try {

                return JSON.parse(body);
            } catch (e) {

                var maintenance = body.match(/offline|unavailable|maintain|maintenance|maintenancing/i);
                var ddosProtection = body.match(/cloudflare|incapsula|overload/i);

                if (e instanceof SyntaxError) {

                    var error = MarketNotAvailableError;
                    var details = 'not accessible from this location at the moment';
                    if (maintenance) details = 'offline, on maintenance or unreachable from this location at the moment';
                    if (ddosProtection) error = DDoSProtectionError;
                    throw new error([this.id, method, url, details].join(' '));
                }

                if (this.verbose) console.log(this.id, method, url, 'error', e, "response body:\n'" + body + "'");

                throw e;
            }
        };

        this.set_products = this.setProducts = function (products) {
            var values = _objectValues(products);
            this.products = indexBy(values, 'symbol');
            this.productsById = indexBy(products, 'id');
            this.products_by_id = this.productsById;
            this.symbols = Object.keys(this.products);
            var base = this.pluck(values.filter(function (product) {
                return 'base' in product;
            }), 'base');
            var quote = this.pluck(values.filter(function (product) {
                return 'quote' in product;
            }), 'quote');
            this.currencies = this.unique(base.concat(quote));
            return this.products;
        };

        this.load_products = this.loadProducts = function () {
            var _this10 = this;

            var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (!reload && this.products) {
                if (!this.productsById) {
                    return new Promise(function (resolve, reject) {
                        return resolve(_this10.setProducts(_this10.products));
                    });
                }
                return new Promise(function (resolve, reject) {
                    return resolve(_this10.products);
                });
            }
            return this.fetchProducts().then(function (products) {
                return _this10.setProducts(products);
            });
        };

        this.fetch_products = this.fetchProducts = function () {
            var _this11 = this;

            return new Promise(function (resolve, reject) {
                return resolve(_this11.products);
            });
        };

        this.commonCurrencyCode = function (currency) {
            return currency === 'XBT' ? 'BTC' : currency;
        };

        this.product = function (product) {
            return typeof product === 'string' && typeof this.products != 'undefined' && typeof this.products[product] != 'undefined' ? this.products[product] : product;
        };

        this.product_id = this.productId = function (product) {
            return this.product(product).id || product;
        };

        this.symbol = function (product) {
            return this.product(product).symbol || product;
        };

        this.extract_params = this.extractParams = function (string) {
            var re = /{([a-zA-Z0-9_]+?)}/g;
            var matches = [];
            var match = void 0;
            while (match = re.exec(string)) {
                matches.push(match[1]);
            }return matches;
        };

        this.implode_params = this.implodeParams = function (string, params) {
            for (var property in params) {
                string = string.replace('{' + property + '}', params[property]);
            }return string;
        };

        this.create_limit_buy_order = this.createLimitBuyOrder = function (product, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(product, 'limit', 'buy', amount, price, params);
        };

        this.create_limit_sell_order = this.createLimitSellOrder = function (product, amount, price) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this.createOrder(product, 'limit', 'sell', amount, price, params);
        };

        this.create_market_buy_order = this.createMarketBuyOrder = function (product, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(product, 'market', 'buy', amount, undefined, params);
        };

        this.create_market_sell_order = this.createMarketSellOrder = function (product, amount) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this.createOrder(product, 'market', 'sell', amount, undefined, params);
        };

        this.iso8601 = function (timestamp) {
            return new Date(timestamp).toISOString();
        };
        this.parse8601 = Date.parse;
        this.seconds = function () {
            return Math.floor(_this12.milliseconds() / 1000);
        };
        this.microseconds = function () {
            return Math.floor(_this12.milliseconds() * 1000);
        };
        this.milliseconds = Date.now;
        this.nonce = this.seconds;
        this.id = undefined;
        this.rateLimit = 2000; // milliseconds = seconds * 1000
        this.timeout = 10000; // milliseconds = seconds * 1000
        this.verbose = false;
        this.userAgent = false;
        this.twofa = false; // two-factor authentication
        this.yyyymmddhhmmss = function (timestamp) {
            var date = new Date(timestamp);
            var yyyy = date.getUTCFullYear();
            var MM = date.getUTCMonth();
            var dd = date.getUTCDay();
            var hh = date.getUTCHours();
            var mm = date.getUTCMinutes();
            var ss = date.getUTCSeconds();
            MM = MM < 10 ? '0' + MM : MM;
            dd = dd < 10 ? '0' + dd : dd;
            hh = hh < 10 ? '0' + hh : hh;
            mm = mm < 10 ? '0' + mm : mm;
            ss = ss < 10 ? '0' + ss : ss;
            return yyyy + '-' + MM + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;
        };

        if (isNode) this.userAgent = {
            'User-Agent': 'ccxt/' + version + ' (+https://github.com/kroitor/ccxt)' + ' Node.js/' + this.nodeVersion + ' (JavaScript)'

            // prepended to URL, like https://proxy.com/https://exchange.com/api...
        };this.proxy = '';

        for (var property in config) {
            this[property] = config[property];
        }this.fetch_balance = this.fetchBalance;
        this.fetch_order_book = this.fetchOrderBook;
        this.fetch_ticker = this.fetchTicker;
        this.fetch_trades = this.fetchTrades;

        this.init();
    };

    //=============================================================================

    var _1broker = {

        'id': '_1broker',
        'name': '1Broker',
        'countries': 'US',
        'rateLimit': 1500,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',
            'api': 'https://1broker.com/api',
            'www': 'https://1broker.com',
            'doc': 'https://1broker.com/?c=en/content/api-documentation'
        },
        'api': {
            'private': {
                'get': ['market/bars', 'market/categories', 'market/details', 'market/list', 'market/quotes', 'market/ticks', 'order/cancel', 'order/create', 'order/open', 'position/close', 'position/close_cancel', 'position/edit', 'position/history', 'position/open', 'position/shared/get', 'social/profile_statistics', 'social/profile_trades', 'user/bitcoin_deposit_address', 'user/details', 'user/overview', 'user/quota_status', 'user/transaction_log']
            }
        },

        fetchCategories: function fetchCategories() {
            var categories,
                _this13 = this;

            return Promise.resolve().then(function () {
                return _this13.privateGetMarketCategories();
            }).then(function (_resp) {
                categories = _resp;

                return categories['response'];
            });
        },
        fetchProducts: function fetchProducts() {
            function _recursive() {
                if (c < categories.length) {
                    return Promise.resolve().then(function () {
                        category = categories[c];
                        return this_.privateGetMarketList({
                            'category': category.toLowerCase()
                        });
                    }).then(function (_resp) {
                        products = _resp;

                        for (p = 0; p < products['response'].length; p++) {
                            product = products['response'][p];
                            id = product['symbol'];
                            symbol = undefined;
                            base = undefined;
                            quote = undefined;

                            if (category == 'FOREX' || category == 'CRYPTO') {
                                symbol = product['name'];
                                parts = symbol.split('/');

                                base = parts[0];
                                quote = parts[1];
                            } else {
                                base = id;
                                quote = 'USD';
                                symbol = base + '/' + quote;
                            }
                            result.push({
                                'id': id,
                                'symbol': symbol,
                                'base': base,
                                'quote': quote,
                                'info': product
                            });
                        }
                        c++;
                        return _recursive();
                    });
                }
            }

            var this_,
                categories,
                result,
                c,
                category,
                products,
                p,
                product,
                id,
                symbol,
                base,
                quote,
                parts,
                _this14 = this;

            return Promise.resolve().then(function () {
                this_ = _this14; // workaround for Babel bug (not passing `this` to _recursive() call)

                return _this14.fetchCategories();
            }).then(function (_resp) {
                categories = _resp;
                result = [];
                c = 0;
                return _recursive();
            }).then(function () {
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                response,
                result,
                c,
                currency,
                _this18 = this;

            return Promise.resolve().then(function () {
                return _this18.loadProducts();
            }).then(function () {
                return _this18.privateGetUserOverview();
            }).then(function (_resp) {
                balance = _resp;
                response = balance['response'];
                result = { 'info': response };

                for (c = 0; c < _this18.currencies.length; c++) {
                    currency = _this18.currencies[c];

                    result[currency] = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                }
                result['BTC']['free'] = parseFloat(response['balance']);
                result['BTC']['total'] = result['BTC']['free'];
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                bidPrice,
                askPrice,
                bid,
                ask,
                _this19 = this;

            return Promise.resolve().then(function () {
                return _this19.loadProducts();
            }).then(function () {
                return _this19.privateGetMarketQuotes({
                    'symbols': _this19.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['response'][0];
                timestamp = _this19.parse8601(orderbook['updated']);
                bidPrice = parseFloat(orderbook['bid']);
                askPrice = parseFloat(orderbook['ask']);
                bid = [bidPrice, undefined];
                ask = [askPrice, undefined];

                return {
                    'timestamp': timestamp,
                    'datetime': _this19.iso8601(timestamp),
                    'bids': [bid],
                    'asks': [ask]
                };
            });
        },
        fetchTicker: function fetchTicker(product) {
            var result,
                orderbook,
                ticker,
                timestamp,
                _this20 = this;

            return Promise.resolve().then(function () {
                return _this20.loadProducts();
            }).then(function () {
                return _this20.privateGetMarketBars({
                    'symbol': _this20.productId(product),
                    'resolution': 60,
                    'limit': 1
                });
            }).then(function (_resp) {
                result = _resp;
                return _this20.fetchOrderBook(product);
            }).then(function (_resp) {
                orderbook = _resp;
                ticker = result['response'][0];
                timestamp = _this20.parse8601(ticker['date']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this20.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': orderbook['bids'][0][0],
                    'ask': orderbook['asks'][0][0],
                    'vwap': undefined,
                    'open': parseFloat(ticker['o']),
                    'close': parseFloat(ticker['c']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined
                };
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this21 = this,
                _arguments9 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments9.length > 4 && _arguments9[4] !== undefined ? _arguments9[4] : undefined;
                params = _arguments9.length > 5 && _arguments9[5] !== undefined ? _arguments9[5] : {};
                return _this21.loadProducts();
            }).then(function () {
                order = {
                    'symbol': _this21.productId(product),
                    'margin': amount,
                    'direction': side == 'sell' ? 'short' : 'long',
                    'leverage': 1,
                    'type': side
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['type'] += '_market';
                }return _this21.privateGetOrderCreate(_this21.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this22 = this;

            return Promise.resolve().then(function () {
                return _this22.loadProducts();
            }).then(function () {
                return _this22.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                query,
                response,
                _this23 = this,
                _arguments11 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments11.length > 1 && _arguments11[1] !== undefined ? _arguments11[1] : 'public';
                method = _arguments11.length > 2 && _arguments11[2] !== undefined ? _arguments11[2] : 'GET';
                params = _arguments11.length > 3 && _arguments11[3] !== undefined ? _arguments11[3] : {};
                headers = _arguments11.length > 4 && _arguments11[4] !== undefined ? _arguments11[4] : undefined;
                body = _arguments11.length > 5 && _arguments11[5] !== undefined ? _arguments11[5] : undefined;

                if (!_this23.apiKey) {
                    throw new AuthenticationError(_this23.id + ' requires apiKey for all requests');
                }url = _this23.urls['api'] + '/' + _this23.version + '/' + path + '.php';
                query = _this23.extend({ 'token': _this23.apiKey }, params);

                url += '?' + _this23.urlencode(query);
                return _this23.fetch(url, method);
            }).then(function (_resp) {
                response = _resp;

                if ('warning' in response) {
                    if (response['warning']) {
                        throw new MarketError(_this23.id + ' Warning: ' + response['warning_message']);
                    }
                }if ('error' in response) {
                    if (response['error']) {
                        throw new MarketError(_this23.id + ' Error: ' + response['error_code'] + response['error_message']);
                    }
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cryptocapital = {

        'id': 'cryptocapital',
        'name': 'Crypto Capital',
        'comment': 'Crypto Capital API',
        'countries': 'PA', // Panama
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993158-7a13f140-64ac-11e7-89cc-a3b441f0b0f8.jpg',
            'www': 'https://cryptocapital.co',
            'doc': 'https://github.com/cryptocap'
        },
        'api': {
            'public': {
                'get': ['stats', 'historical-prices', 'order-book', 'transactions']
            },
            'private': {
                'post': ['balances-and-info', 'open-orders', 'user-transactions', 'btc-deposit-address/get', 'btc-deposit-address/new', 'deposits/get', 'withdrawals/get', 'orders/new', 'orders/edit', 'orders/cancel', 'orders/status', 'withdrawals/new']
            }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                account,
                _this24 = this;

            return Promise.resolve().then(function () {
                return _this24.privatePostBalancesAndInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances-and-info'];
                result = { 'info': balance };

                for (c = 0; c < _this24.currencies.length; c++) {
                    currency = _this24.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['available']) {
                        account['free'] = parseFloat(balance['available'][currency]);
                    }if (currency in balance['on_hold']) {
                        account['used'] = parseFloat(balance['on_hold'][currency]);
                    }account['total'] = _this24.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                _timestamp,
                price,
                amount,
                _this25 = this;

            return Promise.resolve().then(function () {
                return _this25.publicGetOrderBook({
                    'currency': _this25.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['order-book'];
                timestamp = _this25.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this25.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        _timestamp = parseInt(order['timestamp']) * 1000;
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['order_amount']);

                        result[key].push([price, amount, _timestamp]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this26 = this;

            return Promise.resolve().then(function () {
                return _this26.publicGetStats({
                    'currency': _this26.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['stats'];
                timestamp = _this26.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this26.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['daily_change']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['total_btc_traded'])
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this27 = this;

            return _this27.publicGetTransactions({
                'currency': _this27.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this28 = this,
                _arguments16 = arguments;

            price = _arguments16.length > 4 && _arguments16[4] !== undefined ? _arguments16[4] : undefined;
            params = _arguments16.length > 5 && _arguments16[5] !== undefined ? _arguments16[5] : {};
            order = {
                'side': side,
                'type': type,
                'currency': _this28.productId(product),
                'amount': amount
            };

            if (type == 'limit') {
                order['limit_price'] = price;
            }return _this28.privatePostOrdersNew(_this28.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this29 = this;

            return _this29.privatePostOrdersCancel({ 'id': id });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                query,
                request,
                response,
                errors,
                e,
                error,
                _this30 = this,
                _arguments18 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments18.length > 1 && _arguments18[1] !== undefined ? _arguments18[1] : 'public';
                method = _arguments18.length > 2 && _arguments18[2] !== undefined ? _arguments18[2] : 'GET';
                params = _arguments18.length > 3 && _arguments18[3] !== undefined ? _arguments18[3] : {};
                headers = _arguments18.length > 4 && _arguments18[4] !== undefined ? _arguments18[4] : undefined;
                body = _arguments18.length > 5 && _arguments18[5] !== undefined ? _arguments18[5] : undefined;

                if (_this30.id == 'cryptocapital') {
                    throw new MarketError(_this30.id + ' is an abstract base API for _1btcxe');
                }url = _this30.urls['api'] + '/' + path;

                if (type == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this30.urlencode(params);
                    }
                } else {
                    query = _this30.extend({
                        'api_key': _this30.apiKey,
                        'nonce': _this30.nonce()
                    }, params);
                    request = _this30.json(query);

                    query['signature'] = _this30.hmac(_this30.encode(request), _this30.encode(_this30.secret));
                    body = _this30.json(query);
                    headers = { 'Content-Type': 'application/json' };
                }
                return _this30.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('errors' in response) {
                    errors = [];

                    for (e = 0; e < response['errors'].length; e++) {
                        error = response['errors'][e];

                        errors.push(error['code'] + ': ' + error['message']);
                    }
                    errors = errors.join(' ');
                    throw new MarketError(_this30.id + ' ' + errors);
                }
                return _this30.fetch(url, method, headers, body);
            });
        }
    };

    //-----------------------------------------------------------------------------

    var _1btcxe = extend(cryptocapital, {

        'id': '_1btcxe',
        'name': '1BTCXE',
        'countries': 'PA', // Panama
        'comment': 'Crypto Capital API',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',
            'api': 'https://1btcxe.com/api',
            'www': 'https://1btcxe.com',
            'doc': 'https://1btcxe.com/api-docs.php'
        },
        'products': {
            'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },
            'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },
            'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },
            'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },
            'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },
            'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },
            'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },
            'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },
            'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },
            'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },
            'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },
            'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },
            'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },
            'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },
            'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },
            'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' }
        }
    });

    //-----------------------------------------------------------------------------

    var anxpro = {

        'id': 'anxpro',
        'name': 'ANXPro',
        'countries': ['JP', 'SG', 'HK', 'NZ'],
        'version': '2',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',
            'api': 'https://anxpro.com/api',
            'www': 'https://anxpro.com',
            'doc': ['http://docs.anxv2.apiary.io', 'https://anxpro.com/pages/api']
        },
        'api': {
            'public': {
                'get': ['{currency_pair}/money/ticker', '{currency_pair}/money/depth/full', '{currency_pair}/money/trade/fetch']
            },
            'private': {
                'post': ['{currency_pair}/money/order/add', '{currency_pair}/money/order/cancel', '{currency_pair}/money/order/quote', '{currency_pair}/money/order/result', '{currency_pair}/money/orders', 'money/{currency}/address', 'money/{currency}/send_simple', 'money/info', 'money/trade/list', 'money/wallet/history']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },
            'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },
            'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                currencies,
                result,
                c,
                currency,
                account,
                wallet,
                _this31 = this;

            return Promise.resolve().then(function () {
                return _this31.privatePostMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['data'];
                currencies = Object.keys(balance['Wallets']);
                result = { 'info': balance };

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['Wallets']) {
                        wallet = balance['Wallets'][currency];

                        account['free'] = parseFloat(wallet['Available_Balance']['value']);
                        account['total'] = parseFloat(wallet['Balance']['value']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                t,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this32 = this;

            return Promise.resolve().then(function () {
                return _this32.publicGetCurrencyPairMoneyDepthFull({
                    'currency_pair': _this32.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                t = parseInt(orderbook['dataUpdateTime']);
                timestamp = parseInt(t / 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this32.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                t,
                timestamp,
                _this33 = this;

            return Promise.resolve().then(function () {
                return _this33.publicGetCurrencyPairMoneyTicker({
                    'currency_pair': _this33.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                t = parseInt(ticker['dataUpdateTime']);
                timestamp = parseInt(t / 1000);

                return {
                    'timestamp': timestamp,
                    'datetime': _this33.iso8601(timestamp),
                    'high': parseFloat(ticker['high']['value']),
                    'low': parseFloat(ticker['low']['value']),
                    'bid': parseFloat(ticker['buy']['value']),
                    'ask': parseFloat(ticker['sell']['value']),
                    'vwap': parseFloat(ticker['vwap']['value']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']['value']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']['value']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']['value'])
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var error,
                _this34 = this;

            error = _this34.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled';

            throw new EndpointError(error);
            return _this34.publicGetCurrencyPairMoneyTradeFetch({
                'currency_pair': _this34.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this35 = this,
                _arguments23 = arguments;

            price = _arguments23.length > 4 && _arguments23[4] !== undefined ? _arguments23[4] : undefined;
            params = _arguments23.length > 5 && _arguments23[5] !== undefined ? _arguments23[5] : {};
            order = {
                'currency_pair': _this35.productId(product),
                'amount_int': amount,
                'type': side
            };

            if (type == 'limit') {
                order['price_int'] = price;
            }return _this35.privatePostCurrencyPairOrderAdd(_this35.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this36 = this;

            return _this36.privatePostCurrencyPairOrderCancel({ 'oid': id });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                request,
                query,
                url,
                nonce,
                secret,
                auth,
                response,
                _test,
                _this37 = this,
                _arguments25 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments25.length > 1 && _arguments25[1] !== undefined ? _arguments25[1] : 'public';
                method = _arguments25.length > 2 && _arguments25[2] !== undefined ? _arguments25[2] : 'GET';
                params = _arguments25.length > 3 && _arguments25[3] !== undefined ? _arguments25[3] : {};
                headers = _arguments25.length > 4 && _arguments25[4] !== undefined ? _arguments25[4] : undefined;
                body = _arguments25.length > 5 && _arguments25[5] !== undefined ? _arguments25[5] : undefined;
                request = _this37.implodeParams(path, params);
                query = _this37.omit(params, _this37.extractParams(path));
                url = _this37.urls['api'] + '/' + _this37.version + '/' + request;

                if (type == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this37.urlencode(query);
                    }
                } else {
                    nonce = _this37.nonce();

                    body = _this37.urlencode(_this37.extend({ 'nonce': nonce }, query));
                    secret = _this37.base64ToBinary(_this37.secret);
                    auth = request + "\0" + body;

                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Rest-Key': _this37.apiKey,
                        'Rest-Sign': _this37.hmac(_this37.encode(auth), secret, 'sha512', 'base64')
                    };
                }
                return _this37.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test = 'result' in response;

                if (_test && response['result'] == 'success') {
                    return response;
                } else {
                    throw new MarketError(_this37.id + ' ' + _this37.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bit2c = {

        'id': 'bit2c',
        'name': 'Bit2C',
        'countries': 'IL', // Israel
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',
            'api': 'https://www.bit2c.co.il',
            'www': 'https://www.bit2c.co.il',
            'doc': ['https://www.bit2c.co.il/home/api', 'https://github.com/OferE/bit2c']
        },
        'api': {
            'public': {
                'get': ['Exchanges/{pair}/Ticker', 'Exchanges/{pair}/orderbook', 'Exchanges/{pair}/trades']
            },
            'private': {
                'post': ['Account/Balance', 'Account/Balance/v2', 'Merchant/CreateCheckout', 'Order/AccountHistory', 'Order/AddCoinFundsRequest', 'Order/AddFund', 'Order/AddOrder', 'Order/AddOrderMarketPriceBuy', 'Order/AddOrderMarketPriceSell', 'Order/CancelOrder', 'Order/MyOrders', 'Payment/GetMyId', 'Payment/Send']
            }
        },
        'products': {
            'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },
            'LTC/BTC': { 'id': 'LtcBtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' }
        },

        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                account,
                available,
                _this38 = this;

            return Promise.resolve().then(function () {
                return _this38.privatePostAccountBalanceV2();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this38.currencies.length; c++) {
                    currency = _this38.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        available = 'AVAILABLE_' + currency;

                        account['free'] = balance[available];
                        account['total'] = balance[currency];
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp2,
                _this39 = this;

            return Promise.resolve().then(function () {
                return _this39.publicGetExchangesPairOrderbook({
                    'pair': _this39.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this39.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this39.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order[0];
                        amount = order[1];
                        _timestamp2 = order[2] * 1000;

                        result[side].push([price, amount, _timestamp2]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this40 = this;

            return Promise.resolve().then(function () {
                return _this40.publicGetExchangesPairTicker({
                    'pair': _this40.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this40.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this40.iso8601(timestamp),
                    'high': parseFloat(ticker['h']),
                    'low': parseFloat(ticker['l']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ll']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['av']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['a'])
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this41 = this;

            return _this41.publicGetExchangesPairTrades({
                'pair': _this41.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this42 = this,
                _arguments30 = arguments;

            price = _arguments30.length > 4 && _arguments30[4] !== undefined ? _arguments30[4] : undefined;
            params = _arguments30.length > 5 && _arguments30[5] !== undefined ? _arguments30[5] : {};
            method = 'privatePostOrderAddOrder';
            order = {
                'Amount': amount,
                'Pair': _this42.productId(product)
            };

            if (type == 'market') {
                method += 'MarketPrice' + _this42.capitalize(side);
            } else {
                order['Price'] = price;
                order['Total'] = amount * price;
                order['IsBid'] = side == 'buy';
            }
            return _this42[method](_this42.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this43 = this;

            return _this43.privatePostOrderCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            if (type == 'public') {
                url += '.json';
            } else {
                var nonce = this.nonce();
                var query = this.extend({ 'nonce': nonce }, params);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbay = {

        'id': 'bitbay',
        'name': 'BitBay',
        'countries': ['PL', 'EU'], // Poland
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',
            'www': 'https://bitbay.net',
            'api': {
                'public': 'https://bitbay.net/API/Public',
                'private': 'https://bitbay.net/API/Trading/tradingApi.php'
            },
            'doc': ['https://bitbay.net/public-api', 'https://bitbay.net/account/tab-api', 'https://github.com/BitBayNet/API']
        },
        'api': {
            'public': {
                'get': ['{id}/all', '{id}/market', '{id}/orderbook', '{id}/ticker', '{id}/trades']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orderbook', 'orders', 'transfer', 'withdraw', 'history', 'transactions']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },
            'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR' },
            'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN' },
            'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD' },
            'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR' },
            'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN' },
            'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                account,
                _this44 = this;

            return Promise.resolve().then(function () {
                return _this44.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balances'];
                result = { 'info': balance };

                for (c = 0; c < _this44.currencies.length; c++) {
                    currency = _this44.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        account['free'] = parseFloat(balance[currency]['available']);
                        account['used'] = parseFloat(balance[currency]['locked']);
                        account['total'] = _this44.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this45 = this;

            return Promise.resolve().then(function () {
                return _this45.publicGetIdOrderbook({
                    'id': _this45.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this45.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this45.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this46 = this;

            return Promise.resolve().then(function () {
                return _this46.publicGetIdTicker({
                    'id': _this46.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this46.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this46.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this47 = this;

            return _this47.publicGetIdTrades({
                'id': _this47.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                _this48 = this,
                _arguments36 = arguments;

            price = _arguments36.length > 4 && _arguments36[4] !== undefined ? _arguments36[4] : undefined;
            params = _arguments36.length > 5 && _arguments36[5] !== undefined ? _arguments36[5] : {};
            p = _this48.product(product);

            return _this48.privatePostTrade(_this48.extend({
                'type': side,
                'currency': p['base'],
                'amount': amount,
                'payment_currency': p['quote'],
                'rate': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this49 = this;

            return _this49.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            if (type == 'public') {
                url += '/' + this.implodeParams(path, params) + '.json';
            } else {
                body = this.urlencode(this.extend({
                    'method': path,
                    'moment': this.nonce()
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitbays = {

        'id': 'bitbays',
        'name': 'BitBays',
        'countries': ['CN', 'GB', 'HK', 'AU', 'CA'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27808599-983687d2-6051-11e7-8d95-80dfcbe5cbb4.jpg',
            'api': 'https://bitbays.com/api',
            'www': 'https://bitbays.com',
            'doc': 'https://bitbays.com/help/api/'
        },
        'api': {
            'public': {
                'get': ['ticker', 'trades', 'depth']
            },
            'private': {
                'post': ['cancel', 'info', 'orders', 'order', 'transactions', 'trade']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'ODS/BTC': { 'id': 'ods_btc', 'symbol': 'ODS/BTC', 'base': 'ODS', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'LSK/CNY': { 'id': 'lsk_cny', 'symbol': 'LSK/CNY', 'base': 'LSK', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                c,
                currency,
                lowercase,
                account,
                _this50 = this;

            return Promise.resolve().then(function () {
                return _this50.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['result']['wallet'];
                result = { 'info': balance };

                for (c = 0; c < _this50.currencies.length; c++) {
                    currency = _this50.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]['avail']);
                        account['used'] = parseFloat(balance[lowercase]['lock']);
                        account['total'] = _this50.sum(account['free'], account['used']);
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this51 = this;

            return Promise.resolve().then(function () {
                return _this51.publicGetDepth({
                    'market': _this51.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this51.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this51.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this52 = this;

            return Promise.resolve().then(function () {
                return _this52.publicGetTicker({
                    'market': _this52.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'];
                timestamp = _this52.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this52.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this53 = this;

            return _this53.publicGetTrades({
                'market': _this53.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this54 = this,
                _arguments42 = arguments;

            price = _arguments42.length > 4 && _arguments42[4] !== undefined ? _arguments42[4] : undefined;
            params = _arguments42.length > 5 && _arguments42[5] !== undefined ? _arguments42[5] : {};
            order = {
                'market': _this54.productId(product),
                'op': side,
                'amount': amount
            };

            if (type == 'market') {
                order['order_type'] = 1;
                order['price'] = price;
            } else {
                order['order_type'] = 0;
            }
            return _this54.privatePostTrade(_this54.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this55 = this;

            return _this55.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _test2,
                _this56 = this,
                _arguments44 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments44.length > 1 && _arguments44[1] !== undefined ? _arguments44[1] : 'public';
                method = _arguments44.length > 2 && _arguments44[2] !== undefined ? _arguments44[2] : 'GET';
                params = _arguments44.length > 3 && _arguments44[3] !== undefined ? _arguments44[3] : {};
                headers = _arguments44.length > 4 && _arguments44[4] !== undefined ? _arguments44[4] : undefined;
                body = _arguments44.length > 5 && _arguments44[5] !== undefined ? _arguments44[5] : undefined;
                url = _this56.urls['api'] + '/' + _this56.version + '/' + path;

                if (type == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this56.urlencode(params);
                    }
                } else {
                    nonce = _this56.nonce();

                    body = _this56.urlencode(_this56.extend({
                        'nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this56.apiKey,
                        'Sign': _this56.hmac(_this56.encode(body), _this56.secret, 'sha512')
                    };
                }
                return _this56.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test2 = 'status' in response;

                if (_test2 && response['status'] == 200) {
                    return response;
                } else {
                    throw new MarketError(_this56.id + ' ' + _this56.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitcoincoid = {

        'id': 'bitcoincoid',
        'name': 'Bitcoin.co.id',
        'countries': 'ID', // Indonesia
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',
            'api': {
                'public': 'https://vip.bitcoin.co.id/api',
                'private': 'https://vip.bitcoin.co.id/tapi'
            },
            'www': 'https://www.bitcoin.co.id',
            'doc': ['https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf', 'https://vip.bitcoin.co.id/trade_api']
        },
        'api': {
            'public': {
                'get': ['{pair}/ticker', '{pair}/trades', '{pair}/depth']
            },
            'private': {
                'post': ['getInfo', 'transHistory', 'trade', 'tradeHistory', 'openOrders', 'cancelOrder']
            }
        },
        'products': {
            'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },
            'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },
            'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },
            'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },
            'STR/BTC': { 'id': 'str_btc', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },
            'NEM/BTC': { 'id': 'nem_btc', 'symbol': 'NEM/BTC', 'base': 'NEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                frozen,
                result,
                c,
                currency,
                lowercase,
                account,
                _this57 = this;

            return Promise.resolve().then(function () {
                return _this57.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balance = response['return']['balance'];
                frozen = response['return']['balance_hold'];
                result = { 'info': balance };

                for (c = 0; c < _this57.currencies.length; c++) {
                    currency = _this57.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balance) {
                        account['free'] = parseFloat(balance[lowercase]);
                    }
                    if (lowercase in frozen) {
                        account['used'] = parseFloat(frozen[lowercase]);
                    }
                    account['total'] = _this57.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this58 = this;

            return Promise.resolve().then(function () {
                return _this58.publicGetPairDepth({
                    'pair': _this58.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this58.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this58.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var pair,
                response,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this59 = this;

            return Promise.resolve().then(function () {
                pair = _this59.product(product);
                return _this59.publicGetPairTicker({
                    'pair': pair['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseFloat(ticker['server_time']) * 1000;
                baseVolume = 'vol_' + pair['baseId'].toLowerCase();
                quoteVolume = 'vol_' + pair['quoteId'].toLowerCase();

                return {
                    'timestamp': timestamp,
                    'datetime': _this59.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker[baseVolume]),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this60 = this;

            return _this60.publicGetPairTrades({
                'pair': _this60.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                order,
                base,
                _this61 = this,
                _arguments49 = arguments;

            price = _arguments49.length > 4 && _arguments49[4] !== undefined ? _arguments49[4] : undefined;
            params = _arguments49.length > 5 && _arguments49[5] !== undefined ? _arguments49[5] : {};
            p = _this61.product(product);
            order = {
                'pair': p['id'],
                'type': side,
                'price': price
            };
            base = p['base'].toLowerCase();

            order[base] = amount;
            return _this61.privatePostTrade(_this61.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this62 = this,
                _arguments50 = arguments;

            params = _arguments50.length > 1 && _arguments50[1] !== undefined ? _arguments50[1] : {};

            return _this62.privatePostCancelOrder(_this62.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                response,
                _this63 = this,
                _arguments51 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments51.length > 1 && _arguments51[1] !== undefined ? _arguments51[1] : 'public';
                method = _arguments51.length > 2 && _arguments51[2] !== undefined ? _arguments51[2] : 'GET';
                params = _arguments51.length > 3 && _arguments51[3] !== undefined ? _arguments51[3] : {};
                headers = _arguments51.length > 4 && _arguments51[4] !== undefined ? _arguments51[4] : undefined;
                body = _arguments51.length > 5 && _arguments51[5] !== undefined ? _arguments51[5] : undefined;
                url = _this63.urls['api'][type];

                if (type == 'public') {
                    url += '/' + _this63.implodeParams(path, params);
                } else {
                    body = _this63.urlencode(_this63.extend({
                        'method': path,
                        'nonce': _this63.nonce()
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this63.apiKey,
                        'Sign': _this63.hmac(_this63.encode(body), _this63.encode(_this63.secret), 'sha512')
                    };
                }
                return _this63.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new MarketError(_this63.id + ' ' + response['error']);
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitfinex = {

        'id': 'bitfinex',
        'name': 'Bitfinex',
        'countries': 'US',
        'version': 'v1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',
            'api': 'https://api.bitfinex.com',
            'www': 'https://www.bitfinex.com',
            'doc': ['https://bitfinex.readme.io/v1/docs', 'https://bitfinex.readme.io/v2/docs', 'https://github.com/bitfinexcom/bitfinex-api-node']
        },
        'api': {
            'public': {
                'get': ['book/{symbol}', 'candles/{symbol}', 'lendbook/{currency}', 'lends/{currency}', 'pubticker/{symbol}', 'stats/{symbol}', 'symbols', 'symbols_details', 'today', 'trades/{symbol}']
            },
            'private': {
                'post': ['account_infos', 'balances', 'basket_manage', 'credits', 'deposit/new', 'funding/close', 'history', 'history/movements', 'key_info', 'margin_infos', 'mytrades', 'offer/cancel', 'offer/new', 'offer/status', 'offers', 'order/cancel', 'order/cancel/all', 'order/cancel/multi', 'order/cancel/replace', 'order/new', 'order/new/multi', 'order/status', 'orders', 'position/claim', 'positions', 'summary', 'taken_funds', 'total_taken_funds', 'transfer', 'unused_taken_funds', 'withdraw']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                baseId,
                quoteId,
                base,
                quote,
                symbol,
                _this64 = this;

            return Promise.resolve().then(function () {
                return _this64.publicGetSymbolsDetails();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['pair'].toUpperCase();
                    baseId = id.slice(0, 3);
                    quoteId = id.slice(3, 6);
                    base = baseId;
                    quote = quoteId;
                    // issue #4 Bitfinex names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'baseId': baseId,
                        'quoteId': quoteId,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                b,
                account,
                currency,
                uppercase,
                result,
                c,
                _currency,
                _account,
                _this65 = this;

            return Promise.resolve().then(function () {
                return _this65.loadProducts();
            }).then(function () {
                return _this65.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];

                    if (account['type'] == 'exchange') {
                        currency = account['currency'];
                        // issue #4 Bitfinex names Dash as DSH, instead of DASH

                        if (currency == 'DSH') {
                            currency = 'DASH';
                        }uppercase = currency.toUpperCase();

                        balances[uppercase] = account;
                    }
                }
                result = { 'info': response };

                for (c = 0; c < _this65.currencies.length; c++) {
                    _currency = _this65.currencies[c];
                    _account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency in balances) {
                        _account['free'] = parseFloat(balances[_currency]['available']);
                        _account['total'] = parseFloat(balances[_currency]['amount']);
                        _account['used'] = _account['total'] - _account['free'];
                    }
                    result[_currency] = _account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp3,
                _this66 = this;

            return Promise.resolve().then(function () {
                return _this66.loadProducts();
            }).then(function () {
                return _this66.publicGetBookSymbol({
                    'symbol': _this66.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this66.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this66.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);
                        _timestamp3 = parseInt(parseFloat(order['timestamp']));

                        result[side].push([price, amount, _timestamp3]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this67 = this;

            return Promise.resolve().then(function () {
                return _this67.loadProducts();
            }).then(function () {
                return _this67.publicGetPubtickerSymbol({
                    'symbol': _this67.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseFloat(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this67.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['mid']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this68 = this;

            return Promise.resolve().then(function () {
                return _this68.loadProducts();
            }).then(function () {
                return _this68.publicGetTradesSymbol({
                    'symbol': _this68.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this69 = this,
                _arguments57 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments57.length > 4 && _arguments57[4] !== undefined ? _arguments57[4] : undefined;
                params = _arguments57.length > 5 && _arguments57[5] !== undefined ? _arguments57[5] : {};
                return _this69.loadProducts();
            }).then(function () {
                order = {
                    'symbol': _this69.productId(product),
                    'amount': amount.toString(),
                    'side': side,
                    'type': 'exchange ' + type,
                    'ocoorder': false,
                    'buy_price_oco': 0,
                    'sell_price_oco': 0
                };

                if (type == 'market') {
                    order['price'] = _this69.nonce().toString();
                } else {
                    order['price'] = price;
                }
                return _this69.privatePostOrderNew(_this69.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this70 = this;

            return Promise.resolve().then(function () {
                return _this70.loadProducts();
            }).then(function () {
                return _this70.privatePostOrderCancel({ 'order_id': id });
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var request = '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            var url = this.urls['api'] + request;
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                query = this.extend({
                    'nonce': nonce.toString(),
                    'request': request
                }, query);
                query = this.json(query);
                query = this.encode(query);
                var payload = this.stringToBase64(query);
                var secret = this.encode(this.secret);
                headers = {
                    'X-BFX-APIKEY': this.apiKey,
                    'X-BFX-PAYLOAD': payload,
                    'X-BFX-SIGNATURE': this.hmac(payload, secret, 'sha384')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitflyer = {

        'id': 'bitflyer',
        'name': 'bitFlyer',
        'countries': 'JP',
        'version': 'v1',
        'rateLimit': 500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',
            'api': 'https://api.bitflyer.jp',
            'www': 'https://bitflyer.jp',
            'doc': 'https://bitflyer.jp/API'
        },
        'api': {
            'public': {
                'get': ['getmarkets', // or 'markets'
                'getboard', // or 'board'
                'getticker', // or 'ticker'
                'getexecutions', // or 'executions'
                'gethealth', 'getchats']
            },
            'private': {
                'get': ['getpermissions', 'getbalance', 'getcollateral', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],
                'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                currencies,
                base,
                quote,
                symbol,
                numCurrencies,
                _this71 = this;

            return Promise.resolve().then(function () {
                return _this71.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['product_code'];
                    currencies = id.split('_');
                    base = undefined;
                    quote = undefined;
                    symbol = id;
                    numCurrencies = currencies.length;

                    if (numCurrencies == 2) {
                        base = currencies[0];
                        quote = currencies[1];
                        symbol = base + '/' + quote;
                    }
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                b,
                account,
                currency,
                result,
                c,
                _currency2,
                _account2,
                _this72 = this;

            return Promise.resolve().then(function () {
                return _this72.loadProducts();
            }).then(function () {
                return _this72.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = {};

                for (b = 0; b < response.length; b++) {
                    account = response[b];
                    currency = account['currency_code'];

                    balances[currency] = account;
                }
                result = { 'info': response };

                for (c = 0; c < _this72.currencies.length; c++) {
                    _currency2 = _this72.currencies[c];
                    _account2 = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency2 in balances) {
                        _account2['total'] = balances[_currency2]['amount'];
                        _account2['free'] = balances[_currency2]['available'];
                        _account2['used'] = _account2['total'] - _account2['free'];
                    }
                    result[_currency2] = _account2;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this73 = this;

            return Promise.resolve().then(function () {
                return _this73.loadProducts();
            }).then(function () {
                return _this73.publicGetBoard({
                    'product_code': _this73.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this73.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this73.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['size']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this74 = this;

            return Promise.resolve().then(function () {
                return _this74.loadProducts();
            }).then(function () {
                return _this74.publicGetTicker({
                    'product_code': _this74.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this74.parse8601(ticker['timestamp']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this74.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['best_bid']),
                    'ask': parseFloat(ticker['best_ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['ltp']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_by_product']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this75 = this;

            return Promise.resolve().then(function () {
                return _this75.loadProducts();
            }).then(function () {
                return _this75.publicGetExecutions({
                    'product_code': _this75.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this76 = this,
                _arguments64 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments64.length > 4 && _arguments64[4] !== undefined ? _arguments64[4] : undefined;
                params = _arguments64.length > 5 && _arguments64[5] !== undefined ? _arguments64[5] : {};
                return _this76.loadProducts();
            }).then(function () {
                order = {
                    'product_code': _this76.productId(product),
                    'child_order_type': type.toUpperCase(),
                    'side': side.toUpperCase(),
                    'price': price,
                    'size': amount
                };

                return _this76.privatePostSendparentorder(_this76.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this77 = this,
                _arguments65 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments65.length > 1 && _arguments65[1] !== undefined ? _arguments65[1] : {};
                return _this77.loadProducts();
            }).then(function () {
                return _this77.privatePostCancelparentorder(_this77.extend({
                    'parent_order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                request,
                url,
                nonce,
                auth,
                _this78 = this,
                _arguments66 = arguments;

            type = _arguments66.length > 1 && _arguments66[1] !== undefined ? _arguments66[1] : 'public';
            method = _arguments66.length > 2 && _arguments66[2] !== undefined ? _arguments66[2] : 'GET';
            params = _arguments66.length > 3 && _arguments66[3] !== undefined ? _arguments66[3] : {};
            headers = _arguments66.length > 4 && _arguments66[4] !== undefined ? _arguments66[4] : undefined;
            body = _arguments66.length > 5 && _arguments66[5] !== undefined ? _arguments66[5] : undefined;
            request = '/' + _this78.version + '/' + path;

            if (type == 'private') {
                request = '/me' + request;
            }url = _this78.urls['api'] + request;

            if (type == 'public') {
                if (Object.keys(params).length) {
                    url += '?' + _this78.urlencode(params);
                }
            } else {
                nonce = _this78.nonce().toString();

                body = _this78.json(params);
                auth = [nonce, method, request, body].join('');

                headers = {
                    'ACCESS-KEY': _this78.apiKey,
                    'ACCESS-TIMESTAMP': nonce,
                    'ACCESS-SIGN': _this78.hmac(_this78.encode(auth), _this78.secret),
                    'Content-Type': 'application/json'
                };
            }
            return _this78.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitlish = {

        'id': 'bitlish',
        'name': 'bitlish',
        'countries': ['GB', 'EU', 'RU'],
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',
            'api': 'https://bitlish.com/api',
            'www': 'https://bitlish.com',
            'doc': 'https://bitlish.com/api'
        },
        'api': {
            'public': {
                'get': ['instruments', 'ohlcv', 'pairs', 'tickers', 'trades_depth', 'trades_history']
            },
            'private': {
                'post': ['accounts_operations', 'balance', 'cancel_trade', 'cancel_trades_by_ids', 'cancel_all_trades', 'create_bcode', 'create_template_wallet', 'create_trade', 'deposit', 'list_accounts_operations_from_ts', 'list_active_trades', 'list_bcodes', 'list_my_matches_from_ts', 'list_my_trades', 'list_my_trads_from_ts', 'list_payment_methods', 'list_payments', 'redeem_code', 'resign', 'signin', 'signout', 'trade_details', 'trade_options', 'withdraw', 'withdraw_by_id']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                keys,
                p,
                product,
                id,
                symbol,
                _symbol$split,
                _symbol$split2,
                base,
                quote,
                _this79 = this;

            return Promise.resolve().then(function () {
                return _this79.publicGetPairs();
            }).then(function (_resp) {
                products = _resp;
                result = [];
                keys = Object.keys(products);

                for (p = 0; p < keys.length; p++) {
                    product = products[keys[p]];
                    id = product['id'];
                    symbol = product['name'];
                    _symbol$split = symbol.split('/');
                    _symbol$split2 = _slicedToArray(_symbol$split, 2);
                    base = _symbol$split2[0];
                    quote = _symbol$split2[1];
                    // issue #4 bitlish names Dash as DSH, instead of DASH

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this80 = this;

            return Promise.resolve().then(function () {
                return _this80.loadProducts();
            }).then(function () {
                p = _this80.product(product);
                return _this80.publicGetTickers();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = _this80.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this80.iso8601(timestamp),
                    'high': parseFloat(ticker['max']),
                    'low': parseFloat(ticker['min']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': parseFloat(ticker['first']),
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this81 = this;

            return Promise.resolve().then(function () {
                return _this81.loadProducts();
            }).then(function () {
                return _this81.publicGetTradesDepth({
                    'pair_id': _this81.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(parseInt(orderbook['last']) / 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this81.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this82 = this;

            return Promise.resolve().then(function () {
                return _this82.loadProducts();
            }).then(function () {
                return _this82.publicGetTradesHistory({
                    'pair_id': _this82.productId(product)
                });
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                currencies,
                balance,
                c,
                currency,
                account,
                _c,
                _currency3,
                _account3,
                _this83 = this;

            return Promise.resolve().then(function () {
                return _this83.loadProducts();
            }).then(function () {
                return _this83.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                currencies = Object.keys(response);
                balance = {};

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = response[currency];

                    currency = currency.toUpperCase();
                    // issue #4 bitlish names Dash as DSH, instead of DASH
                    if (currency == 'DSH') {
                        currency = 'DASH';
                    }balance[currency] = account;
                }
                for (_c = 0; _c < _this83.currencies.length; _c++) {
                    _currency3 = _this83.currencies[_c];
                    _account3 = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (_currency3 in balance) {
                        _account3['free'] = parseFloat(balance[_currency3]['funds']);
                        _account3['used'] = parseFloat(balance[_currency3]['holded']);
                        _account3['total'] = _this83.sum(_account3['free'], _account3['used']);
                    }
                    result[_currency3] = _account3;
                }
                return result;
            });
        },
        signIn: function signIn() {
            return this.privatePostSignin({
                'login': this.login,
                'passwd': this.password
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this84 = this,
                _arguments72 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments72.length > 4 && _arguments72[4] !== undefined ? _arguments72[4] : undefined;
                params = _arguments72.length > 5 && _arguments72[5] !== undefined ? _arguments72[5] : {};
                return _this84.loadProducts();
            }).then(function () {
                order = {
                    'pair_id': _this84.productId(product),
                    'dir': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this84.privatePostCreateTrade(_this84.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this85 = this;

            return Promise.resolve().then(function () {
                return _this85.loadProducts();
            }).then(function () {
                return _this85.privatePostCancelTrade({ 'id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                body = this.json(this.extend({ 'token': this.apiKey }, params));
                headers = { 'Content-Type': 'application/json' };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmarket = {

        'id': 'bitmarket',
        'name': 'BitMarket',
        'countries': ['PL', 'EU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',
            'api': {
                'public': 'https://www.bitmarket.net',
                'private': 'https://www.bitmarket.pl/api2/' // last slash is critical
            },
            'www': ['https://www.bitmarket.pl', 'https://www.bitmarket.net'],
            'doc': ['https://www.bitmarket.net/docs.php?file=api_public.html', 'https://www.bitmarket.net/docs.php?file=api_private.html', 'https://github.com/bitmarket-net/api']
        },
        'api': {
            'public': {
                'get': ['json/{market}/ticker', 'json/{market}/orderbook', 'json/{market}/trades', 'json/ctransfer', 'graphs/{market}/90m', 'graphs/{market}/6h', 'graphs/{market}/1d', 'graphs/{market}/7d', 'graphs/{market}/1m', 'graphs/{market}/3m', 'graphs/{market}/6m', 'graphs/{market}/1y']
            },
            'private': {
                'post': ['info', 'trade', 'cancel', 'orders', 'trades', 'history', 'withdrawals', 'tradingdesk', 'tradingdeskStatus', 'tradingdeskConfirm', 'cryptotradingdesk', 'cryptotradingdeskStatus', 'cryptotradingdeskConfirm', 'withdraw', 'withdrawFiat', 'withdrawPLNPP', 'withdrawFiatFast', 'deposit', 'transfer', 'transfers', 'marginList', 'marginOpen', 'marginClose', 'marginCancel', 'marginModify', 'marginBalanceAdd', 'marginBalanceRemove', 'swapList', 'swapOpen', 'swapClose']
            }
        },
        'products': {
            'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },
            'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' },
            'PlnX/BTC': { 'id': 'PlnxBTC', 'symbol': 'PlnX/BTC', 'base': 'PlnX', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this86 = this;

            return Promise.resolve().then(function () {
                return _this86.loadProducts();
            }).then(function () {
                return _this86.privatePostInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['balances'];
                result = { 'info': data };

                for (c = 0; c < _this86.currencies.length; c++) {
                    currency = _this86.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance['available']) {
                        account['free'] = balance['available'][currency];
                    }if (currency in balance['blocked']) {
                        account['used'] = balance['blocked'][currency];
                    }account['total'] = _this86.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this87 = this;

            return Promise.resolve().then(function () {
                return _this87.publicGetJsonMarketOrderbook({
                    'market': _this87.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this87.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this87.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this88 = this;

            return Promise.resolve().then(function () {
                return _this88.publicGetJsonMarketTicker({
                    'market': _this88.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this88.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this88.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this89 = this;

            return _this89.publicGetJsonMarketTrades({
                'market': _this89.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this90 = this,
                _arguments78 = arguments;

            price = _arguments78.length > 4 && _arguments78[4] !== undefined ? _arguments78[4] : undefined;
            params = _arguments78.length > 5 && _arguments78[5] !== undefined ? _arguments78[5] : {};

            return _this90.privatePostTrade(_this90.extend({
                'market': _this90.productId(product),
                'type': side,
                'amount': amount,
                'rate': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this91 = this;

            return _this91.privatePostCancel({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            if (type == 'public') {
                url += '/' + this.implodeParams(path + '.json', params);
            } else {
                var nonce = this.nonce();
                var query = this.extend({
                    'tonce': nonce,
                    'method': path
                }, params);
                body = this.urlencode(query);
                headers = {
                    'API-Key': this.apiKey,
                    'API-Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitmex = {

        'id': 'bitmex',
        'name': 'BitMEX',
        'countries': 'SC', // Seychelles
        'version': 'v1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',
            'api': 'https://www.bitmex.com',
            'www': 'https://www.bitmex.com',
            'doc': ['https://www.bitmex.com/app/apiOverview', 'https://github.com/BitMEX/api-connectors/tree/master/official-http']
        },
        'api': {
            'public': {
                'get': ['announcement', 'announcement/urgent', 'funding', 'instrument', 'instrument/active', 'instrument/activeAndIndices', 'instrument/activeIntervals', 'instrument/compositeIndex', 'instrument/indices', 'insurance', 'leaderboard', 'liquidation', 'orderBook', 'orderBook/L2', 'quote', 'quote/bucketed', 'schema', 'schema/websocketHelp', 'settlement', 'stats', 'stats/history', 'trade', 'trade/bucketed']
            },
            'private': {
                'get': ['apiKey', 'chat', 'chat/channels', 'chat/connected', 'execution', 'execution/tradeHistory', 'notification', 'order', 'position', 'user', 'user/affiliateStatus', 'user/checkReferralCode', 'user/commission', 'user/depositAddress', 'user/margin', 'user/minWithdrawalFee', 'user/wallet', 'user/walletHistory', 'user/walletSummary'],
                'post': ['apiKey', 'apiKey/disable', 'apiKey/enable', 'chat', 'order', 'order/bulk', 'order/cancelAllAfter', 'order/closePosition', 'position/isolate', 'position/leverage', 'position/riskLimit', 'position/transferMargin', 'user/cancelWithdrawal', 'user/confirmEmail', 'user/confirmEnableTFA', 'user/confirmWithdrawal', 'user/disableTFA', 'user/logout', 'user/logoutAll', 'user/preferences', 'user/requestEnableTFA', 'user/requestWithdrawal'],
                'put': ['order', 'order/bulk', 'user'],
                'delete': ['apiKey', 'order', 'order/all']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                isFuturesContract,
                symbol,
                _this92 = this;

            return Promise.resolve().then(function () {
                return _this92.publicGetInstrumentActive();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['symbol'];
                    base = product['underlying'];
                    quote = product['quoteCurrency'];
                    isFuturesContract = id != base + quote;

                    base = _this92.commonCurrencyCode(base);
                    quote = _this92.commonCurrencyCode(quote);
                    symbol = isFuturesContract ? id : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                b,
                balance,
                currency,
                account,
                _this93 = this;

            return Promise.resolve().then(function () {
                return _this93.loadProducts();
            }).then(function () {
                return _this93.privateGetUserMargin({ 'currency': 'all' });
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (b = 0; b < response.length; b++) {
                    balance = response[b];
                    currency = balance['currency'].toUpperCase();

                    currency = _this93.commonCurrencyCode(currency);
                    account = {
                        'free': balance['availableMargin'],
                        'used': undefined,
                        'total': balance['amount']
                    };

                    if (currency == 'BTC') {
                        account['free'] = account['free'] * 0.00000001;
                        account['total'] = account['total'] * 0.00000001;
                    }
                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                o,
                order,
                side,
                amount,
                price,
                _this94 = this;

            return Promise.resolve().then(function () {
                return _this94.loadProducts();
            }).then(function () {
                return _this94.publicGetOrderBookL2({
                    'symbol': _this94.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this94.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this94.iso8601(timestamp)
                };

                for (o = 0; o < orderbook.length; o++) {
                    order = orderbook[o];
                    side = order['side'] == 'Sell' ? 'asks' : 'bids';
                    amount = order['size'];
                    price = order['price'];

                    result[side].push([price, amount]);
                }
                result['bids'] = _this94.sortBy(result['bids'], 0, true);
                result['asks'] = _this94.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var request,
                quotes,
                quotesLength,
                quote,
                tickers,
                ticker,
                timestamp,
                _this95 = this;

            return Promise.resolve().then(function () {
                return _this95.loadProducts();
            }).then(function () {
                request = {
                    'symbol': _this95.productId(product),
                    'binSize': '1d',
                    'partial': true,
                    'count': 1,
                    'reverse': true
                };
                return _this95.publicGetQuoteBucketed(request);
            }).then(function (_resp) {
                quotes = _resp;
                quotesLength = quotes.length;
                quote = quotes[quotesLength - 1];
                return _this95.publicGetTradeBucketed(request);
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[0];
                timestamp = _this95.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this95.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(quote['bidPrice']),
                    'ask': parseFloat(quote['askPrice']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['homeNotional']),
                    'quoteVolume': parseFloat(ticker['foreignNotional']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this96 = this;

            return Promise.resolve().then(function () {
                return _this96.loadProducts();
            }).then(function () {
                return _this96.publicGetTrade({
                    'symbol': _this96.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this97 = this,
                _arguments85 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments85.length > 4 && _arguments85[4] !== undefined ? _arguments85[4] : undefined;
                params = _arguments85.length > 5 && _arguments85[5] !== undefined ? _arguments85[5] : {};
                return _this97.loadProducts();
            }).then(function () {
                order = {
                    'symbol': _this97.productId(product),
                    'side': _this97.capitalize(side),
                    'orderQty': amount,
                    'ordType': _this97.capitalize(type)
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this97.privatePostOrder(_this97.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this98 = this;

            return Promise.resolve().then(function () {
                return _this98.loadProducts();
            }).then(function () {
                return _this98.privateDeleteOrder({ 'orderID': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var query = '/api/' + this.version + '/' + path;
            if (Object.keys(params).length) query += '?' + this.urlencode(params);
            var url = this.urls['api'] + query;
            if (type == 'private') {
                var nonce = this.nonce().toString();
                if (method == 'POST') if (Object.keys(params).length) body = this.json(params);
                var request = [method, query, nonce, body || ''].join('');
                headers = {
                    'Content-Type': 'application/json',
                    'api-nonce': nonce,
                    'api-key': this.apiKey,
                    'api-signature': this.hmac(this.encode(request), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bitso = {

        'id': 'bitso',
        'name': 'Bitso',
        'countries': 'MX', // Mexico
        'rateLimit': 2000, // 30 requests per minute
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',
            'api': 'https://api.bitso.com',
            'www': 'https://bitso.com',
            'doc': 'https://bitso.com/api_info'
        },
        'api': {
            'public': {
                'get': ['available_books', 'ticker', 'order_book', 'trades']
            },
            'private': {
                'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],
                'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal'],
                'delete': ['orders/{oid}', 'orders/all']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                symbol,
                _symbol$split3,
                _symbol$split4,
                base,
                quote,
                _this99 = this;

            return Promise.resolve().then(function () {
                return _this99.publicGetAvailableBooks();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['payload'].length; p++) {
                    product = products['payload'][p];
                    id = product['book'];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split3 = symbol.split('/');
                    _symbol$split4 = _slicedToArray(_symbol$split3, 2);
                    base = _symbol$split4[0];
                    quote = _symbol$split4[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this100 = this;

            return Promise.resolve().then(function () {
                return _this100.loadProducts();
            }).then(function () {
                return _this100.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['payload']['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'].toUpperCase();
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['locked']),
                        'total': parseFloat(balance['total'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this101 = this;

            return Promise.resolve().then(function () {
                return _this101.loadProducts();
            }).then(function () {
                return _this101.publicGetOrderBook({
                    'book': _this101.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['payload'];
                timestamp = _this101.parse8601(orderbook['updated_at']);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this101.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this102 = this;

            return Promise.resolve().then(function () {
                return _this102.loadProducts();
            }).then(function () {
                return _this102.publicGetTicker({
                    'book': _this102.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['payload'];
                timestamp = _this102.parse8601(ticker['created_at']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this102.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this103 = this;

            return Promise.resolve().then(function () {
                return _this103.loadProducts();
            }).then(function () {
                return _this103.publicGetTrades({
                    'book': _this103.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this104 = this,
                _arguments92 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments92.length > 4 && _arguments92[4] !== undefined ? _arguments92[4] : undefined;
                params = _arguments92.length > 5 && _arguments92[5] !== undefined ? _arguments92[5] : {};
                return _this104.loadProducts();
            }).then(function () {
                order = {
                    'book': _this104.productId(product),
                    'side': side,
                    'type': type,
                    'major': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this104.privatePostOrders(_this104.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this105 = this;

            return Promise.resolve().then(function () {
                return _this105.loadProducts();
            }).then(function () {
                return _this105.privateDeleteOrders({ 'oid': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                query,
                url,
                nonce,
                request,
                signature,
                auth,
                response,
                _test3,
                _this106 = this,
                _arguments94 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments94.length > 1 && _arguments94[1] !== undefined ? _arguments94[1] : 'public';
                method = _arguments94.length > 2 && _arguments94[2] !== undefined ? _arguments94[2] : 'GET';
                params = _arguments94.length > 3 && _arguments94[3] !== undefined ? _arguments94[3] : {};
                headers = _arguments94.length > 4 && _arguments94[4] !== undefined ? _arguments94[4] : undefined;
                body = _arguments94.length > 5 && _arguments94[5] !== undefined ? _arguments94[5] : undefined;
                query = '/' + _this106.version + '/' + _this106.implodeParams(path, params);
                url = _this106.urls['api'] + query;

                if (type == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this106.urlencode(params);
                    }
                } else {
                    if (Object.keys(params).length) {
                        body = _this106.json(params);
                    }nonce = _this106.nonce().toString();
                    request = [nonce, method, query, body || ''].join('');
                    signature = _this106.hmac(_this106.encode(request), _this106.encode(_this106.secret));
                    auth = _this106.apiKey + ':' + nonce + ':' + signature;

                    headers = { 'Authorization': "Bitso " + auth };
                }
                return _this106.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test3 = 'success' in response;

                if (_test3 && response['success']) {
                    return response;
                } else {
                    throw new MarketError(_this106.id + ' ' + _this106.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bitstamp = {

        'id': 'bitstamp',
        'name': 'Bitstamp',
        'countries': 'GB',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',
            'api': 'https://www.bitstamp.net/api',
            'www': 'https://www.bitstamp.net',
            'doc': 'https://www.bitstamp.net/api'
        },
        'api': {
            'public': {
                'get': ['order_book/{id}/', 'ticker_hour/{id}/', 'ticker/{id}/', 'transactions/{id}/']
            },
            'private': {
                'post': ['balance/', 'balance/{id}/', 'buy/{id}/', 'buy/market/{id}/', 'cancel_order/', 'liquidation_address/info/', 'liquidation_address/new/', 'open_orders/all/', 'open_orders/{id}/', 'sell/{id}/', 'sell/market/{id}/', 'transfer-from-main/', 'transfer-to-main/', 'user_transactions/', 'user_transactions/{id}/', 'withdrawal/cancel/', 'withdrawal/open/', 'withdrawal/status/', 'xrp_address/', 'xrp_withdrawal/']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD' },
            'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },
            'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR' },
            'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },
            'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },
            'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' }
        },

        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this107 = this;

            return Promise.resolve().then(function () {
                return _this107.publicGetOrderBookId({
                    'id': _this107.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this107.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this108 = this;

            return Promise.resolve().then(function () {
                return _this108.publicGetTickerId({
                    'id': _this108.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this108.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this109 = this;

            return _this109.publicGetTransactionsId({
                'id': _this109.productId(product)
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                lowercase,
                total,
                free,
                used,
                account,
                _this110 = this;

            return Promise.resolve().then(function () {
                return _this110.privatePostBalance();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this110.currencies.length; c++) {
                    currency = _this110.currencies[c];
                    lowercase = currency.toLowerCase();
                    total = lowercase + '_balance';
                    free = lowercase + '_available';
                    used = lowercase + '_reserved';
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (free in balance) {
                        account['free'] = parseFloat(balance[free]);
                    }if (used in balance) {
                        account['used'] = parseFloat(balance[used]);
                    }if (total in balance) {
                        account['total'] = parseFloat(balance[total]);
                    }result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this111 = this,
                _arguments99 = arguments;

            price = _arguments99.length > 4 && _arguments99[4] !== undefined ? _arguments99[4] : undefined;
            params = _arguments99.length > 5 && _arguments99[5] !== undefined ? _arguments99[5] : {};
            method = 'privatePost' + _this111.capitalize(side);
            order = {
                'id': _this111.productId(product),
                'amount': amount
            };

            if (type == 'market') {
                method += 'Market';
            } else {
                order['price'] = price;
            }method += 'Id';
            return _this111[method](_this111.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this112 = this;

            return _this112.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                if (!this.uid) throw new AuthenticationError(this.id + ' requires `' + this.id + '.uid` property for authentication');
                var nonce = this.nonce().toString();
                var auth = nonce + this.uid + this.apiKey;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret));
                query = this.extend({
                    'key': this.apiKey,
                    'signature': signature.toUpperCase(),
                    'nonce': nonce
                }, query);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bittrex = {

        'id': 'bittrex',
        'name': 'Bittrex',
        'countries': 'US',
        'version': 'v1.1',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',
            'api': 'https://bittrex.com/api',
            'www': 'https://bittrex.com',
            'doc': ['https://bittrex.com/Home/Api', 'https://www.npmjs.org/package/node.bittrex.api']
        },
        'api': {
            'public': {
                'get': ['currencies', 'markethistory', 'markets', 'marketsummaries', 'marketsummary', 'orderbook', 'ticker']
            },
            'account': {
                'get': ['balance', 'balances', 'depositaddress', 'deposithistory', 'order', 'orderhistory', 'withdrawalhistory', 'withdraw']
            },
            'market': {
                'get': ['buylimit', 'buymarket', 'cancel', 'openorders', 'selllimit', 'sellmarket']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this113 = this;

            return Promise.resolve().then(function () {
                return _this113.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['result'].length; p++) {
                    product = products['result'][p];
                    id = product['MarketName'];
                    base = product['MarketCurrency'];
                    quote = product['BaseCurrency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                indexed,
                c,
                currency,
                account,
                balance,
                _this114 = this;

            return Promise.resolve().then(function () {
                return _this114.loadProducts();
            }).then(function () {
                return _this114.accountGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };
                indexed = _this114.indexBy(balances, 'Currency');

                for (c = 0; c < _this114.currencies.length; c++) {
                    currency = _this114.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in indexed) {
                        balance = indexed[currency];

                        account['free'] = balance['Available'];
                        account['used'] = balance['Pending'];
                        account['total'] = balance['Balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this115 = this;

            return Promise.resolve().then(function () {
                return _this115.loadProducts();
            }).then(function () {
                return _this115.publicGetOrderbook({
                    'market': _this115.productId(product),
                    'type': 'both',
                    'depth': 50
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this115.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this115.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Rate']);
                        amount = parseFloat(order['Quantity']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this116 = this;

            return Promise.resolve().then(function () {
                return _this116.loadProducts();
            }).then(function () {
                return _this116.publicGetMarketsummary({
                    'market': _this116.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][0];
                timestamp = _this116.parse8601(ticker['TimeStamp']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this116.iso8601(timestamp),
                    'high': parseFloat(ticker['High']),
                    'low': parseFloat(ticker['Low']),
                    'bid': parseFloat(ticker['Bid']),
                    'ask': parseFloat(ticker['Ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['Last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['Volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this117 = this;

            return Promise.resolve().then(function () {
                return _this117.loadProducts();
            }).then(function () {
                return _this117.publicGetMarkethistory({
                    'market': _this117.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this118 = this,
                _arguments106 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments106.length > 4 && _arguments106[4] !== undefined ? _arguments106[4] : undefined;
                params = _arguments106.length > 5 && _arguments106[5] !== undefined ? _arguments106[5] : {};
                return _this118.loadProducts();
            }).then(function () {
                method = 'marketGet' + _this118.capitalize(side) + type;
                order = {
                    'market': _this118.productId(product),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['rate'] = price;
                }return _this118[method](_this118.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this119 = this;

            return Promise.resolve().then(function () {
                return _this119.loadProducts();
            }).then(function () {
                return _this119.marketGetCancel({ 'uuid': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                signature,
                response,
                _test4,
                _this120 = this,
                _arguments108 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments108.length > 1 && _arguments108[1] !== undefined ? _arguments108[1] : 'public';
                method = _arguments108.length > 2 && _arguments108[2] !== undefined ? _arguments108[2] : 'GET';
                params = _arguments108.length > 3 && _arguments108[3] !== undefined ? _arguments108[3] : {};
                headers = _arguments108.length > 4 && _arguments108[4] !== undefined ? _arguments108[4] : undefined;
                body = _arguments108.length > 5 && _arguments108[5] !== undefined ? _arguments108[5] : undefined;
                url = _this120.urls['api'] + '/' + _this120.version + '/';

                if (type == 'public') {
                    url += type + '/' + method.toLowerCase() + path;
                    if (Object.keys(params).length) {
                        url += '?' + _this120.urlencode(params);
                    }
                } else {
                    nonce = _this120.nonce();

                    url += type + '/';
                    if (type == 'account' && path != 'withdraw' || path == 'openorders') {
                        url += method.toLowerCase();
                    }url += path + '?' + _this120.urlencode(_this120.extend({
                        'nonce': nonce,
                        'apikey': _this120.apiKey
                    }, params));
                    signature = _this120.hmac(_this120.encode(url), _this120.encode(_this120.secret), 'sha512');

                    headers = { 'apisign': signature };
                }
                return _this120.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test4 = 'success' in response;

                if (_test4 && response['success']) {
                    return response;
                } else {
                    throw new MarketError(_this120.id + ' ' + _this120.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var blinktrade = {

        'id': 'blinktrade',
        'name': 'BlinkTrade',
        'countries': ['US', 'VE', 'VN', 'BR', 'PK', 'CL'],
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990968-75d9c884-6470-11e7-9073-46756c8e7e8c.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://blinktrade.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'api': {
            'public': {
                'get': ['{currency}/ticker', // ?crypto_currency=BTC
                '{currency}/orderbook', // ?crypto_currency=BTC
                '{currency}/trades']
            },
            'private': {
                'post': ['D', // order
                'F', // cancel order
                'U2', // balance
                'U4', // my orders
                'U6', // withdraw
                'U18', // deposit
                'U24', // confirm withdrawal
                'U26', // list withdrawals
                'U30', // list deposits
                'U34', // ledger
                'U70']
            }
        },
        'products': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        },

        fetchBalance: function fetchBalance() {
            var _this121 = this;

            return _this121.privatePostU2({
                'BalanceReqID': _this121.nonce()
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this122 = this;

            return Promise.resolve().then(function () {
                p = _this122.product(product);
                return _this122.publicGetCurrencyOrderbook({
                    'currency': p['quote'],
                    'crypto_currency': p['base']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this122.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this122.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                ticker,
                timestamp,
                lowercaseQuote,
                quoteVolume,
                _this123 = this;

            return Promise.resolve().then(function () {
                p = _this123.product(product);
                return _this123.publicGetCurrencyTicker({
                    'currency': p['quote'],
                    'crypto_currency': p['base']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this123.milliseconds();
                lowercaseQuote = p['quote'].toLowerCase();
                quoteVolume = 'vol_' + lowercaseQuote;

                return {
                    'timestamp': timestamp,
                    'datetime': _this123.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker[quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var p,
                _this124 = this;

            p = _this124.product(product);

            return _this124.publicGetCurrencyTrades({
                'currency': p['quote'],
                'crypto_currency': p['base']
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                order,
                _this125 = this,
                _arguments113 = arguments;

            price = _arguments113.length > 4 && _arguments113[4] !== undefined ? _arguments113[4] : undefined;
            params = _arguments113.length > 5 && _arguments113[5] !== undefined ? _arguments113[5] : {};

            if (type == 'market') {
                throw new EndpointError(_this125.id + ' allows limit orders only');
            }p = _this125.product(product);
            order = {
                'ClOrdID': _this125.nonce(),
                'Symbol': p['id'],
                'Side': _this125.capitalize(side),
                'OrdType': 2,
                'Price': price,
                'OrderQty': amount,
                'BrokerID': p['brokerId']
            };

            return _this125.privatePostD(_this125.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this126 = this,
                _arguments114 = arguments;

            params = _arguments114.length > 1 && _arguments114[1] !== undefined ? _arguments114[1] : {};

            return _this126.privatePostF(_this126.extend({
                'ClOrdID': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce().toString();
                var request = this.extend({ 'MsgType': path }, query);
                body = this.json(request);
                headers = {
                    'APIKey': this.apiKey,
                    'Nonce': nonce,
                    'Signature': this.hmac(this.encode(nonce), this.encode(this.secret)),
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var bl3p = {

        'id': 'bl3p',
        'name': 'BL3P',
        'countries': ['NL', 'EU'], // Netherlands, EU
        'rateLimit': 1000,
        'version': '1',
        'comment': 'An exchange market by BitonicNL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',
            'api': 'https://api.bl3p.eu',
            'www': ['https://bl3p.eu', 'https://bitonic.nl'],
            'doc': ['https://github.com/BitonicNL/bl3p-api/tree/master/docs', 'https://bl3p.eu/api', 'https://bitonic.nl/en/api']
        },
        'api': {
            'public': {
                'get': ['{market}/ticker', '{market}/orderbook', '{market}/trades']
            },
            'private': {
                'post': ['{market}/money/depth/full', '{market}/money/order/add', '{market}/money/order/cancel', '{market}/money/order/result', '{market}/money/orders', '{market}/money/orders/history', '{market}/money/trades/fetch', 'GENMKT/money/info', 'GENMKT/money/deposit_address', 'GENMKT/money/new_deposit_address', 'GENMKT/money/wallet/history', 'GENMKT/money/withdraw']
            }
        },
        'products': {
            'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                data,
                balance,
                result,
                c,
                currency,
                account,
                _this127 = this;

            return Promise.resolve().then(function () {
                return _this127.privatePostGENMKTMoneyInfo();
            }).then(function (_resp) {
                response = _resp;
                data = response['data'];
                balance = data['wallets'];
                result = { 'info': data };

                for (c = 0; c < _this127.currencies.length; c++) {
                    currency = _this127.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balance) {
                        if ('available' in balance[currency]) {
                            account['free'] = parseFloat(balance[currency]['available']['value']);
                        }
                    }
                    if (currency in balance) {
                        if ('balance' in balance[currency]) {
                            account['total'] = parseFloat(balance[currency]['balance']['value']);
                        }
                    }
                    if (account['total']) {
                        if (account['free']) {
                            account['used'] = account['total'] - account['free'];
                        }
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this128 = this;

            return Promise.resolve().then(function () {
                p = _this128.product(product);
                return _this128.publicGetMarketOrderbook({
                    'market': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = _this128.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this128.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price_int'] / 100000;
                        amount = order['amount_int'] / 100000000;

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this129 = this;

            return Promise.resolve().then(function () {
                return _this129.publicGetMarketTicker({
                    'market': _this129.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this129.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']['24h']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this130 = this;

            return _this130.publicGetMarketTrades({
                'market': _this130.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                order,
                _this131 = this,
                _arguments119 = arguments;

            price = _arguments119.length > 4 && _arguments119[4] !== undefined ? _arguments119[4] : undefined;
            params = _arguments119.length > 5 && _arguments119[5] !== undefined ? _arguments119[5] : {};
            p = _this131.product(product);
            order = {
                'market': p['id'],
                'amount_int': amount,
                'fee_currency': p['quote'],
                'type': side == 'buy' ? 'bid' : 'ask'
            };

            if (type == 'limit') {
                order['price_int'] = price;
            }return _this131.privatePostMarketMoneyOrderAdd(_this131.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this132 = this;

            return _this132.privatePostMarketMoneyOrderCancel({ 'order_id': id });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                request,
                url,
                query,
                nonce,
                secret,
                auth,
                signature,
                _this133 = this,
                _arguments121 = arguments;

            type = _arguments121.length > 1 && _arguments121[1] !== undefined ? _arguments121[1] : 'public';
            method = _arguments121.length > 2 && _arguments121[2] !== undefined ? _arguments121[2] : 'GET';
            params = _arguments121.length > 3 && _arguments121[3] !== undefined ? _arguments121[3] : {};
            headers = _arguments121.length > 4 && _arguments121[4] !== undefined ? _arguments121[4] : undefined;
            body = _arguments121.length > 5 && _arguments121[5] !== undefined ? _arguments121[5] : undefined;
            request = _this133.implodeParams(path, params);
            url = _this133.urls['api'] + '/' + _this133.version + '/' + request;
            query = _this133.omit(params, _this133.extractParams(path));

            if (type == 'public') {
                if (Object.keys(query).length) {
                    url += '?' + _this133.urlencode(query);
                }
            } else {
                nonce = _this133.nonce();

                body = _this133.urlencode(_this133.extend({ 'nonce': nonce }, query));
                secret = _this133.base64ToBinary(_this133.secret);
                auth = request + "\0" + body;
                signature = _this133.hmac(_this133.encode(auth), secret, 'sha512', 'base64');

                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Rest-Key': _this133.apiKey,
                    'Rest-Sign': signature
                };
            }
            return _this133.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcchina = {

        'id': 'btcchina',
        'name': 'BTCChina',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',
            'api': {
                'public': 'https://data.btcchina.com/data',
                'private': 'https://api.btcchina.com/api_trade_v1.php'
            },
            'www': 'https://www.btcchina.com',
            'doc': 'https://www.btcchina.com/apidocs'
        },
        'api': {
            'public': {
                'get': ['historydata', 'orderbook', 'ticker', 'trades']
            },
            'private': {
                'post': ['BuyIcebergOrder', 'BuyOrder', 'BuyOrder2', 'BuyStopOrder', 'CancelIcebergOrder', 'CancelOrder', 'CancelStopOrder', 'GetAccountInfo', 'getArchivedOrder', 'getArchivedOrders', 'GetDeposits', 'GetIcebergOrder', 'GetIcebergOrders', 'GetMarketDepth', 'GetMarketDepth2', 'GetOrder', 'GetOrders', 'GetStopOrder', 'GetStopOrders', 'GetTransactions', 'GetWithdrawal', 'GetWithdrawals', 'RequestWithdrawal', 'SellIcebergOrder', 'SellOrder', 'SellOrder2', 'SellStopOrder']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                keys,
                p,
                key,
                product,
                parts,
                id,
                base,
                quote,
                symbol,
                _this134 = this;

            return Promise.resolve().then(function () {
                return _this134.publicGetTicker({
                    'market': 'all'
                });
            }).then(function (_resp) {
                products = _resp;
                result = [];
                keys = Object.keys(products);

                for (p = 0; p < keys.length; p++) {
                    key = keys[p];
                    product = products[key];
                    parts = key.split('_');
                    id = parts[1];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this135 = this;

            return Promise.resolve().then(function () {
                return _this135.loadProducts();
            }).then(function () {
                return _this135.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };


                for (c = 0; c < _this135.currencies.length; c++) {
                    currency = _this135.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances['balance']) {
                        account['total'] = parseFloat(balances['balance'][lowercase]['amount']);
                    }if (lowercase in balances['frozen']) {
                        account['used'] = parseFloat(balances['frozen'][lowercase]['amount']);
                    }account['free'] = account['total'] - account['used'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this136 = this;

            return Promise.resolve().then(function () {
                return _this136.loadProducts();
            }).then(function () {
                return _this136.publicGetOrderbook({
                    'market': _this136.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['date'] * 1000;
                ;
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this136.iso8601(timestamp)
                };

                result['asks'] = _this136.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this137 = this;

            return Promise.resolve().then(function () {
                return _this137.loadProducts();
            }).then(function () {
                p = _this137.product(product);
                return _this137.publicGetTicker({
                    'market': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers['ticker'];
                timestamp = ticker['date'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this137.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['prev_close']),
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this138 = this;

            return Promise.resolve().then(function () {
                return _this138.loadProducts();
            }).then(function () {
                return _this138.publicGetTrades({
                    'market': _this138.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                id,
                _this139 = this,
                _arguments127 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments127.length > 4 && _arguments127[4] !== undefined ? _arguments127[4] : undefined;
                params = _arguments127.length > 5 && _arguments127[5] !== undefined ? _arguments127[5] : {};
                return _this139.loadProducts();
            }).then(function () {
                p = _this139.product(product);
                method = 'privatePost' + _this139.capitalize(side) + 'Order2';
                order = {};
                id = p['id'].toUpperCase();

                if (type == 'market') {
                    order['params'] = [undefined, amount, id];
                } else {
                    order['params'] = [price, amount, id];
                }
                return _this139[method](_this139.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                market,
                _this140 = this,
                _arguments128 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments128.length > 1 && _arguments128[1] !== undefined ? _arguments128[1] : {};
                return _this140.loadProducts();
            }).then(function () {
                market = params['market']; // TODO fixme

                return _this140.privatePostCancelOrder(_this140.extend({
                    'params': [id, market]
                }, params));
            });
        },
        nonce: function nonce() {
            return this.microseconds();
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type] + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                if (!this.apiKey) throw new AuthenticationError(this.id + ' requires `' + this.id + '.apiKey` property for authentication');
                if (!this.secret) throw new AuthenticationError(this.id + ' requires `' + this.id + '.secret` property for authentication');
                var p = [];
                if ('params' in params) p = params['params'];
                var nonce = this.nonce();
                var request = {
                    'method': path,
                    'id': nonce,
                    'params': p
                };
                p = p.join(',');
                body = this.json(request);
                var query = 'tonce=' + nonce + '&accesskey=' + this.apiKey + '&requestmethod=' + method.toLowerCase() + '&id=' + nonce + '&method=' + path + '&params=' + p;
                var signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha1');
                var auth = this.apiKey + ':' + signature;
                headers = {
                    'Content-Length': body.length,
                    'Authorization': 'Basic ' + this.stringToBase64(auth),
                    'Json-Rpc-Tonce': nonce
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------

    var btce = {

        'id': 'btce',
        'name': 'BTC-e',
        'countries': ['BG', 'RU'], // Bulgaria, Russia
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27843225-1b571514-611a-11e7-9208-2641a560b561.jpg',
            'api': {
                'public': 'https://btc-e.com/api',
                'private': 'https://btc-e.com/tapi'
            },
            'www': 'https://btc-e.com',
            'doc': ['https://btc-e.com/api/3/docs', 'https://btc-e.com/tapi/docs']
        },
        'api': {
            'public': {
                'get': ['info', 'ticker/{pair}', 'depth/{pair}', 'trades/{pair}']
            },
            'private': {
                'post': ['getInfo', 'Trade', 'ActiveOrders', 'OrderInfo', 'CancelOrder', 'TradeHistory', 'TransHistory', 'CoinDepositAddress', 'WithdrawCoin', 'CreateCoupon', 'RedeemCoupon']
            }
        },

        fetchProducts: function fetchProducts() {
            var response,
                products,
                keys,
                result,
                p,
                id,
                product,
                _id$split,
                _id$split2,
                base,
                quote,
                symbol,
                _this141 = this;

            return Promise.resolve().then(function () {
                return _this141.publicGetInfo();
            }).then(function (_resp) {
                response = _resp;
                products = response['pairs'];
                keys = Object.keys(products);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = products[id];
                    _id$split = id.split('_');
                    _id$split2 = _slicedToArray(_id$split, 2);
                    base = _id$split2[0];
                    quote = _id$split2[1];

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                funds,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this142 = this;

            return Promise.resolve().then(function () {
                return _this142.loadProducts();
            }).then(function () {
                return _this142.privatePostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                funds = balances['funds'];
                currencies = Object.keys(funds);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    // they misspell DASH as dsh :/

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }account = {
                        'free': funds[currency],
                        'used': undefined,
                        'total': funds[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                response,
                orderbook,
                timestamp,
                result,
                _this143 = this;

            return Promise.resolve().then(function () {
                return _this143.loadProducts();
            }).then(function () {
                p = _this143.product(product);
                return _this143.publicGetDepthPair({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;

                if (p['id'] in response) {
                    orderbook = response[p['id']];
                    timestamp = _this143.milliseconds();
                    result = {
                        'bids': orderbook['bids'],
                        'asks': orderbook['asks'],
                        'timestamp': timestamp,
                        'datetime': _this143.iso8601(timestamp)
                    };

                    result['bids'] = _this143.sortBy(result['bids'], 0, true);
                    result['asks'] = _this143.sortBy(result['asks'], 0);
                    return result;
                } else {
                    throw new EndpointError(_this143.id + ' ' + p['symbol'] + ' order book is empty or not available');
                }
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this144 = this;

            return Promise.resolve().then(function () {
                return _this144.loadProducts();
            }).then(function () {
                p = _this144.product(product);
                return _this144.publicGetTickerPair({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this144.iso8601(timestamp),
                    'high': ticker['high'] ? ticker['high'] : undefined,
                    'low': ticker['low'] ? ticker['low'] : undefined,
                    'bid': ticker['sell'] ? ticker['sell'] : undefined,
                    'ask': ticker['buy'] ? ticker['buy'] : undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'] ? ticker['last'] : undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': ticker['avg'] ? ticker['avg'] : undefined,
                    'baseVolume': ticker['vol_cur'] ? ticker['vol_cur'] : undefined,
                    'quoteVolume': ticker['vol'] ? ticker['vol'] : undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this145 = this;

            return Promise.resolve().then(function () {
                return _this145.loadProducts();
            }).then(function () {
                return _this145.publicGetTradesPair({
                    'pair': _this145.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this146 = this,
                _arguments134 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments134.length > 4 && _arguments134[4] !== undefined ? _arguments134[4] : undefined;
                params = _arguments134.length > 5 && _arguments134[5] !== undefined ? _arguments134[5] : {};
                return _this146.loadProducts();
            }).then(function () {
                order = {
                    'pair': _this146.productId(product),
                    'type': side,
                    'amount': amount,
                    'rate': price
                };

                return _this146.privatePostTrade(_this146.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this147 = this;

            return Promise.resolve().then(function () {
                return _this147.loadProducts();
            }).then(function () {
                return _this147.privatePostCancelOrder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'nonce': nonce,
                    'method': path
                }, query));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Key': this.apiKey,
                    'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btctrader = {

        'id': 'btctrader',
        'name': 'BTCTrader',
        'countries': ['TR', 'GR', 'PH'], // Turkey, Greece, Philippines
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992404-cda1e386-649c-11e7-8dc1-40bbd2897768.jpg',
            'api': 'https://www.btctrader.com/api',
            'www': 'https://www.btctrader.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'api': {
            'public': {
                'get': ['ohlcdata', // ?last=COUNT
                'orderbook', 'ticker', 'trades']
            },
            'private': {
                'get': ['balance', 'openOrders', 'userTransactions'],
                'post': ['buy', 'cancelOrder', 'sell']
            }
        },

        fetchBalance: function fetchBalance() {
            var response,
                result,
                base,
                quote,
                symbol,
                product,
                _this148 = this;

            return Promise.resolve().then(function () {
                return _this148.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };
                base = {
                    'free': response['bitcoin_available'],
                    'used': response['bitcoin_reserved'],
                    'total': response['bitcoin_balance']
                };
                quote = {
                    'free': response['money_available'],
                    'used': response['money_reserved'],
                    'total': response['money_balance']
                };
                symbol = _this148.symbols[0];
                product = _this148.products[symbol];

                result[product['base']] = base;
                result[product['quote']] = quote;
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this149 = this;

            return Promise.resolve().then(function () {
                return _this149.publicGetOrderbook();
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp'] * 1000);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this149.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this150 = this;

            return Promise.resolve().then(function () {
                return _this150.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp'] * 1000);

                return {
                    'timestamp': timestamp,
                    'datetime': _this150.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['average']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var maxCount,
                _this151 = this;

            maxCount = 50;

            return _this151.publicGetTrades();
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this152 = this,
                _arguments140 = arguments;

            price = _arguments140.length > 4 && _arguments140[4] !== undefined ? _arguments140[4] : undefined;
            params = _arguments140.length > 5 && _arguments140[5] !== undefined ? _arguments140[5] : {};
            method = 'privatePost' + _this152.capitalize(side);
            order = {
                'Type': side == 'buy' ? 'BuyBtc' : 'SelBtc',
                'IsMarketOrder': type == 'market' ? 1 : 0
            };

            if (type == 'market') {
                if (side == 'buy') {
                    order['Total'] = amount;
                } else {
                    order['Amount'] = amount;
                }
            } else {
                order['Price'] = price;
                order['Amount'] = amount;
            }
            return _this152[method](_this152.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this153 = this;

            return _this153.privatePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (this.id == 'btctrader') throw new MarketError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');
            var url = this.urls['api'] + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString;
                body = this.urlencode(params);
                var secret = this.base64ToString(this.secret);
                var auth = this.apiKey + nonce;
                headers = {
                    'X-PCK': this.apiKey,
                    'X-Stamp': nonce.toString(),
                    'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcexchange = extend(btctrader, {

        'id': 'btcexchange',
        'name': 'BTCExchange',
        'countries': 'PH', // Philippines
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',
            'api': 'https://www.btcexchange.ph/api',
            'www': 'https://www.btcexchange.ph',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'products': {
            'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' }
        }
    });

    //-----------------------------------------------------------------------------

    var btctradeua = {

        'id': 'btctradeua',
        'name': 'BTC Trade UA',
        'countries': 'UA', // Ukraine,
        'rateLimit': 3000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',
            'api': 'https://btc-trade.com.ua/api',
            'www': 'https://btc-trade.com.ua',
            'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit'
        },
        'api': {
            'public': {
                'get': ['deals/{symbol}', 'trades/sell/{symbol}', 'trades/buy/{symbol}', 'japan_stat/high/{symbol}']
            },
            'private': {
                'post': ['auth', 'ask/{symbol}', 'balance', 'bid/{symbol}', 'buy/{symbol}', 'my_orders/{symbol}', 'order/status/{id}', 'remove/order/{id}', 'sell/{symbol}']
            }
        },
        'products': {
            'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH' },
            'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },
            'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },
            'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },
            'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },
            'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },
            'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },
            'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },
            'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },
            'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        signIn: function signIn() {
            return this.privatePostAuth();
        },
        fetchBalance: function fetchBalance() {
            var response,
                accounts,
                result,
                b,
                account,
                currency,
                balance,
                _this154 = this;

            return Promise.resolve().then(function () {
                return _this154.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                accounts = response['accounts'];
                result = { 'info': response };

                for (b = 0; b < accounts.length; b++) {
                    account = accounts[b];
                    currency = account['currency'];
                    balance = parseFloat(account['balance']);

                    result[currency] = {
                        'free': balance,
                        'used': undefined,
                        'total': balance
                    };
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                bids,
                asks,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this155 = this;

            return Promise.resolve().then(function () {
                p = _this155.product(product);
                return _this155.publicGetTradesBuySymbol({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                bids = _resp;
                return _this155.publicGetTradesSellSymbol({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': [],
                    'asks': []
                };

                if (bids) {
                    if ('list' in bids) {
                        orderbook['bids'] = bids['list'];
                    }
                }
                if (asks) {
                    if ('list' in asks) {
                        orderbook['asks'] = asks['list'];
                    }
                }
                timestamp = _this155.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this155.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['currency_trade']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                result,
                tickerLength,
                start,
                t,
                candle,
                last,
                _this156 = this;

            return Promise.resolve().then(function () {
                return _this156.publicGetJapanStatHighSymbol({
                    'symbol': _this156.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['trades'];
                timestamp = _this156.milliseconds();
                result = {
                    'timestamp': timestamp,
                    'datetime': _this156.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
                tickerLength = ticker.length;

                if (tickerLength > 0) {
                    start = Math.max(tickerLength - 48, 0);

                    for (t = start; t < ticker.length; t++) {
                        candle = ticker[t];

                        if (typeof result['open'] == 'undefined') {
                            result['open'] = candle[1];
                        }if (typeof result['high'] == 'undefined' || result['high'] < candle[2]) {
                            result['high'] = candle[2];
                        }if (typeof result['low'] == 'undefined' || result['low'] > candle[3]) {
                            result['low'] = candle[3];
                        }if (typeof result['quoteVolume'] == 'undefined') {
                            result['quoteVolume'] = -candle[5];
                        } else {
                            result['quoteVolume'] -= candle[5];
                        }
                    }
                    last = tickerLength - 1;

                    result['close'] = ticker[last][4];
                    result['quoteVolume'] = -1 * result['quoteVolume'];
                }
                return result;
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this157 = this;

            return _this157.publicGetDealsSymbol({
                'symbol': _this157.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                _this158 = this,
                _arguments146 = arguments;

            price = _arguments146.length > 4 && _arguments146[4] !== undefined ? _arguments146[4] : undefined;
            params = _arguments146.length > 5 && _arguments146[5] !== undefined ? _arguments146[5] : {};

            if (type == 'market') {
                throw new EndpointError(_this158.id + ' allows limit orders only');
            }p = _this158.product(product);
            method = 'privatePost' + _this158.capitalize(side) + 'Id';
            order = {
                'count': amount,
                'currency1': p['quote'],
                'currency': p['base'],
                'price': price
            };

            return _this158[method](_this158.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this159 = this;

            return _this159.privatePostRemoveOrderId({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += this.implodeParams(path, query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'out_order_id': nonce,
                    'nonce': nonce
                }, query));
                var auth = body + this.secret;
                headers = {
                    'public-key': this.apiKey,
                    'api-sign': this.hash(this.encode(auth), 'sha256'),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var btcturk = extend(btctrader, {

        'id': 'btcturk',
        'name': 'BTCTurk',
        'countries': 'TR', // Turkey
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',
            'api': 'https://www.btcturk.com/api',
            'www': 'https://www.btcturk.com',
            'doc': 'https://github.com/BTCTrader/broker-api-docs'
        },
        'products': {
            'BTC/TRY': { 'id': 'BTC/TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' }
        }
    });

    //-----------------------------------------------------------------------------

    var btcx = {

        'id': 'btcx',
        'name': 'BTCX',
        'countries': ['IS', 'US', 'EU'],
        'rateLimit': 1500, // support in english is very poor, unable to tell rate limits
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',
            'api': 'https://btc-x.is/api',
            'www': 'https://btc-x.is',
            'doc': 'https://btc-x.is/custom/api-document.html'
        },
        'api': {
            'public': {
                'get': ['depth/{id}/{limit}', 'ticker/{id}', 'trade/{id}/{limit}']
            },
            'private': {
                'post': ['balance', 'cancel', 'history', 'order', 'redeem', 'trade', 'withdraw']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this160 = this;

            return Promise.resolve().then(function () {
                return _this160.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': balances[currency],
                        'used': undefined,
                        'total': balances[currency]
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this161 = this;

            return Promise.resolve().then(function () {
                return _this161.publicGetDepthIdLimit({
                    'id': _this161.productId(product),
                    'limit': 1000
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this161.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this161.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this162 = this;

            return Promise.resolve().then(function () {
                return _this162.publicGetTickerId({
                    'id': _this162.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['time'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this162.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['sell']),
                    'ask': parseFloat(ticker['buy']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this163 = this;

            return _this163.publicGetTradeIdLimit({
                'id': _this163.productId(product),
                'limit': 100
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this164 = this,
                _arguments152 = arguments;

            price = _arguments152.length > 4 && _arguments152[4] !== undefined ? _arguments152[4] : undefined;
            params = _arguments152.length > 5 && _arguments152[5] !== undefined ? _arguments152[5] : {};

            return _this164.privatePostTrade(_this164.extend({
                'type': side.toUpperCase(),
                'market': _this164.productId(product),
                'amount': amount,
                'price': price
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this165 = this;

            return _this165.privatePostCancel({ 'order': id });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                response,
                _this166 = this,
                _arguments154 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments154.length > 1 && _arguments154[1] !== undefined ? _arguments154[1] : 'public';
                method = _arguments154.length > 2 && _arguments154[2] !== undefined ? _arguments154[2] : 'GET';
                params = _arguments154.length > 3 && _arguments154[3] !== undefined ? _arguments154[3] : {};
                headers = _arguments154.length > 4 && _arguments154[4] !== undefined ? _arguments154[4] : undefined;
                body = _arguments154.length > 5 && _arguments154[5] !== undefined ? _arguments154[5] : undefined;
                url = _this166.urls['api'] + '/' + _this166.version + '/';

                if (type == 'public') {
                    url += _this166.implodeParams(path, params);
                } else {
                    nonce = _this166.nonce();

                    url += type;
                    body = _this166.urlencode(_this166.extend({
                        'Method': path.toUpperCase(),
                        'Nonce': nonce
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Key': _this166.apiKey,
                        'Signature': _this166.hmac(_this166.encode(body), _this166.encode(_this166.secret), 'sha512')
                    };
                }
                return _this166.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if ('error' in response) {
                    throw new MarketError(_this166.id + ' ' + _this166.json(response['error']));
                }return response;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bter = {
        'id': 'bter',
        'name': 'Bter',
        'countries': ['VG', 'CN'], // British Virgin Islands, China
        'version': '2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',
            'api': {
                'public': 'https://data.bter.com/api',
                'private': 'https://api.bter.com/api'
            },
            'www': 'https://bter.com',
            'doc': 'https://bter.com/api2'
        },
        'api': {
            'public': {
                'get': ['pairs', 'marketinfo', 'marketlist', 'tickers', 'ticker/{id}', 'orderBook/{id}', 'trade/{id}', 'tradeHistory/{id}', 'tradeHistory/{id}/{tid}']
            },
            'private': {
                'post': ['balances', 'depositAddress', 'newAddress', 'depositsWithdrawals', 'buy', 'sell', 'cancelOrder', 'cancelAllOrders', 'getOrder', 'openOrders', 'tradeHistory', 'withdraw']
            }
        },

        fetchProducts: function fetchProducts() {
            var response,
                products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this167 = this;

            return Promise.resolve().then(function () {
                return _this167.publicGetMarketlist();
            }).then(function (_resp) {
                response = _resp;
                products = response['data'];
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['pair'];
                    base = product['curr_a'];
                    quote = product['curr_b'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balance,
                result,
                c,
                currency,
                account,
                _this168 = this;

            return Promise.resolve().then(function () {
                return _this168.loadProducts();
            }).then(function () {
                return _this168.privatePostBalances();
            }).then(function (_resp) {
                balance = _resp;
                result = { 'info': balance };

                for (c = 0; c < _this168.currencies.length; c++) {
                    currency = _this168.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('available' in balance) {
                        if (currency in balance['available']) {
                            account['free'] = parseFloat(balance['available'][currency]);
                        }
                    }
                    if ('locked' in balance) {
                        if (currency in balance['locked']) {
                            account['used'] = parseFloat(balance['locked'][currency]);
                        }
                    }
                    account['total'] = _this168.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this169 = this;

            return Promise.resolve().then(function () {
                return _this169.loadProducts();
            }).then(function () {
                return _this169.publicGetOrderBookId({
                    'id': _this169.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this169.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this169.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                result['asks'] = _this169.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this170 = this;

            return Promise.resolve().then(function () {
                return _this170.loadProducts();
            }).then(function () {
                return _this170.publicGetTickerId({
                    'id': _this170.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this170.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this170.iso8601(timestamp),
                    'high': parseFloat(ticker['high24hr']),
                    'low': parseFloat(ticker['low24hr']),
                    'bid': parseFloat(ticker['highestBid']),
                    'ask': parseFloat(ticker['lowestAsk']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': parseFloat(ticker['percentChange']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['baseVolume']),
                    'quoteVolume': parseFloat(ticker['quoteVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this171 = this;

            return Promise.resolve().then(function () {
                return _this171.loadProducts();
            }).then(function () {
                return _this171.publicGetTradeHistoryId({
                    'id': _this171.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this172 = this,
                _arguments160 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments160.length > 4 && _arguments160[4] !== undefined ? _arguments160[4] : undefined;
                params = _arguments160.length > 5 && _arguments160[5] !== undefined ? _arguments160[5] : {};
                return _this172.loadProducts();
            }).then(function () {
                method = 'privatePost' + _this172.capitalize(side);
                order = {
                    'currencyPair': _this172.symbol(product),
                    'rate': price,
                    'amount': amount
                };

                return _this172[method](_this172.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this173 = this;

            return Promise.resolve().then(function () {
                return _this173.loadProducts();
            }).then(function () {
                return _this173.privatePostCancelOrder({ 'orderNumber': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                prefix,
                url,
                query,
                nonce,
                request,
                response,
                _test5,
                _this174 = this,
                _arguments162 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments162.length > 1 && _arguments162[1] !== undefined ? _arguments162[1] : 'public';
                method = _arguments162.length > 2 && _arguments162[2] !== undefined ? _arguments162[2] : 'GET';
                params = _arguments162.length > 3 && _arguments162[3] !== undefined ? _arguments162[3] : {};
                headers = _arguments162.length > 4 && _arguments162[4] !== undefined ? _arguments162[4] : undefined;
                body = _arguments162.length > 5 && _arguments162[5] !== undefined ? _arguments162[5] : undefined;
                prefix = type == 'private' ? type + '/' : '';
                url = _this174.urls['api'][type] + _this174.version + '/1/' + prefix + _this174.implodeParams(path, params);
                query = _this174.omit(params, _this174.extractParams(path));

                if (type == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this174.urlencode(query);
                    }
                } else {
                    nonce = _this174.nonce();
                    request = { 'nonce': nonce };

                    body = _this174.urlencode(_this174.extend(request, query));
                    headers = {
                        'Key': _this174.apiKey,
                        'Sign': _this174.hmac(_this174.encode(body), _this174.encode(_this174.secret), 'sha512'),
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this174.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test5 = 'result' in response;

                if (_test5 && response['result'] == 'true') {
                    return response;
                } else {
                    throw new MarketError(_this174.id + ' ' + _this174.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var bxinth = {

        'id': 'bxinth',
        'name': 'BX.in.th',
        'countries': 'TH', // Thailand
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',
            'api': 'https://bx.in.th/api',
            'www': 'https://bx.in.th',
            'doc': 'https://bx.in.th/info/api'
        },
        'api': {
            'public': {
                'get': ['', // ticker
                'options', 'optionbook', 'orderbook', 'pairing', 'trade', 'tradehistory']
            },
            'private': {
                'post': ['balance', 'biller', 'billgroup', 'billpay', 'cancel', 'deposit', 'getorders', 'history', 'option-issue', 'option-bid', 'option-sell', 'option-myissue', 'option-mybid', 'option-myoptions', 'option-exercise', 'option-cancel', 'option-history', 'order', 'withdrawal', 'withdrawal-history']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this175 = this;

            return Promise.resolve().then(function () {
                return _this175.publicGetPairing();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    product = products[keys[p]];
                    id = product['pairing_id'];
                    base = product['primary_currency'];
                    quote = product['secondary_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        commonCurrencyCode: function commonCurrencyCode(currency) {
            // why would they use three letters instead of four for currency codes
            if (currency == 'DAS') return 'DASH';
            if (currency == 'DOG') return 'DOGE';
            return currency;
        },
        fetchBalance: function fetchBalance() {
            var response,
                balance,
                result,
                currencies,
                c,
                currency,
                code,
                account,
                _this176 = this;

            return Promise.resolve().then(function () {
                return _this176.loadProducts();
            }).then(function () {
                return _this176.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balance = response['balance'];
                result = { 'info': balance };
                currencies = Object.keys(balance);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    code = _this176.commonCurrencyCode(currency);
                    account = {
                        'free': parseFloat(balance[currency]['available']),
                        'used': undefined,
                        'total': parseFloat(balance[currency]['total'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[code] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this177 = this;

            return Promise.resolve().then(function () {
                return _this177.loadProducts();
            }).then(function () {
                return _this177.publicGetOrderbook({
                    'pairing': _this177.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this177.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this177.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var id,
                tickers,
                key,
                ticker,
                timestamp,
                _this178 = this;

            return Promise.resolve().then(function () {
                return _this178.loadProducts();
            }).then(function () {
                id = _this178.productId(product);
                return _this178.publicGet({ 'pairing': id });
            }).then(function (_resp) {
                tickers = _resp;
                key = id.toString();
                ticker = tickers[key];
                timestamp = _this178.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this178.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['orderbook']['bids']['highbid']),
                    'ask': parseFloat(ticker['orderbook']['asks']['highbid']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_price']),
                    'change': parseFloat(ticker['change']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume_24hours']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this179 = this;

            return Promise.resolve().then(function () {
                return _this179.loadProducts();
            }).then(function () {
                return _this179.publicGetTrade({
                    'pairing': _this179.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this180 = this,
                _arguments168 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments168.length > 4 && _arguments168[4] !== undefined ? _arguments168[4] : undefined;
                params = _arguments168.length > 5 && _arguments168[5] !== undefined ? _arguments168[5] : {};
                return _this180.loadProducts();
            }).then(function () {
                return _this180.privatePostOrder(_this180.extend({
                    'pairing': _this180.productId(product),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var pairing,
                _this181 = this;

            return Promise.resolve().then(function () {
                return _this181.loadProducts();
            }).then(function () {
                pairing = undefined; // TODO fixme

                return _this181.privatePostCancel({
                    'order_id': id,
                    'pairing': pairing
                });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                auth,
                signature,
                response,
                _test6,
                _this182 = this,
                _arguments170 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments170.length > 1 && _arguments170[1] !== undefined ? _arguments170[1] : 'public';
                method = _arguments170.length > 2 && _arguments170[2] !== undefined ? _arguments170[2] : 'GET';
                params = _arguments170.length > 3 && _arguments170[3] !== undefined ? _arguments170[3] : {};
                headers = _arguments170.length > 4 && _arguments170[4] !== undefined ? _arguments170[4] : undefined;
                body = _arguments170.length > 5 && _arguments170[5] !== undefined ? _arguments170[5] : undefined;
                url = _this182.urls['api'] + '/';

                if (path) {
                    url += path + '/';
                }if (Object.keys(params).length) {
                    url += '?' + _this182.urlencode(params);
                }if (type == 'private') {
                    nonce = _this182.nonce();
                    auth = _this182.apiKey + nonce.toString() + _this182.secret;
                    signature = _this182.hash(_this182.encode(auth), 'sha256');

                    body = _this182.urlencode(_this182.extend({
                        'key': _this182.apiKey,
                        'nonce': nonce,
                        'signature': signature
                        // twofa: this.twofa,
                    }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this182.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (type == 'public') {
                    return response;
                } else {
                    _test6 = 'success' in response;

                    if (_test6 && response['success']) {
                        return response;
                    } else {
                        throw new MarketError(_this182.id + ' ' + _this182.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var ccex = {

        'id': 'ccex',
        'name': 'C-CEX',
        'countries': ['DE', 'EU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',
            'api': {
                'tickers': 'https://c-cex.com/t',
                'public': 'https://c-cex.com/t/api_pub.html',
                'private': 'https://c-cex.com/t/api.html'
            },
            'www': 'https://c-cex.com',
            'doc': 'https://c-cex.com/?id=api'
        },
        'api': {
            'tickers': {
                'get': ['coinnames', '{market}', 'pairs', 'prices', 'volume_{coin}']
            },
            'public': {
                'get': ['balancedistribution', 'markethistory', 'markets', 'marketsummaries', 'orderbook']
            },
            'private': {
                'get': ['buylimit', 'cancel', 'getbalance', 'getbalances', 'getopenorders', 'getorder', 'getorderhistory', 'mytrades', 'selllimit']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this183 = this;

            return Promise.resolve().then(function () {
                return _this183.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['result'].length; p++) {
                    product = products['result'][p];
                    id = product['MarketName'];
                    base = product['MarketCurrency'];
                    quote = product['BaseCurrency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this184 = this;

            return Promise.resolve().then(function () {
                return _this184.loadProducts();
            }).then(function () {
                return _this184.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    account = {
                        'free': balance['Available'],
                        'used': balance['Pending'],
                        'total': balance['Balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this185 = this;

            return Promise.resolve().then(function () {
                return _this185.loadProducts();
            }).then(function () {
                return _this185.publicGetOrderbook({
                    'market': _this185.productId(product),
                    'type': 'both',
                    'depth': 100
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'];
                timestamp = _this185.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this185.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Rate']);
                        amount = parseFloat(order['Quantity']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this186 = this;

            return Promise.resolve().then(function () {
                return _this186.loadProducts();
            }).then(function () {
                return _this186.tickersGetMarket({
                    'market': _this186.productId(product).toLowerCase()
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this186.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastprice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['buysupport']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this187 = this;

            return Promise.resolve().then(function () {
                return _this187.loadProducts();
            }).then(function () {
                return _this187.publicGetMarkethistory({
                    'market': _this187.productId(product),
                    'type': 'both',
                    'depth': 100
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                _this188 = this,
                _arguments176 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments176.length > 4 && _arguments176[4] !== undefined ? _arguments176[4] : undefined;
                params = _arguments176.length > 5 && _arguments176[5] !== undefined ? _arguments176[5] : {};
                return _this188.loadProducts();
            }).then(function () {
                method = 'privateGet' + _this188.capitalize(side) + type;

                return _this188[method](_this188.extend({
                    'market': _this188.productId(product),
                    'quantity': amount,
                    'rate': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this189 = this;

            return Promise.resolve().then(function () {
                return _this189.loadProducts();
            }).then(function () {
                return _this189.privateGetCancel({ 'uuid': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                query,
                response,
                _test7,
                _this190 = this,
                _arguments178 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments178.length > 1 && _arguments178[1] !== undefined ? _arguments178[1] : 'public';
                method = _arguments178.length > 2 && _arguments178[2] !== undefined ? _arguments178[2] : 'GET';
                params = _arguments178.length > 3 && _arguments178[3] !== undefined ? _arguments178[3] : {};
                headers = _arguments178.length > 4 && _arguments178[4] !== undefined ? _arguments178[4] : undefined;
                body = _arguments178.length > 5 && _arguments178[5] !== undefined ? _arguments178[5] : undefined;
                url = _this190.urls['api'][type];

                if (type == 'private') {
                    nonce = _this190.nonce().toString();
                    query = _this190.keysort(_this190.extend({
                        'a': path,
                        'apikey': _this190.apiKey,
                        'nonce': nonce
                    }, params));

                    url += '?' + _this190.urlencode(query);
                    headers = { 'apisign': _this190.hmac(_this190.encode(url), _this190.encode(_this190.secret), 'sha512') };
                } else {
                    if (type == 'public') {
                        url += '?' + _this190.urlencode(_this190.extend({
                            'a': 'get' + path
                        }, params));
                    } else {
                        url += '/' + _this190.implodeParams(path, params) + '.json';
                    }
                }return _this190.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;

                if (type == 'tickers') {
                    return response;
                } else {
                    _test7 = 'success' in response;

                    if (_test7 && response['success']) {
                        return response;
                    } else {
                        throw new MarketError(_this190.id + ' ' + _this190.json(response));
                    }
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var cex = {

        'id': 'cex',
        'name': 'CEX.IO',
        'countries': ['GB', 'EU', 'CY', 'RU'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
            'api': 'https://cex.io/api',
            'www': 'https://cex.io',
            'doc': 'https://cex.io/cex-api'
        },
        'api': {
            'public': {
                'get': ['currency_limits', 'last_price/{pair}', 'last_prices/{currencies}', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}', 'ticker/{pair}', 'tickers/{currencies}', 'trade_history/{pair}'],
                'post': ['convert/{pair}', 'price_stats/{pair}']
            },
            'private': {
                'post': ['active_orders_status/', 'archived_orders/{pair}', 'balance/', 'cancel_order/', 'cancel_orders/{pair}', 'cancel_replace_order/{pair}', 'close_position/{pair}', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}', 'open_orders/', 'open_position/{pair}', 'open_positions/{pair}', 'place_order/{pair}', 'place_order/{pair}']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                symbol,
                _symbol$split5,
                _symbol$split6,
                base,
                quote,
                _this191 = this;

            return Promise.resolve().then(function () {
                return _this191.publicGetCurrencyLimits();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['data']['pairs'].length; p++) {
                    product = products['data']['pairs'][p];
                    id = product['symbol1'] + '/' + product['symbol2'];
                    symbol = id;
                    _symbol$split5 = symbol.split('/');
                    _symbol$split6 = _slicedToArray(_symbol$split5, 2);
                    base = _symbol$split6[0];
                    quote = _symbol$split6[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                account,
                _this192 = this;

            return Promise.resolve().then(function () {
                return _this192.loadProducts();
            }).then(function () {
                return _this192.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this192.currencies.length; c++) {
                    currency = _this192.currencies[c];
                    account = {
                        'free': parseFloat(balances[currency]['available']),
                        'used': parseFloat(balances[currency]['orders']),
                        'total': undefined
                    };

                    account['total'] = _this192.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this193 = this;

            return Promise.resolve().then(function () {
                return _this193.loadProducts();
            }).then(function () {
                return _this193.publicGetOrderBookPair({
                    'pair': _this193.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this193.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this194 = this;

            return Promise.resolve().then(function () {
                return _this194.loadProducts();
            }).then(function () {
                return _this194.publicGetTickerPair({
                    'pair': _this194.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this194.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this195 = this;

            return Promise.resolve().then(function () {
                return _this195.loadProducts();
            }).then(function () {
                return _this195.publicGetTradeHistoryPair({
                    'pair': _this195.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this196 = this,
                _arguments184 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments184.length > 4 && _arguments184[4] !== undefined ? _arguments184[4] : undefined;
                params = _arguments184.length > 5 && _arguments184[5] !== undefined ? _arguments184[5] : {};
                return _this196.loadProducts();
            }).then(function () {
                order = {
                    'pair': _this196.productId(product),
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                } else {
                    order['order_type'] = type;
                }return _this196.privatePostPlaceOrderPair(_this196.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this197 = this;

            return Promise.resolve().then(function () {
                return _this197.loadProducts();
            }).then(function () {
                return _this197.privatePostCancelOrder({ 'id': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                query,
                nonce,
                auth,
                signature,
                response,
                _test8,
                _this198 = this,
                _arguments186 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments186.length > 1 && _arguments186[1] !== undefined ? _arguments186[1] : 'public';
                method = _arguments186.length > 2 && _arguments186[2] !== undefined ? _arguments186[2] : 'GET';
                params = _arguments186.length > 3 && _arguments186[3] !== undefined ? _arguments186[3] : {};
                headers = _arguments186.length > 4 && _arguments186[4] !== undefined ? _arguments186[4] : undefined;
                body = _arguments186.length > 5 && _arguments186[5] !== undefined ? _arguments186[5] : undefined;
                url = _this198.urls['api'] + '/' + _this198.implodeParams(path, params);
                query = _this198.omit(params, _this198.extractParams(path));

                if (type == 'public') {
                    if (Object.keys(query).length) {
                        url += '?' + _this198.urlencode(query);
                    }
                } else {
                    if (!_this198.uid) {
                        throw new AuthenticationError(_this198.id + ' requires `' + _this198.id + '.uid` property for authentication');
                    }nonce = _this198.nonce().toString();
                    auth = nonce + _this198.uid + _this198.apiKey;
                    signature = _this198.hmac(_this198.encode(auth), _this198.encode(_this198.secret));

                    body = _this198.urlencode(_this198.extend({
                        'key': _this198.apiKey,
                        'signature': signature.toUpperCase(),
                        'nonce': nonce
                    }, query));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
                return _this198.fetch(url, method, headers, body);
            }).then(function (_resp) {
                response = _resp;
                _test8 = 'ok' in response;

                if (_test8 && response['ok'] == 'ok') {
                    return response;
                } else {
                    throw new MarketError(_this198.id + ' ' + _this198.json(response));
                }
            });
        }
    };

    //-----------------------------------------------------------------------------

    var chbtc = {
        'id': 'chbtc',
        'name': 'CHBTC',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',
            'api': {
                'public': 'http://api.chbtc.com/data', // no https for public API
                'private': 'https://trade.chbtc.com/api'
            },
            'www': 'https://trade.chbtc.com/api',
            'doc': 'https://www.chbtc.com/i/developer'
        },
        'api': {
            'public': {
                'get': ['ticker', 'depth', 'trades', 'kline']
            },
            'private': {
                'post': ['order', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getAccountInfo', 'getUserAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw']
            }
        },
        'products': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },
            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },
            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },
            'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },
            'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                account,
                _this199 = this;

            return Promise.resolve().then(function () {
                return _this199.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (c = 0; c < _this199.currencies.length; c++) {
                    currency = _this199.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balances['balance']) {
                        account['free'] = balances['balance'][currency]['amount'];
                    }if (currency in balances['frozen']) {
                        account['used'] = balances['frozen'][currency]['amount'];
                    }account['total'] = _this199.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this200 = this;

            return Promise.resolve().then(function () {
                p = _this200.product(product);
                return _this200.publicGetDepth({
                    'currency': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this200.milliseconds();
                bids = undefined;
                asks = undefined;

                if ('bids' in orderbook) {
                    bids = orderbook['bids'];
                }if ('asks' in orderbook) {
                    asks = orderbook['asks'];
                }result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this200.iso8601(timestamp)
                };

                if (result['bids']) {
                    result['bids'] = _this200.sortBy(result['bids'], 0, true);
                }if (result['asks']) {
                    result['asks'] = _this200.sortBy(result['asks'], 0);
                }return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this201 = this;

            return Promise.resolve().then(function () {
                return _this201.publicGetTicker({
                    'currency': _this201.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = _this201.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this201.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this202 = this;

            return _this202.publicGetTrades({
                'currency': _this202.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                paramString,
                tradeType,
                _this203 = this,
                _arguments191 = arguments;

            price = _arguments191.length > 4 && _arguments191[4] !== undefined ? _arguments191[4] : undefined;
            params = _arguments191.length > 5 && _arguments191[5] !== undefined ? _arguments191[5] : {};
            paramString = '&price=' + price.toString();

            paramString += '&amount=' + amount.toString();
            tradeType = side == 'buy' ? '1' : '0';

            paramString += '&tradeType=' + tradeType;
            paramString += '&currency=' + _this203.productId(product);
            return _this203.privatePostOrder(paramString);
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                paramString,
                _this204 = this,
                _arguments192 = arguments;

            params = _arguments192.length > 1 && _arguments192[1] !== undefined ? _arguments192[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this204.privatePostCancelOrder(paramString);
        },
        fetchOrder: function fetchOrder(id) {
            var params,
                paramString,
                _this205 = this,
                _arguments193 = arguments;

            params = _arguments193.length > 1 && _arguments193[1] !== undefined ? _arguments193[1] : {};
            paramString = '&id=' + id.toString();

            if ('currency' in params) {
                paramString += '&currency=' + params['currency'];
            }return _this205.privatePostGetOrder(paramString);
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            if (type == 'public') {
                url += '/' + this.version + '/' + path;
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var paramsLength = params.length; // params should be a string here!
                var nonce = this.nonce();
                var auth = 'method=' + path;
                auth += '&accesskey=' + this.apiKey;
                auth += paramsLength ? params : '';
                var secret = this.hash(this.encode(this.secret), 'sha1');
                var signature = this.hmac(this.encode(auth), this.encode(secret), 'md5');
                var suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();
                url += '/' + path + '?' + auth + '&' + suffix;
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var chilebit = extend(blinktrade, {
        'id': 'chilebit',
        'name': 'ChileBit',
        'countries': 'CL',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://chilebit.net',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'products': {
            'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var coincheck = {

        'id': 'coincheck',
        'name': 'coincheck',
        'countries': ['JP', 'ID'],
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',
            'api': 'https://coincheck.com/api',
            'www': 'https://coincheck.com',
            'doc': 'https://coincheck.com/documents/exchange/api'
        },
        'api': {
            'public': {
                'get': ['exchange/orders/rate', 'order_books', 'rate/{pair}', 'ticker', 'trades']
            },
            'private': {
                'get': ['accounts', 'accounts/balance', 'accounts/leverage_balance', 'bank_accounts', 'deposit_money', 'exchange/orders/opens', 'exchange/orders/transactions', 'exchange/orders/transactions_pagination', 'exchange/leverage/positions', 'lending/borrows/matches', 'send_money', 'withdraws'],
                'post': ['bank_accounts', 'deposit_money/{id}/fast', 'exchange/orders', 'exchange/transfers/to_leverage', 'exchange/transfers/from_leverage', 'lending/borrows', 'lending/borrows/{id}/repay', 'send_money', 'withdraws'],
                'delete': ['bank_accounts/{id}', 'exchange/orders/{id}', 'withdraws/{id}']
            }
        },
        'products': {
            'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }, // the only real pair
            'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },
            'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },
            'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },
            'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },
            'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },
            'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },
            'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },
            'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },
            'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },
            'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },
            'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },
            'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },
            'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },
            'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },
            'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },
            'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },
            'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },
            'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },
            'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },
            'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                reserved,
                _this206 = this;

            return Promise.resolve().then(function () {
                return _this206.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this206.currencies.length; c++) {
                    currency = _this206.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]);
                    }reserved = lowercase + '_reserved';

                    if (reserved in balances) {
                        account['used'] = parseFloat(balances[reserved]);
                    }account['total'] = _this206.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this207 = this;

            return Promise.resolve().then(function () {
                return _this207.publicGetOrderBooks();
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this207.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this207.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this208 = this;

            return Promise.resolve().then(function () {
                return _this208.publicGetTicker();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this208.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this209 = this;

            return _this209.publicGetTrades();
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                order_type,
                _prefix,
                _this210 = this,
                _arguments198 = arguments;

            price = _arguments198.length > 4 && _arguments198[4] !== undefined ? _arguments198[4] : undefined;
            params = _arguments198.length > 5 && _arguments198[5] !== undefined ? _arguments198[5] : {};
            prefix = '';
            order = {
                'pair': _this210.productId(product)
            };

            if (type == 'market') {
                order_type = type + '_' + side;

                order['order_type'] = order_type;
                _prefix = side == buy ? order_type + '_' : '';

                order[_prefix + 'amount'] = amount;
            } else {
                order['order_type'] = side;
                order['rate'] = price;
                order['amount'] = amount;
            }
            return _this210.privatePostExchangeOrders(_this210.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this211 = this;

            return _this211.privateDeleteExchangeOrdersId({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce().toString();
                var length = 0;
                if (Object.keys(query).length) {
                    body = this.urlencode(this.keysort(query));
                    length = body.length;
                }
                var auth = nonce + url + (body || '');
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': length,
                    'ACCESS-KEY': this.apiKey,
                    'ACCESS-NONCE': nonce,
                    'ACCESS-SIGNATURE': this.hmac(this.encode(auth), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coingi = {

        'id': 'coingi',
        'name': 'Coingi',
        'rateLimit': 1000,
        'countries': ['PA', 'BG', 'CN', 'US'], // Panama, Bulgaria, China, US
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',
            'api': 'https://api.coingi.com',
            'www': 'https://coingi.com',
            'doc': 'http://docs.coingi.apiary.io/'
        },
        'api': {
            'current': {
                'get': ['order-book/{pair}/{askCount}/{bidCount}/{depth}', 'transactions/{pair}/{maxCount}', '24hour-rolling-aggregation']
            },
            'user': {
                'post': ['balance', 'add-order', 'cancel-order', 'orders', 'transactions', 'create-crypto-withdrawal']
            }
        },
        'products': {
            'LTC/BTC': { 'id': 'ltc-btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },
            'PPC/BTC': { 'id': 'ppc-btc', 'symbol': 'PPC/BTC', 'base': 'PPC', 'quote': 'BTC' },
            'DOGE/BTC': { 'id': 'doge-btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },
            'VTC/BTC': { 'id': 'vtc-btc', 'symbol': 'VTC/BTC', 'base': 'VTC', 'quote': 'BTC' },
            'FTC/BTC': { 'id': 'ftc-btc', 'symbol': 'FTC/BTC', 'base': 'FTC', 'quote': 'BTC' },
            'NMC/BTC': { 'id': 'nmc-btc', 'symbol': 'NMC/BTC', 'base': 'NMC', 'quote': 'BTC' },
            'DASH/BTC': { 'id': 'dash-btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' }
        },

        fetchBalance: function fetchBalance() {
            var currencies,
                c,
                currency,
                balances,
                result,
                b,
                balance,
                _currency4,
                account,
                _this212 = this;

            return Promise.resolve().then(function () {
                currencies = [];

                for (c = 0; c < _this212.currencies.length; c++) {
                    currency = _this212.currencies[c].toLowerCase();

                    currencies.push(currency);
                }
                return _this212.userPostBalance({
                    'currencies': currencies.join(',')
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    _currency4 = balance['currency']['name'];

                    _currency4 = _currency4.toUpperCase();
                    account = {
                        'free': balance['available'],
                        'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],
                        'total': undefined
                    };

                    account['total'] = _this212.sum(account['free'], account['used']);
                    result[_currency4] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this213 = this;

            return Promise.resolve().then(function () {
                p = _this213.product(product);
                return _this213.currentGetOrderBookPairAskCountBidCountDepth({
                    'pair': p['id'],
                    'askCount': 512, // maximum returned number of asks 1-512
                    'bidCount': 512, // maximum returned number of bids 1-512
                    'depth': 32 // maximum number of depth range steps 1-32
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this213.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this213.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['baseAmount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                tickers,
                t,
                _ticker,
                base,
                quote,
                symbol,
                timestamp,
                p,
                ticker,
                aggregation,
                _this214 = this;

            return Promise.resolve().then(function () {
                return _this214.currentGet24hourRollingAggregation();
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    _ticker = response[t];
                    base = _ticker['currencyPair']['base'].toUpperCase();
                    quote = _ticker['currencyPair']['counter'].toUpperCase();
                    symbol = base + '/' + quote;

                    tickers[symbol] = _ticker;
                }
                timestamp = _this214.milliseconds();
                p = _this214.product(product);
                ticker = {
                    'timestamp': timestamp,
                    'datetime': _this214.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': undefined
                };

                if (p['symbol'] in tickers) {
                    aggregation = tickers[p['symbol']];

                    ticker['high'] = aggregation['high'];
                    ticker['low'] = aggregation['low'];
                    ticker['bid'] = aggregation['highestBid'];
                    ticker['ask'] = aggregation['lowestAsk'];
                    ticker['baseVolume'] = aggregation['baseVolume'];
                    ticker['quoteVolume'] = aggregation['counterVolume'];
                    ticker['high'] = aggregation['high'];
                    ticker['info'] = aggregation;
                }
                return ticker;
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this215 = this;

            return _this215.publicGetTransactionsPairMaxCount({
                'pair': _this215.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this216 = this,
                _arguments204 = arguments;

            price = _arguments204.length > 4 && _arguments204[4] !== undefined ? _arguments204[4] : undefined;
            params = _arguments204.length > 5 && _arguments204[5] !== undefined ? _arguments204[5] : {};
            order = {
                'currencyPair': _this216.productId(product),
                'volume': amount,
                'price': price,
                'orderType': side == 'buy' ? 0 : 1
            };

            return _this216.userPostAddOrder(_this216.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this217 = this;

            return _this217.userPostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + type + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'current') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var request = this.extend({
                    'token': this.apiKey,
                    'nonce': nonce
                }, query);
                var auth = nonce.toString() + '$' + this.apiKey;
                request['signature'] = this.hmac(this.encode(auth), this.encode(this.secret));
                body = this.json(request);
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinmarketcap = {

        'id': 'coinmarketcap',
        'name': 'CoinMarketCap',
        'rateLimit': 10000,
        'version': 'v1',
        'countries': 'US',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',
            'api': 'https://api.coinmarketcap.com',
            'www': 'https://coinmarketcap.com',
            'doc': 'https://coinmarketcap.com/api'
        },
        'api': {
            'public': {
                'get': ['ticker/', 'ticker/{id}/', 'global/']
            }
        },
        'currencies': ['AUD', 'BRL', 'CAD', 'CHF', 'CNY', 'EUR', 'GBP', 'HKD', 'IDR', 'INR', 'JPY', 'KRW', 'MXN', 'RUB', 'USD'],

        fetchOrderBook: function fetchOrderBook() {
            var _this218 = this;

            throw new EndpointError('Fetching order books is not supported by the API of ' + _this218.id);
        },
        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                c,
                base,
                baseId,
                quote,
                quoteId,
                symbol,
                id,
                _this219 = this;

            return Promise.resolve().then(function () {
                return _this219.publicGetTicker();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];

                    for (c = 0; c < _this219.currencies.length; c++) {
                        base = product['symbol'];
                        baseId = product['id'];
                        quote = _this219.currencies[c];
                        quoteId = quote.toLowerCase();
                        symbol = base + '/' + quote;
                        id = baseId + '/' + quote;

                        result.push({
                            'id': id,
                            'symbol': symbol,
                            'base': base,
                            'quote': quote,
                            'baseId': baseId,
                            'quoteId': quoteId,
                            'info': product
                        });
                    }
                }
                return result;
            });
        },
        fetchGlobal: function fetchGlobal() {
            var currency,
                request,
                _this220 = this,
                _arguments208 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments208.length > 0 && _arguments208[0] !== undefined ? _arguments208[0] : 'USD';
                return _this220.loadProducts();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this220.publicGetGlobal(request);
            });
        },
        parseTicker: function parseTicker(ticker, product) {
            var timestamp = parseInt(ticker['last_updated']) * 1000;
            var volume = undefined;
            var volumeKey = '24h_volume_' + product['quoteId'];
            if (ticker[volumeKey]) volume = parseFloat(ticker[volumeKey]);
            var price = 'price_' + product['quoteId'];
            var change = undefined;
            var changeKey = 'percent_change_24h';
            if (ticker[changeKey]) change = parseFloat(ticker[changeKey]);
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': undefined,
                'low': undefined,
                'bid': undefined,
                'ask': undefined,
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker[price]),
                'change': change,
                'percentage': undefined,
                'average': undefined,
                'baseVolume': undefined,
                'quoteVolume': volume,
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                request,
                response,
                tickers,
                t,
                ticker,
                id,
                product,
                symbol,
                _this221 = this,
                _arguments209 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments209.length > 0 && _arguments209[0] !== undefined ? _arguments209[0] : 'USD';
                return _this221.loadProducts();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this221.publicGetTicker(request);
            }).then(function (_resp) {
                response = _resp;
                tickers = {};

                for (t = 0; t < response.length; t++) {
                    ticker = response[t];
                    id = ticker['id'] + '/' + currency;
                    product = _this221.products_by_id[id];
                    symbol = product['symbol'];

                    tickers[symbol] = _this221.parseTicker(ticker, product);
                }
                return tickers;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                request,
                response,
                ticker,
                _this222 = this;

            return Promise.resolve().then(function () {
                return _this222.loadProducts();
            }).then(function () {
                p = _this222.product(product);
                request = {
                    'convert': p['quote'],
                    'id': p['baseId']
                };
                return _this222.publicGetTickerId(request);
            }).then(function (_resp) {
                response = _resp;
                ticker = response[0];

                return _this222.parseTicker(ticker, p);
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinmate = {

        'id': 'coinmate',
        'name': 'CoinMate',
        'countries': ['GB', 'CZ'], // UK, Czech Republic
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',
            'api': 'https://coinmate.io/api',
            'www': 'https://coinmate.io',
            'doc': ['http://docs.coinmate.apiary.io', 'https://coinmate.io/developers']
        },
        'api': {
            'public': {
                'get': ['orderBook', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balances', 'bitcoinWithdrawal', 'bitcoinDepositAddresses', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'openOrders', 'redeemVoucher', 'sellInstant', 'sellLimit', 'transactionHistory', 'unconfirmedBitcoinDeposits']
            }
        },
        'products': {
            'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },
            'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                account,
                _this223 = this;

            return Promise.resolve().then(function () {
                return _this223.privatePostBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (c = 0; c < _this223.currencies.length; c++) {
                    currency = _this223.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in balances) {
                        account['free'] = balances[currency]['available'];
                        account['used'] = balances[currency]['reserved'];
                        account['total'] = balances[currency]['balance'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this224 = this;

            return Promise.resolve().then(function () {
                return _this224.publicGetOrderBook({
                    'currencyPair': _this224.productId(product),
                    'groupByPriceLimit': 'False'
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['data'];
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this224.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this225 = this;

            return Promise.resolve().then(function () {
                return _this225.publicGetTicker({
                    'currencyPair': _this225.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = ticker['timestamp'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this225.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['amount']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this226 = this;

            return _this226.publicGetTransactions({
                'currencyPair': _this226.productId(product),
                'minutesIntoHistory': 10
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this227 = this,
                _arguments215 = arguments;

            price = _arguments215.length > 4 && _arguments215[4] !== undefined ? _arguments215[4] : undefined;
            params = _arguments215.length > 5 && _arguments215[5] !== undefined ? _arguments215[5] : {};
            method = 'privatePost' + _this227.capitalize(side);
            order = {
                'currencyPair': _this227.productId(product)
            };

            if (type == 'market') {
                if (side == 'buy') {
                    order['total'] = amount; // amount in fiat
                } else {
                    order['amount'] = amount;
                } // amount in fiat
                method += 'Instant';
            } else {
                order['amount'] = amount; // amount in crypto
                order['price'] = price;
                method += _this227.capitalize(type);
            }
            return _this227[method](self.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this228 = this;

            return _this228.privatePostCancelOrder({ 'orderId': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                if (!this.uid) throw new AuthenticationError(this.id + ' requires `' + this.id + '.uid` property for authentication');
                var nonce = this.nonce().toString();
                var auth = nonce + this.uid + this.apiKey;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret));
                body = this.urlencode(this.extend({
                    'clientId': this.uid,
                    'nonce': nonce,
                    'publicKey': this.apiKey,
                    'signature': signature.toUpperCase()
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinsecure = {

        'id': 'coinsecure',
        'name': 'Coinsecure',
        'countries': 'IN', // India
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',
            'api': 'https://api.coinsecure.in',
            'www': 'https://coinsecure.in',
            'doc': ['https://api.coinsecure.in', 'https://github.com/coinsecure/plugins']
        },
        'api': {
            'public': {
                'get': ['bitcoin/search/confirmation/{txid}', 'exchange/ask/low', 'exchange/ask/orders', 'exchange/bid/high', 'exchange/bid/orders', 'exchange/lastTrade', 'exchange/max24Hr', 'exchange/min24Hr', 'exchange/ticker', 'exchange/trades']
            },
            'private': {
                'get': ['mfa/authy/call', 'mfa/authy/sms', 'netki/search/{netkiName}', 'user/bank/otp/{number}', 'user/kyc/otp/{number}', 'user/profile/phone/otp/{number}', 'user/wallet/coin/address/{id}', 'user/wallet/coin/deposit/confirmed/all', 'user/wallet/coin/deposit/confirmed/{id}', 'user/wallet/coin/deposit/unconfirmed/all', 'user/wallet/coin/deposit/unconfirmed/{id}', 'user/wallet/coin/wallets', 'user/exchange/bank/fiat/accounts', 'user/exchange/bank/fiat/balance/available', 'user/exchange/bank/fiat/balance/pending', 'user/exchange/bank/fiat/balance/total', 'user/exchange/bank/fiat/deposit/cancelled', 'user/exchange/bank/fiat/deposit/unverified', 'user/exchange/bank/fiat/deposit/verified', 'user/exchange/bank/fiat/withdraw/cancelled', 'user/exchange/bank/fiat/withdraw/completed', 'user/exchange/bank/fiat/withdraw/unverified', 'user/exchange/bank/fiat/withdraw/verified', 'user/exchange/ask/cancelled', 'user/exchange/ask/completed', 'user/exchange/ask/pending', 'user/exchange/bid/cancelled', 'user/exchange/bid/completed', 'user/exchange/bid/pending', 'user/exchange/bank/coin/addresses', 'user/exchange/bank/coin/balance/available', 'user/exchange/bank/coin/balance/pending', 'user/exchange/bank/coin/balance/total', 'user/exchange/bank/coin/deposit/cancelled', 'user/exchange/bank/coin/deposit/unverified', 'user/exchange/bank/coin/deposit/verified', 'user/exchange/bank/coin/withdraw/cancelled', 'user/exchange/bank/coin/withdraw/completed', 'user/exchange/bank/coin/withdraw/unverified', 'user/exchange/bank/coin/withdraw/verified', 'user/exchange/bank/summary', 'user/exchange/coin/fee', 'user/exchange/fiat/fee', 'user/exchange/kycs', 'user/exchange/referral/coin/paid', 'user/exchange/referral/coin/successful', 'user/exchange/referral/fiat/paid', 'user/exchange/referrals', 'user/exchange/trade/summary', 'user/login/token/{token}', 'user/summary', 'user/wallet/summary', 'wallet/coin/withdraw/cancelled', 'wallet/coin/withdraw/completed', 'wallet/coin/withdraw/unverified', 'wallet/coin/withdraw/verified'],
                'post': ['login', 'login/initiate', 'login/password/forgot', 'mfa/authy/initiate', 'mfa/ga/initiate', 'signup', 'user/netki/update', 'user/profile/image/update', 'user/exchange/bank/coin/withdraw/initiate', 'user/exchange/bank/coin/withdraw/newVerifycode', 'user/exchange/bank/fiat/withdraw/initiate', 'user/exchange/bank/fiat/withdraw/newVerifycode', 'user/password/change', 'user/password/reset', 'user/wallet/coin/withdraw/initiate', 'wallet/coin/withdraw/newVerifycode'],
                'put': ['signup/verify/{token}', 'user/exchange/kyc', 'user/exchange/bank/fiat/deposit/new', 'user/exchange/ask/new', 'user/exchange/bid/new', 'user/exchange/instant/buy', 'user/exchange/instant/sell', 'user/exchange/bank/coin/withdraw/verify', 'user/exchange/bank/fiat/account/new', 'user/exchange/bank/fiat/withdraw/verify', 'user/mfa/authy/initiate/enable', 'user/mfa/ga/initiate/enable', 'user/netki/create', 'user/profile/phone/new', 'user/wallet/coin/address/new', 'user/wallet/coin/new', 'user/wallet/coin/withdraw/sendToExchange', 'user/wallet/coin/withdraw/verify'],
                'delete': ['user/gcm/{code}', 'user/logout', 'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}', 'user/exchange/bank/fiat/deposit/cancel/{depositID}', 'user/exchange/ask/cancel/{orderID}', 'user/exchange/bid/cancel/{orderID}', 'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}', 'user/mfa/authy/disable/{code}', 'user/mfa/ga/disable/{code}', 'user/profile/phone/delete', 'user/profile/image/delete/{netkiName}', 'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}']
            }
        },
        'products': {
            'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                balance,
                coin,
                fiat,
                result,
                _this229 = this;

            return Promise.resolve().then(function () {
                return _this229.privateGetUserExchangeBankSummary();
            }).then(function (_resp) {
                response = _resp;
                balance = response['message'];
                coin = {
                    'free': balance['availableCoinBalance'],
                    'used': balance['pendingCoinBalance'],
                    'total': balance['totalCoinBalance']
                };
                fiat = {
                    'free': balance['availableFiatBalance'],
                    'used': balance['pendingFiatBalance'],
                    'total': balance['totalFiatBalance']
                };
                result = {
                    'info': balance,
                    'BTC': coin,
                    'INR': fiat
                };

                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var bids,
                asks,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this230 = this;

            return Promise.resolve().then(function () {
                return _this230.publicGetExchangeBidOrders();
            }).then(function (_resp) {
                bids = _resp;
                return _this230.publicGetExchangeAskOrders();
            }).then(function (_resp) {
                asks = _resp;
                orderbook = {
                    'bids': bids['message'],
                    'asks': asks['message']
                };
                timestamp = _this230.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this230.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['rate'];
                        amount = order['vol'];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this231 = this;

            return Promise.resolve().then(function () {
                return _this231.publicGetExchangeTicker();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['message'];
                timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this231.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['coinvolume']),
                    'quoteVolume': parseFloat(ticker['fiatvolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this232 = this;

            return _this232.publicGetExchangeTrades();
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                direction,
                _this233 = this,
                _arguments221 = arguments;

            price = _arguments221.length > 4 && _arguments221[4] !== undefined ? _arguments221[4] : undefined;
            params = _arguments221.length > 5 && _arguments221[5] !== undefined ? _arguments221[5] : {};
            method = 'privatePutUserExchange';
            order = {};

            if (type == 'market') {
                method += 'Instant' + _this233.capitalize(side);
                if (side == 'buy') {
                    order['maxFiat'] = amount;
                } else {
                    order['maxVol'] = amount;
                }
            } else {
                direction = side == 'buy' ? 'Bid' : 'Ask';

                method += direction + 'New';
                order['rate'] = price;
                order['vol'] = amount;
            }
            return _this233[method](self.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var method,
                _this234 = this;

            throw new EndpointError(_this234.id + ' cancelOrder () is not fully implemented yet');
            method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here

            return _this234[method]({ 'orderID': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'private') {
                headers = { 'Authorization': this.apiKey };
                if (Object.keys(query).length) {
                    body = this.json(query);
                    headers['Content-Type'] = 'application/json';
                }
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var coinspot = {

        'id': 'coinspot',
        'name': 'CoinSpot',
        'countries': 'AU', // Australia
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',
            'api': {
                'public': 'https://www.coinspot.com.au/pubapi',
                'private': 'https://www.coinspot.com.au/api'
            },
            'www': 'https://www.coinspot.com.au',
            'doc': 'https://www.coinspot.com.au/api'
        },
        'api': {
            'public': {
                'get': ['latest']
            },
            'private': {
                'post': ['orders', 'orders/history', 'my/coin/deposit', 'my/coin/send', 'quote/buy', 'quote/sell', 'my/balances', 'my/orders', 'my/buy', 'my/sell', 'my/buy/cancel', 'my/sell/cancel']
            }
        },
        'products': {
            'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },
            'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },
            'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' }
        },

        fetchBalance: function fetchBalance() {
            var response,
                result,
                balances,
                currencies,
                c,
                currency,
                uppercase,
                account,
                _this235 = this;

            return Promise.resolve().then(function () {
                return _this235.privatePostMyBalances();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                if ('balance' in response) {
                    balances = response['balance'];
                    currencies = Object.keys(balances);

                    for (c = 0; c < currencies.length; c++) {
                        currency = currencies[c];
                        uppercase = currency.toUpperCase();
                        account = {
                            'free': balances[currency],
                            'used': undefined,
                            'total': balances[currency]
                        };

                        if (uppercase == 'DRK') {
                            uppercase = 'DASH';
                        }result[uppercase] = account;
                    }
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this236 = this;

            return Promise.resolve().then(function () {
                p = _this236.product(product);
                return _this236.privatePostOrders({
                    'cointype': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this236.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this236.iso8601(timestamp)
                };
                sides = { 'bids': 'buyorders', 'asks': 'sellorders' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['rate']);
                        amount = parseFloat(order['amount']);

                        result[key].push([price, amount]);
                    }
                }
                result['bids'] = _this236.sortBy(result['bids'], 0, true);
                result['asks'] = _this236.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                id,
                ticker,
                timestamp,
                _this237 = this;

            return Promise.resolve().then(function () {
                return _this237.publicGetLatest();
            }).then(function (_resp) {
                response = _resp;
                id = _this237.productId(product);

                id = id.toLowerCase();
                ticker = response['prices'][id];
                timestamp = _this237.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this237.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this238 = this;

            return _this238.privatePostOrdersHistory({
                'cointype': _this238.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this239 = this,
                _arguments227 = arguments;

            price = _arguments227.length > 4 && _arguments227[4] !== undefined ? _arguments227[4] : undefined;
            params = _arguments227.length > 5 && _arguments227[5] !== undefined ? _arguments227[5] : {};
            method = 'privatePostMy' + _this239.capitalize(side);

            if (type == 'market') {
                throw new EndpointError(_this239.id + ' allows limit orders only');
            }order = {
                'cointype': _this239.productId(product),
                'amount': amount,
                'rate': price
            };

            return _this239[method](_this239.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                method,
                _this240 = this,
                _arguments228 = arguments;

            params = _arguments228.length > 1 && _arguments228[1] !== undefined ? _arguments228[1] : {};

            throw new EndpointError(_this240.id + ' cancelOrder () is not fully implemented yet');
            method = 'privatePostMyBuy';

            return _this240[method]({ 'id': id });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                _this241 = this,
                _arguments229 = arguments;

            type = _arguments229.length > 1 && _arguments229[1] !== undefined ? _arguments229[1] : 'public';
            method = _arguments229.length > 2 && _arguments229[2] !== undefined ? _arguments229[2] : 'GET';
            params = _arguments229.length > 3 && _arguments229[3] !== undefined ? _arguments229[3] : {};
            headers = _arguments229.length > 4 && _arguments229[4] !== undefined ? _arguments229[4] : undefined;
            body = _arguments229.length > 5 && _arguments229[5] !== undefined ? _arguments229[5] : undefined;

            if (!_this241.apiKey) {
                throw new AuthenticationError(_this241.id + ' requires apiKey for all requests');
            }url = _this241.urls['api'][type] + '/' + path;

            if (type == 'private') {
                nonce = _this241.nonce();

                body = _this241.json(_this241.extend({ 'nonce': nonce }, params));
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length,
                    'key': _this241.apiKey,
                    'sign': _this241.hmac(_this241.encode(body), _this241.encode(_this241.secret), 'sha512')
                };
            }
            return _this241.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var dsx = {

        'id': 'dsx',
        'name': 'DSX',
        'countries': 'UK',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',
            'api': {
                'mapi': 'https://dsx.uk/mapi', // market data
                'tapi': 'https://dsx.uk/tapi', // trading
                'dwapi': 'https://dsx.uk/dwapi' // deposit/withdraw
            },
            'www': 'https://dsx.uk',
            'doc': ['https://api.dsx.uk', 'https://dsx.uk/api_docs/public', 'https://dsx.uk/api_docs/private', '']
        },
        'api': {
            'mapi': { // market data (public)
                'get': ['barsFromMoment/{id}/{period}/{start}', // empty reply :\
                'depth/{id}', 'info', 'lastBars/{id}/{period}/{amount}', // period is (m, h or d)
                'periodBars/{id}/{period}/{start}/{end}', 'ticker/{id}', 'trades/{id}']
            },
            'tapi': { // trading (private)
                'post': ['getInfo', 'TransHistory', 'TradeHistory', 'OrderHistory', 'ActiveOrders', 'Trade', 'CancelOrder']
            },
            'dwapi': { // deposit / withdraw (private)
                'post': ['getCryptoDepositAddress', 'cryptoWithdraw', 'fiatWithdraw', 'getTransactionStatus', 'getTransactions']
            }
        },

        fetchProducts: function fetchProducts() {
            var response,
                keys,
                result,
                p,
                id,
                product,
                base,
                quote,
                symbol,
                _this242 = this;

            return Promise.resolve().then(function () {
                return _this242.mapiGetInfo();
            }).then(function (_resp) {
                response = _resp;
                keys = Object.keys(response['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = response['pairs'][id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                currencies,
                c,
                currency,
                account,
                _this243 = this;

            return Promise.resolve().then(function () {
                return _this243.loadProducts();
            }).then(function () {
                return _this243.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };
                currencies = Object.keys(balances['total']);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    account = {
                        'free': balances['funds'][currency],
                        'used': undefined,
                        'total': balances['total'][currency]
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this244 = this;

            return Promise.resolve().then(function () {
                return _this244.loadProducts();
            }).then(function () {
                p = _this244.product(product);
                return _this244.mapiGetDepthId({
                    'id': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this244.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this244.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order[0];
                        amount = order[1];

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                response,
                ticker,
                timestamp,
                _this245 = this;

            return Promise.resolve().then(function () {
                return _this245.loadProducts();
            }).then(function () {
                p = _this245.product(product);
                return _this245.mapiGetTickerId({
                    'id': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this245.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker['vol_cur']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this246 = this;

            return Promise.resolve().then(function () {
                return _this246.loadProducts();
            }).then(function () {
                return _this246.mapiGetTradesId({
                    'id': _this246.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this247 = this,
                _arguments235 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments235.length > 4 && _arguments235[4] !== undefined ? _arguments235[4] : undefined;
                params = _arguments235.length > 5 && _arguments235[5] !== undefined ? _arguments235[5] : {};
                return _this247.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this247.id + ' allows limit orders only');
                }order = {
                    'pair': _this247.productId(product),
                    'type': side,
                    'rate': price,
                    'amount': amount
                };

                return _this247.tapiPostTrade(_this247.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this248 = this;

            return Promise.resolve().then(function () {
                return _this248.loadProducts();
            }).then(function () {
                return _this248.tapiPostCancelOrder({ 'orderId': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'mapi';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            if (type == 'mapi' || type == 'dwapi') url += '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'mapi') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var _method = path;
                body = this.urlencode(this.extend({
                    'method': path,
                    'nonce': nonce
                }, query));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Key': this.apiKey,
                    'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512', 'base64')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var exmo = {

        'id': 'exmo',
        'name': 'EXMO',
        'countries': ['ES', 'RU'], // Spain, Russia
        'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',
            'api': 'https://api.exmo.com',
            'www': 'https://exmo.me',
            'doc': ['https://exmo.me/ru/api_doc', 'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs']
        },
        'api': {
            'public': {
                'get': ['currency', 'order_book', 'pair_settings', 'ticker', 'trades']
            },
            'private': {
                'post': ['user_info', 'order_create', 'order_cancel', 'user_open_orders', 'user_trades', 'user_cancelled_orders', 'order_trades', 'required_amount', 'deposit_address', 'withdraw_crypt', 'withdraw_get_txid', 'excode_create', 'excode_load', 'wallet_history']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                id,
                product,
                symbol,
                _symbol$split7,
                _symbol$split8,
                base,
                quote,
                _this249 = this;

            return Promise.resolve().then(function () {
                return _this249.publicGetPairSettings();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = products[id];
                    symbol = id.replace('_', '/');
                    _symbol$split7 = symbol.split('/');
                    _symbol$split8 = _slicedToArray(_symbol$split7, 2);
                    base = _symbol$split8[0];
                    quote = _symbol$split8[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                result,
                c,
                currency,
                account,
                _this250 = this;

            return Promise.resolve().then(function () {
                return _this250.loadProducts();
            }).then(function () {
                return _this250.privatePostUserInfo();
            }).then(function (_resp) {
                response = _resp;
                result = { 'info': response };

                for (c = 0; c < _this250.currencies.length; c++) {
                    currency = _this250.currencies[c];
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (currency in response['balances']) {
                        account['free'] = parseFloat(response['balances'][currency]);
                    }if (currency in response['reserved']) {
                        account['used'] = parseFloat(response['reserved'][currency]);
                    }account['total'] = _this250.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this251 = this;

            return Promise.resolve().then(function () {
                return _this251.loadProducts();
            }).then(function () {
                p = _this251.product(product);
                return _this251.publicGetOrderBook({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this251.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this251.iso8601(timestamp)
                };
                sides = { 'bids': 'bid', 'asks': 'ask' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        parseTicker: function parseTicker(ticker, product) {
            var timestamp = ticker['updated'] * 1000;
            return {
                'timestamp': timestamp,
                'datetime': this.iso8601(timestamp),
                'high': parseFloat(ticker['high']),
                'low': parseFloat(ticker['low']),
                'bid': parseFloat(ticker['buy_price']),
                'ask': parseFloat(ticker['sell_price']),
                'vwap': undefined,
                'open': undefined,
                'close': undefined,
                'first': undefined,
                'last': parseFloat(ticker['last_trade']),
                'change': undefined,
                'percentage': undefined,
                'average': parseFloat(ticker['avg']),
                'baseVolume': parseFloat(ticker['vol']),
                'quoteVolume': parseFloat(ticker['vol_curr']),
                'info': ticker
            };
        },
        fetchTickers: function fetchTickers() {
            var currency,
                request,
                response,
                result,
                ids,
                i,
                id,
                product,
                symbol,
                ticker,
                _this252 = this,
                _arguments240 = arguments;

            return Promise.resolve().then(function () {
                currency = _arguments240.length > 0 && _arguments240[0] !== undefined ? _arguments240[0] : 'USD';
                return _this252.loadProducts();
            }).then(function () {
                request = {};

                if (currency) {
                    request['convert'] = currency;
                }return _this252.publicGetTicker(request);
            }).then(function (_resp) {
                response = _resp;
                result = {};
                ids = Object.keys(response);

                for (i = 0; i < ids.length; i++) {
                    id = ids[i];
                    product = _this252.products_by_id[id];
                    symbol = product['symbol'];
                    ticker = response[id];

                    result[symbol] = _this252.parseTicker(ticker, product);
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                p,
                _this253 = this;

            return Promise.resolve().then(function () {
                return _this253.loadProducts();
            }).then(function () {
                return _this253.publicGetTicker();
            }).then(function (_resp) {
                response = _resp;
                p = _this253.product(product);

                return _this253.parseTicker(response[p['id']], p);
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this254 = this;

            return Promise.resolve().then(function () {
                return _this254.loadProducts();
            }).then(function () {
                return _this254.publicGetTrades({
                    'pair': _this254.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                prefix,
                order,
                _this255 = this,
                _arguments243 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments243.length > 4 && _arguments243[4] !== undefined ? _arguments243[4] : undefined;
                params = _arguments243.length > 5 && _arguments243[5] !== undefined ? _arguments243[5] : {};
                return _this255.loadProducts();
            }).then(function () {
                prefix = '';

                if (type == 'market') {
                    prefix = 'market_';
                }order = {
                    'pair': _this255.productId(product),
                    'quantity': amount,
                    'price': price || 0,
                    'type': prefix + side
                };

                return _this255.privatePostOrderCreate(_this255.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this256 = this;

            return Promise.resolve().then(function () {
                return _this256.loadProducts();
            }).then(function () {
                return _this256.privatePostOrderCancel({ 'order_id': id });
            });
        },
        request: function request(path) {
            var type,
                method,
                params,
                headers,
                body,
                url,
                nonce,
                result,
                _this257 = this,
                _arguments245 = arguments;

            return Promise.resolve().then(function () {
                type = _arguments245.length > 1 && _arguments245[1] !== undefined ? _arguments245[1] : 'public';
                method = _arguments245.length > 2 && _arguments245[2] !== undefined ? _arguments245[2] : 'GET';
                params = _arguments245.length > 3 && _arguments245[3] !== undefined ? _arguments245[3] : {};
                headers = _arguments245.length > 4 && _arguments245[4] !== undefined ? _arguments245[4] : undefined;
                body = _arguments245.length > 5 && _arguments245[5] !== undefined ? _arguments245[5] : undefined;
                url = _this257.urls['api'] + '/' + _this257.version + '/' + path;

                if (type == 'public') {
                    if (Object.keys(params).length) {
                        url += '?' + _this257.urlencode(params);
                    }
                } else {
                    nonce = _this257.nonce();

                    body = _this257.urlencode(_this257.extend({ 'nonce': nonce }, params));
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length,
                        'Key': _this257.apiKey,
                        'Sign': _this257.hmac(_this257.encode(body), _this257.encode(_this257.secret), 'sha512')
                    };
                }
                return _this257.fetch(url, method, headers, body);
            }).then(function (_resp) {
                result = _resp;

                if ('result' in result) {
                    if (!result['result']) {
                        throw new MarketNotAvailableError(_this257.id + ' ' + result['error']);
                    }
                }
                return result;
            });
        }
    };

    //-----------------------------------------------------------------------------

    var flowbtc = {

        'id': 'flowbtc',
        'name': 'flowBTC',
        'countries': 'BR', // Brazil
        'version': 'v1',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',
            'api': 'https://api.flowbtc.com:8400/ajax',
            'www': 'https://trader.flowbtc.com',
            'doc': 'http://www.flowbtc.com.br/api/'
        },
        'api': {
            'public': {
                'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']
            },
            'private': {
                'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']
            }
        },

        fetchProducts: function fetchProducts() {
            var response,
                products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this258 = this;

            return Promise.resolve().then(function () {
                return _this258.publicPostGetProductPairs();
            }).then(function (_resp) {
                response = _resp;
                products = response['productPairs'];
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['name'];
                    base = product['product1Label'];
                    quote = product['product2Label'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this259 = this;

            return Promise.resolve().then(function () {
                return _this259.loadProducts();
            }).then(function () {
                return _this259.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['currencies'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['name'];
                    account = {
                        'free': balance['balance'],
                        'used': balance['hold'],
                        'total': undefined
                    };

                    account['total'] = _this259.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this260 = this;

            return Promise.resolve().then(function () {
                return _this260.loadProducts();
            }).then(function () {
                p = _this260.product(product);
                return _this260.publicPostGetOrderBook({
                    'productPair': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this260.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this260.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['px']);
                        amount = parseFloat(order['qty']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                ticker,
                timestamp,
                _this261 = this;

            return Promise.resolve().then(function () {
                return _this261.loadProducts();
            }).then(function () {
                p = _this261.product(product);
                return _this261.publicPostGetTicker({
                    'productPair': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this261.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this261.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume24hr']),
                    'quoteVolume': parseFloat(ticker['volume24hrProduct2']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this262 = this;

            return Promise.resolve().then(function () {
                return _this262.loadProducts();
            }).then(function () {
                return _this262.publicPostGetTrades({
                    'productPair': _this262.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                orderType,
                order,
                _this263 = this,
                _arguments251 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments251.length > 4 && _arguments251[4] !== undefined ? _arguments251[4] : undefined;
                params = _arguments251.length > 5 && _arguments251[5] !== undefined ? _arguments251[5] : {};
                return _this263.loadProducts();
            }).then(function () {
                orderType = type == 'market' ? 1 : 0;
                order = {
                    'ins': _this263.productId(product),
                    'side': side,
                    'orderType': orderType,
                    'qty': amount,
                    'px': price
                };

                return _this263.privatePostCreateOrder(_this263.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this264 = this,
                _arguments252 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments252.length > 1 && _arguments252[1] !== undefined ? _arguments252[1] : {};
                return _this264.loadProducts();
            }).then(function () {
                if ('ins' in params) {
                    return _this264.privatePostCancelOrder(_this264.extend({
                        'serverOrderId': id
                    }, params));
                } else {
                    throw new EndpointError(_this264.id + ' requires `ins` symbol parameter for cancelling an order');
                }
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) {
                    body = this.json(params);
                }
            } else {
                if (!this.uid) throw new AuthenticationError(this.id + ' requires `' + this.id + '.uid` property for authentication');
                var nonce = this.nonce();
                var auth = nonce.toString() + this.uid + this.apiKey;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret));
                body = this.json(this.extend({
                    'apiKey': this.apiKey,
                    'apiNonce': nonce,
                    'apiSig': signature.toUpperCase()
                }, params));
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var foxbit = extend(blinktrade, {
        'id': 'foxbit',
        'name': 'FoxBit',
        'countries': 'BR',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://foxbit.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'products': {
            'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var fyb = {

        'rateLimit': 1500,
        'api': {
            'public': {
                'get': ['ticker', 'tickerdetailed', 'orderbook', 'trades']
            },
            'private': {
                'post': ['test', 'getaccinfo', 'getpendingorders', 'getorderhistory', 'cancelpendingorder', 'placeorder', 'withdraw']
            }
        },

        fetchBalance: function fetchBalance() {
            var balance,
                btc,
                symbol,
                quote,
                lowercase,
                fiat,
                crypto,
                accounts,
                _this265 = this;

            return Promise.resolve().then(function () {
                return _this265.privatePostGetaccinfo();
            }).then(function (_resp) {
                balance = _resp;
                btc = parseFloat(balance['btcBal']);
                symbol = _this265.symbols[0];
                quote = _this265.products[symbol]['quote'];
                lowercase = quote.toLowerCase() + 'Bal';
                fiat = parseFloat(balance[lowercase]);
                crypto = {
                    'free': btc,
                    'used': undefined,
                    'total': btc
                };
                accounts = { 'BTC': crypto };

                accounts[quote] = {
                    'free': fiat,
                    'used': undefined,
                    'total': fiat
                };
                accounts['info'] = balance;
                return accounts;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this266 = this;

            return Promise.resolve().then(function () {
                return _this266.publicGetOrderbook();
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this266.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this266.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                last,
                volume,
                _this267 = this;

            return Promise.resolve().then(function () {
                return _this267.publicGetTickerdetailed();
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this267.milliseconds();
                last = undefined;
                volume = undefined;

                if ('last' in ticker) {
                    last = parseFloat(ticker['last']);
                }if ('vol' in ticker) {
                    volume = parseFloat(ticker['vol']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this267.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': last,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': volume,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this268 = this;

            return _this268.publicGetTrades();
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this269 = this,
                _arguments257 = arguments;

            price = _arguments257.length > 4 && _arguments257[4] !== undefined ? _arguments257[4] : undefined;
            params = _arguments257.length > 5 && _arguments257[5] !== undefined ? _arguments257[5] : {};

            return _this269.privatePostPlaceorder(_this269.extend({
                'qty': amount,
                'price': price,
                'type': side[0].toUpperCase()
            }, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this270 = this;

            return _this270.privatePostCancelpendingorder({ 'orderNo': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + path;
            if (type == 'public') {
                url += '.json';
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({ 'timestamp': nonce }, params));
                headers = {
                    'Content-type': 'application/x-www-form-urlencoded',
                    'key': this.apiKey,
                    'sig': this.hmac(this.encode(body), this.encode(this.secret), 'sha1')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var fybse = extend(fyb, {
        'id': 'fybse',
        'name': 'FYB-SE',
        'countries': 'SE', // Sweden
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',
            'api': 'https://www.fybse.se/api/SEK',
            'www': 'https://www.fybse.se',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'products': {
            'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' }
        }
    });

    //-----------------------------------------------------------------------------

    var fybsg = extend(fyb, {
        'id': 'fybsg',
        'name': 'FYB-SG',
        'countries': 'SG', // Singapore
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',
            'api': 'https://www.fybsg.com/api/SGD',
            'www': 'https://www.fybsg.com',
            'doc': 'http://docs.fyb.apiary.io'
        },
        'products': {
            'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' }
        }
    });

    //-----------------------------------------------------------------------------

    var gatecoin = {

        'id': 'gatecoin',
        'name': 'Gatecoin',
        'rateLimit': 2000,
        'countries': 'HK', // Hong Kong
        'comment': 'a regulated/licensed exchange',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',
            'api': 'https://api.gatecoin.com',
            'www': 'https://gatecoin.com',
            'doc': ['https://gatecoin.com/api', 'https://github.com/Gatecoin/RESTful-API-Implementation', 'https://api.gatecoin.com/swagger-ui/index.html']
        },
        'api': {
            'public': {
                'get': ['Public/ExchangeRate', // Get the exchange rates
                'Public/LiveTicker', // Get live ticker for all currency
                'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency
                'Public/LiveTickers', // Get live ticker for all currency
                'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.
                'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency
                'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency
                'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history
                'Public/Transactions/{CurrencyPair}', // Gets recent transactions
                'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions
                'Reference/BusinessNatureList', // Get the business nature list.
                'Reference/Countries', // Get the country list.
                'Reference/Currencies', // Get the currency list.
                'Reference/CurrencyPairs', // Get the currency pair list.
                'Reference/CurrentStatusList', // Get the current status list.
                'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.
                'Reference/IncomeRangeList', // Get the income range list.
                'Reference/IncomeSourceList', // Get the income source list.
                'Reference/VerificationLevelList', // Get the verif level list.
                'Stream/PublicChannel'],
                'post': ['Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date
                'Ping', // Post a string, then get it back.
                'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails
                'RegisterUser']
            },
            'private': {
                'get': ['Account/CorporateData', // Get corporate account data
                'Account/DocumentAddress', // Check if residence proof uploaded
                'Account/DocumentCorporation', // Check if registered document uploaded
                'Account/DocumentID', // Check if ID document copy uploaded
                'Account/DocumentInformation', // Get Step3 Data
                'Account/Email', // Get user email
                'Account/FeeRate', // Get fee rate of logged in user
                'Account/Level', // Get verif level of logged in user
                'Account/PersonalInformation', // Get Step1 Data
                'Account/Phone', // Get user phone number
                'Account/Profile', // Get trader profile
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Get referral information
                'Account/ReferralCode', // Get the referral code of the logged in user
                'Account/ReferralNames', // Get names of referred traders
                'Account/ReferralReward', // Get referral reward information
                'Account/ReferredCode', // Get referral code
                'Account/ResidentInformation', // Get Step2 Data
                'Account/SecuritySettings', // Get verif details of logged in user
                'Account/User', // Get all user info
                'APIKey/APIKey', // Get API Key for logged in user
                'Auth/ConnectionHistory', // Gets connection history of logged in user
                'Balance/Balances', // Gets the available balance for each currency for the logged in account.
                'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.
                'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user
                'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user
                'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit
                'Bank/Transactions', // Get all account transactions of the logged in user
                'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.
                'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.
                'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.
                'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.
                'Info/ReferenceCurrency', // Get user's reference currency
                'Info/ReferenceLanguage', // Get user's reference language
                'Notification/Messages', // Get from oldest unread + 3 read message to newest messages
                'Trade/Orders', // Gets open orders for the logged in trader.
                'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.
                'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.
                'Trade/Trades', // Gets all transactions of logged in user
                'Trade/UserTrades'],
                'post': ['Account/DocumentAddress', // Upload address proof document
                'Account/DocumentCorporation', // Upload registered document document
                'Account/DocumentID', // Upload ID document copy
                'Account/Email/RequestVerify', // Request for verification email
                'Account/Email/Verify', // Verification email
                'Account/GoogleAuth', // Enable google auth
                'Account/Level', // Request verif level of logged in user
                'Account/Questionnaire', // Fill the questionnaire
                'Account/Referral', // Post a referral email
                'APIKey/APIKey', // Create a new API key for logged in user
                'Auth/ChangePassword', // Change password.
                'Auth/ForgotPassword', // Request reset password
                'Auth/ForgotUserID', // Request user id
                'Auth/Login', // Trader session log in.
                'Auth/Logout', // Logout from the current session.
                'Auth/LogoutOtherSessions', // Logout other sessions.
                'Auth/ResetPassword', // Reset password
                'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account
                'Bank/UserAccounts', // Add an account the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.
                'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user
                'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.
                'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.
                'Notification/Messages', // Mark all as read
                'Notification/Messages/{ID}', // Mark as read
                'Trade/Orders', // Place an order at the exchange.
                'Trade/StopOrders'],
                'put': ['Account/CorporateData', // Update user company data for corporate account
                'Account/DocumentID', // Update ID document meta data
                'Account/DocumentInformation', // Update Step3 Data
                'Account/Email', // Update user email
                'Account/PersonalInformation', // Update Step1 Data
                'Account/Phone', // Update user phone number
                'Account/Questionnaire', // update the questionnaire
                'Account/ReferredCode', // Update referral code
                'Account/ResidentInformation', // Update Step2 Data
                'Account/SecuritySettings', // Update verif details of logged in user
                'Account/User', // Update all user info
                'Bank/UserAccounts', // Update the label of existing user bank accounnt
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address
                'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address
                'Info/ReferenceCurrency', // User's reference currency
                'Info/ReferenceLanguage'],
                'delete': ['APIKey/APIKey/{PublicKey}', // Remove an API key
                'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user
                'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user
                'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.
                'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.
                'Trade/Orders', // Cancels all existing order
                'Trade/Orders/{OrderID}', // Cancels an existing order
                'Trade/StopOrders', // Cancels all existing stop orders
                'Trade/StopOrders/{ID}']
            }
        },

        fetchProducts: function fetchProducts() {
            var response,
                products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this271 = this;

            return Promise.resolve().then(function () {
                return _this271.publicGetPublicLiveTickers();
            }).then(function (_resp) {
                response = _resp;
                products = response['tickers'];
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['currencyPair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this272 = this;

            return Promise.resolve().then(function () {
                return _this272.loadProducts();
            }).then(function () {
                return _this272.privateGetBalanceBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': balance['availableBalance'],
                        'used': _this272.sum(balance['pendingIncoming'], balance['pendingOutgoing'], balance['openOrder']),
                        'total': balance['balance']
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this273 = this;

            return Promise.resolve().then(function () {
                return _this273.loadProducts();
            }).then(function () {
                p = _this273.product(product);
                return _this273.publicGetPublicMarketDepthCurrencyPair({
                    'CurrencyPair': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this273.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this273.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                response,
                ticker,
                timestamp,
                _this274 = this;

            return Promise.resolve().then(function () {
                return _this274.loadProducts();
            }).then(function () {
                p = _this274.product(product);
                return _this274.publicGetPublicLiveTickerCurrencyPair({
                    'CurrencyPair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(ticker['createDateTime']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this274.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this275 = this;

            return Promise.resolve().then(function () {
                return _this275.loadProducts();
            }).then(function () {
                return _this275.publicGetPublicTransactionsCurrencyPair({
                    'CurrencyPair': _this275.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this276 = this,
                _arguments264 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments264.length > 4 && _arguments264[4] !== undefined ? _arguments264[4] : undefined;
                params = _arguments264.length > 5 && _arguments264[5] !== undefined ? _arguments264[5] : {};
                return _this276.loadProducts();
            }).then(function () {
                order = {
                    'Code': _this276.productId(product),
                    'Way': side == 'buy' ? 'Bid' : 'Ask',
                    'Amount': amount
                };

                if (type == 'limit') {
                    order['Price'] = price;
                }if (_this276.twofa) {
                    if ('ValidationCode' in params) {
                        order['ValidationCode'] = params['ValidationCode'];
                    } else {
                        throw new AuthenticationError(_this276.id + ' two-factor authentication requires a missing ValidationCode parameter');
                    }
                }
                return _this276.privatePostTradeOrders(_this276.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this277 = this;

            return Promise.resolve().then(function () {
                return _this277.loadProducts();
            }).then(function () {
                return _this277.privateDeleteTradeOrdersOrderID({ 'OrderID': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var contentType = method == 'GET' ? '' : 'application/json';
                var auth = method + url + contentType + nonce.toString();
                auth = auth.toLowerCase();
                var signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
                headers = {
                    'API_PUBLIC_KEY': this.apiKey,
                    'API_REQUEST_SIGNATURE': signature,
                    'API_REQUEST_DATE': nonce
                };
                if (method != 'GET') {
                    headers['Content-Type'] = contentType;
                    body = this.json(this.extend({ 'nonce': nonce }, params));
                }
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var gdax = {
        'id': 'gdax',
        'name': 'GDAX',
        'countries': 'US',
        'rateLimit': 1000,
        'urls': {
            'test': 'https://api-public.sandbox.gdax.com',
            'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',
            'api': 'https://api.gdax.com',
            'www': 'https://www.gdax.com',
            'doc': 'https://docs.gdax.com'
        },
        'api': {
            'public': {
                'get': ['currencies', 'products', 'products/{id}/book', 'products/{id}/candles', 'products/{id}/stats', 'products/{id}/ticker', 'products/{id}/trades', 'time']
            },
            'private': {
                'get': ['accounts', 'accounts/{id}', 'accounts/{id}/holds', 'accounts/{id}/ledger', 'coinbase-accounts', 'fills', 'funding', 'orders', 'orders/{id}', 'payment-methods', 'position', 'reports/{id}', 'users/self/trailing-volume'],
                'post': ['deposits/coinbase-account', 'deposits/payment-method', 'funding/repay', 'orders', 'position/close', 'profiles/margin-transfer', 'reports', 'withdrawals/coinbase', 'withdrawals/crypto', 'withdrawals/payment-method'],
                'delete': ['orders', 'orders/{id}']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this278 = this;

            return Promise.resolve().then(function () {
                return _this278.publicGetProducts();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['id'];
                    base = product['base_currency'];
                    quote = product['quote_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this279 = this;

            return Promise.resolve().then(function () {
                return _this279.loadProducts();
            }).then(function () {
                return _this279.privateGetAccounts();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['hold']),
                        'total': parseFloat(balance['balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this280 = this;

            return Promise.resolve().then(function () {
                return _this280.loadProducts();
            }).then(function () {
                return _this280.publicGetProductsIdBook({
                    'id': _this280.productId(product),
                    'level': 2 // 1 best bidask, 2 aggregated, 3 full
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this280.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this280.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                ticker,
                quote,
                timestamp,
                bid,
                ask,
                _this281 = this;

            return Promise.resolve().then(function () {
                return _this281.loadProducts();
            }).then(function () {
                p = _this281.product(product);
                return _this281.publicGetProductsIdTicker({
                    'id': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                return _this281.publicGetProductsIdStats({
                    'id': p['id']
                });
            }).then(function (_resp) {
                quote = _resp;
                timestamp = _this281.parse8601(ticker['time']);
                bid = undefined;
                ask = undefined;

                if ('bid' in ticker) {
                    bid = parseFloat(ticker['bid']);
                }if ('ask' in ticker) {
                    ask = parseFloat(ticker['ask']);
                }return {
                    'timestamp': timestamp,
                    'datetime': _this281.iso8601(timestamp),
                    'high': parseFloat(quote['high']),
                    'low': parseFloat(quote['low']),
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': parseFloat(quote['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(quote['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this282 = this;

            return Promise.resolve().then(function () {
                return _this282.loadProducts();
            }).then(function () {
                return _this282.publicGetProductsIdTrades({
                    'id': _this282.productId(product) // fixes issue #2
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                oid,
                order,
                _this283 = this,
                _arguments271 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments271.length > 4 && _arguments271[4] !== undefined ? _arguments271[4] : undefined;
                params = _arguments271.length > 5 && _arguments271[5] !== undefined ? _arguments271[5] : {};
                return _this283.loadProducts();
            }).then(function () {
                oid = _this283.nonce().toString();
                order = {
                    'product_id': _this283.productId(product),
                    'side': side,
                    'size': amount,
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this283.privatePostOrders(_this283.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this284 = this;

            return Promise.resolve().then(function () {
                return _this284.loadProducts();
            }).then(function () {
                return _this284.privateDeleteOrdersId({ 'id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var request = '/' + this.implodeParams(path, params);
            var url = this.urls['api'] + request;
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey property for authentication and trading');
                if (!this.secret) throw new AuthenticationError(this.id + ' requires secret property for authentication and trading');
                if (!this.password) throw new AuthenticationError(this.id + ' requires password property for authentication and trading');
                var nonce = this.nonce().toString();
                if (Object.keys(query).length) body = this.json(query);
                var what = nonce + method + request + (body || '');
                var secret = this.base64ToBinary(this.secret);
                var signature = this.hmac(this.encode(what), secret, 'sha256', 'base64');
                headers = {
                    'CB-ACCESS-KEY': this.apiKey,
                    'CB-ACCESS-SIGN': signature,
                    'CB-ACCESS-TIMESTAMP': nonce,
                    'CB-ACCESS-PASSPHRASE': this.password,
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var gemini = {
        'id': 'gemini',
        'name': 'Gemini',
        'countries': 'US',
        'rateLimit': 1500, // 200 for private API
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',
            'api': 'https://api.gemini.com',
            'www': 'https://gemini.com',
            'doc': 'https://docs.gemini.com/rest-api'
        },
        'api': {
            'public': {
                'get': ['symbols', 'pubticker/{symbol}', 'book/{symbol}', 'trades/{symbol}', 'auction/{symbol}', 'auction/{symbol}/history']
            },
            'private': {
                'post': ['order/new', 'order/cancel', 'order/cancel/session', 'order/cancel/all', 'order/status', 'orders', 'mytrades', 'tradevolume', 'balances', 'deposit/{currency}/newAddress', 'withdraw/{currency}', 'heartbeat']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                uppercaseProduct,
                base,
                quote,
                symbol,
                _this285 = this;

            return Promise.resolve().then(function () {
                return _this285.publicGetSymbols();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product;
                    uppercaseProduct = product.toUpperCase();
                    base = uppercaseProduct.slice(0, 3);
                    quote = uppercaseProduct.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp4,
                _this286 = this;

            return Promise.resolve().then(function () {
                return _this286.loadProducts();
            }).then(function () {
                return _this286.publicGetBookSymbol({
                    'symbol': _this286.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this286.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this286.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);
                        _timestamp4 = parseInt(order['timestamp']) * 1000;

                        result[side].push([price, amount, _timestamp4]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                ticker,
                timestamp,
                baseVolume,
                quoteVolume,
                _this287 = this;

            return Promise.resolve().then(function () {
                return _this287.loadProducts();
            }).then(function () {
                p = _this287.product(product);
                return _this287.publicGetPubtickerSymbol({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['volume']['timestamp'];
                baseVolume = p['base'];
                quoteVolume = p['quote'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this287.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume'][baseVolume]),
                    'quoteVolume': parseFloat(ticker['volume'][quoteVolume]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this288 = this;

            return Promise.resolve().then(function () {
                return _this288.loadProducts();
            }).then(function () {
                return _this288.publicGetTradesSymbol({
                    'symbol': _this288.productId(product)
                });
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this289 = this;

            return Promise.resolve().then(function () {
                return _this289.loadProducts();
            }).then(function () {
                return _this289.privatePostBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': undefined,
                        'total': parseFloat(balance['amount'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this290 = this,
                _arguments278 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments278.length > 4 && _arguments278[4] !== undefined ? _arguments278[4] : undefined;
                params = _arguments278.length > 5 && _arguments278[5] !== undefined ? _arguments278[5] : {};
                return _this290.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this290.id + ' allows limit orders only');
                }order = {
                    'client_order_id': _this290.nonce(),
                    'symbol': _this290.productId(product),
                    'amount': amount.toString(),
                    'price': price.toString(),
                    'side': side,
                    'type': 'exchange limit' // gemini allows limit orders only
                };

                return _this290.privatePostOrderNew(_this290.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this291 = this;

            return Promise.resolve().then(function () {
                return _this291.loadProducts();
            }).then(function () {
                return _this291.privatePostCancelOrder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var request = this.extend({
                    'request': url,
                    'nonce': nonce
                }, query);
                var payload = this.json(request);
                payload = this.encode(payload);
                payload = this.stringToBase64(payload);
                var signature = this.hmac(payload, this.encode(this.secret), 'sha384');
                headers = {
                    'Content-Type': 'text/plain',
                    'Content-Length': 0,
                    'X-GEMINI-APIKEY': this.apiKey,
                    'X-GEMINI-PAYLOAD': payload,
                    'X-GEMINI-SIGNATURE': signature
                };
            }
            url = this.urls['api'] + url;
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var hitbtc = {

        'id': 'hitbtc',
        'name': 'HitBTC',
        'countries': 'HK', // Hong Kong
        'rateLimit': 1500,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',
            'api': 'http://api.hitbtc.com',
            'www': 'https://hitbtc.com',
            'doc': ['https://hitbtc.com/api', 'http://hitbtc-com.github.io/hitbtc-api', 'http://jsfiddle.net/bmknight/RqbYB']
        },
        'api': {
            'public': {
                'get': ['{symbol}/orderbook', '{symbol}/ticker', '{symbol}/trades', '{symbol}/trades/recent', 'symbols', 'ticker', 'time,']
            },
            'trading': {
                'get': ['balance', 'orders/active', 'orders/recent', 'order', 'trades/by/order', 'trades'],
                'post': ['new_order', 'cancel_order', 'cancel_orders']
            },
            'payment': {
                'get': ['balance', 'address/{currency}', 'transactions', 'transactions/{transaction}'],
                'post': ['transfer_to_trading', 'transfer_to_main', 'address/{currency}', 'payout']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this292 = this;

            return Promise.resolve().then(function () {
                return _this292.publicGetSymbols();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['symbols'].length; p++) {
                    product = products['symbols'][p];
                    id = product['symbol'];
                    base = product['commodity'];
                    quote = product['currency'];
                    // looks like they now have it correct
                    // if (base == 'DSH')
                    // base = 'DASH';

                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this293 = this;

            return Promise.resolve().then(function () {
                return _this293.loadProducts();
            }).then(function () {
                return _this293.tradingGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    account = {
                        'free': parseFloat(balance['cash']),
                        'used': parseFloat(balance['reserved']),
                        'total': undefined
                    };

                    account['total'] = _this293.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this294 = this;

            return Promise.resolve().then(function () {
                return _this294.loadProducts();
            }).then(function () {
                return _this294.publicGetSymbolOrderbook({
                    'symbol': _this294.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this294.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this294.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this295 = this;

            return Promise.resolve().then(function () {
                return _this295.loadProducts();
            }).then(function () {
                return _this295.publicGetSymbolTicker({
                    'symbol': _this295.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;

                if ('message' in ticker) {
                    throw new EndpointError(_this295.id + ' ' + ticker['message']);
                }timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this295.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume']),
                    'quoteVolume': parseFloat(ticker['volume_quote']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this296 = this;

            return Promise.resolve().then(function () {
                return _this296.loadProducts();
            }).then(function () {
                return _this296.publicGetSymbolTrades({
                    'symbol': _this296.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this297 = this,
                _arguments285 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments285.length > 4 && _arguments285[4] !== undefined ? _arguments285[4] : undefined;
                params = _arguments285.length > 5 && _arguments285[5] !== undefined ? _arguments285[5] : {};
                return _this297.loadProducts();
            }).then(function () {
                order = {
                    'clientOrderId': _this297.nonce(),
                    'symbol': _this297.productId(product),
                    'side': side,
                    'quantity': amount,
                    'type': type
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this297.tradingPostNewOrder(_this297.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this298 = this;

            return Promise.resolve().then(function () {
                return _this298.loadProducts();
            }).then(function () {
                return _this298.tradingPostCancelOrder({ 'clientOrderId': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = '/api/' + this.version + '/' + type + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                query = this.extend({ 'nonce': nonce, 'apikey': this.apiKey }, query);
                if (method == 'POST') if (Object.keys(query).length) body = this.urlencode(query);
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
                var auth = url + (body || '');
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Signature': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512').toLowerCase()
                };
            }
            url = this.urls['api'] + url;
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var huobi = {

        'id': 'huobi',
        'name': 'Huobi',
        'countries': 'CN',
        'rateLimit': 2000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',
            'api': 'http://api.huobi.com',
            'www': 'https://www.huobi.com',
            'doc': 'https://github.com/huobiapi/API_Docs_en/wiki'
        },
        'api': {
            'staticmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'usdmarket': {
                'get': ['{id}_kline_{period}', 'ticker_{id}', 'depth_{id}', 'depth_{id}_{length}', 'detail_{id}']
            },
            'trade': {
                'post': ['get_account_info', 'get_orders', 'order_info', 'buy', 'sell', 'buy_market', 'sell_market', 'cancel_order', 'get_new_deal_orders', 'get_order_id_by_trade_id', 'withdraw_coin', 'cancel_withdraw_coin', 'get_withdraw_coin_result', 'transfer', 'loan', 'repayment', 'get_loan_available', 'get_loans']
            }
        },
        'products': {
            'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },
            'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 },
            'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket', 'coinType': 1 }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                available,
                frozen,
                loan,
                _this299 = this;

            return Promise.resolve().then(function () {
                return _this299.tradePostGetAccountInfo();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this299.currencies.length; c++) {
                    currency = _this299.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    available = 'available_' + lowercase + '_display';
                    frozen = 'frozen_' + lowercase + '_display';
                    loan = 'loan_' + lowercase + '_display';

                    if (available in balances) {
                        account['free'] = parseFloat(balances[available]);
                    }if (frozen in balances) {
                        account['used'] = parseFloat(balances[frozen]);
                    }if (loan in balances) {
                        account['used'] = _this299.sum(account['used'], parseFloat(balances[loan]));
                    }account['total'] = _this299.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                method,
                orderbook,
                timestamp,
                result,
                _this300 = this;

            return Promise.resolve().then(function () {
                p = _this300.product(product);
                method = p['type'] + 'GetDepthId';
                return _this300[method]({ 'id': p['id'] });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this300.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this300.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                method,
                response,
                ticker,
                timestamp,
                _this301 = this;

            return Promise.resolve().then(function () {
                p = _this301.product(product);
                method = p['type'] + 'GetTickerId';
                return _this301[method]({ 'id': p['id'] });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['time']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this301.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var p,
                method,
                _this302 = this;

            p = _this302.product(product);
            method = p['type'] + 'GetDetailId';

            return _this302[method]({ 'id': p['id'] });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                method,
                order,
                _this303 = this,
                _arguments291 = arguments;

            price = _arguments291.length > 4 && _arguments291[4] !== undefined ? _arguments291[4] : undefined;
            params = _arguments291.length > 5 && _arguments291[5] !== undefined ? _arguments291[5] : {};
            p = _this303.product(product);
            method = 'tradePost' + _this303.capitalize(side);
            order = {
                'coin_type': p['coinType'],
                'amount': amount,
                'market': p['quote'].toLowerCase()
            };

            if (type == 'limit') {
                order['price'] = price;
            } else {
                method += _this303.capitalize(type);
            }return _this303[method](_this303.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var _this304 = this;

            return _this304.tradePostCancelOrder({ 'id': id });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'trade';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'];
            if (type == 'trade') {
                url += '/api' + this.version;
                var query = this.keysort(this.extend({
                    'method': path,
                    'access_key': this.apiKey,
                    'created': this.nonce()
                }, params));
                var queryString = this.urlencode(this.omit(query, 'market'));
                // secret key must be at the end of query to be signed
                queryString += '&secret_key=' + this.secret;
                query['sign'] = this.hash(this.encode(queryString));
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            } else {
                url += '/' + type + '/' + this.implodeParams(path, params) + '_json.js';
                var _query = this.omit(params, this.extractParams(path));
                if (Object.keys(_query).length) url += '?' + this.urlencode(_query);
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var itbit = {

        'id': 'itbit',
        'name': 'itBit',
        'countries': 'US',
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',
            'api': 'https://api.itbit.com',
            'www': 'https://www.itbit.com',
            'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']
        },
        'api': {
            'public': {
                'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']
            },
            'private': {
                'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders/{id}'],
                'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],
                'delete': ['wallets/{walletId}/orders/{id}']
            }
        },
        'products': {
            'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },
            'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this305 = this;

            return Promise.resolve().then(function () {
                return _this305.publicGetMarketsSymbolOrderBook({
                    'symbol': _this305.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this305.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this305.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this306 = this;

            return Promise.resolve().then(function () {
                return _this306.publicGetMarketsSymbolTicker({
                    'symbol': _this306.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this306.parse8601(ticker['serverTimeUTC']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this306.iso8601(timestamp),
                    'high': parseFloat(ticker['high24h']),
                    'low': parseFloat(ticker['low24h']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap24h']),
                    'open': parseFloat(ticker['openToday']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['lastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume24h']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this307 = this;

            return _this307.publicGetMarketsSymbolTrades({
                'symbol': _this307.productId(product)
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                account,
                _this308 = this;

            return Promise.resolve().then(function () {
                return _this308.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = {
                        'free': parseFloat(balance['availableBalance']),
                        'used': undefined,
                        'total': parseFloat(balance['totalBalance'])
                    };

                    account['used'] = account['total'] - account['free'];
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchWallets: function fetchWallets() {
            return this.privateGetWallets();
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                order,
                _this309 = this,
                _arguments297 = arguments;

            price = _arguments297.length > 4 && _arguments297[4] !== undefined ? _arguments297[4] : undefined;
            params = _arguments297.length > 5 && _arguments297[5] !== undefined ? _arguments297[5] : {};

            if (type == 'market') {
                throw new EndpointError(_this309.id + ' allows limit orders only');
            }amount = amount.toString();
            price = price.toString();
            p = _this309.product(product);
            order = {
                'side': side,
                'type': type,
                'currency': p['base'],
                'amount': amount,
                'display': amount,
                'price': price,
                'instrument': p['id']
            };

            return _this309.privatePostTradeAdd(_this309.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this310 = this,
                _arguments298 = arguments;

            params = _arguments298.length > 1 && _arguments298[1] !== undefined ? _arguments298[1] : {};

            return _this310.privateDeleteWalletsWalletIdOrdersId(_this310.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                if (Object.keys(query).length) body = this.json(query);else body = '';
                var nonce = this.nonce().toString();
                var timestamp = nonce;
                var auth = [method, url, body, nonce, timestamp];
                var message = nonce + this.json(auth);
                var _hash = this.hash(this.encode(message), 'sha256', 'binary');
                var binhash = this.binaryConcat(url, _hash);
                var signature = this.hmac(binhash, this.encode(this.secret), 'sha512', 'base64');
                headers = {
                    'Authorization': self.apiKey + ':' + signature,
                    'Content-Type': 'application/json',
                    'X-Auth-Timestamp': timestamp,
                    'X-Auth-Nonce': nonce
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var jubi = {

        'id': 'jubi',
        'name': 'jubi.com',
        'countries': 'CN',
        'rateLimit': 1500,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',
            'api': 'https://www.jubi.com/api',
            'www': 'https://www.jubi.com',
            'doc': 'https://www.jubi.com/help/api.html'
        },
        'api': {
            'public': {
                'get': ['depth', 'orders', 'ticker', 'allticker']
            },
            'private': {
                'post': ['balance', 'trade_add', 'trade_cancel', 'trade_list', 'trade_view', 'wallet']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                id,
                base,
                quote,
                symbol,
                _this311 = this;

            return Promise.resolve().then(function () {
                return _this311.publicGetAllticker();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    base = id.toUpperCase();
                    quote = 'CNY';
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': id
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                free,
                used,
                _this312 = this;

            return Promise.resolve().then(function () {
                return _this312.loadProducts();
            }).then(function () {
                return _this312.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this312.currencies.length; c++) {
                    currency = _this312.currencies[c];
                    lowercase = currency.toLowerCase();

                    if (lowercase == 'dash') {
                        lowercase = 'drk';
                    }account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    free = lowercase + '_balance';
                    used = lowercase + '_lock';

                    if (free in balances) {
                        account['free'] = parseFloat(balances[free]);
                    }if (used in balances) {
                        account['used'] = parseFloat(balances[used]);
                    }account['total'] = _this312.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this313 = this;

            return Promise.resolve().then(function () {
                return _this313.loadProducts();
            }).then(function () {
                return _this313.publicGetDepth({
                    'coin': _this313.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this313.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this313.iso8601(timestamp)
                };

                result['asks'] = _this313.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this314 = this;

            return Promise.resolve().then(function () {
                return _this314.loadProducts();
            }).then(function () {
                return _this314.publicGetTicker({
                    'coin': _this314.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this314.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this314.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['vol']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this315 = this;

            return Promise.resolve().then(function () {
                return _this315.loadProducts();
            }).then(function () {
                return _this315.publicGetOrders({
                    'coin': _this315.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this316 = this,
                _arguments304 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments304.length > 4 && _arguments304[4] !== undefined ? _arguments304[4] : undefined;
                params = _arguments304.length > 5 && _arguments304[5] !== undefined ? _arguments304[5] : {};
                return _this316.loadProducts();
            }).then(function () {
                return _this316.privatePostTradeAdd(_this316.extend({
                    'amount': amount,
                    'price': price,
                    'type': side,
                    'coin': _this316.productId(product)
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this317 = this,
                _arguments305 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments305.length > 1 && _arguments305[1] !== undefined ? _arguments305[1] : {};
                return _this317.loadProducts();
            }).then(function () {
                return _this317.privateDeleteWalletsWalletIdOrdersId(_this317.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString();
                var query = this.extend({
                    'key': this.apiKey,
                    'nonce': nonce
                }, params);
                var request = this.urlencode(query);
                var secret = this.hash(this.encode(this.secret));
                query['signature'] = this.hmac(this.encode(request), secret);
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------
    // kraken is also owner of ex. Coinsetter / CaVirtEx / Clevercoin

    var kraken = {

        'id': 'kraken',
        'name': 'Kraken',
        'countries': 'US',
        'version': '0',
        'rateLimit': 1500,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',
            'api': 'https://api.kraken.com',
            'www': 'https://www.kraken.com',
            'doc': ['https://www.kraken.com/en-us/help/api', 'https://github.com/nothingisdead/npm-kraken-api']
        },
        'api': {
            'public': {
                'get': ['Assets', 'AssetPairs', 'Depth', 'OHLC', 'Spread', 'Ticker', 'Time', 'Trades']
            },
            'private': {
                'post': ['AddOrder', 'Balance', 'CancelOrder', 'ClosedOrders', 'DepositAddresses', 'DepositMethods', 'DepositStatus', 'Ledgers', 'OpenOrders', 'OpenPositions', 'QueryLedgers', 'QueryOrders', 'QueryTrades', 'TradeBalance', 'TradesHistory', 'TradeVolume', 'Withdraw', 'WithdrawCancel', 'WithdrawInfo', 'WithdrawStatus']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                id,
                product,
                base,
                quote,
                darkpool,
                symbol,
                _this318 = this;

            return Promise.resolve().then(function () {
                return _this318.publicGetAssetPairs();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = products['result'][id];
                    base = product['base'];
                    quote = product['quote'];

                    if (base[0] == 'X' || base[0] == 'Z') {
                        base = base.slice(1);
                    }if (quote[0] == 'X' || quote[0] == 'Z') {
                        quote = quote.slice(1);
                    }base = _this318.commonCurrencyCode(base);
                    quote = _this318.commonCurrencyCode(quote);
                    darkpool = id.indexOf('.d') >= 0;
                    symbol = darkpool ? product['altname'] : base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var darkpool,
                p,
                response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp5,
                _this319 = this;

            return Promise.resolve().then(function () {
                return _this319.loadProducts();
            }).then(function () {
                darkpool = product.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new EndpointError(_this319.id + ' does not provide an order book for darkpool symbol ' + product);
                }p = _this319.product(product);
                return _this319.publicGetDepth({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][p['id']];
                timestamp = _this319.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this319.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);
                        _timestamp5 = order[2] * 1000;

                        result[side].push([price, amount, _timestamp5]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var darkpool,
                p,
                response,
                ticker,
                timestamp,
                _this320 = this;

            return Promise.resolve().then(function () {
                return _this320.loadProducts();
            }).then(function () {
                darkpool = product.indexOf('.d') >= 0;

                if (darkpool) {
                    throw new EndpointError(_this320.id + ' does not provide a ticker for darkpool symbol ' + product);
                }p = _this320.product(product);
                return _this320.publicGetTicker({
                    'pair': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['result'][p['id']];
                timestamp = _this320.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this320.iso8601(timestamp),
                    'high': parseFloat(ticker['h'][1]),
                    'low': parseFloat(ticker['l'][1]),
                    'bid': parseFloat(ticker['b'][0]),
                    'ask': parseFloat(ticker['a'][0]),
                    'vwap': parseFloat(ticker['p'][1]),
                    'open': parseFloat(ticker['o']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['c'][0]),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['v'][1]),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this321 = this;

            return Promise.resolve().then(function () {
                return _this321.loadProducts();
            }).then(function () {
                return _this321.publicGetTrades({
                    'pair': _this321.productId(product)
                });
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                xcode,
                zcode,
                balance,
                account,
                _this322 = this;

            return Promise.resolve().then(function () {
                return _this322.loadProducts();
            }).then(function () {
                return _this322.privatePostBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result'];
                result = { 'info': balances };

                for (c = 0; c < _this322.currencies.length; c++) {
                    currency = _this322.currencies[c];
                    xcode = 'X' + currency; // X-ISO4217-A3 standard currency codes

                    zcode = 'Z' + currency;
                    balance = undefined;

                    if (xcode in balances) {
                        balance = parseFloat(balances[xcode]);
                    }if (zcode in balances) {
                        balance = parseFloat(balances[zcode]);
                    } // issue #60
                    if (currency in balances) {
                        balance = parseFloat(balances[currency]);
                    }account = {
                        'free': balance,
                        'used': undefined,
                        'total': balance
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this323 = this,
                _arguments311 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments311.length > 4 && _arguments311[4] !== undefined ? _arguments311[4] : undefined;
                params = _arguments311.length > 5 && _arguments311[5] !== undefined ? _arguments311[5] : {};
                return _this323.loadProducts();
            }).then(function () {
                order = {
                    'pair': _this323.productId(product),
                    'type': side,
                    'ordertype': type,
                    'volume': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this323.privatePostAddOrder(_this323.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this324 = this;

            return Promise.resolve().then(function () {
                return _this324.loadProducts();
            }).then(function () {
                return _this324.privatePostCancelOrder({ 'txid': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = '/' + this.version + '/' + type + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce().toString();
                body = this.urlencode(this.extend({ 'nonce': nonce }, params));
                var auth = this.encode(nonce + body);
                var _hash2 = this.hash(auth, 'sha256', 'binary');
                var binary = this.stringToBinary(this.encode(url));
                var binhash = this.binaryConcat(binary, _hash2);
                var secret = this.base64ToBinary(this.secret);
                var signature = this.hmac(binhash, secret, 'sha512', 'base64');
                headers = {
                    'API-Key': this.apiKey,
                    'API-Sign': signature,
                    'Content-type': 'application/x-www-form-urlencoded'
                };
            }
            url = this.urls['api'] + url;
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var lakebtc = {

        'id': 'lakebtc',
        'name': 'LakeBTC',
        'countries': 'US',
        'version': 'api_v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',
            'api': 'https://api.lakebtc.com',
            'www': 'https://www.lakebtc.com',
            'doc': ['https://www.lakebtc.com/s/api', 'https://www.lakebtc.com/s/api_v2']
        },
        'api': {
            'public': {
                'get': ['bcorderbook', 'bctrades', 'ticker']
            },
            'private': {
                'post': ['buyOrder', 'cancelOrders', 'getAccountInfo', 'getExternalAccounts', 'getOrders', 'getTrades', 'openOrders', 'sellOrder']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                keys,
                k,
                id,
                product,
                base,
                quote,
                symbol,
                _this325 = this;

            return Promise.resolve().then(function () {
                return _this325.publicGetTicker();
            }).then(function (_resp) {
                products = _resp;
                result = [];
                keys = Object.keys(products);

                for (k = 0; k < keys.length; k++) {
                    id = keys[k];
                    product = products[id];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = base.toUpperCase();
                    quote = quote.toUpperCase();
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this326 = this;

            return Promise.resolve().then(function () {
                return _this326.loadProducts();
            }).then(function () {
                return _this326.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = parseFloat(balances[currency]);
                    account = {
                        'free': balance,
                        'used': undefined,
                        'total': balance
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this327 = this;

            return Promise.resolve().then(function () {
                return _this327.loadProducts();
            }).then(function () {
                return _this327.publicGetBcorderbook({
                    'symbol': _this327.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this327.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this327.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this328 = this;

            return Promise.resolve().then(function () {
                return _this328.loadProducts();
            }).then(function () {
                p = _this328.product(product);
                return _this328.publicGetTicker({
                    'symbol': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = _this328.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this328.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this329 = this;

            return Promise.resolve().then(function () {
                return _this329.loadProducts();
            }).then(function () {
                return _this329.publicGetBctrades({
                    'symbol': _this329.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                productId,
                order,
                _this330 = this,
                _arguments318 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments318.length > 4 && _arguments318[4] !== undefined ? _arguments318[4] : undefined;
                params = _arguments318.length > 5 && _arguments318[5] !== undefined ? _arguments318[5] : {};
                return _this330.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this330.id + ' allows limit orders only');
                }method = 'privatePost' + _this330.capitalize(side) + 'Order';
                productId = _this330.productId(product);
                order = {
                    'params': [price, amount, productId]
                };

                return _this330[method](_this330.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this331 = this;

            return Promise.resolve().then(function () {
                return _this331.loadProducts();
            }).then(function () {
                return _this331.privatePostCancelOrder({ 'params': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version;
            if (type == 'public') {
                url += '/' + path;
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var nonce = this.nonce();
                if (Object.keys(params).length) params = params.join(',');else params = '';
                var query = this.urlencode({
                    'tonce': nonce,
                    'accesskey': this.apiKey,
                    'requestmethod': method.toLowerCase(),
                    'id': nonce,
                    'method': path,
                    'params': params
                });
                body = this.json({
                    'method': path,
                    'params': params,
                    'id': nonce
                });
                var signature = this.hmac(this.encode(query), this.secret, 'sha1', 'base64');
                headers = {
                    'Json-Rpc-Tonce': nonce,
                    'Authorization': "Basic " + this.apiKey + ':' + signature,
                    'Content-Length': body.length,
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var livecoin = {

        'id': 'livecoin',
        'name': 'LiveCoin',
        'countries': ['US', 'UK', 'RU'],
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',
            'api': 'https://api.livecoin.net',
            'www': 'https://www.livecoin.net',
            'doc': 'https://www.livecoin.net/api?lang=en'
        },
        'api': {
            'public': {
                'get': ['exchange/all/order_book', 'exchange/last_trades', 'exchange/maxbid_minask', 'exchange/order_book', 'exchange/restrictions', 'exchange/ticker', // omit params to get all tickers at once
                'info/coinInfo']
            },
            'private': {
                'get': ['exchange/client_orders', 'exchange/order', 'exchange/trades', 'exchange/commission', 'exchange/commissionCommonInfo', 'payment/balances', 'payment/balance', 'payment/get/address', 'payment/history/size', 'payment/history/transactions'],
                'post': ['exchange/buylimit', 'exchange/buymarket', 'exchange/cancellimit', 'exchange/selllimit', 'exchange/sellmarket', 'payment/out/capitalist', 'payment/out/card', 'payment/out/coin', 'payment/out/okpay', 'payment/out/payeer', 'payment/out/perfectmoney', 'payment/voucher/amount', 'payment/voucher/make', 'payment/voucher/redeem']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                symbol,
                _symbol$split9,
                _symbol$split10,
                base,
                quote,
                _this332 = this;

            return Promise.resolve().then(function () {
                return _this332.publicGetExchangeTicker();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['symbol'];
                    symbol = id;
                    _symbol$split9 = symbol.split('/');
                    _symbol$split10 = _slicedToArray(_symbol$split9, 2);
                    base = _symbol$split10[0];
                    quote = _symbol$split10[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                account,
                _this333 = this;

            return Promise.resolve().then(function () {
                return _this333.loadProducts();
            }).then(function () {
                return _this333.privateGetPaymentBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < _this333.currencies.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    account = undefined;

                    if (currency in result) {
                        account = result[currency];
                    } else {
                        account = {
                            'free': undefined,
                            'used': undefined,
                            'total': undefined
                        };
                    }if (balance['type'] == 'total') {
                        account['total'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'available') {
                        account['free'] = parseFloat(balance['value']);
                    }if (balance['type'] == 'trade') {
                        account['used'] = parseFloat(balance['value']);
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this334 = this;

            return Promise.resolve().then(function () {
                return _this334.loadProducts();
            }).then(function () {
                return _this334.publicGetExchangeOrderBook({
                    'currencyPair': _this334.productId(product),
                    'groupByPrice': 'false',
                    'depth': 100
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this334.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this335 = this;

            return Promise.resolve().then(function () {
                return _this335.loadProducts();
            }).then(function () {
                return _this335.publicGetExchangeTicker({
                    'currencyPair': _this335.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this335.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this335.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['best_bid']),
                    'ask': parseFloat(ticker['best_ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this336 = this;

            return Promise.resolve().then(function () {
                return _this336.loadProducts();
            }).then(function () {
                return _this336.publicGetExchangeLastTrades({
                    'currencyPair': _this336.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this337 = this,
                _arguments325 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments325.length > 4 && _arguments325[4] !== undefined ? _arguments325[4] : undefined;
                params = _arguments325.length > 5 && _arguments325[5] !== undefined ? _arguments325[5] : {};
                return _this337.loadProducts();
            }).then(function () {
                method = 'privatePostExchange' + _this337.capitalize(side) + type;
                order = {
                    'currencyPair': _this337.productId(product),
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this337[method](_this337.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this338 = this,
                _arguments326 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments326.length > 1 && _arguments326[1] !== undefined ? _arguments326[1] : {};
                return _this338.loadProducts();
            }).then(function () {
                return _this338.privatePostExchangeCancellimit(_this338.extend({
                    'orderId': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + path;
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var length = 0;
                var query = this.urlencode(this.keysort(params));
                if (method == 'GET') url += '?' + query;else body = query;
                var signature = this.hmac(this.encode(query), this.encode(this.secret), 'sha256');
                headers = {
                    'Api-Key': this.apiKey,
                    'Sign': signature.toUpperCase(),
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var liqui = extend(btce, {
        'id': 'liqui',
        'name': 'Liqui',
        'countries': ['UA'],
        'rateLimit': 1000,
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',
            'api': {
                'public': 'https://api.liqui.io/api',
                'private': 'https://api.liqui.io/tapi'
            },
            'www': 'https://liqui.io',
            'doc': 'https://liqui.io/api'
        },

        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                url += '/' + this.version + '/' + this.implodeParams(path, params);
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'nonce': nonce,
                    'method': path
                }, query));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Key': this.apiKey,
                    'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    });

    //-----------------------------------------------------------------------------

    var luno = {

        'id': 'luno',
        'name': 'luno',
        'countries': ['GB', 'SG', 'ZA'],
        'rateLimit': 3000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
            'api': 'https://api.mybitx.com/api',
            'www': 'https://www.luno.com',
            'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']
        },
        'api': {
            'public': {
                'get': ['orderbook', 'ticker', 'tickers', 'trades']
            },
            'private': {
                'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}'],
                'post': ['accounts', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],
                'put': ['quotes/{id}'],
                'delete': ['quotes/{id}', 'withdrawals/{id}']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this339 = this;

            return Promise.resolve().then(function () {
                return _this339.publicGetTickers();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['tickers'].length; p++) {
                    product = products['tickers'][p];
                    id = product['pair'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);

                    base = _this339.commonCurrencyCode(base);
                    quote = _this339.commonCurrencyCode(quote);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                reserved,
                unconfirmed,
                account,
                _this340 = this;

            return Promise.resolve().then(function () {
                return _this340.loadProducts();
            }).then(function () {
                return _this340.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = _this340.commonCurrencyCode(balance['asset']);
                    reserved = parseFloat(balance['reserved']);
                    unconfirmed = parseFloat(balance['unconfirmed']);
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': _this340.sum(reserved, unconfirmed),
                        'total': undefined
                    };

                    account['total'] = _this340.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this341 = this;

            return Promise.resolve().then(function () {
                return _this341.loadProducts();
            }).then(function () {
                return _this341.publicGetOrderbook({
                    'pair': _this341.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this341.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);
                        // let timestamp = order[2] * 1000;

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this342 = this;

            return Promise.resolve().then(function () {
                return _this342.loadProducts();
            }).then(function () {
                return _this342.publicGetTicker({
                    'pair': _this342.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['timestamp'];

                return {
                    'timestamp': timestamp,
                    'datetime': _this342.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_trade']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['rolling_24_hour_volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this343 = this;

            return Promise.resolve().then(function () {
                return _this343.loadProducts();
            }).then(function () {
                return _this343.publicGetTrades({
                    'pair': _this343.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this344 = this,
                _arguments332 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments332.length > 4 && _arguments332[4] !== undefined ? _arguments332[4] : undefined;
                params = _arguments332.length > 5 && _arguments332[5] !== undefined ? _arguments332[5] : {};
                return _this344.loadProducts();
            }).then(function () {
                method = 'privatePost';
                order = { 'pair': _this344.productId(product) };

                if (type == 'market') {
                    method += 'Marketorder';
                    order['type'] = side.toUpperCase();
                    if (side == 'buy') {
                        order['counter_volume'] = amount;
                    } else {
                        order['base_volume'] = amount;
                    }
                } else {
                    method += 'Order';
                    order['volume'] = amount;
                    order['price'] = price;
                    if (side == 'buy') {
                        order['type'] = 'BID';
                    } else {
                        order['type'] = 'ASK';
                    }
                }
                return _this344[method](_this344.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this345 = this;

            return Promise.resolve().then(function () {
                return _this345.loadProducts();
            }).then(function () {
                return _this345.privatePostStoporder({ 'order_id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (Object.keys(query).length) url += '?' + this.urlencode(query);
            if (type == 'private') {
                var auth = this.encode(this.apiKey + ':' + this.secret);
                auth = this.stringToBase64(auth);
                headers = { 'Authorization': 'Basic ' + this.decode(auth) };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var mercado = {

        'id': 'mercado',
        'name': 'Mercado Bitcoin',
        'countries': 'BR', // Brazil
        'rateLimit': 1000,
        'version': 'v3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',
            'api': {
                'public': 'https://www.mercadobitcoin.net/api',
                'private': 'https://www.mercadobitcoin.net/tapi'
            },
            'www': 'https://www.mercadobitcoin.com.br',
            'doc': ['https://www.mercadobitcoin.com.br/api-doc', 'https://www.mercadobitcoin.com.br/trade-api']
        },
        'api': {
            'public': {
                'get': [// last slash critical
                'orderbook/', 'orderbook_litecoin/', 'ticker/', 'ticker_litecoin/', 'trades/', 'trades_litecoin/', 'v2/ticker/', 'v2/ticker_litecoin/']
            },
            'private': {
                'post': ['cancel_order', 'get_account_info', 'get_order', 'get_withdrawal', 'list_system_messages', 'list_orders', 'list_orderbook', 'place_buy_order', 'place_sell_order', 'withdraw_coin']
            }
        },
        'products': {
            'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': '' },
            'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' }
        },

        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                method,
                orderbook,
                timestamp,
                result,
                _this346 = this;

            return Promise.resolve().then(function () {
                p = _this346.product(product);
                method = 'publicGetOrderbook' + _this346.capitalize(p['suffix']);
                return _this346[method]();
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this346.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this346.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                method,
                response,
                ticker,
                timestamp,
                _this347 = this;

            return Promise.resolve().then(function () {
                p = _this347.product(product);
                method = 'publicGetV2Ticker' + _this347.capitalize(p['suffix']);
                return _this347[method]();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(ticker['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this347.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var p,
                method,
                _this348 = this;

            p = _this348.product(product);
            method = 'publicGetTrades' + _this348.capitalize(p['suffix']);

            return _this348[method]();
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this349 = this;

            return Promise.resolve().then(function () {
                return _this349.privatePostGetAccountInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balance'];
                result = { 'info': response };

                for (c = 0; c < _this349.currencies.length; c++) {
                    currency = _this349.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances) {
                        account['free'] = parseFloat(balances[lowercase]['available']);
                        account['total'] = parseFloat(balances[lowercase]['total']);
                        account['used'] = account['total'] - account['free'];
                    }
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this350 = this,
                _arguments338 = arguments;

            price = _arguments338.length > 4 && _arguments338[4] !== undefined ? _arguments338[4] : undefined;
            params = _arguments338.length > 5 && _arguments338[5] !== undefined ? _arguments338[5] : {};

            if (type == 'market') {
                throw new EndpointError(_this350.id + ' allows limit orders only');
            }method = 'privatePostPlace' + _this350.capitalize(side) + 'Order';
            order = {
                'coin_pair': _this350.productId(product),
                'quantity': amount,
                'limit_price': price
            };

            return _this350[method](_this350.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this351 = this,
                _arguments339 = arguments;

            params = _arguments339.length > 1 && _arguments339[1] !== undefined ? _arguments339[1] : {};

            return _this351.privatePostCancelOrder(_this351.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type] + '/';
            if (type == 'public') {
                url += path;
            } else {
                url += this.version + '/';
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'tapi_method': path,
                    'tapi_nonce': nonce
                }, params));
                var auth = '/tapi/' + this.version + '/' + '?' + body;
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'TAPI-ID': this.apiKey,
                    'TAPI-MAC': this.hmac(this.encode(auth), this.secret, 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------
    // OKCoin
    // China
    // https://www.okcoin.com/
    // https://www.okcoin.com/rest_getStarted.html
    // https://github.com/OKCoin/websocket
    // https://www.npmjs.com/package/okcoin.com
    // https://www.okcoin.cn
    // https://www.okcoin.cn/rest_getStarted.html

    var okcoin = {

        'version': 'v1',
        'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
        'api': {
            'public': {
                'get': ['depth', 'exchange_rate', 'future_depth', 'future_estimated_price', 'future_hold_amount', 'future_index', 'future_kline', 'future_price_limit', 'future_ticker', 'future_trades', 'kline', 'otcs', 'ticker', 'trades']
            },
            'private': {
                'post': ['account_records', 'batch_trade', 'borrow_money', 'borrow_order_info', 'borrows_info', 'cancel_borrow', 'cancel_order', 'cancel_otc_order', 'cancel_withdraw', 'future_batch_trade', 'future_cancel', 'future_devolve', 'future_explosive', 'future_order_info', 'future_orders_info', 'future_position', 'future_position_4fix', 'future_trade', 'future_trades_history', 'future_userinfo', 'future_userinfo_4fix', 'lend_depth', 'order_fee', 'order_history', 'order_info', 'orders_info', 'otc_order_history', 'otc_order_info', 'repayment', 'submit_otc_order', 'trade', 'trade_history', 'trade_otc_order', 'withdraw', 'withdraw_info', 'unrepayments_info', 'userinfo']
            }
        },

        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this352 = this;

            return Promise.resolve().then(function () {
                return _this352.publicGetDepth({
                    'symbol': _this352.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this352.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': _this352.sortBy(orderbook['asks'], 0),
                    'timestamp': timestamp,
                    'datetime': _this352.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this353 = this;

            return Promise.resolve().then(function () {
                return _this353.publicGetTicker({
                    'symbol': _this353.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = parseInt(response['date']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this353.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this354 = this;

            return _this354.publicGetTrades({
                'symbol': _this354.productId(product)
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this355 = this;

            return Promise.resolve().then(function () {
                return _this355.privatePostUserinfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['info']['funds'];
                result = { 'info': response };

                for (c = 0; c < _this355.currencies.length; c++) {
                    currency = _this355.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if (lowercase in balances['free']) {
                        account['free'] = parseFloat(balances['free'][lowercase]);
                    }if (lowercase in balances['freezed']) {
                        account['used'] = parseFloat(balances['freezed'][lowercase]);
                    }account['total'] = _this355.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this356 = this,
                _arguments344 = arguments;

            price = _arguments344.length > 4 && _arguments344[4] !== undefined ? _arguments344[4] : undefined;
            params = _arguments344.length > 5 && _arguments344[5] !== undefined ? _arguments344[5] : {};
            order = {
                'symbol': _this356.productId(product),
                'type': side,
                'amount': amount
            };

            if (type == 'limit') {
                order['price'] = price;
            } else {
                order['type'] += '_market';
            }return _this356.privatePostTrade(_this356.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this357 = this,
                _arguments345 = arguments;

            params = _arguments345.length > 1 && _arguments345[1] !== undefined ? _arguments345[1] : {};

            return _this357.privatePostCancelOrder(_this357.extend({
                'order_id': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = '/api/' + this.version + '/' + path + '.do';
            if (type == 'public') {
                if (Object.keys(params).length) url += '?' + this.urlencode(params);
            } else {
                var query = this.keysort(this.extend({
                    'api_key': this.apiKey
                }, params));
                // secret key must be at the end of query
                var queryString = this.urlencode(query) + '&secret_key=' + this.secret;
                query['sign'] = this.hash(this.encode(queryString)).toUpperCase();
                body = this.urlencode(query);
                headers = { 'Content-type': 'application/x-www-form-urlencoded' };
            }
            url = this.urls['api'] + url;
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var okcoincny = extend(okcoin, {
        'id': 'okcoincny',
        'name': 'OKCoin CNY',
        'countries': 'CN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',
            'api': 'https://www.okcoin.cn',
            'www': 'https://www.okcoin.cn',
            'doc': 'https://www.okcoin.cn/rest_getStarted.html'
        },
        'products': {
            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },
            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' }
        }
    });

    //-----------------------------------------------------------------------------

    var okcoinusd = extend(okcoin, {
        'id': 'okcoinusd',
        'name': 'OKCoin USD',
        'countries': ['CN', 'US'],
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',
            'api': 'https://www.okcoin.com',
            'www': 'https://www.okcoin.com',
            'doc': ['https://www.okcoin.com/rest_getStarted.html', 'https://www.npmjs.com/package/okcoin.com']
        },
        'products': {
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'LTC/USD': { 'id': 'ltc_usd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' }
        }
    });

    //-----------------------------------------------------------------------------

    var paymium = {

        'id': 'paymium',
        'name': 'Paymium',
        'countries': ['FR', 'EU'],
        'rateLimit': 2000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',
            'api': 'https://paymium.com/api',
            'www': 'https://www.paymium.com',
            'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers']
        },
        'api': {
            'public': {
                'get': ['countries', 'data/{id}/ticker', 'data/{id}/trades', 'data/{id}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']
            },
            'private': {
                'get': ['merchant/get_payment/{UUID}', 'user', 'user/addresses', 'user/addresses/{btc_address}', 'user/orders', 'user/orders/{UUID}', 'user/price_alerts'],
                'post': ['user/orders', 'user/addresses', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],
                'delete': ['user/orders/{UUID}/cancel', 'user/price_alerts/{id}']
            }
        },
        'products': {
            'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                balance,
                locked,
                _this358 = this;

            return Promise.resolve().then(function () {
                return _this358.privateGetUser();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this358.currencies.length; c++) {
                    currency = _this358.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };
                    balance = 'balance_' + lowercase;
                    locked = 'locked_' + lowercase;

                    if (balance in balances) {
                        account['free'] = balances[balance];
                    }if (locked in balances) {
                        account['used'] = balances[locked];
                    }account['total'] = _this358.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _timestamp6,
                _this359 = this;

            return Promise.resolve().then(function () {
                return _this359.publicGetDataIdDepth({
                    'id': _this359.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this359.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this359.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['price'];
                        amount = order['amount'];
                        _timestamp6 = order['timestamp'] * 1000;

                        result[side].push([price, amount, _timestamp6]);
                    }
                }
                result['bids'] = _this359.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this360 = this;

            return Promise.resolve().then(function () {
                return _this360.publicGetDataIdTicker({
                    'id': _this360.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = ticker['at'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this360.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': parseFloat(ticker['open']),
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['price']),
                    'change': undefined,
                    'percentage': parseFloat(ticker['variation']),
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this361 = this;

            return _this361.publicGetDataIdTrades({
                'id': _this361.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this362 = this,
                _arguments350 = arguments;

            price = _arguments350.length > 4 && _arguments350[4] !== undefined ? _arguments350[4] : undefined;
            params = _arguments350.length > 5 && _arguments350[5] !== undefined ? _arguments350[5] : {};
            order = {
                'type': _this362.capitalize(type) + 'Order',
                'currency': _this362.productId(product),
                'direction': side,
                'amount': amount
            };

            if (type == 'market') {
                order['price'] = price;
            }return _this362.privatePostUserOrders(_this362.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this363 = this,
                _arguments351 = arguments;

            params = _arguments351.length > 1 && _arguments351[1] !== undefined ? _arguments351[1] : {};

            return _this363.privatePostCancelOrder(_this363.extend({
                'orderNumber': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                body = this.json(params);
                var nonce = this.nonce().toString();
                var auth = nonce + url + body;
                headers = {
                    'Api-Key': this.apiKey,
                    'Api-Signature': this.hmac(this.encode(auth), this.secret),
                    'Api-Nonce': nonce,
                    'Content-Type': 'application/json'
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var poloniex = {

        'id': 'poloniex',
        'name': 'Poloniex',
        'countries': 'US',
        'rateLimit': 500, // 6 calls per second
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
            'api': {
                'public': 'https://poloniex.com/public',
                'private': 'https://poloniex.com/tradingApi'
            },
            'www': 'https://poloniex.com',
            'doc': ['https://poloniex.com/support/api/', 'http://pastebin.com/dMX7mZE0']
        },
        'api': {
            'public': {
                'get': ['return24hVolume', 'returnChartData', 'returnCurrencies', 'returnLoanOrders', 'returnOrderBook', 'returnTicker', 'returnTradeHistory']
            },
            'private': {
                'post': ['buy', 'cancelLoanOffer', 'cancelOrder', 'closeMarginPosition', 'createLoanOffer', 'generateNewAddress', 'getMarginPosition', 'marginBuy', 'marginSell', 'moveOrder', 'returnActiveLoans', 'returnAvailableAccountBalances', 'returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'returnDepositsWithdrawals', 'returnFeeInfo', 'returnLendingHistory', 'returnMarginAccountSummary', 'returnOpenLoanOffers', 'returnOpenOrders', 'returnOrderTrades', 'returnTradableBalances', 'returnTradeHistory', 'sell', 'toggleAutoRenew', 'transferBalance', 'withdraw']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                id,
                product,
                _id$split3,
                _id$split4,
                quote,
                base,
                symbol,
                _this364 = this;

            return Promise.resolve().then(function () {
                return _this364.publicGetReturnTicker();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = products[id];
                    _id$split3 = id.split('_');
                    _id$split4 = _slicedToArray(_id$split3, 2);
                    quote = _id$split4[0];
                    base = _id$split4[1];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                currencies,
                c,
                currency,
                balance,
                account,
                _this365 = this;

            return Promise.resolve().then(function () {
                return _this365.loadProducts();
            }).then(function () {
                return _this365.privatePostReturnCompleteBalances({
                    'account': 'all'
                });
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };
                currencies = Object.keys(balances);

                for (c = 0; c < currencies.length; c++) {
                    currency = currencies[c];
                    balance = balances[currency];
                    account = {
                        'free': parseFloat(balance['available']),
                        'used': parseFloat(balance['onOrders']),
                        'total': undefined
                    };

                    account['total'] = _this365.sum(account['free'], account['used']);
                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this366 = this;

            return Promise.resolve().then(function () {
                return _this366.loadProducts();
            }).then(function () {
                return _this366.publicGetReturnOrderBook({
                    'currencyPair': _this366.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this366.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this366.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this367 = this;

            return Promise.resolve().then(function () {
                return _this367.loadProducts();
            }).then(function () {
                p = _this367.product(product);
                return _this367.publicGetReturnTicker();
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = _this367.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this367.iso8601(timestamp),
                    'high': parseFloat(ticker['high24hr']),
                    'low': parseFloat(ticker['low24hr']),
                    'bid': parseFloat(ticker['highestBid']),
                    'ask': parseFloat(ticker['lowestAsk']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': parseFloat(ticker['percentChange']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['baseVolume']),
                    'quoteVolume': parseFloat(ticker['quoteVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this368 = this;

            return Promise.resolve().then(function () {
                return _this368.loadProducts();
            }).then(function () {
                return _this368.publicGetReturnTradeHistory({
                    'currencyPair': _this368.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                _this369 = this,
                _arguments357 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments357.length > 4 && _arguments357[4] !== undefined ? _arguments357[4] : undefined;
                params = _arguments357.length > 5 && _arguments357[5] !== undefined ? _arguments357[5] : {};
                return _this369.loadProducts();
            }).then(function () {
                method = 'privatePost' + _this369.capitalize(side);

                return _this369[method](_this369.extend({
                    'currencyPair': _this369.productId(product),
                    'rate': price,
                    'amount': amount
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this370 = this,
                _arguments358 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments358.length > 1 && _arguments358[1] !== undefined ? _arguments358[1] : {};
                return _this370.loadProducts();
            }).then(function () {
                return _this370.privatePostCancelOrder(_this370.extend({
                    'orderNumber': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            var query = this.extend({ 'command': path }, params);
            if (type == 'public') {
                url += '?' + this.urlencode(query);
            } else {
                query['nonce'] = this.nonce();
                body = this.urlencode(query);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Key': this.apiKey,
                    'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var quadrigacx = {

        'id': 'quadrigacx',
        'name': 'QuadrigaCX',
        'countries': 'CA',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',
            'api': 'https://api.quadrigacx.com',
            'www': 'https://www.quadrigacx.com',
            'doc': 'https://www.quadrigacx.com/api_info'
        },
        'api': {
            'public': {
                'get': ['order_book', 'ticker', 'transactions']
            },
            'private': {
                'post': ['balance', 'bitcoin_deposit_address', 'bitcoin_withdrawal', 'buy', 'cancel_order', 'ether_deposit_address', 'ether_withdrawal', 'lookup_order', 'open_orders', 'sell', 'user_transactions']
            }
        },
        'products': {
            'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },
            'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },
            'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },
            'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD' }
        },

        fetchBalance: function fetchBalance() {
            var balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this371 = this;

            return Promise.resolve().then(function () {
                return _this371.privatePostBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (c = 0; c < _this371.currencies.length; c++) {
                    currency = _this371.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': parseFloat(balances[lowercase + '_available']),
                        'used': parseFloat(balances[lowercase + '_reserved']),
                        'total': parseFloat(balances[lowercase + '_balance'])
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this372 = this;

            return Promise.resolve().then(function () {
                return _this372.publicGetOrderBook({
                    'book': _this372.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = parseInt(orderbook['timestamp']) * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this372.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this373 = this;

            return Promise.resolve().then(function () {
                return _this373.publicGetTicker({
                    'book': _this373.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = parseInt(ticker['timestamp']) * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this373.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': parseFloat(ticker['vwap']),
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this374 = this;

            return _this374.publicGetTransactions({
                'book': _this374.productId(product)
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                method,
                order,
                _this375 = this,
                _arguments363 = arguments;

            price = _arguments363.length > 4 && _arguments363[4] !== undefined ? _arguments363[4] : undefined;
            params = _arguments363.length > 5 && _arguments363[5] !== undefined ? _arguments363[5] : {};
            method = 'privatePost' + _this375.capitalize(side);
            order = {
                'amount': amount,
                'book': _this375.productId(product)
            };

            if (type == 'limit') {
                order['price'] = price;
            }return _this375[method](_this375.extend(order, params));
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this376 = this,
                _arguments364 = arguments;

            params = _arguments364.length > 1 && _arguments364[1] !== undefined ? _arguments364[1] : {};

            return _this376.privatePostCancelOrder(_this376.extend({
                'id': id
            }, params));
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + path;
            if (type == 'public') {
                url += '?' + this.urlencode(params);
            } else {
                if (!this.uid) throw new AuthenticationError(this.id + ' requires `' + this.id + '.uid` property for authentication');
                var nonce = this.nonce();
                var request = [nonce.toString(), this.uid, this.apiKey].join('');
                var signature = this.hmac(this.encode(request), this.encode(this.secret));
                var query = this.extend({
                    'key': this.apiKey,
                    'nonce': nonce,
                    'signature': signature
                }, params);
                body = this.json(query);
                headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var quoine = {

        'id': 'quoine',
        'name': 'QUOINE',
        'countries': ['JP', 'SG', 'VN'],
        'version': '2',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',
            'api': 'https://api.quoine.com',
            'www': 'https://www.quoine.com',
            'doc': 'https://developers.quoine.com'
        },
        'api': {
            'public': {
                'get': ['products', 'products/{id}', 'products/{id}/price_levels', 'executions', 'ir_ladders/{currency}']
            },
            'private': {
                'get': ['accounts/balance', 'crypto_accounts', 'executions/me', 'fiat_accounts', 'loan_bids', 'loans', 'orders', 'orders/{id}', 'orders/{id}/trades', 'trades', 'trades/{id}/loans', 'trading_accounts', 'trading_accounts/{id}'],
                'post': ['fiat_accounts', 'loan_bids', 'orders'],
                'put': ['loan_bids/{id}/close', 'loans/{id}', 'orders/{id}', 'orders/{id}/cancel', 'trades/{id}', 'trades/{id}/close', 'trades/close_all', 'trading_accounts/{id}']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this377 = this;

            return Promise.resolve().then(function () {
                return _this377.publicGetProducts();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['id'];
                    base = product['base_currency'];
                    quote = product['quoted_currency'];
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this378 = this;

            return Promise.resolve().then(function () {
                return _this378.loadProducts();
            }).then(function () {
                return _this378.privateGetAccountsBalance();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = parseFloat(balance['balance']);
                    account = {
                        'free': total,
                        'used': undefined,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this379 = this;

            return Promise.resolve().then(function () {
                return _this379.loadProducts();
            }).then(function () {
                return _this379.publicGetProductsIdPriceLevels({
                    'id': _this379.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this379.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this379.iso8601(timestamp)
                };
                sides = { 'bids': 'buy_price_levels', 'asks': 'sell_price_levels' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this380 = this;

            return Promise.resolve().then(function () {
                return _this380.loadProducts();
            }).then(function () {
                return _this380.publicGetProductsId({
                    'id': _this380.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this380.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this380.iso8601(timestamp),
                    'high': parseFloat(ticker['high_market_ask']),
                    'low': parseFloat(ticker['low_market_bid']),
                    'bid': parseFloat(ticker['market_bid']),
                    'ask': parseFloat(ticker['market_ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last_traded_price']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_24h']),
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this381 = this;

            return Promise.resolve().then(function () {
                return _this381.loadProducts();
            }).then(function () {
                return _this381.publicGetExecutions({
                    'product_id': _this381.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this382 = this,
                _arguments370 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments370.length > 4 && _arguments370[4] !== undefined ? _arguments370[4] : undefined;
                params = _arguments370.length > 5 && _arguments370[5] !== undefined ? _arguments370[5] : {};
                return _this382.loadProducts();
            }).then(function () {
                order = {
                    'order_type': type,
                    'product_id': _this382.productId(product),
                    'side': side,
                    'quantity': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this382.privatePostOrders(_this382.extend({
                    'order': order
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this383 = this,
                _arguments371 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments371.length > 1 && _arguments371[1] !== undefined ? _arguments371[1] : {};
                return _this383.loadProducts();
            }).then(function () {
                return _this383.privatePutOrdersIdCancel(_this383.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            headers = {
                'X-Quoine-API-Version': this.version,
                'Content-type': 'application/json'
            };
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var request = {
                    'path': url,
                    'nonce': nonce,
                    'token_id': this.apiKey,
                    'iat': Math.floor(nonce / 1000) // issued at
                };
                if (Object.keys(query).length) body = this.json(query);
                headers['X-Quoine-Auth'] = this.jwt(request, this.secret);
            }
            return this.fetch(this.urls['api'] + url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var southxchange = {

        'id': 'southxchange',
        'name': 'SouthXchange',
        'countries': 'AR', // Argentina
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',
            'api': 'https://www.southxchange.com/api',
            'www': 'https://www.southxchange.com',
            'doc': 'https://www.southxchange.com/Home/Api'
        },
        'api': {
            'public': {
                'get': ['markets', 'price/{symbol}', 'prices', 'book/{symbol}', 'trades/{symbol}']
            },
            'private': {
                'post': ['cancelMarketOrders', 'cancelOrder', 'generatenewaddress', 'listOrders', 'listBalances', 'placeOrder', 'withdraw']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                base,
                quote,
                symbol,
                id,
                _this384 = this;

            return Promise.resolve().then(function () {
                return _this384.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    base = product[0];
                    quote = product[1];
                    symbol = base + '/' + quote;
                    id = symbol;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this385 = this;

            return Promise.resolve().then(function () {
                return _this385.loadProducts();
            }).then(function () {
                return _this385.privatePostListBalances();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.uppercase;
                    free = parseFloat(balance['Available']);
                    used = parseFloat(balance['Unconfirmed']);
                    total = _this385.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this386 = this;

            return Promise.resolve().then(function () {
                return _this386.loadProducts();
            }).then(function () {
                return _this386.publicGetBookSymbol({
                    'symbol': _this386.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this386.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this386.iso8601(timestamp)
                };
                sides = { 'bids': 'BuyOrders', 'asks': 'SellOrders' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Price']);
                        amount = parseFloat(order['Amount']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this387 = this;

            return Promise.resolve().then(function () {
                return _this387.loadProducts();
            }).then(function () {
                return _this387.publicGetPriceSymbol({
                    'symbol': _this387.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this387.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this387.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': parseFloat(ticker['Bid']),
                    'ask': parseFloat(ticker['Ask']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['Last']),
                    'change': parseFloat(ticker['Variation24Hr']),
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['Volume24Hr']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this388 = this;

            return Promise.resolve().then(function () {
                return _this388.loadProducts();
            }).then(function () {
                return _this388.publicGetTradesSymbol({
                    'symbol': _this388.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                order,
                _this389 = this,
                _arguments377 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments377.length > 4 && _arguments377[4] !== undefined ? _arguments377[4] : undefined;
                params = _arguments377.length > 5 && _arguments377[5] !== undefined ? _arguments377[5] : {};
                return _this389.loadProducts();
            }).then(function () {
                p = _this389.product(product);
                order = {
                    'listingCurrency': p['base'],
                    'referenceCurrency': p['quote'],
                    'type': side,
                    'amount': amount
                };

                if (type == 'limit') {
                    order['limitPrice'] = price;
                }return _this389.privatePostPlaceOrder(_this389.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this390 = this,
                _arguments378 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments378.length > 1 && _arguments378[1] !== undefined ? _arguments378[1] : {};
                return _this390.loadProducts();
            }).then(function () {
                return _this390.privatePostCancelOrder(_this390.extend({
                    'orderCode': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'private') {
                var nonce = this.nonce();
                query = this.extend({
                    'key': this.apiKey,
                    'nonce': nonce
                }, query);
                body = this.json(query);
                headers = {
                    'Content-Type': 'application/json',
                    'Hash': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var surbitcoin = extend(blinktrade, {
        'id': 'surbitcoin',
        'name': 'SurBitcoin',
        'countries': 'VE',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://surbitcoin.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'products': {
            'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' }
        }
    });

    //-----------------------------------------------------------------------------

    var therock = {

        'id': 'therock',
        'name': 'TheRockTrading',
        'countries': 'MT',
        'rateLimit': 1000,
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',
            'api': 'https://api.therocktrading.com',
            'www': 'https://therocktrading.com',
            'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']
        },
        'api': {
            'public': {
                'get': ['funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']
            },
            'private': {
                'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],
                'post': ['atms/withdraw', 'funds/{fund_id}/orders'],
                'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this391 = this;

            return Promise.resolve().then(function () {
                return _this391.publicGetFundsTickers();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products['tickers'].length; p++) {
                    product = products['tickers'][p];
                    id = product['fund_id'];
                    base = id.slice(0, 3);
                    quote = id.slice(3, 6);
                    symbol = base + '/' + quote;

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                free,
                total,
                used,
                account,
                _this392 = this;

            return Promise.resolve().then(function () {
                return _this392.loadProducts();
            }).then(function () {
                return _this392.privateGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['balances'];
                result = { 'info': response };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    free = balance['trading_balance'];
                    total = balance['balance'];
                    used = total - free;
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this393 = this;

            return Promise.resolve().then(function () {
                return _this393.loadProducts();
            }).then(function () {
                return _this393.publicGetFundsIdOrderbook({
                    'id': _this393.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this393.parse8601(orderbook['date']);
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this393.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['amount']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this394 = this;

            return Promise.resolve().then(function () {
                return _this394.loadProducts();
            }).then(function () {
                return _this394.publicGetFundsIdTicker({
                    'id': _this394.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this394.parse8601(ticker['date']);

                return {
                    'timestamp': timestamp,
                    'datetime': _this394.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['bid']),
                    'ask': parseFloat(ticker['ask']),
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['volume_traded']),
                    'quoteVolume': parseFloat(ticker['volume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this395 = this;

            return Promise.resolve().then(function () {
                return _this395.loadProducts();
            }).then(function () {
                return _this395.publicGetFundsIdTrades({
                    'id': _this395.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this396 = this,
                _arguments384 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments384.length > 4 && _arguments384[4] !== undefined ? _arguments384[4] : undefined;
                params = _arguments384.length > 5 && _arguments384[5] !== undefined ? _arguments384[5] : {};
                return _this396.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this396.id + ' allows limit orders only');
                }return _this396.privatePostFundsFundIdOrders(_this396.extend({
                    'fund_id': _this396.productId(product),
                    'side': side,
                    'amount': amount,
                    'price': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this397 = this,
                _arguments385 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments385.length > 1 && _arguments385[1] !== undefined ? _arguments385[1] : {};
                return _this397.loadProducts();
            }).then(function () {
                return _this397.privateDeleteFundsFundIdOrdersId(_this397.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'private') {
                var nonce = this.nonce().toString();
                var auth = nonce + url;
                headers = {
                    'X-TRT-KEY': this.apiKey,
                    'X-TRT-NONCE': nonce,
                    'X-TRT-SIGN': this.hmac(this.encode(auth), this.encode(this.secret), 'sha512')
                };
                if (Object.keys(query).length) {
                    body = this.json(query);
                    headers['Content-Type'] = 'application/json';
                }
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var urdubit = extend(blinktrade, {
        'id': 'urdubit',
        'name': 'UrduBit',
        'countries': 'PK',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://urdubit.com',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'products': {
            'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' }
        }
    });

    //-----------------------------------------------------------------------------

    var vaultoro = {

        'id': 'vaultoro',
        'name': 'Vaultoro',
        'countries': 'CH',
        'rateLimit': 1000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',
            'api': 'https://api.vaultoro.com',
            'www': 'https://www.vaultoro.com',
            'doc': 'https://api.vaultoro.com'
        },
        'api': {
            'public': {
                'get': ['bidandask', 'buyorders', 'latest', 'latesttrades', 'markets', 'orderbook', 'sellorders', 'transactions/day', 'transactions/hour', 'transactions/month']
            },
            'private': {
                'get': ['balance', 'mytrades', 'orders'],
                'post': ['buy/{symbol}/{type}', 'cancel/{id}', 'sell/{symbol}/{type}', 'withdraw']
            }
        },

        fetchProducts: function fetchProducts() {
            var result,
                products,
                product,
                base,
                quote,
                symbol,
                baseId,
                quoteId,
                id,
                _this398 = this;

            return Promise.resolve().then(function () {
                result = [];
                return _this398.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                product = products['data'];
                base = product['BaseCurrency'];
                quote = product['MarketCurrency'];
                symbol = base + '/' + quote;
                baseId = base;
                quoteId = quote;
                id = product['MarketName'];

                result.push({
                    'id': id,
                    'symbol': symbol,
                    'base': base,
                    'quote': quote,
                    'baseId': baseId,
                    'quoteId': quoteId,
                    'info': product
                });
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                free,
                used,
                total,
                account,
                _this399 = this;

            return Promise.resolve().then(function () {
                return _this399.loadProducts();
            }).then(function () {
                return _this399.privateGetBalance();
            }).then(function (_resp) {
                response = _resp;
                balances = response['data'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency_code'];
                    uppercase = currency.toUpperCase();
                    free = balance['cash'];
                    used = balance['reserved'];
                    total = _this399.sum(free, used);
                    account = {
                        'free': free,
                        'used': used,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this400 = this;

            return Promise.resolve().then(function () {
                return _this400.loadProducts();
            }).then(function () {
                return _this400.publicGetOrderbook();
            }).then(function (_resp) {
                response = _resp;
                orderbook = {
                    'bids': response['data'][0]['b'],
                    'asks': response['data'][1]['s']
                };
                timestamp = _this400.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this400.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = order['Gold_Price'];
                        amount = order['Gold_Amount'];

                        result[side].push([price, amount]);
                    }
                }
                result['bids'] = _this400.sortBy(result['bids'], 0, true);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var quote,
                bidsLength,
                bid,
                ask,
                response,
                ticker,
                timestamp,
                _this401 = this;

            return Promise.resolve().then(function () {
                return _this401.loadProducts();
            }).then(function () {
                return _this401.publicGetBidandask();
            }).then(function (_resp) {
                quote = _resp;
                bidsLength = quote['bids'].length;
                bid = quote['bids'][bidsLength - 1];
                ask = quote['asks'][0];
                return _this401.publicGetMarkets();
            }).then(function (_resp) {
                response = _resp;
                ticker = response['data'];
                timestamp = _this401.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this401.iso8601(timestamp),
                    'high': parseFloat(ticker['24hHigh']),
                    'low': parseFloat(ticker['24hLow']),
                    'bid': bid[0],
                    'ask': ask[0],
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['LastPrice']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['24hVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this402 = this;

            return Promise.resolve().then(function () {
                return _this402.loadProducts();
            }).then(function () {
                return _this402.publicGetTransactionsDay();
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                p,
                method,
                _this403 = this,
                _arguments391 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments391.length > 4 && _arguments391[4] !== undefined ? _arguments391[4] : undefined;
                params = _arguments391.length > 5 && _arguments391[5] !== undefined ? _arguments391[5] : {};
                return _this403.loadProducts();
            }).then(function () {
                p = _this403.product(product);
                method = 'privatePost' + _this403.capitalize(side) + 'SymbolType';

                return _this403[method](_this403.extend({
                    'symbol': p['quoteId'].toLowerCase(),
                    'type': type,
                    'gld': amount,
                    'price': price || 1
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this404 = this,
                _arguments392 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments392.length > 1 && _arguments392[1] !== undefined ? _arguments392[1] : {};
                return _this404.loadProducts();
            }).then(function () {
                return _this404.privatePostCancelId(_this404.extend({
                    'id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/';
            if (type == 'public') {
                url += path;
            } else {
                var nonce = this.nonce();
                url += this.version + '/' + this.implodeParams(path, params);
                var query = this.extend({
                    'nonce': nonce,
                    'apikey': this.apiKey
                }, this.omit(params, this.extractParams(path)));
                url += '?' + this.urlencode(query);
                headers = {
                    'Content-Type': 'application/json',
                    'X-Signature': this.hmac(this.encode(url), this.encode(this.secret))
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var vbtc = extend(blinktrade, {
        'id': 'vbtc',
        'name': 'VBTC',
        'countries': 'VN',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',
            'api': {
                'public': 'https://api.blinktrade.com/api',
                'private': 'https://api.blinktrade.com/tapi'
            },
            'www': 'https://vbtc.exchange',
            'doc': 'https://blinktrade.com/docs'
        },
        'comment': 'Blinktrade API',
        'products': {
            'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' }
        }
    });

    //-----------------------------------------------------------------------------

    var virwox = {

        'id': 'virwox',
        'name': 'VirWoX',
        'countries': 'AT',
        'rateLimit': 1000,
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',
            'api': {
                'public': 'http://api.virwox.com/api/json.php',
                'private': 'https://www.virwox.com/api/trading.php'
            },
            'www': 'https://www.virwox.com',
            'doc': 'https://www.virwox.com/developers.php'
        },
        'api': {
            'public': {
                'get': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics'],
                'post': ['getInstruments', 'getBestPrices', 'getMarketDepth', 'estimateMarketOrder', 'getTradedPriceVolume', 'getRawTradeData', 'getStatistics', 'getTerminalList', 'getGridList', 'getGridStatistics']
            },
            'private': {
                'get': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder'],
                'post': ['cancelOrder', 'getBalances', 'getCommissionDiscount', 'getOrders', 'getTransactions', 'placeOrder']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                product,
                id,
                symbol,
                base,
                quote,
                _this405 = this;

            return Promise.resolve().then(function () {
                return _this405.publicGetInstruments();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products['result']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    product = products['result'][keys[p]];
                    id = product['instrumentID'];
                    symbol = product['symbol'];
                    base = product['longCurrency'];
                    quote = product['shortCurrency'];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                total,
                account,
                _this406 = this;

            return Promise.resolve().then(function () {
                return _this406.loadProducts();
            }).then(function () {
                return _this406.privatePostGetBalances();
            }).then(function (_resp) {
                response = _resp;
                balances = response['result']['accountList'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    total = balance['balance'];
                    account = {
                        'free': total,
                        'used': undefined,
                        'total': total
                    };

                    result[currency] = account;
                }
                return result;
            });
        },
        fetchBestPrices: function fetchBestPrices(product) {
            var _this407 = this;

            return Promise.resolve().then(function () {
                return _this407.loadProducts();
            }).then(function () {
                return _this407.publicPostGetBestPrices({
                    'symbols': [_this407.symbol(product)]
                });
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var response,
                orderbook,
                timestamp,
                result,
                sides,
                keys,
                k,
                key,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this408 = this;

            return Promise.resolve().then(function () {
                return _this408.loadProducts();
            }).then(function () {
                return _this408.publicPostGetMarketDepth({
                    'symbols': [_this408.symbol(product)],
                    'buyDepth': 100,
                    'sellDepth': 100
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response['result'][0];
                timestamp = _this408.milliseconds();
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this408.iso8601(timestamp)
                };
                sides = { 'bids': 'buy', 'asks': 'sell' };
                keys = Object.keys(sides);

                for (k = 0; k < keys.length; k++) {
                    key = keys[k];
                    side = sides[key];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['price']);
                        amount = parseFloat(order['volume']);

                        result[key].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var end,
                start,
                response,
                tickers,
                keys,
                length,
                lastKey,
                ticker,
                timestamp,
                _this409 = this;

            return Promise.resolve().then(function () {
                return _this409.loadProducts();
            }).then(function () {
                end = _this409.milliseconds();
                start = end - 86400000;
                return _this409.publicGetTradedPriceVolume({
                    'instrument': _this409.symbol(product),
                    'endDate': _this409.yyyymmddhhmmss(end),
                    'startDate': _this409.yyyymmddhhmmss(start),
                    'HLOC': 1
                });
            }).then(function (_resp) {
                response = _resp;
                tickers = response['result']['priceVolumeList'];
                keys = Object.keys(tickers);
                length = keys.length;
                lastKey = keys[length - 1];
                ticker = tickers[lastKey];
                timestamp = _this409.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this409.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': undefined,
                    'ask': undefined,
                    'vwap': undefined,
                    'open': parseFloat(ticker['open']),
                    'close': parseFloat(ticker['close']),
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': parseFloat(ticker['longVolume']),
                    'quoteVolume': parseFloat(ticker['shortVolume']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this410 = this;

            return Promise.resolve().then(function () {
                return _this410.loadProducts();
            }).then(function () {
                return _this410.publicGetRawTradeData({
                    'instrument': _this410.symbol(product),
                    'timespan': 3600
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this411 = this,
                _arguments399 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments399.length > 4 && _arguments399[4] !== undefined ? _arguments399[4] : undefined;
                params = _arguments399.length > 5 && _arguments399[5] !== undefined ? _arguments399[5] : {};
                return _this411.loadProducts();
            }).then(function () {
                order = {
                    'instrument': _this411.symbol(product),
                    'orderType': side.toUpperCase(),
                    'amount': amount
                };

                if (type == 'limit') {
                    order['price'] = price;
                }return _this411.privatePostPlaceOrder(_this411.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this412 = this,
                _arguments400 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments400.length > 1 && _arguments400[1] !== undefined ? _arguments400[1] : {};
                return _this412.loadProducts();
            }).then(function () {
                return _this412.privatePostCancelOrder(_this412.extend({
                    'orderID': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'][type];
            var auth = {};
            if (type == 'private') {
                auth['key'] = this.apiKey;
                auth['user'] = this.login;
                auth['pass'] = this.password;
            }
            var nonce = this.nonce();
            if (method == 'GET') {
                url += '?' + this.urlencode(this.extend({
                    'method': path,
                    'id': nonce
                }, auth, params));
            } else {
                headers = { 'Content-type': 'application/json' };
                body = this.json({
                    'method': path,
                    'params': this.extend(auth, params),
                    'id': nonce
                });
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var xbtce = {

        'id': 'xbtce',
        'name': 'xBTCe',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': 'v1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',
            'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',
            'www': 'https://www.xbtce.com',
            'doc': ['https://www.xbtce.com/tradeapi', 'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api']
        },
        'api': {
            'public': {
                'get': ['currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/ticks', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'ticker', 'ticker/{filter}', 'tradesession']
            },
            'private': {
                'get': ['tradeserverinfo', 'tradesession', 'currency', 'currency/{filter}', 'level2', 'level2/{filter}', 'symbol', 'symbol/{filter}', 'tick', 'tick/{filter}', 'account', 'asset', 'asset/{id}', 'position', 'position/{id}', 'trade', 'trade/{id}', 'quotehistory/{symbol}/{periodicity}/bars/ask', 'quotehistory/{symbol}/{periodicity}/bars/ask/info', 'quotehistory/{symbol}/{periodicity}/bars/bid', 'quotehistory/{symbol}/{periodicity}/bars/bid/info', 'quotehistory/{symbol}/level2', 'quotehistory/{symbol}/level2/info', 'quotehistory/{symbol}/periodicities', 'quotehistory/{symbol}/ticks', 'quotehistory/{symbol}/ticks/info', 'quotehistory/cache/{symbol}/{periodicity}/bars/ask', 'quotehistory/cache/{symbol}/{periodicity}/bars/bid', 'quotehistory/cache/{symbol}/level2', 'quotehistory/cache/{symbol}/ticks', 'quotehistory/symbols', 'quotehistory/version'],
                'post': ['trade', 'tradehistory'],
                'put': ['trade'],
                'delete': ['trade']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                base,
                quote,
                symbol,
                _this413 = this;

            return Promise.resolve().then(function () {
                return _this413.privateGetSymbol();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['Symbol'];
                    base = product['MarginCurrency'];
                    quote = product['ProfitCurrency'];

                    if (base == 'DSH') {
                        base = 'DASH';
                    }symbol = base + '/' + quote;

                    symbol = product['IsTradeAllowed'] ? symbol : id;
                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                total,
                account,
                _this414 = this;

            return Promise.resolve().then(function () {
                return _this414.loadProducts();
            }).then(function () {
                return _this414.privateGetAsset();
            }).then(function (_resp) {
                balances = _resp;
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['Currency'];
                    uppercase = currency.toUpperCase();
                    // xbtce names DASH incorrectly as DSH

                    if (uppercase == 'DSH') {
                        uppercase = 'DASH';
                    }total = balance['balance'];
                    account = {
                        'free': balance['FreeAmount'],
                        'used': balance['LockedAmount'],
                        'total': balance['Amount']
                    };

                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                Side,
                orders,
                i,
                order,
                price,
                amount,
                _this415 = this;

            return Promise.resolve().then(function () {
                return _this415.loadProducts();
            }).then(function () {
                p = _this415.product(product);
                return _this415.privateGetLevel2Filter({
                    'filter': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;

                orderbook = orderbook[0];
                timestamp = orderbook['Timestamp'];
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this415.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    Side = _this415.capitalize(side);
                    orders = orderbook[Side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order['Price']);
                        amount = parseFloat(order['Volume']);

                        result[side].push([price, amount]);
                    }
                }
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                bid,
                ask,
                _this416 = this;

            return Promise.resolve().then(function () {
                return _this416.loadProducts();
            }).then(function () {
                p = _this416.product(product);
                return _this416.privateGetTickFilter({
                    'filter': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;

                tickers = _this416.indexBy(tickers, 'Symbol');
                ticker = tickers[p['id']];
                timestamp = ticker['Timestamp'];
                bid = undefined;
                ask = undefined;

                if ('BestBid' in ticker) {
                    bid = ticker['BestBid']['Price'];
                }if ('BestAsk' in ticker) {
                    ask = ticker['BestAsk']['Price'];
                }return {
                    'timestamp': timestamp,
                    'datetime': _this416.iso8601(timestamp),
                    'high': undefined,
                    'low': undefined,
                    'bid': bid,
                    'ask': ask,
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': undefined,
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': undefined,
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this417 = this;

            return Promise.resolve().then(function () {
                return _this417.loadProducts();
            }).then(function () {
                // no method for trades?
                return _this417.privateGetTrade();
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this418 = this,
                _arguments406 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments406.length > 4 && _arguments406[4] !== undefined ? _arguments406[4] : undefined;
                params = _arguments406.length > 5 && _arguments406[5] !== undefined ? _arguments406[5] : {};
                return _this418.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this418.id + ' allows limit orders only');
                }return _this418.tapiPostTrade(_this418.extend({
                    'pair': _this418.productId(product),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this419 = this,
                _arguments407 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments407.length > 1 && _arguments407[1] !== undefined ? _arguments407[1] : {};
                return _this419.loadProducts();
            }).then(function () {
                return _this419.privateDeleteTrade(_this419.extend({
                    'Type': 'Cancel',
                    'Id': id
                }, params));
            });
        },
        nonce: function nonce() {
            return this.milliseconds();
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            if (!this.apiKey) throw new AuthenticationError(this.id + ' requires apiKey for all requests, their public API is always busy');
            if (!this.uid) throw new AuthenticationError(this.id + ' requires uid property for authentication and trading');
            var url = this.urls['api'] + '/' + this.version;
            if (type == 'public') url += '/' + type;
            url += '/' + this.implodeParams(path, params);
            var query = this.omit(params, this.extractParams(path));
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                headers = { 'Accept-Encoding': 'gzip, deflate' };
                var nonce = this.nonce().toString();
                if (method == 'POST') {
                    if (Object.keys(query).length) {
                        headers['Content-Type'] = 'application/json';
                        body = this.json(query);
                    } else url += '?' + this.urlencode(query);
                }
                var auth = nonce + this.uid + this.apiKey + method + url;
                if (body) auth += body;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256', 'base64');
                var credentials = [this.uid, this.apiKey, nonce, signature].join(':');
                headers['Authorization'] = 'HMAC ' + credentials;
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var yobit = {

        'id': 'yobit',
        'name': 'YoBit',
        'countries': 'RU',
        'rateLimit': 2000, // responses are cached every 2 seconds
        'version': '3',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',
            'api': 'https://yobit.net',
            'www': 'https://www.yobit.net',
            'doc': 'https://www.yobit.net/en/api/'
        },
        'api': {
            'api': {
                'get': ['depth/{pairs}', 'info', 'ticker/{pairs}', 'trades/{pairs}']
            },
            'tapi': {
                'post': ['ActiveOrders', 'CancelOrder', 'GetDepositAddress', 'getInfo', 'OrderInfo', 'Trade', 'TradeHistory', 'WithdrawCoinsToAddress']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                keys,
                result,
                p,
                id,
                product,
                symbol,
                _symbol$split11,
                _symbol$split12,
                base,
                quote,
                _this420 = this;

            return Promise.resolve().then(function () {
                return _this420.apiGetInfo();
            }).then(function (_resp) {
                products = _resp;
                keys = Object.keys(products['pairs']);
                result = [];

                for (p = 0; p < keys.length; p++) {
                    id = keys[p];
                    product = products['pairs'][id];
                    symbol = id.toUpperCase().replace('_', '/');
                    _symbol$split11 = symbol.split('/');
                    _symbol$split12 = _slicedToArray(_symbol$split11, 2);
                    base = _symbol$split12[0];
                    quote = _symbol$split12[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this421 = this;

            return Promise.resolve().then(function () {
                return _this421.loadProducts();
            }).then(function () {
                return _this421.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this421.currencies.length; c++) {
                    currency = _this421.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                response,
                orderbook,
                timestamp,
                bids,
                asks,
                result,
                _this422 = this;

            return Promise.resolve().then(function () {
                return _this422.loadProducts();
            }).then(function () {
                p = _this422.product(product);
                return _this422.apiGetDepthPairs({
                    'pairs': p['id']
                });
            }).then(function (_resp) {
                response = _resp;
                orderbook = response[p['id']];
                timestamp = _this422.milliseconds();
                bids = 'bids' in orderbook ? orderbook['bids'] : [];
                asks = 'asks' in orderbook ? orderbook['asks'] : [];
                result = {
                    'bids': bids,
                    'asks': asks,
                    'timestamp': timestamp,
                    'datetime': _this422.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var p,
                tickers,
                ticker,
                timestamp,
                _this423 = this;

            return Promise.resolve().then(function () {
                return _this423.loadProducts();
            }).then(function () {
                p = _this423.product(product);
                return _this423.apiGetTickerPairs({
                    'pairs': p['id']
                });
            }).then(function (_resp) {
                tickers = _resp;
                ticker = tickers[p['id']];
                timestamp = ticker['updated'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this423.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': parseFloat(ticker['avg']),
                    'baseVolume': parseFloat(ticker['vol_cur']),
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this424 = this;

            return Promise.resolve().then(function () {
                return _this424.loadProducts();
            }).then(function () {
                return _this424.apiGetTradesPairs({
                    'pairs': _this424.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this425 = this,
                _arguments413 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments413.length > 4 && _arguments413[4] !== undefined ? _arguments413[4] : undefined;
                params = _arguments413.length > 5 && _arguments413[5] !== undefined ? _arguments413[5] : {};
                return _this425.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this425.id + ' allows limit orders only');
                }return _this425.tapiPostTrade(_this425.extend({
                    'pair': _this425.productId(product),
                    'type': side,
                    'amount': amount,
                    'rate': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this426 = this,
                _arguments414 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments414.length > 1 && _arguments414[1] !== undefined ? _arguments414[1] : {};
                return _this426.loadProducts();
            }).then(function () {
                return _this426.tapiPostCancelOrder(_this426.extend({
                    'order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + type;
            if (type == 'api') {
                url += '/' + this.version + '/' + this.implodeParams(path, params);
                var query = this.omit(params, this.extractParams(path));
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce();
                var _query2 = this.extend({ 'method': path, 'nonce': nonce }, params);
                body = this.urlencode(_query2);
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'key': this.apiKey,
                    'sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var yunbi = {

        'id': 'yunbi',
        'name': 'YUNBI',
        'countries': 'CN',
        'rateLimit': 1000,
        'version': 'v2',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',
            'api': 'https://yunbi.com',
            'www': 'https://yunbi.com',
            'doc': ['https://yunbi.com/documents/api/guide', 'https://yunbi.com/swagger/']
        },
        'api': {
            'public': {
                'get': ['tickers', 'tickers/{market}', 'markets', 'order_book', 'k', 'depth', 'trades', 'k_with_pending_trades', 'timestamp', 'addresses/{address}', 'partners/orders/{id}/trades']
            },
            'private': {
                'get': ['deposits', 'members/me', 'deposit', 'deposit_address', 'order', 'orders', 'trades/my'],
                'post': ['order/delete', 'orders', 'orders/multi', 'orders/clear']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                symbol,
                _symbol$split13,
                _symbol$split14,
                base,
                quote,
                _this427 = this;

            return Promise.resolve().then(function () {
                return _this427.publicGetMarkets();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['id'];
                    symbol = product['name'];
                    _symbol$split13 = symbol.split('/');
                    _symbol$split14 = _slicedToArray(_symbol$split13, 2);
                    base = _symbol$split14[0];
                    quote = _symbol$split14[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                b,
                balance,
                currency,
                uppercase,
                account,
                _this428 = this;

            return Promise.resolve().then(function () {
                return _this428.loadProducts();
            }).then(function () {
                return _this428.privateGetMembersMe();
            }).then(function (_resp) {
                response = _resp;
                balances = response['accounts'];
                result = { 'info': balances };

                for (b = 0; b < balances.length; b++) {
                    balance = balances[b];
                    currency = balance['currency'];
                    uppercase = currency.toUpperCase();
                    account = {
                        'free': parseFloat(balance['balance']),
                        'used': parseFloat(balance['locked']),
                        'total': undefined
                    };

                    account['total'] = _this428.sum(account['free'], account['used']);
                    result[uppercase] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var p,
                orderbook,
                timestamp,
                result,
                sides,
                s,
                side,
                orders,
                i,
                order,
                price,
                amount,
                _this429 = this;

            return Promise.resolve().then(function () {
                return _this429.loadProducts();
            }).then(function () {
                p = _this429.product(product);
                return _this429.publicGetDepth({
                    'market': p['id']
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = orderbook['timestamp'] * 1000;
                result = {
                    'bids': [],
                    'asks': [],
                    'timestamp': timestamp,
                    'datetime': _this429.iso8601(timestamp)
                };
                sides = ['bids', 'asks'];

                for (s = 0; s < sides.length; s++) {
                    side = sides[s];
                    orders = orderbook[side];

                    for (i = 0; i < orders.length; i++) {
                        order = orders[i];
                        price = parseFloat(order[0]);
                        amount = parseFloat(order[1]);

                        result[side].push([price, amount]);
                    }
                }
                result['bids'] = _this429.sortBy(result['bids'], 0, true);
                result['asks'] = _this429.sortBy(result['asks'], 0);
                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var response,
                ticker,
                timestamp,
                _this430 = this;

            return Promise.resolve().then(function () {
                return _this430.loadProducts();
            }).then(function () {
                return _this430.publicGetTickersMarket({
                    'market': _this430.productId(product)
                });
            }).then(function (_resp) {
                response = _resp;
                ticker = response['ticker'];
                timestamp = response['at'] * 1000;

                return {
                    'timestamp': timestamp,
                    'datetime': _this430.iso8601(timestamp),
                    'high': parseFloat(ticker['high']),
                    'low': parseFloat(ticker['low']),
                    'bid': parseFloat(ticker['buy']),
                    'ask': parseFloat(ticker['sell']),
                    'vwap': undefined,
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': parseFloat(ticker['last']),
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': parseFloat(ticker['vol']),
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this431 = this;

            return Promise.resolve().then(function () {
                return _this431.loadProducts();
            }).then(function () {
                return _this431.publicGetTrades({
                    'pair': _this431.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                order,
                _this432 = this,
                _arguments420 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments420.length > 4 && _arguments420[4] !== undefined ? _arguments420[4] : undefined;
                params = _arguments420.length > 5 && _arguments420[5] !== undefined ? _arguments420[5] : {};
                return _this432.loadProducts();
            }).then(function () {
                order = {
                    'market': _this432.productId(product),
                    'side': side,
                    'volume': amount.toString(),
                    'ord_type': type
                };

                if (type == 'limit') {
                    order['price'] = price.toString();
                }
                return _this432.privatePostOrders(_this432.extend(order, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var _this433 = this;

            return Promise.resolve().then(function () {
                return _this433.loadProducts();
            }).then(function () {
                return _this433.privatePostOrderDelete({ 'id': id });
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'public';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var request = '/api/' + this.version + '/' + this.implodeParams(path, params) + '.json';
            var query = this.omit(params, this.extractParams(path));
            var url = this.urls['api'] + request;
            if (type == 'public') {
                if (Object.keys(query).length) url += '?' + this.urlencode(query);
            } else {
                var nonce = this.nonce().toString();
                var _query3 = this.urlencode(this.keysort(this.extend({
                    'access_key': this.apiKey,
                    'tonce': nonce
                }, params)));
                var auth = method + '|' + request + '|' + _query3;
                var signature = this.hmac(this.encode(auth), this.encode(this.secret));
                var suffix = _query3 + '&signature=' + signature;
                if (method == 'GET') {
                    url += '?' + suffix;
                } else {
                    body = suffix;
                    headers = {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Content-Length': body.length
                    };
                }
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //-----------------------------------------------------------------------------

    var zaif = {

        'id': 'zaif',
        'name': 'Zaif',
        'countries': 'JP',
        'rateLimit': 2000,
        'version': '1',
        'urls': {
            'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',
            'api': 'https://api.zaif.jp',
            'www': 'https://zaif.jp',
            'doc': ['http://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif']
        },
        'api': {
            'api': {
                'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']
            },
            'tapi': {
                'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']
            },
            'ecapi': {
                'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']
            }
        },

        fetchProducts: function fetchProducts() {
            var products,
                result,
                p,
                product,
                id,
                symbol,
                _symbol$split15,
                _symbol$split16,
                base,
                quote,
                _this434 = this;

            return Promise.resolve().then(function () {
                return _this434.apiGetCurrencyPairsAll();
            }).then(function (_resp) {
                products = _resp;
                result = [];

                for (p = 0; p < products.length; p++) {
                    product = products[p];
                    id = product['currency_pair'];
                    symbol = product['name'];
                    _symbol$split15 = symbol.split('/');
                    _symbol$split16 = _slicedToArray(_symbol$split15, 2);
                    base = _symbol$split16[0];
                    quote = _symbol$split16[1];

                    result.push({
                        'id': id,
                        'symbol': symbol,
                        'base': base,
                        'quote': quote,
                        'info': product
                    });
                }
                return result;
            });
        },
        fetchBalance: function fetchBalance() {
            var response,
                balances,
                result,
                c,
                currency,
                lowercase,
                account,
                _this435 = this;

            return Promise.resolve().then(function () {
                return _this435.loadProducts();
            }).then(function () {
                return _this435.tapiPostGetInfo();
            }).then(function (_resp) {
                response = _resp;
                balances = response['return'];
                result = { 'info': balances };

                for (c = 0; c < _this435.currencies.length; c++) {
                    currency = _this435.currencies[c];
                    lowercase = currency.toLowerCase();
                    account = {
                        'free': undefined,
                        'used': undefined,
                        'total': undefined
                    };

                    if ('funds' in balances) {
                        if (lowercase in balances['funds']) {
                            account['free'] = balances['funds'][lowercase];
                        }
                    }if ('funds_incl_orders' in balances) {
                        if (lowercase in balances['funds_incl_orders']) {
                            account['total'] = balances['funds_incl_orders'][lowercase];
                        }
                    }if (account['total'] && account['free']) {
                        account['used'] = account['total'] - account['free'];
                    }result[currency] = account;
                }
                return result;
            });
        },
        fetchOrderBook: function fetchOrderBook(product) {
            var orderbook,
                timestamp,
                result,
                _this436 = this;

            return Promise.resolve().then(function () {
                return _this436.loadProducts();
            }).then(function () {
                return _this436.apiGetDepthPair({
                    'pair': _this436.productId(product)
                });
            }).then(function (_resp) {
                orderbook = _resp;
                timestamp = _this436.milliseconds();
                result = {
                    'bids': orderbook['bids'],
                    'asks': orderbook['asks'],
                    'timestamp': timestamp,
                    'datetime': _this436.iso8601(timestamp)
                };

                return result;
            });
        },
        fetchTicker: function fetchTicker(product) {
            var ticker,
                timestamp,
                _this437 = this;

            return Promise.resolve().then(function () {
                return _this437.loadProducts();
            }).then(function () {
                return _this437.apiGetTickerPair({
                    'pair': _this437.productId(product)
                });
            }).then(function (_resp) {
                ticker = _resp;
                timestamp = _this437.milliseconds();

                return {
                    'timestamp': timestamp,
                    'datetime': _this437.iso8601(timestamp),
                    'high': ticker['high'],
                    'low': ticker['low'],
                    'bid': ticker['bid'],
                    'ask': ticker['ask'],
                    'vwap': ticker['vwap'],
                    'open': undefined,
                    'close': undefined,
                    'first': undefined,
                    'last': ticker['last'],
                    'change': undefined,
                    'percentage': undefined,
                    'average': undefined,
                    'baseVolume': undefined,
                    'quoteVolume': ticker['volume'],
                    'info': ticker
                };
            });
        },
        fetchTrades: function fetchTrades(product) {
            var _this438 = this;

            return Promise.resolve().then(function () {
                return _this438.loadProducts();
            }).then(function () {
                return _this438.apiGetTradesPair({
                    'pair': _this438.productId(product)
                });
            });
        },
        createOrder: function createOrder(product, type, side, amount) {
            var price,
                params,
                _this439 = this,
                _arguments427 = arguments;

            return Promise.resolve().then(function () {
                price = _arguments427.length > 4 && _arguments427[4] !== undefined ? _arguments427[4] : undefined;
                params = _arguments427.length > 5 && _arguments427[5] !== undefined ? _arguments427[5] : {};
                return _this439.loadProducts();
            }).then(function () {
                if (type == 'market') {
                    throw new EndpointError(_this439.id + ' allows limit orders only');
                }return _this439.tapiPostTrade(_this439.extend({
                    'currency_pair': _this439.productId(product),
                    'action': side == 'buy' ? 'bid' : 'ask',
                    'amount': amount,
                    'price': price
                }, params));
            });
        },
        cancelOrder: function cancelOrder(id) {
            var params,
                _this440 = this,
                _arguments428 = arguments;

            return Promise.resolve().then(function () {
                params = _arguments428.length > 1 && _arguments428[1] !== undefined ? _arguments428[1] : {};
                return _this440.loadProducts();
            }).then(function () {
                return _this440.tapiPostCancelOrder(_this440.extend({
                    'order_id': id
                }, params));
            });
        },
        request: function request(path) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'api';
            var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'GET';
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
            var body = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

            var url = this.urls['api'] + '/' + type;
            if (type == 'api') {
                url += '/' + this.version + '/' + this.implodeParams(path, params);
            } else {
                var nonce = this.nonce();
                body = this.urlencode(this.extend({
                    'method': path,
                    'nonce': nonce
                }, params));
                headers = {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': body.length,
                    'Key': this.apiKey,
                    'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')
                };
            }
            return this.fetch(url, method, headers, body);
        }
    };

    //=============================================================================

    var markets = {

        '_1broker': _1broker,
        '_1btcxe': _1btcxe,
        'anxpro': anxpro,
        'bit2c': bit2c,
        'bitbay': bitbay,
        'bitbays': bitbays,
        'bitcoincoid': bitcoincoid,
        'bitfinex': bitfinex,
        'bitflyer': bitflyer,
        'bitlish': bitlish,
        'bitmarket': bitmarket,
        'bitmex': bitmex,
        'bitso': bitso,
        'bitstamp': bitstamp,
        'bittrex': bittrex,
        'bl3p': bl3p,
        'btcchina': btcchina,
        'btce': btce,
        'btcexchange': btcexchange,
        'btctradeua': btctradeua,
        'btcturk': btcturk,
        'btcx': btcx,
        'bter': bter,
        'bxinth': bxinth,
        'ccex': ccex,
        'cex': cex,
        'chbtc': chbtc,
        'chilebit': chilebit,
        'coincheck': coincheck,
        'coingi': coingi,
        'coinmarketcap': coinmarketcap,
        'coinmate': coinmate,
        'coinsecure': coinsecure,
        'coinspot': coinspot,
        'dsx': dsx,
        'exmo': exmo,
        'flowbtc': flowbtc,
        'foxbit': foxbit,
        'fybse': fybse,
        'fybsg': fybsg,
        'gatecoin': gatecoin,
        'gdax': gdax,
        'gemini': gemini,
        'hitbtc': hitbtc,
        'huobi': huobi,
        'itbit': itbit,
        'jubi': jubi,
        'kraken': kraken,
        'lakebtc': lakebtc,
        'livecoin': livecoin,
        'liqui': liqui,
        'luno': luno,
        'mercado': mercado,
        'okcoincny': okcoincny,
        'okcoinusd': okcoinusd,
        'paymium': paymium,
        'poloniex': poloniex,
        'quadrigacx': quadrigacx,
        'quoine': quoine,
        'southxchange': southxchange,
        'surbitcoin': surbitcoin,
        'therock': therock,
        'urdubit': urdubit,
        'vaultoro': vaultoro,
        'vbtc': vbtc,
        'virwox': virwox,
        'xbtce': xbtce,
        'yobit': yobit,
        'yunbi': yunbi,
        'zaif': zaif
    };

    var defineAllMarkets = function defineAllMarkets(markets) {
        var result = {};

        var _loop3 = function _loop3(id) {
            result[id] = function (params) {
                return new Market(extend(markets[id], params));
            };
        };

        for (var id in markets) {
            _loop3(id);
        }result.markets = Object.keys(markets);
        return result;
    };

    if (isNode || isReactNative) {

        Object.assign(module.exports = defineAllMarkets(markets), {

            version: version,

            // exceptions

            CCXTError: CCXTError,
            DDoSProtectionError: DDoSProtectionError,
            TimeoutError: TimeoutError,
            AuthenticationError: AuthenticationError,
            MarketError: MarketError,
            MarketNotAvailableError: MarketNotAvailableError,
            EndpointError: EndpointError,

            // common utility functions

            sleep: sleep,
            timeout: timeout,
            capitalize: capitalize,
            keysort: keysort,
            extend: extend,
            omit: omit,
            indexBy: indexBy,
            sortBy: sortBy,
            flatten: flatten,
            unique: unique,
            pluck: pluck,
            urlencode: urlencode,
            sum: sum,

            // underscore aliases

            index_by: indexBy,
            sort_by: sortBy,

            // crypto functions

            binaryConcat: binaryConcat,
            stringToBinary: stringToBinary,
            stringToBase64: stringToBase64,
            utf16ToBase64: utf16ToBase64,
            base64ToBinary: base64ToBinary,
            base64ToString: base64ToString,
            urlencodeBase64: urlencodeBase64,
            hash: hash,
            hmac: hmac,
            jwt: jwt

        });
    } else window.ccxt = defineAllMarkets(markets);
})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,